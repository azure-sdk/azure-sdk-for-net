// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ChatProtocol.Samples
{
    public partial class Samples_Chat
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_CreatesAChatCompletionForTheProvidedPromptUsingStreaming()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "Tell me a joke",
role = "user",
}
            },
                stream = false,
            });
            Response response = client.Create("chat", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_CreatesAChatCompletionForTheProvidedPromptUsingStreaming_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "Tell me a joke",
role = "user",
}
            },
                stream = false,
            });
            Response response = await client.CreateAsync("chat", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_CreatesAChatCompletionForTheProvidedPromptUsingStreaming_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = client.Create("chat", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "Tell me a joke")
            }, false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_CreatesAChatCompletionForTheProvidedPromptUsingStreaming_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = await client.CreateAsync("chat", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "Tell me a joke")
            }, false);
        }
    }
}
