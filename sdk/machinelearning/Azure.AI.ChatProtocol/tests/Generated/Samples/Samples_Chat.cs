// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ChatProtocol.Samples
{
    public partial class Samples_Chat
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "<content>",
role = "user",
}
            },
                stream = false,
            });
            Response response = client.Create("<operationRoute>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "<content>",
role = "user",
}
            },
                stream = false,
            });
            Response response = await client.CreateAsync("<operationRoute>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = client.Create("<operationRoute>", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "<content>")
            }, false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = await client.CreateAsync("<operationRoute>", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "<content>")
            }, false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "<content>",
role = "user",
sessionState = new object(),
}
            },
                stream = false,
                sessionState = new object(),
                context = new
                {
                    key = new object(),
                },
            });
            Response response = client.Create("<operationRoute>", content, context: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("sessionState").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("sessionState").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
kind = "text",
content = "<content>",
role = "user",
sessionState = new object(),
}
            },
                stream = false,
                sessionState = new object(),
                context = new
                {
                    key = new object(),
                },
            });
            Response response = await client.CreateAsync("<operationRoute>", content, context: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("message").GetProperty("sessionState").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("sessionState").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("context").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("choices")[0].GetProperty("finishReason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Chat_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = client.Create("<operationRoute>", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "<content>")
{
SessionState = BinaryData.FromObjectAsJson(new object()),
}
            }, false, sessionState: BinaryData.FromObjectAsJson(new object()), context: new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Chat_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Chat client = new ChatProtocolClient(endpoint, credential).GetChatClient();

            Response<ChatCompletion> response = await client.CreateAsync("<operationRoute>", new ChatMessage[]
            {
new TextChatMessage(ChatRole.User, "<content>")
{
SessionState = BinaryData.FromObjectAsJson(new object()),
}
            }, false, sessionState: BinaryData.FromObjectAsJson(new object()), context: new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            });
        }
    }
}
