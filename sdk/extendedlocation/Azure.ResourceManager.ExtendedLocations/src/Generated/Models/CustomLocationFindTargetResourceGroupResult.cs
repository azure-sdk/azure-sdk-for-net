// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ExtendedLocations.Models
{
    /// <summary> The Find Target Resource Group operation response. </summary>
    public partial class CustomLocationFindTargetResourceGroupResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CustomLocationFindTargetResourceGroupResult"/>. </summary>
        internal CustomLocationFindTargetResourceGroupResult()
        {
        }

        /// <summary> Initializes a new instance of <see cref="CustomLocationFindTargetResourceGroupResult"/>. </summary>
        /// <param name="matchedResourceSyncRule"> The matching resource sync rule is the particular resource sync rule that matched the match expressions and labels and had lowest priority. This is the rule responsible for mapping the target resource to the target resource group. </param>
        /// <param name="targetResourceGroup"> The target resource group of matching resource sync rule. The labels from the request will be used to find out matching resource sync rule against the selector property of the resource sync rule. The one with highest priority will be returned if there are multiple matching rules. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CustomLocationFindTargetResourceGroupResult(string matchedResourceSyncRule, string targetResourceGroup, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MatchedResourceSyncRule = matchedResourceSyncRule;
            TargetResourceGroup = targetResourceGroup;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The matching resource sync rule is the particular resource sync rule that matched the match expressions and labels and had lowest priority. This is the rule responsible for mapping the target resource to the target resource group. </summary>
        public string MatchedResourceSyncRule { get; }
        /// <summary> The target resource group of matching resource sync rule. The labels from the request will be used to find out matching resource sync rule against the selector property of the resource sync rule. The one with highest priority will be returned if there are multiple matching rules. </summary>
        public string TargetResourceGroup { get; }
    }
}
