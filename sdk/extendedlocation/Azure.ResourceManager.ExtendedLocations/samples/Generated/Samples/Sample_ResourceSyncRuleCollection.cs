// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ExtendedLocations.Models;

namespace Azure.ResourceManager.ExtendedLocations.Samples
{
    public partial class Sample_ResourceSyncRuleCollection
    {
        // List Resource Sync Rules by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListResourceSyncRulesBySubscription()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesListByCustomLocationID.json
            // this example is just showing the usage of "ResourceSyncRules_ListByCustomLocationId" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomLocationResource created on azure
            // for more information of creating CustomLocationResource, please refer to the document of CustomLocationResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            ResourceIdentifier customLocationResourceId = CustomLocationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            CustomLocationResource customLocation = client.GetCustomLocationResource(customLocationResourceId);

            // get the collection of this ResourceSyncRuleResource
            ResourceSyncRuleCollection collection = customLocation.GetResourceSyncRules();

            // invoke the operation and iterate over the result
            await foreach (ResourceSyncRuleResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ResourceSyncRuleData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get Custom Location
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCustomLocation()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesGet.json
            // this example is just showing the usage of "ResourceSyncRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomLocationResource created on azure
            // for more information of creating CustomLocationResource, please refer to the document of CustomLocationResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            ResourceIdentifier customLocationResourceId = CustomLocationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            CustomLocationResource customLocation = client.GetCustomLocationResource(customLocationResourceId);

            // get the collection of this ResourceSyncRuleResource
            ResourceSyncRuleCollection collection = customLocation.GetResourceSyncRules();

            // invoke the operation
            string childResourceName = "resourceSyncRule01";
            ResourceSyncRuleResource result = await collection.GetAsync(childResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceSyncRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Custom Location
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetCustomLocation()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesGet.json
            // this example is just showing the usage of "ResourceSyncRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomLocationResource created on azure
            // for more information of creating CustomLocationResource, please refer to the document of CustomLocationResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            ResourceIdentifier customLocationResourceId = CustomLocationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            CustomLocationResource customLocation = client.GetCustomLocationResource(customLocationResourceId);

            // get the collection of this ResourceSyncRuleResource
            ResourceSyncRuleCollection collection = customLocation.GetResourceSyncRules();

            // invoke the operation
            string childResourceName = "resourceSyncRule01";
            bool result = await collection.ExistsAsync(childResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get Custom Location
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetCustomLocation()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesGet.json
            // this example is just showing the usage of "ResourceSyncRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomLocationResource created on azure
            // for more information of creating CustomLocationResource, please refer to the document of CustomLocationResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            ResourceIdentifier customLocationResourceId = CustomLocationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            CustomLocationResource customLocation = client.GetCustomLocationResource(customLocationResourceId);

            // get the collection of this ResourceSyncRuleResource
            ResourceSyncRuleCollection collection = customLocation.GetResourceSyncRules();

            // invoke the operation
            string childResourceName = "resourceSyncRule01";
            NullableResponse<ResourceSyncRuleResource> response = await collection.GetIfExistsAsync(childResourceName);
            ResourceSyncRuleResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ResourceSyncRuleData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Create/Update Resource Sync Rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateUpdateResourceSyncRule()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesCreate_Update.json
            // this example is just showing the usage of "ResourceSyncRules_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomLocationResource created on azure
            // for more information of creating CustomLocationResource, please refer to the document of CustomLocationResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            ResourceIdentifier customLocationResourceId = CustomLocationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            CustomLocationResource customLocation = client.GetCustomLocationResource(customLocationResourceId);

            // get the collection of this ResourceSyncRuleResource
            ResourceSyncRuleCollection collection = customLocation.GetResourceSyncRules();

            // invoke the operation
            string childResourceName = "resourceSyncRule01";
            ResourceSyncRuleData data = new ResourceSyncRuleData(new AzureLocation("West US"))
            {
                Priority = 999,
                Selector = new ResourceSyncRulePropertiesSelector()
                {
                    MatchExpressions =
{
new MatchExpressionsProperties()
{
Key = "key4",
Operator = "In",
Values =
{
"value4"
},
}
},
                    MatchLabels =
{
["key1"] = "value1",
},
                },
                TargetResourceGroup = "/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testresourcegroup",
            };
            ArmOperation<ResourceSyncRuleResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, childResourceName, data);
            ResourceSyncRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceSyncRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
