// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ExtendedLocations.Models;

namespace Azure.ResourceManager.ExtendedLocations.Samples
{
    public partial class Sample_ResourceSyncRuleResource
    {
        // Get Custom Location
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCustomLocation()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesGet.json
            // this example is just showing the usage of "ResourceSyncRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceSyncRuleResource created on azure
            // for more information of creating ResourceSyncRuleResource, please refer to the document of ResourceSyncRuleResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            string childResourceName = "resourceSyncRule01";
            ResourceIdentifier resourceSyncRuleResourceId = ResourceSyncRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, childResourceName);
            ResourceSyncRuleResource resourceSyncRule = client.GetResourceSyncRuleResource(resourceSyncRuleResourceId);

            // invoke the operation
            ResourceSyncRuleResource result = await resourceSyncRule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceSyncRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Resource Sync Rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteResourceSyncRule()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesDelete.json
            // this example is just showing the usage of "ResourceSyncRules_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceSyncRuleResource created on azure
            // for more information of creating ResourceSyncRuleResource, please refer to the document of ResourceSyncRuleResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            string childResourceName = "resourceSyncRule01";
            ResourceIdentifier resourceSyncRuleResourceId = ResourceSyncRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, childResourceName);
            ResourceSyncRuleResource resourceSyncRule = client.GetResourceSyncRuleResource(resourceSyncRuleResourceId);

            // invoke the operation
            await resourceSyncRule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Update Resource Sync Rule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateResourceSyncRule()
        {
            // Generated from example definition: specification/extendedlocation/resource-manager/Microsoft.ExtendedLocation/preview/2024-09-15-preview/examples/ResourceSyncRulesPatch.json
            // this example is just showing the usage of "ResourceSyncRules_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceSyncRuleResource created on azure
            // for more information of creating ResourceSyncRuleResource, please refer to the document of ResourceSyncRuleResource
            string subscriptionId = "11111111-2222-3333-4444-555555555555";
            string resourceGroupName = "testresourcegroup";
            string resourceName = "customLocation01";
            string childResourceName = "resourceSyncRule01";
            ResourceIdentifier resourceSyncRuleResourceId = ResourceSyncRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, childResourceName);
            ResourceSyncRuleResource resourceSyncRule = client.GetResourceSyncRuleResource(resourceSyncRuleResourceId);

            // invoke the operation
            ResourceSyncRulePatch patch = new ResourceSyncRulePatch()
            {
                Tags =
{
["tier"] = "testing",
},
                TargetResourceGroup = "/subscriptions/11111111-2222-3333-4444-555555555555/resourceGroups/testrg/",
            };
            ArmOperation<ResourceSyncRuleResource> lro = await resourceSyncRule.UpdateAsync(WaitUntil.Completed, patch);
            ResourceSyncRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceSyncRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
