// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.SapVirtualInstances
{
    /// <summary>
    /// A class representing a collection of <see cref="SAPApplicationServerInstanceResource"/> and their operations.
    /// Each <see cref="SAPApplicationServerInstanceResource"/> in the collection will belong to the same instance of <see cref="SAPVirtualInstanceResource"/>.
    /// To get a <see cref="SAPApplicationServerInstanceCollection"/> instance call the GetSAPApplicationServerInstances method from an instance of <see cref="SAPVirtualInstanceResource"/>.
    /// </summary>
    public partial class SAPApplicationServerInstanceCollection : ArmCollection, IEnumerable<SAPApplicationServerInstanceResource>, IAsyncEnumerable<SAPApplicationServerInstanceResource>
    {
        private readonly ClientDiagnostics _sapApplicationServerInstanceClientDiagnostics;
        private readonly SAPApplicationServerInstancesRestOperations _sapApplicationServerInstanceRestClient;

        /// <summary> Initializes a new instance of the <see cref="SAPApplicationServerInstanceCollection"/> class for mocking. </summary>
        protected SAPApplicationServerInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SAPApplicationServerInstanceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SAPApplicationServerInstanceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _sapApplicationServerInstanceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SapVirtualInstances", SAPApplicationServerInstanceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SAPApplicationServerInstanceResource.ResourceType, out string sapApplicationServerInstanceApiVersion);
            _sapApplicationServerInstanceRestClient = new SAPApplicationServerInstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sapApplicationServerInstanceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SAPVirtualInstanceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SAPVirtualInstanceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Puts the SAP Application Server Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service only. PUT by end user will return a Bad Request error.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="data"> The SAP Application Server Instance resource request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SAPApplicationServerInstanceResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string applicationInstanceName, SAPApplicationServerInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _sapApplicationServerInstanceRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new SapVirtualInstancesArmOperation<SAPApplicationServerInstanceResource>(new SAPApplicationServerInstanceOperationSource(Client), _sapApplicationServerInstanceClientDiagnostics, Pipeline, _sapApplicationServerInstanceRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Puts the SAP Application Server Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service only. PUT by end user will return a Bad Request error.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="data"> The SAP Application Server Instance resource request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SAPApplicationServerInstanceResource> CreateOrUpdate(WaitUntil waitUntil, string applicationInstanceName, SAPApplicationServerInstanceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _sapApplicationServerInstanceRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, data, cancellationToken);
                var operation = new SapVirtualInstancesArmOperation<SAPApplicationServerInstanceResource>(new SAPApplicationServerInstanceOperationSource(Client), _sapApplicationServerInstanceClientDiagnostics, Pipeline, _sapApplicationServerInstanceRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the SAP Application Server Instance corresponding to the Virtual Instance for SAP solutions resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual async Task<Response<SAPApplicationServerInstanceResource>> GetAsync(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _sapApplicationServerInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SAPApplicationServerInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the SAP Application Server Instance corresponding to the Virtual Instance for SAP solutions resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual Response<SAPApplicationServerInstanceResource> Get(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _sapApplicationServerInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SAPApplicationServerInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the SAP Application Server Instance resources for a given Virtual Instance for SAP solutions resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SAPApplicationServerInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SAPApplicationServerInstanceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sapApplicationServerInstanceRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sapApplicationServerInstanceRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SAPApplicationServerInstanceResource(Client, SAPApplicationServerInstanceData.DeserializeSAPApplicationServerInstanceData(e)), _sapApplicationServerInstanceClientDiagnostics, Pipeline, "SAPApplicationServerInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the SAP Application Server Instance resources for a given Virtual Instance for SAP solutions resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SAPApplicationServerInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SAPApplicationServerInstanceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sapApplicationServerInstanceRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sapApplicationServerInstanceRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SAPApplicationServerInstanceResource(Client, SAPApplicationServerInstanceData.DeserializeSAPApplicationServerInstanceData(e)), _sapApplicationServerInstanceClientDiagnostics, Pipeline, "SAPApplicationServerInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _sapApplicationServerInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual Response<bool> Exists(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = _sapApplicationServerInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual async Task<NullableResponse<SAPApplicationServerInstanceResource>> GetIfExistsAsync(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _sapApplicationServerInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<SAPApplicationServerInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new SAPApplicationServerInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/applicationInstances/{applicationInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SAPApplicationServerInstance_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SAPApplicationServerInstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationInstanceName"> The name of SAP Application Server instance resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationInstanceName"/> is null. </exception>
        public virtual NullableResponse<SAPApplicationServerInstanceResource> GetIfExists(string applicationInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationInstanceName, nameof(applicationInstanceName));

            using var scope = _sapApplicationServerInstanceClientDiagnostics.CreateScope("SAPApplicationServerInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _sapApplicationServerInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, applicationInstanceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<SAPApplicationServerInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new SAPApplicationServerInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SAPApplicationServerInstanceResource> IEnumerable<SAPApplicationServerInstanceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SAPApplicationServerInstanceResource> IAsyncEnumerable<SAPApplicationServerInstanceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
