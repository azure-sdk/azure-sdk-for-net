// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.TrustedSigning.Models;

namespace Azure.ResourceManager.TrustedSigning
{
    /// <summary>
    /// A class representing the TrustedSigningCertificateProfile data model.
    /// Certificate profile resource.
    /// </summary>
    public partial class TrustedSigningCertificateProfileData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificateProfileData"/>. </summary>
        public TrustedSigningCertificateProfileData()
        {
            Certificates = new ChangeTrackingList<TrustedSigningCertificate>();
        }

        /// <summary> Initializes a new instance of <see cref="TrustedSigningCertificateProfileData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="profileType"> Profile type of the certificate. </param>
        /// <param name="includeStreetAddress"> Whether to include STREET in the certificate subject name. </param>
        /// <param name="includeCity"> Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includeState"> Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includeCountry"> Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types. </param>
        /// <param name="includePostalCode"> Whether to include PC in the certificate subject name. </param>
        /// <param name="identityValidationId"> Identity validation id used for the certificate subject name. </param>
        /// <param name="provisioningState"> Status of the current operation on certificate profile. </param>
        /// <param name="status"> Status of the certificate profile. </param>
        /// <param name="certificates"> List of renewed certificates. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TrustedSigningCertificateProfileData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, CertificateProfileType? profileType, bool? includeStreetAddress, bool? includeCity, bool? includeState, bool? includeCountry, bool? includePostalCode, string identityValidationId, TrustedSigningProvisioningState? provisioningState, CertificateProfileStatus? status, IReadOnlyList<TrustedSigningCertificate> certificates, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ProfileType = profileType;
            IncludeStreetAddress = includeStreetAddress;
            IncludeCity = includeCity;
            IncludeState = includeState;
            IncludeCountry = includeCountry;
            IncludePostalCode = includePostalCode;
            IdentityValidationId = identityValidationId;
            ProvisioningState = provisioningState;
            Status = status;
            Certificates = certificates;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Profile type of the certificate. </summary>
        public CertificateProfileType? ProfileType { get; set; }
        /// <summary> Whether to include STREET in the certificate subject name. </summary>
        public bool? IncludeStreetAddress { get; set; }
        /// <summary> Whether to include L in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeCity { get; set; }
        /// <summary> Whether to include S in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeState { get; set; }
        /// <summary> Whether to include C in the certificate subject name. Applicable only for private trust, private trust ci profile types. </summary>
        public bool? IncludeCountry { get; set; }
        /// <summary> Whether to include PC in the certificate subject name. </summary>
        public bool? IncludePostalCode { get; set; }
        /// <summary> Identity validation id used for the certificate subject name. </summary>
        public string IdentityValidationId { get; set; }
        /// <summary> Status of the current operation on certificate profile. </summary>
        public TrustedSigningProvisioningState? ProvisioningState { get; }
        /// <summary> Status of the certificate profile. </summary>
        public CertificateProfileStatus? Status { get; }
        /// <summary> List of renewed certificates. </summary>
        public IReadOnlyList<TrustedSigningCertificate> Certificates { get; }
    }
}
