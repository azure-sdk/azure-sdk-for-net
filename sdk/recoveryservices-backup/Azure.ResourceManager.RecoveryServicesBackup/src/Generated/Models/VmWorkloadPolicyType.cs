// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Type of workload for the backup management. </summary>
    public readonly partial struct VmWorkloadPolicyType : IEquatable<VmWorkloadPolicyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmWorkloadPolicyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmWorkloadPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string SnapshotV1Value = "SnapshotV1";
        private const string SnapshotV2Value = "SnapshotV2";
        private const string StreamingValue = "Streaming";

        /// <summary> Invalid. </summary>
        public static VmWorkloadPolicyType Invalid { get; } = new VmWorkloadPolicyType(InvalidValue);
        /// <summary> SnapshotV1. </summary>
        public static VmWorkloadPolicyType SnapshotV1 { get; } = new VmWorkloadPolicyType(SnapshotV1Value);
        /// <summary> SnapshotV2. </summary>
        public static VmWorkloadPolicyType SnapshotV2 { get; } = new VmWorkloadPolicyType(SnapshotV2Value);
        /// <summary> Streaming. </summary>
        public static VmWorkloadPolicyType Streaming { get; } = new VmWorkloadPolicyType(StreamingValue);
        /// <summary> Determines if two <see cref="VmWorkloadPolicyType"/> values are the same. </summary>
        public static bool operator ==(VmWorkloadPolicyType left, VmWorkloadPolicyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmWorkloadPolicyType"/> values are not the same. </summary>
        public static bool operator !=(VmWorkloadPolicyType left, VmWorkloadPolicyType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VmWorkloadPolicyType"/>. </summary>
        public static implicit operator VmWorkloadPolicyType(string value) => new VmWorkloadPolicyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmWorkloadPolicyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmWorkloadPolicyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
