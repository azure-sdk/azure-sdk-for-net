// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> Proxy resource for getting status of a long running operation. </summary>
    public partial class OperationStatusResult
    {
        /// <summary> Initializes a new instance of OperationStatusResult. </summary>
        /// <param name="id"> ID of the long running operation. </param>
        /// <param name="status"> Current status of the operation. E.g. &apos;Succeeded&apos;, or &apos;Failed&apos;. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="status"/> is null. </exception>
        internal OperationStatusResult(string id, string status)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(status, nameof(status));

            Id = id;
            Status = status;
            Operations = new ChangeTrackingList<OperationStatusResult>();
        }

        /// <summary> Initializes a new instance of OperationStatusResult. </summary>
        /// <param name="id"> ID of the long running operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> Current status of the operation. E.g. &apos;Succeeded&apos;, or &apos;Failed&apos;. </param>
        /// <param name="percentComplete"> Progress of the operation, if known. </param>
        /// <param name="resourceId"> Resource ID of the resource if known. </param>
        /// <param name="startOn"> Start time if known. </param>
        /// <param name="endOn"> End time if known. </param>
        /// <param name="operations"> Status of child operations if known. </param>
        /// <param name="errorDetail"> Error details if known. </param>
        internal OperationStatusResult(string id, string name, string status, BinaryData percentComplete, string resourceId, DateTimeOffset? startOn, DateTimeOffset? endOn, IReadOnlyList<OperationStatusResult> operations, ResponseError errorDetail)
        {
            Id = id;
            Name = name;
            Status = status;
            PercentComplete = percentComplete;
            ResourceId = resourceId;
            StartOn = startOn;
            EndOn = endOn;
            Operations = operations;
            ErrorDetail = errorDetail;
        }

        /// <summary> ID of the long running operation. </summary>
        public string Id { get; }
        /// <summary> Name of the async operation. </summary>
        public string Name { get; }
        /// <summary> Current status of the operation. E.g. &apos;Succeeded&apos;, or &apos;Failed&apos;. </summary>
        public string Status { get; }
        /// <summary>
        /// Progress of the operation, if known
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData PercentComplete { get; }
        /// <summary> Resource ID of the resource if known. </summary>
        public string ResourceId { get; }
        /// <summary> Start time if known. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> End time if known. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Status of child operations if known. </summary>
        public IReadOnlyList<OperationStatusResult> Operations { get; }
        /// <summary> Error details if known. </summary>
        public ResponseError ErrorDetail { get; }
    }
}
