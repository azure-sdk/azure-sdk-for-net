// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> Describes a Database on a RedisEnterprise cluster. </summary>
    public partial class RedisEnterpriseDatabaseCreateOrUpdateContent : ResourceData
    {
        /// <summary> Initializes a new instance of RedisEnterpriseDatabaseCreateOrUpdateContent. </summary>
        public RedisEnterpriseDatabaseCreateOrUpdateContent()
        {
        }

        /// <summary> Initializes a new instance of RedisEnterpriseDatabaseCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="clientProtocol"> Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. </param>
        /// <param name="evictionPolicy"> Redis eviction policy - default is VolatileLRU. </param>
        /// <param name="port"> Port number for the database to listen on. E.g. 10000. </param>
        /// <param name="persistence"> Persistence settings. </param>
        internal RedisEnterpriseDatabaseCreateOrUpdateContent(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ClientProtocol? clientProtocol, RedisEnterpriseEvictionPolicy? evictionPolicy, int? port, RedisPersistenceSettings persistence) : base(id, name, resourceType, systemData)
        {
            ClientProtocol = clientProtocol;
            EvictionPolicy = evictionPolicy;
            Port = port;
            Persistence = persistence;
        }

        /// <summary> Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. </summary>
        public ClientProtocol? ClientProtocol { get; set; }
        /// <summary> Redis eviction policy - default is VolatileLRU. </summary>
        public RedisEnterpriseEvictionPolicy? EvictionPolicy { get; set; }
        /// <summary> Port number for the database to listen on. E.g. 10000. </summary>
        public int? Port { get; set; }
        /// <summary> Persistence settings. </summary>
        public RedisPersistenceSettings Persistence { get; set; }
    }
}
