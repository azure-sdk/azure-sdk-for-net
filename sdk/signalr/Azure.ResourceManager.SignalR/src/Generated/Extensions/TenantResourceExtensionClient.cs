// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SignalR.Models;

namespace Azure.ResourceManager.SignalR
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _signalRClientDiagnostics;
        private SignalRRestOperations _signalRRestClient;
        private ClientDiagnostics _usagesClientDiagnostics;
        private UsagesRestOperations _usagesRestClient;
        private ClientDiagnostics _signalRCustomCertificatesClientDiagnostics;
        private SignalRCustomCertificatesRestOperations _signalRCustomCertificatesRestClient;
        private ClientDiagnostics _signalRCustomDomainsClientDiagnostics;
        private SignalRCustomDomainsRestOperations _signalRCustomDomainsRestClient;
        private ClientDiagnostics _signalRPrivateEndpointConnectionsClientDiagnostics;
        private SignalRPrivateEndpointConnectionsRestOperations _signalRPrivateEndpointConnectionsRestClient;
        private ClientDiagnostics _signalRPrivateLinkResourcesClientDiagnostics;
        private SignalRPrivateLinkResourcesRestOperations _signalRPrivateLinkResourcesRestClient;
        private ClientDiagnostics _signalRReplicasClientDiagnostics;
        private SignalRReplicasRestOperations _signalRReplicasRestClient;
        private ClientDiagnostics _signalRSharedPrivateLinkResourcesClientDiagnostics;
        private SignalRSharedPrivateLinkResourcesRestOperations _signalRSharedPrivateLinkResourcesRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SignalRClientDiagnostics => _signalRClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRRestOperations SignalRRestClient => _signalRRestClient ??= new SignalRRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics UsagesClientDiagnostics => _usagesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private UsagesRestOperations UsagesRestClient => _usagesRestClient ??= new UsagesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRCustomCertificatesClientDiagnostics => _signalRCustomCertificatesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRCustomCertificatesRestOperations SignalRCustomCertificatesRestClient => _signalRCustomCertificatesRestClient ??= new SignalRCustomCertificatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRCustomDomainsClientDiagnostics => _signalRCustomDomainsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRCustomDomainsRestOperations SignalRCustomDomainsRestClient => _signalRCustomDomainsRestClient ??= new SignalRCustomDomainsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRPrivateEndpointConnectionsClientDiagnostics => _signalRPrivateEndpointConnectionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRPrivateEndpointConnectionsRestOperations SignalRPrivateEndpointConnectionsRestClient => _signalRPrivateEndpointConnectionsRestClient ??= new SignalRPrivateEndpointConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRPrivateLinkResourcesClientDiagnostics => _signalRPrivateLinkResourcesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRPrivateLinkResourcesRestOperations SignalRPrivateLinkResourcesRestClient => _signalRPrivateLinkResourcesRestClient ??= new SignalRPrivateLinkResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRReplicasClientDiagnostics => _signalRReplicasClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRReplicasRestOperations SignalRReplicasRestClient => _signalRReplicasRestClient ??= new SignalRReplicasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SignalRSharedPrivateLinkResourcesClientDiagnostics => _signalRSharedPrivateLinkResourcesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SignalR", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SignalRSharedPrivateLinkResourcesRestOperations SignalRSharedPrivateLinkResourcesRestClient => _signalRSharedPrivateLinkResourcesRestClient ??= new SignalRSharedPrivateLinkResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Checks that the resource name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="location"> the region. </param>
        /// <param name="content"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRNameAvailabilityResult>> CheckSignalRNameAvailabilityAsync(Guid subscriptionId, AzureLocation location, SignalRNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckSignalRNameAvailability");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.CheckNameAvailabilityAsync(subscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the resource name is valid and is not already in use.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="location"> the region. </param>
        /// <param name="content"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRNameAvailabilityResult> CheckSignalRNameAvailability(Guid subscriptionId, AzureLocation location, SignalRNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckSignalRNameAvailability");
            scope.Start();
            try
            {
                var response = SignalRRestClient.CheckNameAvailability(subscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/signalR</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.SignalR" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.SignalR> GetSignalRsBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.SignalR.DeserializeSignalR, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/signalR</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.SignalR" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.SignalR> GetSignalRsBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.SignalR.DeserializeSignalR, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.SignalR" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.SignalR> GetSignalRsByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.SignalR.DeserializeSignalR, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.SignalR" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.SignalR> GetSignalRsByResourceGroup(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.SignalR.DeserializeSignalR, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the resource and its properties.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.SignalR>> GetSignalRAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the resource and its properties.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.SignalR> GetSignalR(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.Get(subscriptionId, resourceGroupName, resourceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="signalR"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Models.SignalR>> CreateOrUpdateSignalRAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, Models.SignalR signalR, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, resourceName, signalR, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<Models.SignalR>(new SignalROperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, signalR).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="signalR"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Models.SignalR> CreateOrUpdateSignalR(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, Models.SignalR signalR, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, resourceName, signalR, cancellationToken);
                var operation = new SignalRArmOperation<Models.SignalR>(new SignalROperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, signalR).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to delete a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSignalRAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to delete a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSignalR(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.Delete(subscriptionId, resourceGroupName, resourceName, cancellationToken);
                var operation = new SignalRArmOperation(SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to update an exiting resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="signalR"> Parameters for the update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Models.SignalR>> UpdateSignalRAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, Models.SignalR signalR, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.UpdateAsync(subscriptionId, resourceGroupName, resourceName, signalR, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<Models.SignalR>(new SignalROperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, resourceName, signalR).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to update an exiting resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="signalR"> Parameters for the update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Models.SignalR> UpdateSignalR(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, Models.SignalR signalR, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.Update(subscriptionId, resourceGroupName, resourceName, signalR, cancellationToken);
                var operation = new SignalRArmOperation<Models.SignalR>(new SignalROperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, resourceName, signalR).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the access keys of the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRKeys>> GetKeysSignalRAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.ListKeysAsync(subscriptionId, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the access keys of the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRKeys> GetKeysSignalR(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.ListKeys(subscriptionId, resourceGroupName, resourceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerate the access key for the resource. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/regenerateKey</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_RegenerateKey</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="content"> Parameter that describes the Regenerate Key Operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SignalRKeys>> RegenerateKeySignalRAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, SignalRRegenerateKeyContent content, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeySignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.RegenerateKeyAsync(subscriptionId, resourceGroupName, resourceName, content, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<SignalRKeys>(new SignalRKeysOperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateRegenerateKeyRequest(subscriptionId, resourceGroupName, resourceName, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerate the access key for the resource. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/regenerateKey</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_RegenerateKey</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="content"> Parameter that describes the Regenerate Key Operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SignalRKeys> RegenerateKeySignalR(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, SignalRRegenerateKeyContent content, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeySignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.RegenerateKey(subscriptionId, resourceGroupName, resourceName, content, cancellationToken);
                var operation = new SignalRArmOperation<SignalRKeys>(new SignalRKeysOperationSource(), SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateRegenerateKeyRequest(subscriptionId, resourceGroupName, resourceName, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all available skus of the replica resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}/skus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListReplicaSkus</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRSku> GetReplicaSkusSignalRsAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListReplicaSkusRequest(subscriptionId, resourceGroupName, resourceName, replicaName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, SignalRSku.DeserializeSignalRSku, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetReplicaSkusSignalRs", "value", null, cancellationToken);
        }

        /// <summary>
        /// List all available skus of the replica resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}/skus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListReplicaSkus</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRSku> GetReplicaSkusSignalRs(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListReplicaSkusRequest(subscriptionId, resourceGroupName, resourceName, replicaName);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, SignalRSku.DeserializeSignalRSku, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetReplicaSkusSignalRs", "value", null, cancellationToken);
        }

        /// <summary>
        /// Operation to restart a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/restart</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Restart</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> RestartSignalRAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.RestartSignalR");
            scope.Start();
            try
            {
                var response = await SignalRRestClient.RestartAsync(subscriptionId, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateRestartRequest(subscriptionId, resourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to restart a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/restart</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_Restart</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation RestartSignalR(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRClientDiagnostics.CreateScope("TenantResourceExtensionClient.RestartSignalR");
            scope.Start();
            try
            {
                var response = SignalRRestClient.Restart(subscriptionId, resourceGroupName, resourceName, cancellationToken);
                var operation = new SignalRArmOperation(SignalRClientDiagnostics, Pipeline, SignalRRestClient.CreateRestartRequest(subscriptionId, resourceGroupName, resourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all available skus of the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/skus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListSkus</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRSku> GetSkusSignalRsAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListSkusRequest(subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, SignalRSku.DeserializeSignalRSku, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSkusSignalRs", "value", null, cancellationToken);
        }

        /// <summary>
        /// List all available skus of the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/skus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalR_ListSkus</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRSku> GetSkusSignalRs(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRRestClient.CreateListSkusRequest(subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, SignalRSku.DeserializeSignalRSku, SignalRClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSkusSignalRs", "value", null, cancellationToken);
        }

        /// <summary>
        /// List resource usage quotas by location.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/usages</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Usages_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="location"> the location like "eastus". </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRUsage> GetUsagesAsync(Guid subscriptionId, AzureLocation location, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => UsagesRestClient.CreateListRequest(subscriptionId, location);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => UsagesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, location);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRUsage.DeserializeSignalRUsage, UsagesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetUsages", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List resource usage quotas by location.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/usages</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Usages_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="location"> the location like "eastus". </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRUsage> GetUsages(Guid subscriptionId, AzureLocation location, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => UsagesRestClient.CreateListRequest(subscriptionId, location);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => UsagesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, location);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRUsage.DeserializeSignalRUsage, UsagesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetUsages", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all custom certificates.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRCustomCertificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRCustomCertificate> GetSignalRCustomCertificatesAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRCustomCertificatesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRCustomCertificatesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRCustomCertificate.DeserializeSignalRCustomCertificate, SignalRCustomCertificatesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRCustomCertificates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all custom certificates.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRCustomCertificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRCustomCertificate> GetSignalRCustomCertificates(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRCustomCertificatesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRCustomCertificatesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRCustomCertificate.DeserializeSignalRCustomCertificate, SignalRCustomCertificatesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRCustomCertificates", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRCustomCertificate>> GetSignalRCustomCertificateAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = await SignalRCustomCertificatesRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, certificateName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRCustomCertificate> GetSignalRCustomCertificate(Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = SignalRCustomCertificatesRestClient.Get(subscriptionId, resourceGroupName, resourceName, certificateName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="signalRCustomCertificate"> The SignalRCustomCertificate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SignalRCustomCertificate>> CreateOrUpdateSignalRCustomCertificateAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, SignalRCustomCertificate signalRCustomCertificate, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = await SignalRCustomCertificatesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, resourceName, certificateName, signalRCustomCertificate, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<SignalRCustomCertificate>(new SignalRCustomCertificateOperationSource(), SignalRCustomCertificatesClientDiagnostics, Pipeline, SignalRCustomCertificatesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, certificateName, signalRCustomCertificate).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="signalRCustomCertificate"> The SignalRCustomCertificate to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SignalRCustomCertificate> CreateOrUpdateSignalRCustomCertificate(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, SignalRCustomCertificate signalRCustomCertificate, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = SignalRCustomCertificatesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, resourceName, certificateName, signalRCustomCertificate, cancellationToken);
                var operation = new SignalRArmOperation<SignalRCustomCertificate>(new SignalRCustomCertificateOperationSource(), SignalRCustomCertificatesClientDiagnostics, Pipeline, SignalRCustomCertificatesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, certificateName, signalRCustomCertificate).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteSignalRCustomCertificateAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = await SignalRCustomCertificatesRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, certificateName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a custom certificate.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customCertificates/{certificateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomCertificates_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="certificateName"> Custom certificate name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteSignalRCustomCertificate(Guid subscriptionId, string resourceGroupName, string resourceName, string certificateName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomCertificatesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRCustomCertificate");
            scope.Start();
            try
            {
                var response = SignalRCustomCertificatesRestClient.Delete(subscriptionId, resourceGroupName, resourceName, certificateName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all custom domains.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRCustomDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRCustomDomain> GetSignalRCustomDomainsAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRCustomDomainsRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRCustomDomainsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRCustomDomain.DeserializeSignalRCustomDomain, SignalRCustomDomainsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRCustomDomains", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all custom domains.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRCustomDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRCustomDomain> GetSignalRCustomDomains(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRCustomDomainsRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRCustomDomainsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRCustomDomain.DeserializeSignalRCustomDomain, SignalRCustomDomainsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRCustomDomains", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRCustomDomain>> GetSignalRCustomDomainAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = await SignalRCustomDomainsRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRCustomDomain> GetSignalRCustomDomain(Guid subscriptionId, string resourceGroupName, string resourceName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = SignalRCustomDomainsRestClient.Get(subscriptionId, resourceGroupName, resourceName, name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="signalRCustomDomain"> The SignalRCustomDomain to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SignalRCustomDomain>> CreateOrUpdateSignalRCustomDomainAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string name, SignalRCustomDomain signalRCustomDomain, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = await SignalRCustomDomainsRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, resourceName, name, signalRCustomDomain, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<SignalRCustomDomain>(new SignalRCustomDomainOperationSource(), SignalRCustomDomainsClientDiagnostics, Pipeline, SignalRCustomDomainsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, name, signalRCustomDomain).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="signalRCustomDomain"> The SignalRCustomDomain to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SignalRCustomDomain> CreateOrUpdateSignalRCustomDomain(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string name, SignalRCustomDomain signalRCustomDomain, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = SignalRCustomDomainsRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, resourceName, name, signalRCustomDomain, cancellationToken);
                var operation = new SignalRArmOperation<SignalRCustomDomain>(new SignalRCustomDomainOperationSource(), SignalRCustomDomainsClientDiagnostics, Pipeline, SignalRCustomDomainsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, name, signalRCustomDomain).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSignalRCustomDomainAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = await SignalRCustomDomainsRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, name, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRCustomDomainsClientDiagnostics, Pipeline, SignalRCustomDomainsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a custom domain.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/customDomains/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRCustomDomains_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="name"> Custom domain name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSignalRCustomDomain(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string name, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRCustomDomainsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRCustomDomain");
            scope.Start();
            try
            {
                var response = SignalRCustomDomainsRestClient.Delete(subscriptionId, resourceGroupName, resourceName, name, cancellationToken);
                var operation = new SignalRArmOperation(SignalRCustomDomainsClientDiagnostics, Pipeline, SignalRCustomDomainsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List private endpoint connections
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRPrivateEndpointConnection" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRPrivateEndpointConnection> GetSignalRPrivateEndpointConnectionsAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRPrivateEndpointConnectionsRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRPrivateEndpointConnectionsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRPrivateEndpointConnection.DeserializeSignalRPrivateEndpointConnection, SignalRPrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRPrivateEndpointConnections", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List private endpoint connections
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRPrivateEndpointConnection" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRPrivateEndpointConnection> GetSignalRPrivateEndpointConnections(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRPrivateEndpointConnectionsRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRPrivateEndpointConnectionsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRPrivateEndpointConnection.DeserializeSignalRPrivateEndpointConnection, SignalRPrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRPrivateEndpointConnections", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRPrivateEndpointConnection>> GetSignalRPrivateEndpointConnectionAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await SignalRPrivateEndpointConnectionsRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRPrivateEndpointConnection> GetSignalRPrivateEndpointConnection(Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = SignalRPrivateEndpointConnectionsRestClient.Get(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the state of specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="signalRPrivateEndpointConnection"> The resource of private endpoint and its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRPrivateEndpointConnection>> UpdateSignalRPrivateEndpointConnectionAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, SignalRPrivateEndpointConnection signalRPrivateEndpointConnection, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await SignalRPrivateEndpointConnectionsRestClient.UpdateAsync(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, signalRPrivateEndpointConnection, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the state of specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="signalRPrivateEndpointConnection"> The resource of private endpoint and its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRPrivateEndpointConnection> UpdateSignalRPrivateEndpointConnection(Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, SignalRPrivateEndpointConnection signalRPrivateEndpointConnection, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = SignalRPrivateEndpointConnectionsRestClient.Update(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, signalRPrivateEndpointConnection, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSignalRPrivateEndpointConnectionAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await SignalRPrivateEndpointConnectionsRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRPrivateEndpointConnectionsClientDiagnostics, Pipeline, SignalRPrivateEndpointConnectionsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the specified private endpoint connection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateEndpointConnections_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSignalRPrivateEndpointConnection(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRPrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = SignalRPrivateEndpointConnectionsRestClient.Delete(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName, cancellationToken);
                var operation = new SignalRArmOperation(SignalRPrivateEndpointConnectionsClientDiagnostics, Pipeline, SignalRPrivateEndpointConnectionsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, privateEndpointConnectionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the private link resources that need to be created for a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateLinkResources_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRPrivateLinkResource> GetSignalRPrivateLinkResourcesAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRPrivateLinkResourcesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRPrivateLinkResourcesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRPrivateLinkResource.DeserializeSignalRPrivateLinkResource, SignalRPrivateLinkResourcesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRPrivateLinkResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the private link resources that need to be created for a resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRPrivateLinkResources_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRPrivateLinkResource> GetSignalRPrivateLinkResources(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRPrivateLinkResourcesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRPrivateLinkResourcesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRPrivateLinkResource.DeserializeSignalRPrivateLinkResource, SignalRPrivateLinkResourcesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRPrivateLinkResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all replicas belong to this resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Replica" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Replica> GetSignalRReplicasAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRReplicasRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRReplicasRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Replica.DeserializeReplica, SignalRReplicasClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRReplicas", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List all replicas belong to this resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Replica" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Replica> GetSignalRReplicas(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRReplicasRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRReplicasRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Replica.DeserializeReplica, SignalRReplicasClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRReplicas", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the replica and its properties.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Replica>> GetSignalRReplicaAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRReplica");
            scope.Start();
            try
            {
                var response = await SignalRReplicasRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the replica and its properties.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Replica> GetSignalRReplica(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRReplica");
            scope.Start();
            try
            {
                var response = SignalRReplicasRestClient.Get(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="replica"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Replica>> CreateOrUpdateSignalRReplicaAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, Replica replica, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRReplica");
            scope.Start();
            try
            {
                var response = await SignalRReplicasRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, resourceName, replicaName, replica, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<Replica>(new ReplicaOperationSource(), SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, replicaName, replica).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="replica"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Replica> CreateOrUpdateSignalRReplica(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, Replica replica, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRReplica");
            scope.Start();
            try
            {
                var response = SignalRReplicasRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, resourceName, replicaName, replica, cancellationToken);
                var operation = new SignalRArmOperation<Replica>(new ReplicaOperationSource(), SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, replicaName, replica).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to delete a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteSignalRReplicaAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRReplica");
            scope.Start();
            try
            {
                var response = await SignalRReplicasRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to delete a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteSignalRReplica(Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRReplica");
            scope.Start();
            try
            {
                var response = SignalRReplicasRestClient.Delete(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to update an exiting replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="replica"> Parameters for the update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Replica>> UpdateSignalRReplicaAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, Replica replica, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalRReplica");
            scope.Start();
            try
            {
                var response = await SignalRReplicasRestClient.UpdateAsync(subscriptionId, resourceGroupName, resourceName, replicaName, replica, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<Replica>(new ReplicaOperationSource(), SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, resourceName, replicaName, replica).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to update an exiting replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="replica"> Parameters for the update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Replica> UpdateSignalRReplica(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, Replica replica, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateSignalRReplica");
            scope.Start();
            try
            {
                var response = SignalRReplicasRestClient.Update(subscriptionId, resourceGroupName, resourceName, replicaName, replica, cancellationToken);
                var operation = new SignalRArmOperation<Replica>(new ReplicaOperationSource(), SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, resourceName, replicaName, replica).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to restart a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}/restart</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Restart</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> RestartSignalRReplicaAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.RestartSignalRReplica");
            scope.Start();
            try
            {
                var response = await SignalRReplicasRestClient.RestartAsync(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateRestartRequest(subscriptionId, resourceGroupName, resourceName, replicaName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Operation to restart a replica.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/replicas/{replicaName}/restart</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRReplicas_Restart</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="replicaName"> The name of the replica. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation RestartSignalRReplica(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string replicaName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRReplicasClientDiagnostics.CreateScope("TenantResourceExtensionClient.RestartSignalRReplica");
            scope.Start();
            try
            {
                var response = SignalRReplicasRestClient.Restart(subscriptionId, resourceGroupName, resourceName, replicaName, cancellationToken);
                var operation = new SignalRArmOperation(SignalRReplicasClientDiagnostics, Pipeline, SignalRReplicasRestClient.CreateRestartRequest(subscriptionId, resourceGroupName, resourceName, replicaName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List shared private link resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SignalRSharedPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SignalRSharedPrivateLinkResource> GetSignalRSharedPrivateLinkResourcesAsync(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRSharedPrivateLinkResourcesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRSharedPrivateLinkResourcesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SignalRSharedPrivateLinkResource.DeserializeSignalRSharedPrivateLinkResource, SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRSharedPrivateLinkResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List shared private link resources
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SignalRSharedPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SignalRSharedPrivateLinkResource> GetSignalRSharedPrivateLinkResources(Guid subscriptionId, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SignalRSharedPrivateLinkResourcesRestClient.CreateListRequest(subscriptionId, resourceGroupName, resourceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SignalRSharedPrivateLinkResourcesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, resourceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SignalRSharedPrivateLinkResource.DeserializeSignalRSharedPrivateLinkResource, SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSignalRSharedPrivateLinkResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the specified shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SignalRSharedPrivateLinkResource>> GetSignalRSharedPrivateLinkResourceAsync(Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = await SignalRSharedPrivateLinkResourcesRestClient.GetAsync(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the specified shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SignalRSharedPrivateLinkResource> GetSignalRSharedPrivateLinkResource(Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = SignalRSharedPrivateLinkResourcesRestClient.Get(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="signalRSharedPrivateLinkResource"> The shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SignalRSharedPrivateLinkResource>> CreateOrUpdateSignalRSharedPrivateLinkResourceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, SignalRSharedPrivateLinkResource signalRSharedPrivateLinkResource, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = await SignalRSharedPrivateLinkResourcesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, signalRSharedPrivateLinkResource, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation<SignalRSharedPrivateLinkResource>(new SignalRSharedPrivateLinkResourceOperationSource(), SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, SignalRSharedPrivateLinkResourcesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, signalRSharedPrivateLinkResource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="signalRSharedPrivateLinkResource"> The shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SignalRSharedPrivateLinkResource> CreateOrUpdateSignalRSharedPrivateLinkResource(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, SignalRSharedPrivateLinkResource signalRSharedPrivateLinkResource, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = SignalRSharedPrivateLinkResourcesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, signalRSharedPrivateLinkResource, cancellationToken);
                var operation = new SignalRArmOperation<SignalRSharedPrivateLinkResource>(new SignalRSharedPrivateLinkResourceOperationSource(), SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, SignalRSharedPrivateLinkResourcesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, signalRSharedPrivateLinkResource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the specified shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSignalRSharedPrivateLinkResourceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = await SignalRSharedPrivateLinkResourcesRestClient.DeleteAsync(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, cancellationToken).ConfigureAwait(false);
                var operation = new SignalRArmOperation(SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, SignalRSharedPrivateLinkResourcesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the specified shared private link resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/sharedPrivateLinkResources/{sharedPrivateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SignalRSharedPrivateLinkResources_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="sharedPrivateLinkResourceName"> The name of the shared private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSignalRSharedPrivateLinkResource(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string resourceName, string sharedPrivateLinkResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = SignalRSharedPrivateLinkResourcesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSignalRSharedPrivateLinkResource");
            scope.Start();
            try
            {
                var response = SignalRSharedPrivateLinkResourcesRestClient.Delete(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName, cancellationToken);
                var operation = new SignalRArmOperation(SignalRSharedPrivateLinkResourcesClientDiagnostics, Pipeline, SignalRSharedPrivateLinkResourcesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, resourceName, sharedPrivateLinkResourceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
