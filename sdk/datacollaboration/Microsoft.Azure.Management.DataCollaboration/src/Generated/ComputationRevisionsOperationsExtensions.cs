// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComputationRevisionsOperations.
    /// </summary>
    public static partial class ComputationRevisionsOperationsExtensions
    {
            /// <summary>
            /// List revisions of a Computation.
            /// </summary>
            /// <remarks>
            /// List revisions of a Computation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            public static IPage<Computation> ListByComputation(this IComputationRevisionsOperations operations, string resourceGroupName, string workspaceName, string computationName, string skipToken = default(string))
            {
                return operations.ListByComputationAsync(resourceGroupName, workspaceName, computationName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List revisions of a Computation.
            /// </summary>
            /// <remarks>
            /// List revisions of a Computation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Computation>> ListByComputationAsync(this IComputationRevisionsOperations operations, string resourceGroupName, string workspaceName, string computationName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByComputationWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Computation's revision in a Workspace.
            /// </summary>
            /// <remarks>
            /// Get a Computation's revision in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='revision'>
            /// The revision of the computation.
            /// </param>
            public static Computation Get(this IComputationRevisionsOperations operations, string resourceGroupName, string workspaceName, string computationName, int revision)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, computationName, revision).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Computation's revision in a Workspace.
            /// </summary>
            /// <remarks>
            /// Get a Computation's revision in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='revision'>
            /// The revision of the computation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Computation> GetAsync(this IComputationRevisionsOperations operations, string resourceGroupName, string workspaceName, string computationName, int revision, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List revisions of a Computation.
            /// </summary>
            /// <remarks>
            /// List revisions of a Computation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Computation> ListByComputationNext(this IComputationRevisionsOperations operations, string nextPageLink)
            {
                return operations.ListByComputationNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List revisions of a Computation.
            /// </summary>
            /// <remarks>
            /// List revisions of a Computation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Computation>> ListByComputationNextAsync(this IComputationRevisionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByComputationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
