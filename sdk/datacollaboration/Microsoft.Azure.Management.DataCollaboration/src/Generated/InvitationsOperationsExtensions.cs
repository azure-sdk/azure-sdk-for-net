// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InvitationsOperations.
    /// </summary>
    public static partial class InvitationsOperationsExtensions
    {
            /// <summary>
            /// List all Invitations in a proposal.
            /// </summary>
            /// <remarks>
            /// List invitations in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token
            /// </param>
            public static IPage<Invitation> ListByProposal(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string skipToken = default(string))
            {
                return operations.ListByProposalAsync(resourceGroupName, workspaceName, proposalName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Invitations in a proposal.
            /// </summary>
            /// <remarks>
            /// List invitations in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Invitation>> ListByProposalAsync(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProposalWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Invitation in a proposal.
            /// </summary>
            /// <remarks>
            /// Get an invitation in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            public static Invitation Get(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, proposalName, invitationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Invitation in a proposal.
            /// </summary>
            /// <remarks>
            /// Get an invitation in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Invitation> GetAsync(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, invitationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new invitation to a recipient to access a proposal.
            /// </summary>
            /// <remarks>
            /// Create an invitation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal to send the invitation for.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            /// <param name='invitation'>
            /// Invitation details.
            /// </param>
            public static Invitation Create(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName, Invitation invitation)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, proposalName, invitationName, invitation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new invitation to a recipient to access a proposal.
            /// </summary>
            /// <remarks>
            /// Create an invitation
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal to send the invitation for.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            /// <param name='invitation'>
            /// Invitation details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Invitation> CreateAsync(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName, Invitation invitation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, invitationName, invitation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Invitation in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an invitation in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            public static OperationResponse Delete(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, proposalName, invitationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Invitation in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an invitation in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='invitationName'>
            /// The name of the invitation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IInvitationsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string invitationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, invitationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all Invitations in a proposal.
            /// </summary>
            /// <remarks>
            /// List invitations in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Invitation> ListByProposalNext(this IInvitationsOperations operations, string nextPageLink)
            {
                return operations.ListByProposalNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Invitations in a proposal.
            /// </summary>
            /// <remarks>
            /// List invitations in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Invitation>> ListByProposalNextAsync(this IInvitationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProposalNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
