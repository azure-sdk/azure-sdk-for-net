// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EntitlementsOperations.
    /// </summary>
    public static partial class EntitlementsOperationsExtensions
    {
            /// <summary>
            /// List entitlements in a proposal.
            /// </summary>
            /// <remarks>
            /// List entitlements in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<Entitlement> ListByProposal(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByProposalAsync(resourceGroupName, workspaceName, proposalName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List entitlements in a proposal.
            /// </summary>
            /// <remarks>
            /// List entitlements in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Entitlement>> ListByProposalAsync(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProposalWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an entitlement from a proposal.
            /// </summary>
            /// <remarks>
            /// Get an entitlement in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            public static Entitlement Get(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, proposalName, entitlementName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an entitlement from a proposal.
            /// </summary>
            /// <remarks>
            /// Get an entitlement in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Entitlement> GetAsync(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new entitlement to a proposal.
            /// </summary>
            /// <remarks>
            /// Create or update an entitlement in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='entitlement'>
            /// The new entitlement information.
            /// </param>
            public static Entitlement CreateOrUpdate(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, Entitlement entitlement)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, proposalName, entitlementName, entitlement).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new entitlement to a proposal.
            /// </summary>
            /// <remarks>
            /// Create or update an entitlement in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='entitlement'>
            /// The new entitlement information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Entitlement> CreateOrUpdateAsync(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, Entitlement entitlement, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, entitlement, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an entitlement in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an entitlement from a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            public static OperationResponse Delete(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, proposalName, entitlementName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an entitlement in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an entitlement from a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an entitlement in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an entitlement from a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            public static OperationResponse BeginDelete(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, proposalName, entitlementName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an entitlement in a proposal.
            /// </summary>
            /// <remarks>
            /// Delete an entitlement from a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IEntitlementsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List entitlements in a proposal.
            /// </summary>
            /// <remarks>
            /// List entitlements in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Entitlement> ListByProposalNext(this IEntitlementsOperations operations, string nextPageLink)
            {
                return operations.ListByProposalNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List entitlements in a proposal.
            /// </summary>
            /// <remarks>
            /// List entitlements in a proposal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Entitlement>> ListByProposalNextAsync(this IEntitlementsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProposalNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
