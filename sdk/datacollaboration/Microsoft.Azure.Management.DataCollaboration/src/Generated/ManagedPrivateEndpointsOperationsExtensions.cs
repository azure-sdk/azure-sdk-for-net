// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedPrivateEndpointsOperations.
    /// </summary>
    public static partial class ManagedPrivateEndpointsOperationsExtensions
    {
            /// <summary>
            /// List managed private endpoints in a Workspace.
            /// </summary>
            /// <remarks>
            /// List managed private endpoints in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<ManagedPrivateEndpoint> ListByWorkspace(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List managed private endpoints in a Workspace.
            /// </summary>
            /// <remarks>
            /// List managed private endpoints in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedPrivateEndpoint>> ListByWorkspaceAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a managed private endpoint in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static ManagedPrivateEndpoint Get(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a managed private endpoint in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> GetAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new managed private endpoint to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create a managed private endpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// The new managed private endpoint information.
            /// </param>
            public static ManagedPrivateEndpoint Create(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, managedPrivateEndpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new managed private endpoint to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create a managed private endpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// The new managed private endpoint information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> CreateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, managedPrivateEndpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed private endpoint from a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static OperationResponse Delete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed private endpoint from a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new managed private endpoint to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create a managed private endpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// The new managed private endpoint information.
            /// </param>
            public static ManagedPrivateEndpoint BeginCreate(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint)
            {
                return operations.BeginCreateAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, managedPrivateEndpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new managed private endpoint to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create a managed private endpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='managedPrivateEndpoint'>
            /// The new managed private endpoint information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedPrivateEndpoint> BeginCreateAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, ManagedPrivateEndpoint managedPrivateEndpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, managedPrivateEndpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed private endpoint from a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            public static OperationResponse BeginDelete(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, managedPrivateEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed private endpoint from a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ManagedPrivateEndpoint in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='managedPrivateEndpointName'>
            /// The name of the managed private endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IManagedPrivateEndpointsOperations operations, string resourceGroupName, string workspaceName, string managedPrivateEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, managedPrivateEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List managed private endpoints in a Workspace.
            /// </summary>
            /// <remarks>
            /// List managed private endpoints in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedPrivateEndpoint> ListByWorkspaceNext(this IManagedPrivateEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List managed private endpoints in a Workspace.
            /// </summary>
            /// <remarks>
            /// List managed private endpoints in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedPrivateEndpoint>> ListByWorkspaceNextAsync(this IManagedPrivateEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
