// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConstrainedResourcesOperations.
    /// </summary>
    public static partial class ConstrainedResourcesOperationsExtensions
    {
            /// <summary>
            /// List constrained resources in a Workspace.
            /// </summary>
            /// <remarks>
            /// List constrained resources in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<ConstrainedResource> ListByWorkspace(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List constrained resources in a Workspace.
            /// </summary>
            /// <remarks>
            /// List constrained resources in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConstrainedResource>> ListByWorkspaceAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            public static ConstrainedResource Get(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, constrainedResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConstrainedResource> GetAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, constrainedResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new constrained resource or update an existing constrained resource
            /// to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a constrained resource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='constrainedResource'>
            /// The new constrained resource information.
            /// </param>
            /// <param name='force'>
            /// Whether to force resource update
            /// </param>
            public static ConstrainedResource CreateOrUpdate(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, ConstrainedResource constrainedResource, bool? force = false)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, constrainedResourceName, constrainedResource, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new constrained resource or update an existing constrained resource
            /// to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a constrained resource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='constrainedResource'>
            /// The new constrained resource information.
            /// </param>
            /// <param name='force'>
            /// Whether to force resource update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConstrainedResource> CreateOrUpdateAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, ConstrainedResource constrainedResource, bool? force = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, constrainedResourceName, constrainedResource, force, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            public static OperationResponse Delete(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, constrainedResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, constrainedResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new constrained resource or update an existing constrained resource
            /// to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a constrained resource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='constrainedResource'>
            /// The new constrained resource information.
            /// </param>
            /// <param name='force'>
            /// Whether to force resource update
            /// </param>
            public static ConstrainedResource BeginCreateOrUpdate(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, ConstrainedResource constrainedResource, bool? force = false)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, constrainedResourceName, constrainedResource, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new constrained resource or update an existing constrained resource
            /// to an existing workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a constrained resource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='constrainedResource'>
            /// The new constrained resource information.
            /// </param>
            /// <param name='force'>
            /// Whether to force resource update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConstrainedResource> BeginCreateOrUpdateAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, ConstrainedResource constrainedResource, bool? force = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, constrainedResourceName, constrainedResource, force, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            public static OperationResponse BeginDelete(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, constrainedResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a constrained resource in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a ConstrainedResource in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='constrainedResourceName'>
            /// The name of the constrained resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IConstrainedResourcesOperations operations, string resourceGroupName, string workspaceName, string constrainedResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, constrainedResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List constrained resources in a Workspace.
            /// </summary>
            /// <remarks>
            /// List constrained resources in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConstrainedResource> ListByWorkspaceNext(this IConstrainedResourcesOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List constrained resources in a Workspace.
            /// </summary>
            /// <remarks>
            /// List constrained resources in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConstrainedResource>> ListByWorkspaceNextAsync(this IConstrainedResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
