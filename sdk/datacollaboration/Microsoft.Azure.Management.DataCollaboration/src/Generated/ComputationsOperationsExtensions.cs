// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ComputationsOperations.
    /// </summary>
    public static partial class ComputationsOperationsExtensions
    {
            /// <summary>
            /// List Computations in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Computations in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<Computation> ListByWorkspace(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Computations in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Computations in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Computation>> ListByWorkspaceAsync(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Computation in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            public static Computation Get(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, computationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Computation in a workspace.
            /// </summary>
            /// <remarks>
            /// Get a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Computation> GetAsync(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new computation or update an existing computation to an existing
            /// workspace.
            /// Also, adds a new a revision for an existing computation or create the first
            /// revision for a new computation.
            /// </summary>
            /// <remarks>
            /// Create or update a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='computation'>
            /// The new computation information.
            /// </param>
            public static Computation CreateOrUpdate(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName, Computation computation)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, computationName, computation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new computation or update an existing computation to an existing
            /// workspace.
            /// Also, adds a new a revision for an existing computation or create the first
            /// revision for a new computation.
            /// </summary>
            /// <remarks>
            /// Create or update a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='computation'>
            /// The new computation information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Computation> CreateOrUpdateAsync(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName, Computation computation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, computation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Computation and all it's revisions in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            public static OperationResponse Delete(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, computationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Computation and all it's revisions in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Computation and all it's revisions in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            public static OperationResponse BeginDelete(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, computationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Computation and all it's revisions in a workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Computation in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='computationName'>
            /// The name of the computation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IComputationsOperations operations, string resourceGroupName, string workspaceName, string computationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, computationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Computations in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Computations in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Computation> ListByWorkspaceNext(this IComputationsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Computations in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Computations in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Computation>> ListByWorkspaceNextAsync(this IComputationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
