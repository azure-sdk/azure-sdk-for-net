// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An ADLS Gen 2 file data set.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AdlsGen2File")]
    [Rest.Serialization.JsonTransformation]
    public partial class ADLSGen2FileDataSet : DataSet
    {
        /// <summary>
        /// Initializes a new instance of the ADLSGen2FileDataSet class.
        /// </summary>
        public ADLSGen2FileDataSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ADLSGen2FileDataSet class.
        /// </summary>
        /// <param name="filePath">File path within the file system.</param>
        /// <param name="fileSystem">File system to which the file
        /// belongs.</param>
        /// <param name="storageAccountId">Resource id of the storage
        /// account.</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="dataSetId">Unique id for identifying a data set
        /// resource</param>
        public ADLSGen2FileDataSet(string filePath, string fileSystem, string storageAccountId, string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), string dataSetId = default(string))
            : base(id, name, systemData, type)
        {
            DataSetId = dataSetId;
            FilePath = filePath;
            FileSystem = fileSystem;
            StorageAccountId = storageAccountId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique id for identifying a data set resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSetId")]
        public string DataSetId { get; private set; }

        /// <summary>
        /// Gets or sets file path within the file system.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filePath")]
        public string FilePath { get; set; }

        /// <summary>
        /// Gets or sets file system to which the file belongs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileSystem")]
        public string FileSystem { get; set; }

        /// <summary>
        /// Gets or sets resource id of the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountId")]
        public string StorageAccountId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FilePath");
            }
            if (FileSystem == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FileSystem");
            }
            if (StorageAccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountId");
            }
        }
    }
}
