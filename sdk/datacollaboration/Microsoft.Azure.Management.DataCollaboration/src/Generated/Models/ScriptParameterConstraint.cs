// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Constraint used to only allow access if the resource is using a
    /// specific script parameter.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ScriptParameter")]
    [Rest.Serialization.JsonTransformation]
    public partial class ScriptParameterConstraint : Constraint
    {
        /// <summary>
        /// Initializes a new instance of the ScriptParameterConstraint class.
        /// </summary>
        public ScriptParameterConstraint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptParameterConstraint class.
        /// </summary>
        /// <param name="parameterName">The parameter name which this
        /// constraint will apply to</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="description">Description of the constraint.</param>
        /// <param name="isParameterRequired">Parameter must exist</param>
        /// <param name="parameterType">Parameter should be of type. Possible
        /// values include: 'Boolean', 'Integer', 'Float', 'String',
        /// 'DateTime'</param>
        /// <param name="validationRule">Rule in which parameter have to
        /// follow</param>
        public ScriptParameterConstraint(string parameterName, string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), string description = default(string), bool? isParameterRequired = default(bool?), string parameterType = default(string), ScriptParameterValidationRule validationRule = default(ScriptParameterValidationRule))
            : base(id, name, systemData, type)
        {
            Description = description;
            IsParameterRequired = isParameterRequired;
            ParameterName = parameterName;
            ParameterType = parameterType;
            ValidationRule = validationRule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of the constraint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets parameter must exist
        /// </summary>
        [JsonProperty(PropertyName = "properties.isParameterRequired")]
        public bool? IsParameterRequired { get; set; }

        /// <summary>
        /// Gets or sets the parameter name which this constraint will apply to
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameterName")]
        public string ParameterName { get; set; }

        /// <summary>
        /// Gets or sets parameter should be of type. Possible values include:
        /// 'Boolean', 'Integer', 'Float', 'String', 'DateTime'
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameterType")]
        public string ParameterType { get; set; }

        /// <summary>
        /// Gets or sets rule in which parameter have to follow
        /// </summary>
        [JsonProperty(PropertyName = "properties.validationRule")]
        public ScriptParameterValidationRule ValidationRule { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ParameterName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParameterName");
            }
        }
    }
}
