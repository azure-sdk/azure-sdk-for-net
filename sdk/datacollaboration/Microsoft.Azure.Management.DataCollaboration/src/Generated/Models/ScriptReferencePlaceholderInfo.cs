// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Placeholder information for a script reference
    /// </summary>
    public partial class ScriptReferencePlaceholderInfo
    {
        /// <summary>
        /// Initializes a new instance of the ScriptReferencePlaceholderInfo
        /// class.
        /// </summary>
        public ScriptReferencePlaceholderInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptReferencePlaceholderInfo
        /// class.
        /// </summary>
        /// <param name="assignerId">Participant id who is allowed to assign
        /// the placeholder.</param>
        /// <param name="displayName">Display name of the placeholder.</param>
        /// <param name="purpose">Script purpose. Possible values include:
        /// 'Body', 'InputAdapter', 'OutputAdapter'</param>
        /// <param name="description">Description of the placeholder.</param>
        public ScriptReferencePlaceholderInfo(string assignerId, string displayName, string purpose, string description = default(string))
        {
            AssignerId = assignerId;
            Description = description;
            DisplayName = displayName;
            Purpose = purpose;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets participant id who is allowed to assign the
        /// placeholder.
        /// </summary>
        [JsonProperty(PropertyName = "assignerId")]
        public string AssignerId { get; set; }

        /// <summary>
        /// Gets or sets description of the placeholder.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets display name of the placeholder.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets script purpose. Possible values include: 'Body',
        /// 'InputAdapter', 'OutputAdapter'
        /// </summary>
        [JsonProperty(PropertyName = "purpose")]
        public string Purpose { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssignerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssignerId");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Purpose == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Purpose");
            }
        }
    }
}
