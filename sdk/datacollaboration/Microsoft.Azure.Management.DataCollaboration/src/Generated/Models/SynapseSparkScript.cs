// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A type of script based on the compute engine
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseSpark")]
    [Rest.Serialization.JsonTransformation]
    public partial class SynapseSparkScript : Script
    {
        /// <summary>
        /// Initializes a new instance of the SynapseSparkScript class.
        /// </summary>
        public SynapseSparkScript()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseSparkScript class.
        /// </summary>
        /// <param name="content">The script content</param>
        /// <param name="purpose">Script purpose. Possible values include:
        /// 'Body', 'InputAdapter', 'OutputAdapter'</param>
        /// <param name="sinks">The list of parameters the script can use as
        /// it's data sinks</param>
        /// <param name="sources">The list of parameters the script can use as
        /// it's data sources</param>
        /// <param name="visibility">Script visibility mode. Possible values
        /// include: 'ShowAll', 'HiddenContent'</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="parameters">The list of overridable script
        /// parameters</param>
        /// <param name="provisioningState">Provisioning state of the script.
        /// Possible values include: 'Succeeded', 'Creating', 'Updating',
        /// 'Deleting', 'Moving', 'Failed'</param>
        /// <param name="revision">Latest script revision</param>
        /// <param name="scriptId">Unique id for identifying a script
        /// resource</param>
        public SynapseSparkScript(string content, string purpose, IList<string> sinks, IList<string> sources, string visibility, string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), IList<ScriptParameter> parameters = default(IList<ScriptParameter>), string provisioningState = default(string), int? revision = default(int?), string scriptId = default(string))
            : base(id, name, systemData, type)
        {
            Content = content;
            Parameters = parameters;
            ProvisioningState = provisioningState;
            Purpose = purpose;
            Revision = revision;
            ScriptId = scriptId;
            Sinks = sinks;
            Sources = sources;
            Visibility = visibility;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for SynapseSparkScript class.
        /// </summary>
        static SynapseSparkScript()
        {
            Language = "Python";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the script content
        /// </summary>
        [JsonProperty(PropertyName = "properties.content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets the list of overridable script parameters
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<ScriptParameter> Parameters { get; set; }

        /// <summary>
        /// Gets provisioning state of the script. Possible values include:
        /// 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets script purpose. Possible values include: 'Body',
        /// 'InputAdapter', 'OutputAdapter'
        /// </summary>
        [JsonProperty(PropertyName = "properties.purpose")]
        public string Purpose { get; set; }

        /// <summary>
        /// Gets latest script revision
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public int? Revision { get; private set; }

        /// <summary>
        /// Gets unique id for identifying a script resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptId")]
        public string ScriptId { get; private set; }

        /// <summary>
        /// Gets or sets the list of parameters the script can use as it's data
        /// sinks
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinks")]
        public IList<string> Sinks { get; set; }

        /// <summary>
        /// Gets or sets the list of parameters the script can use as it's data
        /// sources
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<string> Sources { get; set; }

        /// <summary>
        /// Gets or sets script visibility mode. Possible values include:
        /// 'ShowAll', 'HiddenContent'
        /// </summary>
        [JsonProperty(PropertyName = "properties.visibility")]
        public string Visibility { get; set; }

        /// <summary>
        /// The script language
        /// </summary>
        [JsonProperty(PropertyName = "properties.language")]
        public static string Language { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
            if (Purpose == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Purpose");
            }
            if (Sinks == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sinks");
            }
            if (Sources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sources");
            }
            if (Visibility == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Visibility");
            }
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
