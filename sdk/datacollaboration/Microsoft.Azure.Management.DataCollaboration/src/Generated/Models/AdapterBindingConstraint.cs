// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties for adapter binding constraint
    /// </summary>
    public partial class AdapterBindingConstraint
    {
        /// <summary>
        /// Initializes a new instance of the AdapterBindingConstraint class.
        /// </summary>
        public AdapterBindingConstraint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdapterBindingConstraint class.
        /// </summary>
        /// <param name="computationReferenceId">The unique identifier of the
        /// adapter computation reference.</param>
        /// <param name="bindingKey">The key of script's source or
        /// sink.</param>
        public AdapterBindingConstraint(string computationReferenceId, string bindingKey = default(string))
        {
            BindingKey = bindingKey;
            ComputationReferenceId = computationReferenceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the key of script's source or sink.
        /// </summary>
        [JsonProperty(PropertyName = "bindingKey")]
        public string BindingKey { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the adapter computation
        /// reference.
        /// </summary>
        [JsonProperty(PropertyName = "computationReferenceId")]
        public string ComputationReferenceId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ComputationReferenceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComputationReferenceId");
            }
        }
    }
}
