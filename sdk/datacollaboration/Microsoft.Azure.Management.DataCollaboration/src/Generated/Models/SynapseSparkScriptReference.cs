// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Synapse Spark Script computation reference
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseSpark")]
    [Rest.Serialization.JsonTransformation]
    public partial class SynapseSparkScriptReference : ComputationReference
    {
        /// <summary>
        /// Initializes a new instance of the SynapseSparkScriptReference
        /// class.
        /// </summary>
        public SynapseSparkScriptReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseSparkScriptReference
        /// class.
        /// </summary>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="computationId">The unique identifier of the referenced
        /// computation</param>
        /// <param name="computationKind">Kind of the referenced computation.
        /// Possible values include: 'SynapseSpark',
        /// 'ContainerInstanceContainerGroup'</param>
        /// <param name="computationReferenceId">Unique id for identifying a
        /// computation reference resource</param>
        /// <param name="displayName">Reference display name</param>
        /// <param name="ownerId">The participant id of the computation
        /// owner</param>
        /// <param name="parameters">The list of computation parameters</param>
        /// <param name="placeholderInfo">The placeholder information</param>
        /// <param name="placeholderState">The placeholder state. Possible
        /// values include: 'None', 'Unassigned', 'Assigned'</param>
        /// <param name="purpose">Script purpose. Possible values include:
        /// 'Body', 'InputAdapter', 'OutputAdapter'</param>
        /// <param name="revision">The revision number of the computation being
        /// referenced.
        /// If omitted, the computation latest version will be
        /// referenced.</param>
        /// <param name="scriptVisibility">The referenced computation
        /// visibility modifier. Possible values include: 'ShowAll',
        /// 'HiddenContent'</param>
        /// <param name="sinks">The list of parameters the computation can use
        /// as it's data sinks</param>
        /// <param name="sources">The list of parameters the computation can
        /// use as it's data sources</param>
        public SynapseSparkScriptReference(string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), string computationId = default(string), string computationKind = default(string), string computationReferenceId = default(string), string displayName = default(string), string ownerId = default(string), IList<ComputationParameter> parameters = default(IList<ComputationParameter>), SynapseSparkScriptReferencePlaceholderInfo placeholderInfo = default(SynapseSparkScriptReferencePlaceholderInfo), string placeholderState = default(string), string purpose = default(string), int? revision = default(int?), string scriptVisibility = default(string), IList<string> sinks = default(IList<string>), IList<string> sources = default(IList<string>))
            : base(id, name, systemData, type)
        {
            ComputationId = computationId;
            ComputationKind = computationKind;
            ComputationReferenceId = computationReferenceId;
            DisplayName = displayName;
            OwnerId = ownerId;
            Parameters = parameters;
            PlaceholderInfo = placeholderInfo;
            PlaceholderState = placeholderState;
            Purpose = purpose;
            Revision = revision;
            ScriptVisibility = scriptVisibility;
            Sinks = sinks;
            Sources = sources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier of the referenced computation
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationId")]
        public string ComputationId { get; set; }

        /// <summary>
        /// Gets kind of the referenced computation. Possible values include:
        /// 'SynapseSpark', 'ContainerInstanceContainerGroup'
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationKind")]
        public string ComputationKind { get; private set; }

        /// <summary>
        /// Gets unique id for identifying a computation reference resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationReferenceId")]
        public string ComputationReferenceId { get; private set; }

        /// <summary>
        /// Gets or sets reference display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets the participant id of the computation owner
        /// </summary>
        [JsonProperty(PropertyName = "properties.ownerId")]
        public string OwnerId { get; private set; }

        /// <summary>
        /// Gets the list of computation parameters
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<ComputationParameter> Parameters { get; private set; }

        /// <summary>
        /// Gets or sets the placeholder information
        /// </summary>
        [JsonProperty(PropertyName = "properties.placeholderInfo")]
        public SynapseSparkScriptReferencePlaceholderInfo PlaceholderInfo { get; set; }

        /// <summary>
        /// Gets the placeholder state. Possible values include: 'None',
        /// 'Unassigned', 'Assigned'
        /// </summary>
        [JsonProperty(PropertyName = "properties.placeholderState")]
        public string PlaceholderState { get; private set; }

        /// <summary>
        /// Gets script purpose. Possible values include: 'Body',
        /// 'InputAdapter', 'OutputAdapter'
        /// </summary>
        [JsonProperty(PropertyName = "properties.purpose")]
        public string Purpose { get; private set; }

        /// <summary>
        /// Gets or sets the revision number of the computation being
        /// referenced.
        /// If omitted, the computation latest version will be referenced.
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public int? Revision { get; set; }

        /// <summary>
        /// Gets the referenced computation visibility modifier. Possible
        /// values include: 'ShowAll', 'HiddenContent'
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptVisibility")]
        public string ScriptVisibility { get; private set; }

        /// <summary>
        /// Gets the list of parameters the computation can use as it's data
        /// sinks
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinks")]
        public IList<string> Sinks { get; private set; }

        /// <summary>
        /// Gets the list of parameters the computation can use as it's data
        /// sources
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<string> Sources { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (PlaceholderInfo != null)
            {
                PlaceholderInfo.Validate();
            }
        }
    }
}
