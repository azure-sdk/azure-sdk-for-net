// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Grants access to another shared resource in the same proposal, with
    /// optional constraints and policies
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Entitlement : ProxyDto
    {
        /// <summary>
        /// Initializes a new instance of the Entitlement class.
        /// </summary>
        public Entitlement()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Entitlement class.
        /// </summary>
        /// <param name="resourceId">The unique identifier of the resource of
        /// the entitlement.
        /// Must be a reference resource from the same proposal.</param>
        /// <param name="resourceType">The type of resourced used by the
        /// entitlement. Possible values include: 'DataAssetReference',
        /// 'ScriptReference', 'VirtualOutputReference'</param>
        /// <param name="subjectId">The unique identifier of the subject of the
        /// entitlement.
        /// The subject must be a participant in the same proposal.</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="description">Textual description of the
        /// entitlement</param>
        public Entitlement(string resourceId, string resourceType, string subjectId, string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), string description = default(string))
            : base(id, name, systemData, type)
        {
            Description = description;
            ResourceId = resourceId;
            ResourceType = resourceType;
            SubjectId = subjectId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets textual description of the entitlement
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the resource of the
        /// entitlement.
        /// Must be a reference resource from the same proposal.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the type of resourced used by the entitlement.
        /// Possible values include: 'DataAssetReference', 'ScriptReference',
        /// 'VirtualOutputReference'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the subject of the
        /// entitlement.
        /// The subject must be a participant in the same proposal.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subjectId")]
        public string SubjectId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceId");
            }
            if (ResourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceType");
            }
            if (SubjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubjectId");
            }
        }
    }
}
