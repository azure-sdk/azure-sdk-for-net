// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A substep representing copy data activity
    /// </summary>
    [Newtonsoft.Json.JsonObject("DataMovement")]
    public partial class DataMovementPipelineSubstep : PipelineSubstep
    {
        /// <summary>
        /// Initializes a new instance of the DataMovementPipelineSubstep
        /// class.
        /// </summary>
        public DataMovementPipelineSubstep()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataMovementPipelineSubstep
        /// class.
        /// </summary>
        /// <param name="durationMs">Substep run duration</param>
        /// <param name="endTime">End time of substep</param>
        /// <param name="errorMessage">Error message if any</param>
        /// <param name="executionStatus">Execution status e.g. Success,
        /// Failed, InProgress. Possible values include: 'Succeeded', 'Failed',
        /// 'InProgress', 'Preparing', 'Queued', 'Unknown', 'Cancelled',
        /// 'Canceling', 'Waiting', 'Incomplete'</param>
        /// <param name="pipelineSubstepId">Id of pipeline substep.</param>
        /// <param name="startTime">Start time of substep</param>
        /// <param name="dataMovementExecutionStage">The stage of data
        /// movement. Possible values include: 'Input', 'Output'</param>
        /// <param name="dataSetCategory">The category of the source
        /// dataset</param>
        /// <param name="dataSetName">The name of the source dataset</param>
        /// <param name="dataSetType">The type of the source dataset</param>
        /// <param name="numberOfFiles">Number of files written to sink</param>
        /// <param name="resourceId">The resource id of the dataset</param>
        /// <param name="source">The sub-step that is the source of
        /// data</param>
        /// <param name="totalBytes">Total size (in bytes) read from the
        /// source</param>
        public DataMovementPipelineSubstep(int? durationMs = default(int?), System.DateTime? endTime = default(System.DateTime?), string errorMessage = default(string), string executionStatus = default(string), string pipelineSubstepId = default(string), System.DateTime? startTime = default(System.DateTime?), string dataMovementExecutionStage = default(string), string dataSetCategory = default(string), string dataSetName = default(string), string dataSetType = default(string), long? numberOfFiles = default(long?), string resourceId = default(string), SubstepReference source = default(SubstepReference), long? totalBytes = default(long?))
            : base(durationMs, endTime, errorMessage, executionStatus, pipelineSubstepId, startTime)
        {
            DataMovementExecutionStage = dataMovementExecutionStage;
            DataSetCategory = dataSetCategory;
            DataSetName = dataSetName;
            DataSetType = dataSetType;
            NumberOfFiles = numberOfFiles;
            ResourceId = resourceId;
            Source = source;
            TotalBytes = totalBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the stage of data movement. Possible values include: 'Input',
        /// 'Output'
        /// </summary>
        [JsonProperty(PropertyName = "dataMovementExecutionStage")]
        public string DataMovementExecutionStage { get; private set; }

        /// <summary>
        /// Gets the category of the source dataset
        /// </summary>
        [JsonProperty(PropertyName = "dataSetCategory")]
        public string DataSetCategory { get; private set; }

        /// <summary>
        /// Gets the name of the source dataset
        /// </summary>
        [JsonProperty(PropertyName = "dataSetName")]
        public string DataSetName { get; private set; }

        /// <summary>
        /// Gets the type of the source dataset
        /// </summary>
        [JsonProperty(PropertyName = "dataSetType")]
        public string DataSetType { get; private set; }

        /// <summary>
        /// Gets number of files written to sink
        /// </summary>
        [JsonProperty(PropertyName = "numberOfFiles")]
        public long? NumberOfFiles { get; private set; }

        /// <summary>
        /// Gets the resource id of the dataset
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; private set; }

        /// <summary>
        /// Gets or sets the sub-step that is the source of data
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public SubstepReference Source { get; set; }

        /// <summary>
        /// Gets total size (in bytes) read from the source
        /// </summary>
        [JsonProperty(PropertyName = "totalBytes")]
        public long? TotalBytes { get; private set; }

    }
}
