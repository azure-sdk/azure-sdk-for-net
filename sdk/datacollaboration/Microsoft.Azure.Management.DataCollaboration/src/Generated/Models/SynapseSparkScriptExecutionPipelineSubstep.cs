// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A substep representing Synapse Spark script execution.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ScriptExecution")]
    public partial class SynapseSparkScriptExecutionPipelineSubstep : PipelineSubstep
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkScriptExecutionPipelineSubstep class.
        /// </summary>
        public SynapseSparkScriptExecutionPipelineSubstep()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkScriptExecutionPipelineSubstep class.
        /// </summary>
        /// <param name="durationMs">Substep run duration</param>
        /// <param name="endTime">End time of substep</param>
        /// <param name="errorMessage">Error message if any</param>
        /// <param name="executionStatus">Execution status e.g. Success,
        /// Failed, InProgress. Possible values include: 'Succeeded', 'Failed',
        /// 'InProgress', 'Preparing', 'Queued', 'Unknown', 'Cancelled',
        /// 'Canceling', 'Waiting', 'Incomplete'</param>
        /// <param name="pipelineSubstepId">Id of pipeline substep.</param>
        /// <param name="startTime">Start time of substep</param>
        /// <param name="executionTimeout">The upper boundary of script
        /// execution time</param>
        /// <param name="scriptExecutionInformation">Synapse Spark script
        /// execution information</param>
        /// <param name="sinkBindings">Sink Binding</param>
        /// <param name="sourceBindings">Source Binding</param>
        /// <param name="synapseSparkInformation">Information about the Synapse
        /// Spark</param>
        public SynapseSparkScriptExecutionPipelineSubstep(int? durationMs = default(int?), System.DateTime? endTime = default(System.DateTime?), string errorMessage = default(string), string executionStatus = default(string), string pipelineSubstepId = default(string), System.DateTime? startTime = default(System.DateTime?), string executionTimeout = default(string), SynapseSparkScriptExecutionInformation scriptExecutionInformation = default(SynapseSparkScriptExecutionInformation), IList<SynapseSparkScriptSinkBindingExecutionInformation> sinkBindings = default(IList<SynapseSparkScriptSinkBindingExecutionInformation>), IList<SynapseSparkScriptSourceBindingExecutionInformation> sourceBindings = default(IList<SynapseSparkScriptSourceBindingExecutionInformation>), SynapseSparkInformation synapseSparkInformation = default(SynapseSparkInformation))
            : base(durationMs, endTime, errorMessage, executionStatus, pipelineSubstepId, startTime)
        {
            ExecutionTimeout = executionTimeout;
            ScriptExecutionInformation = scriptExecutionInformation;
            SinkBindings = sinkBindings;
            SourceBindings = sourceBindings;
            SynapseSparkInformation = synapseSparkInformation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the upper boundary of script execution time
        /// </summary>
        [JsonProperty(PropertyName = "executionTimeout")]
        public string ExecutionTimeout { get; private set; }

        /// <summary>
        /// Gets or sets synapse Spark script execution information
        /// </summary>
        [JsonProperty(PropertyName = "scriptExecutionInformation")]
        public SynapseSparkScriptExecutionInformation ScriptExecutionInformation { get; set; }

        /// <summary>
        /// Gets or sets sink Binding
        /// </summary>
        [JsonProperty(PropertyName = "sinkBindings")]
        public IList<SynapseSparkScriptSinkBindingExecutionInformation> SinkBindings { get; set; }

        /// <summary>
        /// Gets or sets source Binding
        /// </summary>
        [JsonProperty(PropertyName = "sourceBindings")]
        public IList<SynapseSparkScriptSourceBindingExecutionInformation> SourceBindings { get; set; }

        /// <summary>
        /// Gets or sets information about the Synapse Spark
        /// </summary>
        [JsonProperty(PropertyName = "synapseSparkInformation")]
        public SynapseSparkInformation SynapseSparkInformation { get; set; }

    }
}
