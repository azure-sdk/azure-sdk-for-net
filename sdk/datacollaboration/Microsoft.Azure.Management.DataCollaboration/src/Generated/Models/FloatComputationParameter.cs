// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Computation parameter of type float
    /// </summary>
    [Newtonsoft.Json.JsonObject("Float")]
    public partial class FloatComputationParameter : ComputationParameter
    {
        /// <summary>
        /// Initializes a new instance of the FloatComputationParameter class.
        /// </summary>
        public FloatComputationParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FloatComputationParameter class.
        /// </summary>
        /// <param name="name">Parameter name as it appears in the
        /// computation</param>
        /// <param name="description">Parameter usage description</param>
        /// <param name="parameterId">Parameter identifier</param>
        /// <param name="defaultValue">Default parameter value</param>
        public FloatComputationParameter(string name, string description = default(string), string parameterId = default(string), double? defaultValue = default(double?))
            : base(name, description, parameterId)
        {
            DefaultValue = defaultValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets default parameter value
        /// </summary>
        [JsonProperty(PropertyName = "defaultValue")]
        public double? DefaultValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
