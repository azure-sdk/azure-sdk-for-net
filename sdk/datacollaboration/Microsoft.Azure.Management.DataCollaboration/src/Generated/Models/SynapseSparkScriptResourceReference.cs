// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ResourceReference used to only allow access if the resource is used
    /// within the specified Azure Synapse Spark script.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseSparkScript")]
    [Rest.Serialization.JsonTransformation]
    public partial class SynapseSparkScriptResourceReference : ResourceReference
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkScriptResourceReference class.
        /// </summary>
        public SynapseSparkScriptResourceReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkScriptResourceReference class.
        /// </summary>
        /// <param name="participantDetails">Participant Details of the
        /// resource</param>
        /// <param name="resourceId">Id of the azure resource</param>
        /// <param name="resourceName">Name of the azure resource</param>
        /// <param name="resourceType">Type of the azure resource</param>
        /// <param name="systemData">SystemData Info of resource</param>
        /// <param name="computationId">The unique identifier of the referenced
        /// computation</param>
        /// <param name="computationKind">Kind of the referenced computation.
        /// Possible values include: 'SynapseSpark',
        /// 'ContainerInstanceContainerGroup'</param>
        /// <param name="parameters">The list of computation parameters</param>
        /// <param name="purpose">Script purpose. Possible values include:
        /// 'Body', 'InputAdapter', 'OutputAdapter'</param>
        /// <param name="revision">The revision number of the computation being
        /// referenced.
        /// If omitted, the computation latest version will be
        /// referenced.</param>
        /// <param name="sinks">The list of parameters the computation can use
        /// as it's data sinks</param>
        /// <param name="sources">The list of parameters the computation can
        /// use as it's data sources</param>
        public SynapseSparkScriptResourceReference(ResourceReferenceParticipantDetails participantDetails = default(ResourceReferenceParticipantDetails), string resourceId = default(string), string resourceName = default(string), string resourceType = default(string), ResourceReferenceSystemData systemData = default(ResourceReferenceSystemData), string computationId = default(string), string computationKind = default(string), IList<ComputationParameter> parameters = default(IList<ComputationParameter>), string purpose = default(string), int? revision = default(int?), IList<string> sinks = default(IList<string>), IList<string> sources = default(IList<string>))
            : base(participantDetails, resourceId, resourceName, resourceType, systemData)
        {
            ComputationId = computationId;
            ComputationKind = computationKind;
            Parameters = parameters;
            Purpose = purpose;
            Revision = revision;
            Sinks = sinks;
            Sources = sources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the unique identifier of the referenced computation
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationId")]
        public string ComputationId { get; private set; }

        /// <summary>
        /// Gets kind of the referenced computation. Possible values include:
        /// 'SynapseSpark', 'ContainerInstanceContainerGroup'
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationKind")]
        public string ComputationKind { get; private set; }

        /// <summary>
        /// Gets the list of computation parameters
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<ComputationParameter> Parameters { get; private set; }

        /// <summary>
        /// Gets script purpose. Possible values include: 'Body',
        /// 'InputAdapter', 'OutputAdapter'
        /// </summary>
        [JsonProperty(PropertyName = "properties.purpose")]
        public string Purpose { get; private set; }

        /// <summary>
        /// Gets the revision number of the computation being referenced.
        /// If omitted, the computation latest version will be referenced.
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public int? Revision { get; private set; }

        /// <summary>
        /// Gets the list of parameters the computation can use as it's data
        /// sinks
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinks")]
        public IList<string> Sinks { get; private set; }

        /// <summary>
        /// Gets the list of parameters the computation can use as it's data
        /// sources
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<string> Sources { get; private set; }

    }
}
