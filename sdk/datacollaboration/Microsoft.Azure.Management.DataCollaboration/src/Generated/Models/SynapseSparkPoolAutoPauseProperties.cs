// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Spark pool auto-pausing properties
    /// </summary>
    public partial class SynapseSparkPoolAutoPauseProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkPoolAutoPauseProperties class.
        /// </summary>
        public SynapseSparkPoolAutoPauseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SynapseSparkPoolAutoPauseProperties class.
        /// </summary>
        /// <param name="delayInMinutes">Gets or sets number of minutes of idle
        /// time before the Big Data
        /// pool is automatically paused.</param>
        /// <param name="enabled">Gets or sets whether auto-pausing is enabled
        /// for the Big Data pool.</param>
        public SynapseSparkPoolAutoPauseProperties(int delayInMinutes, bool enabled)
        {
            DelayInMinutes = delayInMinutes;
            Enabled = enabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of minutes of idle time before the Big Data
        /// pool is automatically paused.
        /// </summary>
        [JsonProperty(PropertyName = "delayInMinutes")]
        public int DelayInMinutes { get; set; }

        /// <summary>
        /// Gets or sets whether auto-pausing is enabled for the Big Data pool.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
