// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Pipeline script parameter binding
    /// </summary>
    public partial class ScriptParameterBinding
    {
        /// <summary>
        /// Initializes a new instance of the ScriptParameterBinding class.
        /// </summary>
        public ScriptParameterBinding()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptParameterBinding class.
        /// </summary>
        /// <param name="pipelineParameterId">Pipeline Parameter
        /// identifier</param>
        /// <param name="scriptParameterId">Script parameter identifier</param>
        public ScriptParameterBinding(string pipelineParameterId, string scriptParameterId)
        {
            PipelineParameterId = pipelineParameterId;
            ScriptParameterId = scriptParameterId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pipeline Parameter identifier
        /// </summary>
        [JsonProperty(PropertyName = "pipelineParameterId")]
        public string PipelineParameterId { get; set; }

        /// <summary>
        /// Gets or sets script parameter identifier
        /// </summary>
        [JsonProperty(PropertyName = "scriptParameterId")]
        public string ScriptParameterId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PipelineParameterId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PipelineParameterId");
            }
            if (ScriptParameterId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptParameterId");
            }
        }
    }
}
