// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A type of Container Group based on Container Instance
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ContainerInstanceContainerGroup : Computation
    {
        /// <summary>
        /// Initializes a new instance of the ContainerInstanceContainerGroup
        /// class.
        /// </summary>
        public ContainerInstanceContainerGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerInstanceContainerGroup
        /// class.
        /// </summary>
        /// <param name="containers">The containers within the container
        /// group.</param>
        /// <param name="sinks">The list of parameters the computation can use
        /// as it's data sinks</param>
        /// <param name="sources">The list of parameters the computation can
        /// use as it's data sources</param>
        /// <param name="id">The resource id of the azure resource</param>
        /// <param name="name">Name of the azure resource</param>
        /// <param name="systemData">System Data of the Azure resource.</param>
        /// <param name="type">Type of the azure resource</param>
        /// <param name="computationId">Unique id for identifying a computation
        /// resource</param>
        /// <param name="imageRegistries">The image registry by which the
        /// container
        /// group is created from.</param>
        /// <param name="parameters">The list of overridable computation
        /// parameters</param>
        /// <param name="provisioningState">Provisioning state of the
        /// computation. Possible values include: 'Succeeded', 'Creating',
        /// 'Updating', 'Deleting', 'Moving', 'Failed', 'Canceled'</param>
        /// <param name="revision">Latest computation revision</param>
        /// <param name="volumes">The volumes used by the container
        /// group</param>
        public ContainerInstanceContainerGroup(IList<Container> containers, IList<string> sinks, IList<string> sources, string id = default(string), string name = default(string), SystemData systemData = default(SystemData), string type = default(string), string computationId = default(string), IList<ImageRegistry> imageRegistries = default(IList<ImageRegistry>), IList<ComputationParameter> parameters = default(IList<ComputationParameter>), string provisioningState = default(string), int? revision = default(int?), IList<Volume> volumes = default(IList<Volume>))
            : base(id, name, systemData, type)
        {
            ComputationId = computationId;
            Containers = containers;
            ImageRegistries = imageRegistries;
            Parameters = parameters;
            ProvisioningState = provisioningState;
            Revision = revision;
            Sinks = sinks;
            Sources = sources;
            Volumes = volumes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique id for identifying a computation resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.computationId")]
        public string ComputationId { get; private set; }

        /// <summary>
        /// Gets or sets the containers within the container group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.containers")]
        public IList<Container> Containers { get; set; }

        /// <summary>
        /// Gets or sets the image registry by which the container
        /// group is created from.
        /// </summary>
        [JsonProperty(PropertyName = "properties.imageRegistries")]
        public IList<ImageRegistry> ImageRegistries { get; set; }

        /// <summary>
        /// Gets or sets the list of overridable computation parameters
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public IList<ComputationParameter> Parameters { get; set; }

        /// <summary>
        /// Gets provisioning state of the computation. Possible values
        /// include: 'Succeeded', 'Creating', 'Updating', 'Deleting', 'Moving',
        /// 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets latest computation revision
        /// </summary>
        [JsonProperty(PropertyName = "properties.revision")]
        public int? Revision { get; private set; }

        /// <summary>
        /// Gets or sets the list of parameters the computation can use as it's
        /// data sinks
        /// </summary>
        [JsonProperty(PropertyName = "properties.sinks")]
        public IList<string> Sinks { get; set; }

        /// <summary>
        /// Gets or sets the list of parameters the computation can use as it's
        /// data sources
        /// </summary>
        [JsonProperty(PropertyName = "properties.sources")]
        public IList<string> Sources { get; set; }

        /// <summary>
        /// Gets or sets the volumes used by the container group
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumes")]
        public IList<Volume> Volumes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Containers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Containers");
            }
            if (Sinks == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sinks");
            }
            if (Sources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sources");
            }
            if (Containers != null)
            {
                foreach (var element in Containers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Parameters != null)
            {
                foreach (var element1 in Parameters)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
