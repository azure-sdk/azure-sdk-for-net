// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// base container group property bag
    /// </summary>
    public partial class Container
    {
        /// <summary>
        /// Initializes a new instance of the Container class.
        /// </summary>
        public Container()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Container class.
        /// </summary>
        /// <param name="image">The name of the image used to create the
        /// container
        /// instance.</param>
        /// <param name="name">The user-provided name of the container
        /// instance.</param>
        /// <param name="resources">The resource requirements of the container
        /// instance.</param>
        /// <param name="command">The commands to execute within the container
        /// instance
        /// in exec form.</param>
        /// <param name="environmentVariables">The environment variables to set
        /// in the container
        /// instance.</param>
        /// <param name="parameterEnvironmentVariableBindings">The list of
        /// environment variables the computation can use as its computation
        /// parameter</param>
        /// <param name="ports">The exposed ports on the container
        /// instance.</param>
        /// <param name="sinkMounts">The list of parameters the computation can
        /// use as its data sinks</param>
        /// <param name="sourceMounts">The list of parameters the computation
        /// can use as its data sources</param>
        /// <param name="volumeMounts">The list of emptyDir volumes bound to
        /// the container.</param>
        public Container(Image image, string name, ResourceRequirements resources, IList<string> command = default(IList<string>), IList<EnvironmentVariable> environmentVariables = default(IList<EnvironmentVariable>), IList<ParameterEnvironmentVariableBinding> parameterEnvironmentVariableBindings = default(IList<ParameterEnvironmentVariableBinding>), IList<ContainerPort> ports = default(IList<ContainerPort>), IList<VolumeMount> sinkMounts = default(IList<VolumeMount>), IList<VolumeMount> sourceMounts = default(IList<VolumeMount>), IList<VolumeMount> volumeMounts = default(IList<VolumeMount>))
        {
            Command = command;
            EnvironmentVariables = environmentVariables;
            Image = image;
            Name = name;
            ParameterEnvironmentVariableBindings = parameterEnvironmentVariableBindings;
            Ports = ports;
            Resources = resources;
            SinkMounts = sinkMounts;
            SourceMounts = sourceMounts;
            VolumeMounts = volumeMounts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the commands to execute within the container instance
        /// in exec form.
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public IList<string> Command { get; set; }

        /// <summary>
        /// Gets or sets the environment variables to set in the container
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "environmentVariables")]
        public IList<EnvironmentVariable> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets or sets the name of the image used to create the container
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public Image Image { get; set; }

        /// <summary>
        /// Gets or sets the user-provided name of the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the list of environment variables the computation can
        /// use as its computation parameter
        /// </summary>
        [JsonProperty(PropertyName = "parameterEnvironmentVariableBindings")]
        public IList<ParameterEnvironmentVariableBinding> ParameterEnvironmentVariableBindings { get; set; }

        /// <summary>
        /// Gets or sets the exposed ports on the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "ports")]
        public IList<ContainerPort> Ports { get; set; }

        /// <summary>
        /// Gets or sets the resource requirements of the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public ResourceRequirements Resources { get; set; }

        /// <summary>
        /// Gets or sets the list of parameters the computation can use as its
        /// data sinks
        /// </summary>
        [JsonProperty(PropertyName = "sinkMounts")]
        public IList<VolumeMount> SinkMounts { get; set; }

        /// <summary>
        /// Gets or sets the list of parameters the computation can use as its
        /// data sources
        /// </summary>
        [JsonProperty(PropertyName = "sourceMounts")]
        public IList<VolumeMount> SourceMounts { get; set; }

        /// <summary>
        /// Gets or sets the list of emptyDir volumes bound to the container.
        /// </summary>
        [JsonProperty(PropertyName = "volumeMounts")]
        public IList<VolumeMount> VolumeMounts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Image == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Image");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Resources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Resources");
            }
            if (Image != null)
            {
                Image.Validate();
            }
            if (Resources != null)
            {
                Resources.Validate();
            }
        }
    }
}
