// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProposalsOperations.
    /// </summary>
    public static partial class ProposalsOperationsExtensions
    {
            /// <summary>
            /// List Proposals in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Proposals in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<Proposal> ListByWorkspace(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Proposals in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Proposals in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Proposal>> ListByWorkspaceAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Get a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            public static Proposal Get(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, proposalName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Get a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> GetAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposal'>
            /// The new proposal information.
            /// </param>
            public static Proposal CreateOrUpdate(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, Proposal proposal)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, proposalName, proposal).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposal'>
            /// The new proposal information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> CreateOrUpdateAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, Proposal proposal, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, proposal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            public static OperationResponse Delete(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, proposalName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke an Active Proposal in a Workspace
            /// </summary>
            /// <remarks>
            /// Revoke an Active Proposal in a Workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            public static Proposal Revoke(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName)
            {
                return operations.RevokeAsync(resourceGroupName, workspaceName, proposalName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke an Active Proposal in a Workspace
            /// </summary>
            /// <remarks>
            /// Revoke an Active Proposal in a Workspace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> RevokeAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sign a Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Sign a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposalSignature'>
            /// The proposal signature information.
            /// </param>
            public static Proposal Sign(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, ProposalSignature proposalSignature)
            {
                return operations.SignAsync(resourceGroupName, workspaceName, proposalName, proposalSignature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sign a Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Sign a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposalSignature'>
            /// The proposal signature information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> SignAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, ProposalSignature proposalSignature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, proposalSignature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposal'>
            /// The new proposal information.
            /// </param>
            public static Proposal BeginCreateOrUpdate(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, Proposal proposal)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, proposalName, proposal).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Create or update a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposal'>
            /// The new proposal information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> BeginCreateOrUpdateAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, Proposal proposal, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, proposal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            public static OperationResponse BeginDelete(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, proposalName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Proposal in a Workspace.
            /// </summary>
            /// <remarks>
            /// Delete a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sign a Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Sign a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposalSignature'>
            /// The proposal signature information.
            /// </param>
            public static Proposal BeginSign(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, ProposalSignature proposalSignature)
            {
                return operations.BeginSignAsync(resourceGroupName, workspaceName, proposalName, proposalSignature).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sign a Proposal to an existing Workspace.
            /// </summary>
            /// <remarks>
            /// Sign a Proposal in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='proposalSignature'>
            /// The proposal signature information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Proposal> BeginSignAsync(this IProposalsOperations operations, string resourceGroupName, string workspaceName, string proposalName, ProposalSignature proposalSignature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSignWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, proposalSignature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Proposals in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Proposals in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Proposal> ListByWorkspaceNext(this IProposalsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Proposals in a Workspace.
            /// </summary>
            /// <remarks>
            /// List Proposals in a Workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Proposal>> ListByWorkspaceNextAsync(this IProposalsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
