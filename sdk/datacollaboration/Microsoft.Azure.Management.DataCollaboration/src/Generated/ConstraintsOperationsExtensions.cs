// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConstraintsOperations.
    /// </summary>
    public static partial class ConstraintsOperationsExtensions
    {
            /// <summary>
            /// List constraints in an entitlement.
            /// </summary>
            /// <remarks>
            /// List constraints in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            public static IPage<Constraint> ListByEntitlement(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string skipToken = default(string), string filter = default(string), string orderby = default(string))
            {
                return operations.ListByEntitlementAsync(resourceGroupName, workspaceName, proposalName, entitlementName, skipToken, filter, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List constraints in an entitlement.
            /// </summary>
            /// <remarks>
            /// List constraints in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='filter'>
            /// Filters the results using OData syntax.
            /// </param>
            /// <param name='orderby'>
            /// Sorts the results using OData syntax.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Constraint>> ListByEntitlementAsync(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string skipToken = default(string), string filter = default(string), string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByEntitlementWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, skipToken, filter, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a constraint in an entitlement.
            /// </summary>
            /// <remarks>
            /// Get a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            public static Constraint Get(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a constraint in an entitlement.
            /// </summary>
            /// <remarks>
            /// Get a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Constraint> GetAsync(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new constraint to an entitlement.
            /// </summary>
            /// <remarks>
            /// Create or update a constraint in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            /// <param name='constraint'>
            /// The new constraint information.
            /// </param>
            public static Constraint CreateOrUpdate(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName, Constraint constraint)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName, constraint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new constraint to an entitlement.
            /// </summary>
            /// <remarks>
            /// Create or update a constraint in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            /// <param name='constraint'>
            /// The new constraint information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Constraint> CreateOrUpdateAsync(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName, Constraint constraint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName, constraint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a constraint from an entitlement.
            /// </summary>
            /// <remarks>
            /// Delete a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            public static OperationResponse Delete(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a constraint from an entitlement.
            /// </summary>
            /// <remarks>
            /// Delete a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a constraint from an entitlement.
            /// </summary>
            /// <remarks>
            /// Delete a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            public static OperationResponse BeginDelete(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a constraint from an entitlement.
            /// </summary>
            /// <remarks>
            /// Delete a constraint from an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='proposalName'>
            /// The name of the proposal.
            /// </param>
            /// <param name='entitlementName'>
            /// The name of the entitlement.
            /// </param>
            /// <param name='constraintName'>
            /// The name of the constraint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IConstraintsOperations operations, string resourceGroupName, string workspaceName, string proposalName, string entitlementName, string constraintName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, proposalName, entitlementName, constraintName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List constraints in an entitlement.
            /// </summary>
            /// <remarks>
            /// List constraints in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Constraint> ListByEntitlementNext(this IConstraintsOperations operations, string nextPageLink)
            {
                return operations.ListByEntitlementNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List constraints in an entitlement.
            /// </summary>
            /// <remarks>
            /// List constraints in an entitlement
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Constraint>> ListByEntitlementNextAsync(this IConstraintsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByEntitlementNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
