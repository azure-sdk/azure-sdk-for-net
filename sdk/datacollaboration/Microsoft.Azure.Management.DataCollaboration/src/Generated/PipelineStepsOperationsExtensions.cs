// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PipelineStepsOperations.
    /// </summary>
    public static partial class PipelineStepsOperationsExtensions
    {
            /// <summary>
            /// List PipelineSteps of a Pipeline.
            /// </summary>
            /// <remarks>
            /// List PipelineSteps of a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            public static IPage<PipelineStep> ListByPipeline(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string skipToken = default(string))
            {
                return operations.ListByPipelineAsync(resourceGroupName, workspaceName, pipelineName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List PipelineSteps of a Pipeline.
            /// </summary>
            /// <remarks>
            /// List PipelineSteps of a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PipelineStep>> ListByPipelineAsync(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Get a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            public static PipelineStep Get(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Get a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineStep> GetAsync(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new PipelineStep to an existing Pipeline.
            /// </summary>
            /// <remarks>
            /// Create or update a PipelineStep
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            /// <param name='pipelineStep'>
            /// The new pipeline information.
            /// </param>
            public static PipelineStep CreateOrUpdate(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName, PipelineStep pipelineStep)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName, pipelineStep).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new PipelineStep to an existing Pipeline.
            /// </summary>
            /// <remarks>
            /// Create or update a PipelineStep
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            /// <param name='pipelineStep'>
            /// The new pipeline information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineStep> CreateOrUpdateAsync(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName, PipelineStep pipelineStep, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName, pipelineStep, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Delete a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            public static OperationResponse Delete(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Delete a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Delete a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            public static OperationResponse BeginDelete(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a PipelineStep in a Pipeline.
            /// </summary>
            /// <remarks>
            /// Delete a PipelineStep in a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='pipelineName'>
            /// The name of the pipeline.
            /// </param>
            /// <param name='pipelineStepName'>
            /// The name of the pipeline step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IPipelineStepsOperations operations, string resourceGroupName, string workspaceName, string pipelineName, string pipelineStepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, pipelineName, pipelineStepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List PipelineSteps of a Pipeline.
            /// </summary>
            /// <remarks>
            /// List PipelineSteps of a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PipelineStep> ListByPipelineNext(this IPipelineStepsOperations operations, string nextPageLink)
            {
                return operations.ListByPipelineNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List PipelineSteps of a Pipeline.
            /// </summary>
            /// <remarks>
            /// List PipelineSteps of a Pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PipelineStep>> ListByPipelineNextAsync(this IPipelineStepsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPipelineNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
