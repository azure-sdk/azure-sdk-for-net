// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataCollaboration
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataSetsOperations.
    /// </summary>
    public static partial class DataSetsOperationsExtensions
    {
            /// <summary>
            /// List DataSets in a DataAsset.
            /// </summary>
            /// <remarks>
            /// List DataSets in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            public static IPage<DataSet> ListByDataAsset(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string skipToken = default(string))
            {
                return operations.ListByDataAssetAsync(resourceGroupName, workspaceName, dataAssetName, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List DataSets in a DataAsset.
            /// </summary>
            /// <remarks>
            /// List DataSets in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='skipToken'>
            /// continuation token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSet>> ListByDataAssetAsync(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataAssetWithHttpMessagesAsync(resourceGroupName, workspaceName, dataAssetName, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Get a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            public static DataSet Get(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Get a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSet> GetAsync(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new DataSet to an existing DataAsset
            /// </summary>
            /// <remarks>
            /// Create or update a DataSet
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            /// <param name='dataSet'>
            /// The new DataSet information.
            /// </param>
            public static DataSet CreateOrUpdate(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory, DataSet dataSet)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory, dataSet).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new DataSet to an existing DataAsset
            /// </summary>
            /// <remarks>
            /// Create or update a DataSet
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            /// <param name='dataSet'>
            /// The new DataSet information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSet> CreateOrUpdateAsync(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory, DataSet dataSet, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory, dataSet, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            public static OperationResponse Delete(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> DeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            public static OperationResponse BeginDelete(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory)
            {
                return operations.BeginDeleteAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a DataSet in a DataAsset.
            /// </summary>
            /// <remarks>
            /// Delete a DataSet in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='dataAssetName'>
            /// The name of the DataAsset
            /// </param>
            /// <param name='dataSetCategory'>
            /// The usage category name of the DataSet. Possible values include:
            /// 'Production', 'Sample'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResponse> BeginDeleteAsync(this IDataSetsOperations operations, string resourceGroupName, string workspaceName, string dataAssetName, string dataSetCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, dataAssetName, dataSetCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List DataSets in a DataAsset.
            /// </summary>
            /// <remarks>
            /// List DataSets in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataSet> ListByDataAssetNext(this IDataSetsOperations operations, string nextPageLink)
            {
                return operations.ListByDataAssetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List DataSets in a DataAsset.
            /// </summary>
            /// <remarks>
            /// List DataSets in a DataAsset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSet>> ListByDataAssetNextAsync(this IDataSetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataAssetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
