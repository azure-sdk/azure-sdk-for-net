// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SecurityInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SummariesOperations.
    /// </summary>
    public static partial class SummariesOperationsExtensions
    {
            /// <summary>
            /// Gets all summaries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static IPage<Summary> List(this ISummariesOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all summaries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Summary>> ListAsync(this ISummariesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a summary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            public static Summary Get(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, summaryId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a summary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Summary> GetAsync(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, summaryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a summary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            public static void Delete(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, summaryId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a summary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, summaryId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a Summary and its Summary Items (bulk creation). To create
            /// a Summary and its Items, we should call this endpoint with rawContent
            /// property. The rawContent is mainly used for small summary (content size
            /// below 3.8 MB). The status of processing such large file can be polled
            /// through the URL returned in Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='summary'>
            /// The summary
            /// </param>
            public static Summary CreateOrUpdate(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, Summary summary)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, summaryId, summary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Summary and its Summary Items (bulk creation). To create
            /// a Summary and its Items, we should call this endpoint with rawContent
            /// property. The rawContent is mainly used for small summary (content size
            /// below 3.8 MB). The status of processing such large file can be polled
            /// through the URL returned in Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='summary'>
            /// The summary
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Summary> CreateOrUpdateAsync(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, Summary summary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, summaryId, summary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Summary and its Summary Items (bulk creation). To create
            /// a Summary and its Items, we should call this endpoint with rawContent
            /// property. The rawContent is mainly used for small summary (content size
            /// below 3.8 MB). The status of processing such large file can be polled
            /// through the URL returned in Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='summary'>
            /// The summary
            /// </param>
            public static Summary BeginCreateOrUpdate(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, Summary summary)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, summaryId, summary).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Summary and its Summary Items (bulk creation). To create
            /// a Summary and its Items, we should call this endpoint with rawContent
            /// property. The rawContent is mainly used for small summary (content size
            /// below 3.8 MB). The status of processing such large file can be polled
            /// through the URL returned in Azure-AsyncOperation header.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='summaryId'>
            /// Summary ID
            /// </param>
            /// <param name='summary'>
            /// The summary
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Summary> BeginCreateOrUpdateAsync(this ISummariesOperations operations, string resourceGroupName, string workspaceName, string summaryId, Summary summary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, summaryId, summary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all summaries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Summary> ListNext(this ISummariesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all summaries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Summary>> ListNextAsync(this ISummariesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
