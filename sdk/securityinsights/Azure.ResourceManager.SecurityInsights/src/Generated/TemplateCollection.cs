// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="TemplateResource" /> and their operations.
    /// Each <see cref="TemplateResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="TemplateCollection" /> instance call the GetTemplates method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class TemplateCollection : ArmCollection, IEnumerable<TemplateResource>, IAsyncEnumerable<TemplateResource>
    {
        private readonly ClientDiagnostics _templateContentTemplatesClientDiagnostics;
        private readonly ContentTemplatesRestOperations _templateContentTemplatesRestClient;
        private readonly string _sentinelWorkspaceName;

        /// <summary> Initializes a new instance of the <see cref="TemplateCollection"/> class for mocking. </summary>
        protected TemplateCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TemplateCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="sentinelWorkspaceName"> The name of the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentinelWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentinelWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal TemplateCollection(ArmClient client, ResourceIdentifier id, string sentinelWorkspaceName) : base(client, id)
        {
            _sentinelWorkspaceName = sentinelWorkspaceName;
            _templateContentTemplatesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", TemplateResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(TemplateResource.ResourceType, out string templateContentTemplatesApiVersion);
            _templateContentTemplatesRestClient = new ContentTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, templateContentTemplatesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a template byt its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates/{templateId}
        /// Operation Id: ContentTemplates_Get
        /// </summary>
        /// <param name="templateId"> template Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateId"/> is null. </exception>
        public virtual async Task<Response<TemplateResource>> GetAsync(string templateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(templateId, nameof(templateId));

            using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.Get");
            scope.Start();
            try
            {
                var response = await _templateContentTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, templateId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a template byt its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates/{templateId}
        /// Operation Id: ContentTemplates_Get
        /// </summary>
        /// <param name="templateId"> template Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateId"/> is null. </exception>
        public virtual Response<TemplateResource> Get(string templateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(templateId, nameof(templateId));

            using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.Get");
            scope.Start();
            try
            {
                var response = _templateContentTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, templateId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TemplateResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all installed templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates
        /// Operation Id: ContentTemplates_List
        /// </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skip"> Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TemplateResource> GetAllAsync(string filter = null, string orderby = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<TemplateResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _templateContentTemplatesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TemplateResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _templateContentTemplatesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all installed templates.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates
        /// Operation Id: ContentTemplates_List
        /// </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skip"> Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TemplateResource> GetAll(string filter = null, string orderby = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<TemplateResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _templateContentTemplatesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TemplateResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _templateContentTemplatesRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates/{templateId}
        /// Operation Id: ContentTemplates_Get
        /// </summary>
        /// <param name="templateId"> template Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string templateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(templateId, nameof(templateId));

            using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = await _templateContentTemplatesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, templateId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentTemplates/{templateId}
        /// Operation Id: ContentTemplates_Get
        /// </summary>
        /// <param name="templateId"> template Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="templateId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="templateId"/> is null. </exception>
        public virtual Response<bool> Exists(string templateId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(templateId, nameof(templateId));

            using var scope = _templateContentTemplatesClientDiagnostics.CreateScope("TemplateCollection.Exists");
            scope.Start();
            try
            {
                var response = _templateContentTemplatesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, templateId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<TemplateResource> IEnumerable<TemplateResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<TemplateResource> IAsyncEnumerable<TemplateResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
