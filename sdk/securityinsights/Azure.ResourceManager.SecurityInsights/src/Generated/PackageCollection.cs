// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="PackageResource" /> and their operations.
    /// Each <see cref="PackageResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="PackageCollection" /> instance call the GetPackages method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class PackageCollection : ArmCollection, IEnumerable<PackageResource>, IAsyncEnumerable<PackageResource>
    {
        private readonly ClientDiagnostics _packageContentPackagesClientDiagnostics;
        private readonly ContentPackagesRestOperations _packageContentPackagesRestClient;
        private readonly string _sentinelWorkspaceName;

        /// <summary> Initializes a new instance of the <see cref="PackageCollection"/> class for mocking. </summary>
        protected PackageCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PackageCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="sentinelWorkspaceName"> The name of the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sentinelWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sentinelWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal PackageCollection(ArmClient client, ResourceIdentifier id, string sentinelWorkspaceName) : base(client, id)
        {
            _sentinelWorkspaceName = sentinelWorkspaceName;
            _packageContentPackagesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityInsights", PackageResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PackageResource.ResourceType, out string packageContentPackagesApiVersion);
            _packageContentPackagesRestClient = new ContentPackagesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, packageContentPackagesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a package byt its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}
        /// Operation Id: ContentPackages_Get
        /// </summary>
        /// <param name="packageId"> package Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageId"/> is null. </exception>
        public virtual async Task<Response<PackageResource>> GetAsync(string packageId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageId, nameof(packageId));

            using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.Get");
            scope.Start();
            try
            {
                var response = await _packageContentPackagesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, packageId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PackageResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a package byt its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}
        /// Operation Id: ContentPackages_Get
        /// </summary>
        /// <param name="packageId"> package Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageId"/> is null. </exception>
        public virtual Response<PackageResource> Get(string packageId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageId, nameof(packageId));

            using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.Get");
            scope.Start();
            try
            {
                var response = _packageContentPackagesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, packageId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PackageResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all available packages.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages
        /// Operation Id: ContentPackages_List
        /// </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skip"> Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PackageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PackageResource> GetAllAsync(string filter = null, string orderby = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PackageResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _packageContentPackagesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PackageResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _packageContentPackagesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all available packages.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages
        /// Operation Id: ContentPackages_List
        /// </summary>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skip"> Used to skip n elements in the OData query (offset). Returns a nextLink to the next page of results if there are any left. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PackageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PackageResource> GetAll(string filter = null, string orderby = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<PackageResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _packageContentPackagesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PackageResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _packageContentPackagesRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, filter, orderby, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}
        /// Operation Id: ContentPackages_Get
        /// </summary>
        /// <param name="packageId"> package Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string packageId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageId, nameof(packageId));

            using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.Exists");
            scope.Start();
            try
            {
                var response = await _packageContentPackagesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, packageId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{sentinelWorkspaceName}/providers/Microsoft.SecurityInsights/contentPackages/{packageId}
        /// Operation Id: ContentPackages_Get
        /// </summary>
        /// <param name="packageId"> package Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageId"/> is null. </exception>
        public virtual Response<bool> Exists(string packageId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageId, nameof(packageId));

            using var scope = _packageContentPackagesClientDiagnostics.CreateScope("PackageCollection.Exists");
            scope.Start();
            try
            {
                var response = _packageContentPackagesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _sentinelWorkspaceName, packageId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PackageResource> IEnumerable<PackageResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PackageResource> IAsyncEnumerable<PackageResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
