// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityInsights.Models;

namespace Azure.ResourceManager.SecurityInsights
{
    public partial class PackageData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("etag");
                writer.WriteStringValue(ETag.Value.ToString());
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(PackageId))
            {
                writer.WritePropertyName("packageId");
                writer.WriteStringValue(PackageId);
            }
            if (Optional.IsDefined(PackageKind))
            {
                writer.WritePropertyName("packageKind");
                writer.WriteStringValue(PackageKind.Value.ToString());
            }
            if (Optional.IsDefined(InstalledVersion))
            {
                writer.WritePropertyName("installedVersion");
                writer.WriteStringValue(InstalledVersion);
            }
            if (Optional.IsDefined(IsNew))
            {
                writer.WritePropertyName("isNew");
                writer.WriteStringValue(IsNew.Value.ToString());
            }
            if (Optional.IsDefined(IsPreview))
            {
                writer.WritePropertyName("isPreview");
                writer.WriteStringValue(IsPreview.Value.ToString());
            }
            if (Optional.IsDefined(IsFeatured))
            {
                writer.WritePropertyName("isFeatured");
                writer.WriteStringValue(IsFeatured.Value.ToString());
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteObjectValue(Source);
            }
            if (Optional.IsDefined(Author))
            {
                writer.WritePropertyName("author");
                writer.WriteObjectValue(Author);
            }
            if (Optional.IsDefined(Support))
            {
                writer.WritePropertyName("support");
                writer.WriteObjectValue(Support);
            }
            if (Optional.IsDefined(Dependencies))
            {
                writer.WritePropertyName("dependencies");
                writer.WriteObjectValue(Dependencies);
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers");
                writer.WriteStartArray();
                foreach (var item in Providers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FirstPublishOn))
            {
                writer.WritePropertyName("firstPublishDate");
                writer.WriteStringValue(FirstPublishOn.Value, "D");
            }
            if (Optional.IsDefined(LastPublishOn))
            {
                writer.WritePropertyName("lastPublishDate");
                writer.WriteStringValue(LastPublishOn.Value, "D");
            }
            if (Optional.IsDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteObjectValue(Categories);
            }
            if (Optional.IsCollectionDefined(ThreatAnalysisTactics))
            {
                writer.WritePropertyName("threatAnalysisTactics");
                writer.WriteStartArray();
                foreach (var item in ThreatAnalysisTactics)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ThreatAnalyticsTechniques))
            {
                writer.WritePropertyName("threatAnalyticsTechniques");
                writer.WriteStartArray();
                foreach (var item in ThreatAnalyticsTechniques)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Icon))
            {
                writer.WritePropertyName("icon");
                writer.WriteStringValue(Icon);
            }
            if (Optional.IsDefined(PackageItems))
            {
                writer.WritePropertyName("packageItems");
                writer.WriteObjectValue(PackageItems);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static PackageData DeserializePackageData(JsonElement element)
        {
            Optional<ETag> etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> packageId = default;
            Optional<PackageKind> packageKind = default;
            Optional<string> installedVersion = default;
            Optional<Flag> isNew = default;
            Optional<Flag> isPreview = default;
            Optional<Flag> isFeatured = default;
            Optional<string> version = default;
            Optional<string> displayName = default;
            Optional<string> description = default;
            Optional<ContentMetadataSource> source = default;
            Optional<ContentMetadataAuthor> author = default;
            Optional<ContentMetadataSupport> support = default;
            Optional<ContentMetadataDependencies> dependencies = default;
            Optional<IList<string>> providers = default;
            Optional<DateTimeOffset> firstPublishDate = default;
            Optional<DateTimeOffset> lastPublishDate = default;
            Optional<ContentMetadataCategories> categories = default;
            Optional<IList<string>> threatAnalysisTactics = default;
            Optional<IList<string>> threatAnalyticsTechniques = default;
            Optional<string> icon = default;
            Optional<PackagePropertiesPackageItems> packageItems = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("packageId"))
                        {
                            packageId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("packageKind"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            packageKind = new PackageKind(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("installedVersion"))
                        {
                            installedVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isNew"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isNew = new Flag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isPreview"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isPreview = new Flag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isFeatured"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isFeatured = new Flag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("source"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            source = ContentMetadataSource.DeserializeContentMetadataSource(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("author"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            author = ContentMetadataAuthor.DeserializeContentMetadataAuthor(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("support"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            support = ContentMetadataSupport.DeserializeContentMetadataSupport(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("dependencies"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            dependencies = ContentMetadataDependencies.DeserializeContentMetadataDependencies(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("providers"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            providers = array;
                            continue;
                        }
                        if (property0.NameEquals("firstPublishDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            firstPublishDate = property0.Value.GetDateTimeOffset("D");
                            continue;
                        }
                        if (property0.NameEquals("lastPublishDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastPublishDate = property0.Value.GetDateTimeOffset("D");
                            continue;
                        }
                        if (property0.NameEquals("categories"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            categories = ContentMetadataCategories.DeserializeContentMetadataCategories(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("threatAnalysisTactics"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threatAnalysisTactics = array;
                            continue;
                        }
                        if (property0.NameEquals("threatAnalyticsTechniques"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            threatAnalyticsTechniques = array;
                            continue;
                        }
                        if (property0.NameEquals("icon"))
                        {
                            icon = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("packageItems"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            packageItems = PackagePropertiesPackageItems.DeserializePackagePropertiesPackageItems(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new PackageData(id, name, type, systemData.Value, packageId.Value, Optional.ToNullable(packageKind), installedVersion.Value, Optional.ToNullable(isNew), Optional.ToNullable(isPreview), Optional.ToNullable(isFeatured), version.Value, displayName.Value, description.Value, source.Value, author.Value, support.Value, dependencies.Value, Optional.ToList(providers), Optional.ToNullable(firstPublishDate), Optional.ToNullable(lastPublishDate), categories.Value, Optional.ToList(threatAnalysisTactics), Optional.ToList(threatAnalyticsTechniques), icon.Value, packageItems.Value, Optional.ToNullable(etag));
        }
    }
}
