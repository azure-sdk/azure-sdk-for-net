// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class TemplateProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("contentId");
            writer.WriteStringValue(ContentId);
            writer.WritePropertyName("displayName");
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("contentKind");
            writer.WriteStringValue(ContentKind.ToString());
            writer.WritePropertyName("version");
            writer.WriteStringValue(Version);
            writer.WritePropertyName("source");
            writer.WriteObjectValue(Source);
            if (Optional.IsDefined(Author))
            {
                writer.WritePropertyName("author");
                writer.WriteObjectValue(Author);
            }
            if (Optional.IsDefined(Support))
            {
                writer.WritePropertyName("support");
                writer.WriteObjectValue(Support);
            }
            if (Optional.IsCollectionDefined(Providers))
            {
                writer.WritePropertyName("providers");
                writer.WriteStartArray();
                foreach (var item in Providers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Categories))
            {
                writer.WritePropertyName("categories");
                writer.WriteObjectValue(Categories);
            }
            if (Optional.IsDefined(FirstPublishOn))
            {
                writer.WritePropertyName("firstPublishDate");
                writer.WriteStringValue(FirstPublishOn.Value, "D");
            }
            if (Optional.IsDefined(LastPublishOn))
            {
                writer.WritePropertyName("lastPublishDate");
                writer.WriteStringValue(LastPublishOn.Value, "D");
            }
            if (Optional.IsCollectionDefined(ThreatAnalysisTactics))
            {
                writer.WritePropertyName("threatAnalysisTactics");
                writer.WriteStartArray();
                foreach (var item in ThreatAnalysisTactics)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ThreatAnalysisTechniques))
            {
                writer.WritePropertyName("threatAnalysisTechniques");
                writer.WriteStartArray();
                foreach (var item in ThreatAnalysisTechniques)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PreviewImages))
            {
                writer.WritePropertyName("previewImages");
                writer.WriteStartArray();
                foreach (var item in PreviewImages)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PreviewImagesDark))
            {
                writer.WritePropertyName("previewImagesDark");
                writer.WriteStartArray();
                foreach (var item in PreviewImagesDark)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Icon))
            {
                writer.WritePropertyName("icon");
                writer.WriteStringValue(Icon);
            }
            if (Optional.IsCollectionDefined(DependantTemplates))
            {
                writer.WritePropertyName("dependantTemplates");
                writer.WriteStartArray();
                foreach (var item in DependantTemplates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MainTemplate))
            {
                writer.WritePropertyName("mainTemplate");
                writer.WriteObjectValue(MainTemplate);
            }
            writer.WriteEndObject();
        }

        internal static TemplateProperties DeserializeTemplateProperties(JsonElement element)
        {
            string contentId = default;
            string displayName = default;
            SecurityInsightsKind contentKind = default;
            string version = default;
            ContentMetadataSource source = default;
            Optional<ContentMetadataAuthor> author = default;
            Optional<ContentMetadataSupport> support = default;
            Optional<IList<string>> providers = default;
            Optional<ContentMetadataCategories> categories = default;
            Optional<DateTimeOffset> firstPublishDate = default;
            Optional<DateTimeOffset> lastPublishDate = default;
            Optional<IList<string>> threatAnalysisTactics = default;
            Optional<IList<string>> threatAnalysisTechniques = default;
            Optional<IList<string>> previewImages = default;
            Optional<IList<string>> previewImagesDark = default;
            Optional<string> icon = default;
            Optional<IList<TemplateProperties>> dependantTemplates = default;
            Optional<ContentMainTemplate> mainTemplate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contentId"))
                {
                    contentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contentKind"))
                {
                    contentKind = new SecurityInsightsKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = ContentMetadataSource.DeserializeContentMetadataSource(property.Value);
                    continue;
                }
                if (property.NameEquals("author"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    author = ContentMetadataAuthor.DeserializeContentMetadataAuthor(property.Value);
                    continue;
                }
                if (property.NameEquals("support"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    support = ContentMetadataSupport.DeserializeContentMetadataSupport(property.Value);
                    continue;
                }
                if (property.NameEquals("providers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    providers = array;
                    continue;
                }
                if (property.NameEquals("categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    categories = ContentMetadataCategories.DeserializeContentMetadataCategories(property.Value);
                    continue;
                }
                if (property.NameEquals("firstPublishDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    firstPublishDate = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("lastPublishDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastPublishDate = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("threatAnalysisTactics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    threatAnalysisTactics = array;
                    continue;
                }
                if (property.NameEquals("threatAnalysisTechniques"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    threatAnalysisTechniques = array;
                    continue;
                }
                if (property.NameEquals("previewImages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    previewImages = array;
                    continue;
                }
                if (property.NameEquals("previewImagesDark"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    previewImagesDark = array;
                    continue;
                }
                if (property.NameEquals("icon"))
                {
                    icon = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dependantTemplates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TemplateProperties> array = new List<TemplateProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeTemplateProperties(item));
                    }
                    dependantTemplates = array;
                    continue;
                }
                if (property.NameEquals("mainTemplate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mainTemplate = ContentMainTemplate.DeserializeContentMainTemplate(property.Value);
                    continue;
                }
            }
            return new TemplateProperties(contentId, displayName, contentKind, version, source, author.Value, support.Value, Optional.ToList(providers), categories.Value, Optional.ToNullable(firstPublishDate), Optional.ToNullable(lastPublishDate), Optional.ToList(threatAnalysisTactics), Optional.ToList(threatAnalysisTechniques), Optional.ToList(previewImages), Optional.ToList(previewImagesDark), icon.Value, Optional.ToList(dependantTemplates), mainTemplate.Value);
        }
    }
}
