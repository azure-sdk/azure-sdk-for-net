// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Redis.Models
{
    /// <summary> Optional: Specifies the method in which zones are allocated to the Redis cache. 'Automatic' refers to allocation of zones automatically by the Azure based on the availability zones support in the region and number of instances. 'UserDefined' refers to usage of zones passed in by you for allocation. 'NoZones' refers to the non-zonal cache. If 'zonalAllocation' is not passed, it will be set to 'UserDefined' when zones are passed in, otherwise, will be set to 'NoZones'. </summary>
    public readonly partial struct ZonalAllocation : IEquatable<ZonalAllocation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ZonalAllocation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ZonalAllocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutomaticValue = "Automatic";
        private const string UserDefinedValue = "UserDefined";
        private const string NoZonesValue = "NoZones";

        /// <summary> Automatic. </summary>
        public static ZonalAllocation Automatic { get; } = new ZonalAllocation(AutomaticValue);
        /// <summary> UserDefined. </summary>
        public static ZonalAllocation UserDefined { get; } = new ZonalAllocation(UserDefinedValue);
        /// <summary> NoZones. </summary>
        public static ZonalAllocation NoZones { get; } = new ZonalAllocation(NoZonesValue);
        /// <summary> Determines if two <see cref="ZonalAllocation"/> values are the same. </summary>
        public static bool operator ==(ZonalAllocation left, ZonalAllocation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ZonalAllocation"/> values are not the same. </summary>
        public static bool operator !=(ZonalAllocation left, ZonalAllocation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ZonalAllocation"/>. </summary>
        public static implicit operator ZonalAllocation(string value) => new ZonalAllocation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ZonalAllocation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ZonalAllocation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
