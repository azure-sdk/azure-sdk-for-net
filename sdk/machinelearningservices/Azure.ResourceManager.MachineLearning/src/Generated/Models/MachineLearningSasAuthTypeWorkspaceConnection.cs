// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The MachineLearningSasAuthTypeWorkspaceConnection. </summary>
    public partial class MachineLearningSasAuthTypeWorkspaceConnection : MachineLearningWorkspaceConnectionProperties
    {
        /// <summary> Initializes a new instance of <see cref="MachineLearningSasAuthTypeWorkspaceConnection"/>. </summary>
        public MachineLearningSasAuthTypeWorkspaceConnection()
        {
            AuthType = MachineLearningConnectionAuthType.Sas;
        }

        /// <summary> Initializes a new instance of <see cref="MachineLearningSasAuthTypeWorkspaceConnection"/>. </summary>
        /// <param name="authType"> Authentication type of the connection target. </param>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="createdByWorkspaceArmId"></param>
        /// <param name="expiryOn"></param>
        /// <param name="group"> Group based on connection category. </param>
        /// <param name="isSharedToAll"></param>
        /// <param name="metadata"> Store user metadata for this connection. </param>
        /// <param name="sharedUserList"></param>
        /// <param name="target"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="credentials"></param>
        internal MachineLearningSasAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType authType, MachineLearningConnectionCategory? category, ResourceIdentifier createdByWorkspaceArmId, DateTimeOffset? expiryOn, ConnectionGroup? group, bool? isSharedToAll, IDictionary<string, string> metadata, IList<string> sharedUserList, string target, IDictionary<string, BinaryData> serializedAdditionalRawData, WorkspaceConnectionSharedAccessSignature credentials) : base(authType, category, createdByWorkspaceArmId, expiryOn, group, isSharedToAll, metadata, sharedUserList, target, serializedAdditionalRawData)
        {
            Credentials = credentials;
            AuthType = authType;
        }

        /// <summary> Gets or sets the credentials. </summary>
        internal WorkspaceConnectionSharedAccessSignature Credentials { get; set; }
        /// <summary> Gets or sets the credentials sas. </summary>
        public string CredentialsSas
        {
            get => Credentials is null ? default : Credentials.Sas;
            set
            {
                if (Credentials is null)
                    Credentials = new WorkspaceConnectionSharedAccessSignature();
                Credentials.Sas = value;
            }
        }
    }
}
