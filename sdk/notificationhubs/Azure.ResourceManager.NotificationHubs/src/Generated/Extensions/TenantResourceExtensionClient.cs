// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.NotificationHubs.Models;

namespace Azure.ResourceManager.NotificationHubs
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _notificationHubsClientDiagnostics;
        private NotificationHubsRestOperations _notificationHubsRestClient;
        private ClientDiagnostics _namespacesClientDiagnostics;
        private NamespacesRestOperations _namespacesRestClient;
        private ClientDiagnostics _privateEndpointConnectionsClientDiagnostics;
        private PrivateEndpointConnectionsRestOperations _privateEndpointConnectionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics NotificationHubsClientDiagnostics => _notificationHubsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NotificationHubs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private NotificationHubsRestOperations NotificationHubsRestClient => _notificationHubsRestClient ??= new NotificationHubsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics NamespacesClientDiagnostics => _namespacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NotificationHubs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private NamespacesRestOperations NamespacesRestClient => _namespacesRestClient ??= new NamespacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PrivateEndpointConnectionsClientDiagnostics => _privateEndpointConnectionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NotificationHubs", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PrivateEndpointConnectionsRestOperations PrivateEndpointConnectionsRestClient => _privateEndpointConnectionsRestClient ??= new PrivateEndpointConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Checks the availability of the given notificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CheckNotificationHubAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAvailabilityResult>> CheckNotificationHubAvailabilityAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, NotificationHubAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNotificationHubAvailability");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.CheckNotificationHubAvailabilityAsync(subscriptionId, resourceGroupName, namespaceName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks the availability of the given notificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CheckNotificationHubAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAvailabilityResult> CheckNotificationHubAvailability(Guid subscriptionId, string resourceGroupName, string namespaceName, NotificationHubAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNotificationHubAvailability");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.CheckNotificationHubAvailability(subscriptionId, resourceGroupName, namespaceName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the notification hub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHub>> GetNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.GetAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the notification hub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHub> GetNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.Get(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates/Update a NotificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="notificationHub"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHub>> CreateOrUpdateNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHub notificationHub, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, notificationHub, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates/Update a NotificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="notificationHub"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHub> CreateOrUpdateNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHub notificationHub, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, namespaceName, notificationHubName, notificationHub, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a NotificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHub>> UpdateNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHubPatchContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.UpdateAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch a NotificationHub in a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHub> UpdateNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHubPatchContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.Update(subscriptionId, resourceGroupName, namespaceName, notificationHubName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a notification hub associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.DeleteAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a notification hub associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.Delete(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="skipToken"> Continuation token. </param>
        /// <param name="top"> Page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHub" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHub> GetNotificationHubsAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NotificationHubsRestClient.CreateListRequest(subscriptionId, resourceGroupName, namespaceName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NotificationHubsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, NotificationHub.DeserializeNotificationHub, NotificationHubsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNotificationHubs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="skipToken"> Continuation token. </param>
        /// <param name="top"> Page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHub" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHub> GetNotificationHubs(Guid subscriptionId, string resourceGroupName, string namespaceName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NotificationHubsRestClient.CreateListRequest(subscriptionId, resourceGroupName, namespaceName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NotificationHubsRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, NotificationHub.DeserializeNotificationHub, NotificationHubsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNotificationHubs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Test send a push notification.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_DebugSend</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubTestSendResult>> DebugSendNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DebugSendNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.DebugSendAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Test send a push notification.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_DebugSend</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubTestSendResult> DebugSendNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DebugSendNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.DebugSend(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates/Updates an authorization rule for a NotificationHub
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CreateOrUpdateAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAuthorizationRule>> CreateOrUpdateAuthorizationRuleNotificationHubAsync(TenantResourceCreateOrUpdateAuthorizationRuleNotificationHubOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.CreateOrUpdateAuthorizationRuleAsync(options.SubscriptionId, options.ResourceGroupName, options.NamespaceName, options.NotificationHubName, options.AuthorizationRuleName, options.NotificationHubAuthorizationRule, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates/Updates an authorization rule for a NotificationHub
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_CreateOrUpdateAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAuthorizationRule> CreateOrUpdateAuthorizationRuleNotificationHub(TenantResourceCreateOrUpdateAuthorizationRuleNotificationHubOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.CreateOrUpdateAuthorizationRule(options.SubscriptionId, options.ResourceGroupName, options.NamespaceName, options.NotificationHubName, options.AuthorizationRuleName, options.NotificationHubAuthorizationRule, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a notificationHub authorization rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_DeleteAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAuthorizationRuleNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.DeleteAuthorizationRuleAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a notificationHub authorization rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_DeleteAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAuthorizationRuleNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.DeleteAuthorizationRule(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an authorization rule for a NotificationHub by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_GetAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAuthorizationRule>> GetAuthorizationRuleNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.GetAuthorizationRuleAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an authorization rule for a NotificationHub by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_GetAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAuthorizationRule> GetAuthorizationRuleNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAuthorizationRuleNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.GetAuthorizationRule(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the authorization rules for a NotificationHub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_ListAuthorizationRules</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHubAuthorizationRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHubAuthorizationRule> GetAuthorizationRulesNotificationHubsAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NotificationHubsRestClient.CreateListAuthorizationRulesRequest(subscriptionId, resourceGroupName, namespaceName, notificationHubName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NotificationHubsRestClient.CreateListAuthorizationRulesNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName, notificationHubName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, NotificationHubAuthorizationRule.DeserializeNotificationHubAuthorizationRule, NotificationHubsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAuthorizationRulesNotificationHubs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the authorization rules for a NotificationHub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_ListAuthorizationRules</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHubAuthorizationRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHubAuthorizationRule> GetAuthorizationRulesNotificationHubs(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NotificationHubsRestClient.CreateListAuthorizationRulesRequest(subscriptionId, resourceGroupName, namespaceName, notificationHubName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NotificationHubsRestClient.CreateListAuthorizationRulesNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName, notificationHubName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, NotificationHubAuthorizationRule.DeserializeNotificationHubAuthorizationRule, NotificationHubsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAuthorizationRulesNotificationHubs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the NotificationHub
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubResourceKeys>> GetKeysNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.ListKeysAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the NotificationHub
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubResourceKeys> GetKeysNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.ListKeys(subscriptionId, resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}/regenerateKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_RegenerateKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubResourceKeys>> RegenerateKeysNotificationHubAsync(TenantResourceRegenerateKeysNotificationHubOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeysNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.RegenerateKeysAsync(options.SubscriptionId, options.ResourceGroupName, options.NamespaceName, options.NotificationHubName, options.AuthorizationRuleName, options.PolicyKeyResource, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the Primary/Secondary Keys to the NotificationHub Authorization Rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/authorizationRules/{authorizationRuleName}/regenerateKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_RegenerateKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubResourceKeys> RegenerateKeysNotificationHub(TenantResourceRegenerateKeysNotificationHubOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeysNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.RegenerateKeys(options.SubscriptionId, options.ResourceGroupName, options.NamespaceName, options.NotificationHubName, options.AuthorizationRuleName, options.PolicyKeyResource, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the PNS Credentials associated with a notification hub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_GetPnsCredentials</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubPnsCredentials>> GetPnsCredentialsNotificationHubAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPnsCredentialsNotificationHub");
            scope.Start();
            try
            {
                var response = await NotificationHubsRestClient.GetPnsCredentialsAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the PNS Credentials associated with a notification hub.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NotificationHubs_GetPnsCredentials</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubName"> Notification Hub name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubPnsCredentials> GetPnsCredentialsNotificationHub(Guid subscriptionId, string resourceGroupName, string namespaceName, string notificationHubName, CancellationToken cancellationToken = default)
        {
            using var scope = NotificationHubsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPnsCredentialsNotificationHub");
            scope.Start();
            try
            {
                var response = NotificationHubsRestClient.GetPnsCredentials(subscriptionId, resourceGroupName, namespaceName, notificationHubName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks the availability of the given service namespace across all Azure subscriptions. This is useful because the domain name is created based on the service namespace name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CheckAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAvailabilityResult>> CheckNotificationHubNamespaceAvailabilityAsync(Guid subscriptionId, NotificationHubAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNotificationHubNamespaceAvailability");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.CheckAvailabilityAsync(subscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks the availability of the given service namespace across all Azure subscriptions. This is useful because the domain name is created based on the service namespace name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CheckAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAvailabilityResult> CheckNotificationHubNamespaceAvailability(Guid subscriptionId, NotificationHubAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CheckNotificationHubNamespaceAvailability");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.CheckAvailability(subscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns the given namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubNamespace>> GetNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.GetAsync(subscriptionId, resourceGroupName, namespaceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns the given namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubNamespace> GetNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.Get(subscriptionId, resourceGroupName, namespaceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates / Updates a Notification Hub namespace. This operation is idempotent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubNamespace"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<NotificationHubNamespace>> CreateOrUpdateNamespaceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, NotificationHubNamespace notificationHubNamespace, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, namespaceName, notificationHubNamespace, cancellationToken).ConfigureAwait(false);
                var operation = new NotificationHubsArmOperation<NotificationHubNamespace>(new NotificationHubNamespaceOperationSource(), NamespacesClientDiagnostics, Pipeline, NamespacesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, namespaceName, notificationHubNamespace).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates / Updates a Notification Hub namespace. This operation is idempotent.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="notificationHubNamespace"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<NotificationHubNamespace> CreateOrUpdateNamespace(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, NotificationHubNamespace notificationHubNamespace, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, namespaceName, notificationHubNamespace, cancellationToken);
                var operation = new NotificationHubsArmOperation<NotificationHubNamespace>(new NotificationHubNamespaceOperationSource(), NamespacesClientDiagnostics, Pipeline, NamespacesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, namespaceName, notificationHubNamespace).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patches the existing namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubNamespace>> UpdateNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, NamespacePatchContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.UpdateAsync(subscriptionId, resourceGroupName, namespaceName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patches the existing namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="content"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubNamespace> UpdateNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, NamespacePatchContent content, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.Update(subscriptionId, resourceGroupName, namespaceName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an existing namespace. This operation also removes all associated notificationHubs under the namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.DeleteAsync(subscriptionId, resourceGroupName, namespaceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes an existing namespace. This operation also removes all associated notificationHubs under the namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.Delete(subscriptionId, resourceGroupName, namespaceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the available namespaces within the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListAll</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> Skip token for subsequent requests. </param>
        /// <param name="top"> Maximum number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHubNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHubNamespace> GetNamespacesAsync(Guid subscriptionId, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListAllRequest(subscriptionId, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListAllNextPageRequest(nextLink, subscriptionId, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, NotificationHubNamespace.DeserializeNotificationHubNamespace, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the available namespaces within the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListAll</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="skipToken"> Skip token for subsequent requests. </param>
        /// <param name="top"> Maximum number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHubNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHubNamespace> GetNamespaces(Guid subscriptionId, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListAllRequest(subscriptionId, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListAllNextPageRequest(nextLink, subscriptionId, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, NotificationHubNamespace.DeserializeNotificationHubNamespace, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the available namespaces within a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> Skip token for subsequent requests. </param>
        /// <param name="top"> Maximum number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHubNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHubNamespace> GetNamespacesAsync(Guid subscriptionId, string resourceGroupName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListRequest(subscriptionId, resourceGroupName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, skipToken, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, NotificationHubNamespace.DeserializeNotificationHubNamespace, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the available namespaces within a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="skipToken"> Skip token for subsequent requests. </param>
        /// <param name="top"> Maximum number of results to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHubNamespace" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHubNamespace> GetNamespaces(Guid subscriptionId, string resourceGroupName, string skipToken = null, int? top = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListRequest(subscriptionId, resourceGroupName, skipToken, top);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListNextPageRequest(nextLink, subscriptionId, resourceGroupName, skipToken, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, NotificationHubNamespace.DeserializeNotificationHubNamespace, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Creates an authorization rule for a namespace
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CreateOrUpdateAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="notificationHubAuthorizationRule"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAuthorizationRule>> CreateOrUpdateAuthorizationRuleNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, NotificationHubAuthorizationRule notificationHubAuthorizationRule, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.CreateOrUpdateAuthorizationRuleAsync(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, notificationHubAuthorizationRule, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates an authorization rule for a namespace
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_CreateOrUpdateAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="notificationHubAuthorizationRule"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAuthorizationRule> CreateOrUpdateAuthorizationRuleNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, NotificationHubAuthorizationRule notificationHubAuthorizationRule, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.CreateOrUpdateAuthorizationRule(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, notificationHubAuthorizationRule, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a namespace authorization rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_DeleteAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAuthorizationRuleNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.DeleteAuthorizationRuleAsync(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a namespace authorization rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_DeleteAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteAuthorizationRuleNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.DeleteAuthorizationRule(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an authorization rule for a namespace by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_GetAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubAuthorizationRule>> GetAuthorizationRuleNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.GetAuthorizationRuleAsync(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an authorization rule for a namespace by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_GetAuthorizationRule</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubAuthorizationRule> GetAuthorizationRuleNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAuthorizationRuleNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.GetAuthorizationRule(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the authorization rules for a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListAuthorizationRules</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHubAuthorizationRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHubAuthorizationRule> GetAuthorizationRulesNamespacesAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListAuthorizationRulesRequest(subscriptionId, resourceGroupName, namespaceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListAuthorizationRulesNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, NotificationHubAuthorizationRule.DeserializeNotificationHubAuthorizationRule, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAuthorizationRulesNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the authorization rules for a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListAuthorizationRules</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHubAuthorizationRule" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHubAuthorizationRule> GetAuthorizationRulesNamespaces(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => NamespacesRestClient.CreateListAuthorizationRulesRequest(subscriptionId, resourceGroupName, namespaceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => NamespacesRestClient.CreateListAuthorizationRulesNextPageRequest(nextLink, subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, NotificationHubAuthorizationRule.DeserializeNotificationHubAuthorizationRule, NamespacesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAuthorizationRulesNamespaces", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubResourceKeys>> GetKeysNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.ListKeysAsync(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_ListKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubResourceKeys> GetKeysNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKeysNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.ListKeys(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_RegenerateKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="policyKeyResource"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubResourceKeys>> RegenerateKeysNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, PolicyKeyResource policyKeyResource, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeysNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.RegenerateKeysAsync(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, policyKeyResource, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_RegenerateKeys</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="authorizationRuleName"> Authorization Rule Name. </param>
        /// <param name="policyKeyResource"> Request content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubResourceKeys> RegenerateKeysNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, string authorizationRuleName, PolicyKeyResource policyKeyResource, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.RegenerateKeysNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.RegenerateKeys(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, policyKeyResource, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the PNS credentials associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/pnsCredentials</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_GetPnsCredentials</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubPnsCredentials>> GetPnsCredentialsNamespaceAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPnsCredentialsNamespace");
            scope.Start();
            try
            {
                var response = await NamespacesRestClient.GetPnsCredentialsAsync(subscriptionId, resourceGroupName, namespaceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the PNS credentials associated with a namespace.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/pnsCredentials</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Namespaces_GetPnsCredentials</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubPnsCredentials> GetPnsCredentialsNamespace(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            using var scope = NamespacesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPnsCredentialsNamespace");
            scope.Start();
            try
            {
                var response = NamespacesRestClient.GetPnsCredentials(subscriptionId, resourceGroupName, namespaceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Approves or rejects Private Endpoint Connection.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="privateEndpointConnectionResource"> Description of the Private Endpoint Connection resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<PrivateEndpointConnectionResource>> UpdatePrivateEndpointConnectionAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, PrivateEndpointConnectionResource privateEndpointConnectionResource, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdatePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await PrivateEndpointConnectionsRestClient.UpdateAsync(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, privateEndpointConnectionResource, cancellationToken).ConfigureAwait(false);
                var operation = new NotificationHubsArmOperation<PrivateEndpointConnectionResource>(new PrivateEndpointConnectionResourceOperationSource(), PrivateEndpointConnectionsClientDiagnostics, Pipeline, PrivateEndpointConnectionsRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, privateEndpointConnectionResource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Approves or rejects Private Endpoint Connection.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="privateEndpointConnectionResource"> Description of the Private Endpoint Connection resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<PrivateEndpointConnectionResource> UpdatePrivateEndpointConnection(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, PrivateEndpointConnectionResource privateEndpointConnectionResource, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdatePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = PrivateEndpointConnectionsRestClient.Update(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, privateEndpointConnectionResource, cancellationToken);
                var operation = new NotificationHubsArmOperation<PrivateEndpointConnectionResource>(new PrivateEndpointConnectionResourceOperationSource(), PrivateEndpointConnectionsClientDiagnostics, Pipeline, PrivateEndpointConnectionsRestClient.CreateUpdateRequest(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, privateEndpointConnectionResource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the Private Endpoint Connection.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeletePrivateEndpointConnectionAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await PrivateEndpointConnectionsRestClient.DeleteAsync(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
                var operation = new NotificationHubsArmOperation(PrivateEndpointConnectionsClientDiagnostics, Pipeline, PrivateEndpointConnectionsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the Private Endpoint Connection.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeletePrivateEndpointConnection(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = PrivateEndpointConnectionsRestClient.Delete(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, cancellationToken);
                var operation = new NotificationHubsArmOperation(PrivateEndpointConnectionsClientDiagnostics, Pipeline, PrivateEndpointConnectionsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a Private Endpoint Connection with a given name. 
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PrivateEndpointConnectionResource>> GetPrivateEndpointConnectionAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await PrivateEndpointConnectionsRestClient.GetAsync(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a Private Endpoint Connection with a given name. 
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="privateEndpointConnectionName"> Private Endpoint Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateEndpointConnectionResource> GetPrivateEndpointConnection(Guid subscriptionId, string resourceGroupName, string namespaceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = PrivateEndpointConnectionsRestClient.Get(subscriptionId, resourceGroupName, namespaceName, privateEndpointConnectionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateEndpointConnectionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateEndpointConnectionResource> GetPrivateEndpointConnectionsAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PrivateEndpointConnectionsRestClient.CreateListRequest(subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, PrivateEndpointConnectionResource.DeserializePrivateEndpointConnectionResource, PrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPrivateEndpointConnections", "value", null, cancellationToken);
        }

        /// <summary>
        /// Returns all Private Endpoint Connections that belong to the given Notification Hubs namespace.
        /// This is a public API that can be called directly by Notification Hubs users.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateEndpointConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateEndpointConnectionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateEndpointConnectionResource> GetPrivateEndpointConnections(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PrivateEndpointConnectionsRestClient.CreateListRequest(subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, PrivateEndpointConnectionResource.DeserializePrivateEndpointConnectionResource, PrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPrivateEndpointConnections", "value", null, cancellationToken);
        }

        /// <summary>
        /// Even though this namespace requires subscription id, resource group and namespace name, it returns a constant payload (for a given namespacE) every time it's called.
        /// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources/{subResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_GetGroupId</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="subResourceName"> Name of the Private Link sub-resource. The only supported sub-resource is "namespace". </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotificationHubsPrivateLinkResource>> GetGroupIdPrivateEndpointConnectionAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, string subResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetGroupIdPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = await PrivateEndpointConnectionsRestClient.GetGroupIdAsync(subscriptionId, resourceGroupName, namespaceName, subResourceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Even though this namespace requires subscription id, resource group and namespace name, it returns a constant payload (for a given namespacE) every time it's called.
        /// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources/{subResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_GetGroupId</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="subResourceName"> Name of the Private Link sub-resource. The only supported sub-resource is "namespace". </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationHubsPrivateLinkResource> GetGroupIdPrivateEndpointConnection(Guid subscriptionId, string resourceGroupName, string namespaceName, string subResourceName, CancellationToken cancellationToken = default)
        {
            using var scope = PrivateEndpointConnectionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetGroupIdPrivateEndpointConnection");
            scope.Start();
            try
            {
                var response = PrivateEndpointConnectionsRestClient.GetGroupId(subscriptionId, resourceGroupName, namespaceName, subResourceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Even though this namespace requires subscription id, resource group and namespace name, it returns a constant payload (for a given namespacE) every time it's called.
        /// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_ListGroupIds</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NotificationHubsPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NotificationHubsPrivateLinkResource> GetGroupIdsPrivateEndpointConnectionsAsync(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PrivateEndpointConnectionsRestClient.CreateListGroupIdsRequest(subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, NotificationHubsPrivateLinkResource.DeserializeNotificationHubsPrivateLinkResource, PrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetGroupIdsPrivateEndpointConnections", "value", null, cancellationToken);
        }

        /// <summary>
        /// Even though this namespace requires subscription id, resource group and namespace name, it returns a constant payload (for a given namespacE) every time it's called.
        /// That's why we don't send it to the sibling RP, but process it directly in the scale unit that received the request.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/privateLinkResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnections_ListGroupIds</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="namespaceName"> Namespace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NotificationHubsPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NotificationHubsPrivateLinkResource> GetGroupIdsPrivateEndpointConnections(Guid subscriptionId, string resourceGroupName, string namespaceName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PrivateEndpointConnectionsRestClient.CreateListGroupIdsRequest(subscriptionId, resourceGroupName, namespaceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, NotificationHubsPrivateLinkResource.DeserializeNotificationHubsPrivateLinkResource, PrivateEndpointConnectionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetGroupIdsPrivateEndpointConnections", "value", null, cancellationToken);
        }
    }
}
