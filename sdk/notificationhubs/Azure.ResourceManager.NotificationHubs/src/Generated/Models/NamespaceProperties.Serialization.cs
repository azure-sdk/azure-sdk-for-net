// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NotificationHubs.Models
{
    public partial class NamespaceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(NamespaceType))
            {
                writer.WritePropertyName("namespaceType"u8);
                writer.WriteStringValue(NamespaceType.Value.ToString());
            }
            if (Optional.IsDefined(ReplicationRegion))
            {
                writer.WritePropertyName("replicationRegion"u8);
                writer.WriteStringValue(ReplicationRegion.Value.ToString());
            }
            if (Optional.IsDefined(ZoneRedundancy))
            {
                writer.WritePropertyName("zoneRedundancy"u8);
                writer.WriteStringValue(ZoneRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(NetworkAcls))
            {
                writer.WritePropertyName("networkAcls"u8);
                writer.WriteObjectValue(NetworkAcls);
            }
            if (Optional.IsDefined(PnsCredentials))
            {
                writer.WritePropertyName("pnsCredentials"u8);
                writer.WriteObjectValue(PnsCredentials);
            }
            if (Optional.IsDefined(ScaleUnit))
            {
                writer.WritePropertyName("scaleUnit"u8);
                writer.WriteStringValue(ScaleUnit);
            }
            if (Optional.IsDefined(DataCenter))
            {
                writer.WritePropertyName("dataCenter"u8);
                writer.WriteStringValue(DataCenter);
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static NamespaceProperties DeserializeNamespaceProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<OperationProvisioningState> provisioningState = default;
            Optional<NamespaceStatus> status = default;
            Optional<bool> enabled = default;
            Optional<bool> critical = default;
            Optional<string> subscriptionId = default;
            Optional<string> region = default;
            Optional<string> metricId = default;
            Optional<DateTimeOffset> createdAt = default;
            Optional<DateTimeOffset> updatedAt = default;
            Optional<NotificationHubNamespaceType> namespaceType = default;
            Optional<ReplicationRegion> replicationRegion = default;
            Optional<ZoneRedundancyPreference> zoneRedundancy = default;
            Optional<NetworkAcls> networkAcls = default;
            Optional<PnsCredentials> pnsCredentials = default;
            Optional<string> serviceBusEndpoint = default;
            Optional<IReadOnlyList<PrivateEndpointConnectionResource>> privateEndpointConnections = default;
            Optional<string> scaleUnit = default;
            Optional<string> dataCenter = default;
            Optional<PublicNetworkAccess> publicNetworkAccess = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OperationProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new NamespaceStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("critical"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    critical = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricId"u8))
                {
                    metricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updatedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("namespaceType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    namespaceType = new NotificationHubNamespaceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("replicationRegion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    replicationRegion = new ReplicationRegion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("zoneRedundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    zoneRedundancy = new ZoneRedundancyPreference(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkAcls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkAcls = NetworkAcls.DeserializeNetworkAcls(property.Value);
                    continue;
                }
                if (property.NameEquals("pnsCredentials"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pnsCredentials = PnsCredentials.DeserializePnsCredentials(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceBusEndpoint"u8))
                {
                    serviceBusEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PrivateEndpointConnectionResource> array = new List<PrivateEndpointConnectionResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PrivateEndpointConnectionResource.DeserializePrivateEndpointConnectionResource(item));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
                if (property.NameEquals("scaleUnit"u8))
                {
                    scaleUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataCenter"u8))
                {
                    dataCenter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new PublicNetworkAccess(property.Value.GetString());
                    continue;
                }
            }
            return new NamespaceProperties(name.Value, Optional.ToNullable(provisioningState), Optional.ToNullable(status), Optional.ToNullable(enabled), Optional.ToNullable(critical), subscriptionId.Value, region.Value, metricId.Value, Optional.ToNullable(createdAt), Optional.ToNullable(updatedAt), Optional.ToNullable(namespaceType), Optional.ToNullable(replicationRegion), Optional.ToNullable(zoneRedundancy), networkAcls.Value, pnsCredentials.Value, serviceBusEndpoint.Value, Optional.ToList(privateEndpointConnections), scaleUnit.Value, dataCenter.Value, Optional.ToNullable(publicNetworkAccess));
        }
    }
}
