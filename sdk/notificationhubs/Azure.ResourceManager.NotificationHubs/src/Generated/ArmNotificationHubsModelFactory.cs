// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.NotificationHubs.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmNotificationHubsModelFactory
    {
        /// <summary> Initializes a new instance of NotificationHubAvailabilityResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="isAvailiable">
        /// Gets or sets true if the name is available and can be used to
        /// create new Namespace/NotificationHub. Otherwise false.
        /// </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHubAvailabilityResult"/> instance for mocking. </returns>
        public static NotificationHubAvailabilityResult NotificationHubAvailabilityResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, bool? isAvailiable = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubAvailabilityResult(id, name, resourceType, systemData, tags, location, isAvailiable, sku);
        }

        /// <summary> Initializes a new instance of NotificationHub. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> NotificationHub properties. </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <returns> A new <see cref="Models.NotificationHub"/> instance for mocking. </returns>
        public static NotificationHub NotificationHub(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NotificationHubProperties properties = null, NotificationHubSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHub(id, name, resourceType, systemData, tags, location, properties, sku);
        }

        /// <summary> Initializes a new instance of NotificationHubProperties. </summary>
        /// <param name="notificationHubName"> Gets or sets the NotificationHub name. </param>
        /// <param name="registrationTtl"> Gets or sets the RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> Gets or sets the AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredentialProperties"> Description of a NotificationHub ApnsCredential. </param>
        /// <param name="wnsCredentialProperties"> Description of a NotificationHub WnsCredential. </param>
        /// <param name="gcmCredentialProperties"> Description of a NotificationHub GcmCredential. </param>
        /// <param name="mpnsCredentialProperties"> Description of a NotificationHub MpnsCredential. </param>
        /// <param name="admCredentialProperties"> Description of a NotificationHub AdmCredential. </param>
        /// <param name="baiduCredentialProperties"> Description of a NotificationHub BaiduCredential. </param>
        /// <param name="browserCredentialProperties"> Description of a NotificationHub BrowserCredential. </param>
        /// <param name="xiaomiCredentialProperties"> Description of a NotificationHub XiaomiCredential. </param>
        /// <param name="dailyMaxActiveDevices"></param>
        /// <returns> A new <see cref="Models.NotificationHubProperties"/> instance for mocking. </returns>
        public static NotificationHubProperties NotificationHubProperties(string notificationHubName = null, string registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, ApnsCredentialProperties apnsCredentialProperties = null, WnsCredentialProperties wnsCredentialProperties = null, GcmCredentialProperties gcmCredentialProperties = null, MpnsCredentialProperties mpnsCredentialProperties = null, AdmCredentialProperties admCredentialProperties = null, BaiduCredentialProperties baiduCredentialProperties = null, BrowserCredentialProperties browserCredentialProperties = null, XiaomiCredentialProperties xiaomiCredentialProperties = null, long? dailyMaxActiveDevices = null)
        {
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();

            return new NotificationHubProperties(notificationHubName, registrationTtl, authorizationRules?.ToList(), apnsCredentialProperties != null ? new NotificationHubApnsCredential(apnsCredentialProperties) : null, wnsCredentialProperties != null ? new NotificationHubWnsCredential(wnsCredentialProperties) : null, gcmCredentialProperties != null ? new NotificationHubGcmCredential(gcmCredentialProperties) : null, mpnsCredentialProperties != null ? new NotificationHubMpnsCredential(mpnsCredentialProperties) : null, admCredentialProperties != null ? new NotificationHubAdmCredential(admCredentialProperties) : null, baiduCredentialProperties != null ? new NotificationHubBaiduCredential(baiduCredentialProperties) : null, browserCredentialProperties != null ? new BrowserCredential(browserCredentialProperties) : null, xiaomiCredentialProperties != null ? new XiaomiCredential(xiaomiCredentialProperties) : null, dailyMaxActiveDevices);
        }

        /// <summary> Initializes a new instance of SharedAccessAuthorizationRuleProperties. </summary>
        /// <param name="rights"> Gets or sets the rights associated with the rule. </param>
        /// <param name="primaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="secondaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="keyName"> Gets a string that describes the authorization rule. </param>
        /// <param name="modifiedOn"> Gets the last modified time for this rule. </param>
        /// <param name="createdOn"> Gets the created time for this rule. </param>
        /// <param name="claimType"> Gets a string that describes the claim type. </param>
        /// <param name="claimValue"> Gets a string that describes the claim value. </param>
        /// <param name="revision"> Gets the revision number for the rule. </param>
        /// <returns> A new <see cref="Models.SharedAccessAuthorizationRuleProperties"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleProperties SharedAccessAuthorizationRuleProperties(IEnumerable<AuthorizationRuleAccessRight> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? createdOn = null, string claimType = null, string claimValue = null, int? revision = null)
        {
            rights ??= new List<AuthorizationRuleAccessRight>();

            return new SharedAccessAuthorizationRuleProperties(rights?.ToList(), primaryKey, secondaryKey, keyName, modifiedOn, createdOn, claimType, claimValue, revision);
        }

        /// <summary> Initializes a new instance of NotificationHubTestSendResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Result of DebugSend operations. </param>
        /// <returns> A new <see cref="Models.NotificationHubTestSendResult"/> instance for mocking. </returns>
        public static NotificationHubTestSendResult NotificationHubTestSendResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DebugSendResult properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubTestSendResult(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of DebugSendResult. </summary>
        /// <param name="success"> Gets or sets successful send. </param>
        /// <param name="failure"> Gets or sets send failure. </param>
        /// <param name="results"> Gets or sets actual failure description. </param>
        /// <returns> A new <see cref="Models.DebugSendResult"/> instance for mocking. </returns>
        public static DebugSendResult DebugSendResult(long? success = null, long? failure = null, IEnumerable<RegistrationResult> results = null)
        {
            results ??= new List<RegistrationResult>();

            return new DebugSendResult(success, failure, results?.ToList());
        }

        /// <summary> Initializes a new instance of RegistrationResult. </summary>
        /// <param name="applicationPlatform"> PNS type. </param>
        /// <param name="pnsHandle"> PNS handle. </param>
        /// <param name="registrationId"> Registration id. </param>
        /// <param name="outcome"> Notification outcome. </param>
        /// <returns> A new <see cref="Models.RegistrationResult"/> instance for mocking. </returns>
        public static RegistrationResult RegistrationResult(string applicationPlatform = null, string pnsHandle = null, string registrationId = null, string outcome = null)
        {
            return new RegistrationResult(applicationPlatform, pnsHandle, registrationId, outcome);
        }

        /// <summary> Initializes a new instance of NotificationHubAuthorizationRule. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> SharedAccessAuthorizationRule properties. </param>
        /// <returns> A new <see cref="Models.NotificationHubAuthorizationRule"/> instance for mocking. </returns>
        public static NotificationHubAuthorizationRule NotificationHubAuthorizationRule(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SharedAccessAuthorizationRuleProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubAuthorizationRule(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of NotificationHubResourceKeys. </summary>
        /// <param name="primaryConnectionString"> Gets or sets primaryConnectionString of the AuthorizationRule. </param>
        /// <param name="secondaryConnectionString">
        /// Gets or sets secondaryConnectionString of the created
        /// AuthorizationRule
        /// </param>
        /// <param name="primaryKey"> Gets or sets primaryKey of the created AuthorizationRule. </param>
        /// <param name="secondaryKey"> Gets or sets secondaryKey of the created AuthorizationRule. </param>
        /// <param name="keyName"> Gets or sets keyName of the created AuthorizationRule. </param>
        /// <returns> A new <see cref="Models.NotificationHubResourceKeys"/> instance for mocking. </returns>
        public static NotificationHubResourceKeys NotificationHubResourceKeys(string primaryConnectionString = null, string secondaryConnectionString = null, string primaryKey = null, string secondaryKey = null, string keyName = null)
        {
            return new NotificationHubResourceKeys(primaryConnectionString, secondaryConnectionString, primaryKey, secondaryKey, keyName);
        }

        /// <summary> Initializes a new instance of NotificationHubPnsCredentials. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Collection of Notification Hub or Notification Hub Namespace PNS credentials. </param>
        /// <returns> A new <see cref="Models.NotificationHubPnsCredentials"/> instance for mocking. </returns>
        public static NotificationHubPnsCredentials NotificationHubPnsCredentials(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, PnsCredentials properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubPnsCredentials(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of NotificationHubNamespace. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <param name="properties"> Represents namespace properties. </param>
        /// <returns> A new <see cref="Models.NotificationHubNamespace"/> instance for mocking. </returns>
        public static NotificationHubNamespace NotificationHubNamespace(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NotificationHubSku sku = null, NamespaceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NotificationHubNamespace(id, name, resourceType, systemData, tags, location, sku, properties);
        }

        /// <summary> Initializes a new instance of NamespaceProperties. </summary>
        /// <param name="namespaceName">
        /// Name of the Notification Hubs namespace. This is immutable property, set automatically 
        /// by the service when the namespace is created.
        /// </param>
        /// <param name="provisioningState"> Defines values for OperationProvisioningState. </param>
        /// <param name="status"> Namespace status. </param>
        /// <param name="enabled"> Gets or sets whether or not the namespace is currently enabled. </param>
        /// <param name="critical"> Gets or sets whether or not the namespace is set as Critical. </param>
        /// <param name="subscriptionId"> Namespace subscription id. </param>
        /// <param name="region">
        /// Region. The value is always set to the same value as Namespace.Location, so we are deprecating
        /// this property.
        /// </param>
        /// <param name="metricId"> Azure Insights Metrics id. </param>
        /// <param name="createdOn"> Time when the namespace was created. </param>
        /// <param name="updatedOn"> Time when the namespace was updated. </param>
        /// <param name="namespaceType"> Defines values for NamespaceType. </param>
        /// <param name="replicationRegion"> Allowed replication region. </param>
        /// <param name="zoneRedundancy"> Namespace SKU name. </param>
        /// <param name="networkAcls"> A collection of network authorization rules. </param>
        /// <param name="pnsCredentials"> Collection of Notification Hub or Notification Hub Namespace PNS credentials. </param>
        /// <param name="serviceBusEndpoint">
        /// Gets or sets endpoint you can use to perform NotificationHub
        /// operations.
        /// </param>
        /// <param name="privateEndpointConnections"> Private Endpoint Connections for namespace. </param>
        /// <param name="scaleUnit"> Gets or sets scaleUnit where the namespace gets created. </param>
        /// <param name="dataCenter"> Deprecated. </param>
        /// <param name="publicNetworkAccess"> Type of public network access. </param>
        /// <returns> A new <see cref="Models.NamespaceProperties"/> instance for mocking. </returns>
        public static NamespaceProperties NamespaceProperties(string namespaceName = null, OperationProvisioningState? provisioningState = null, NamespaceStatus? status = null, bool? enabled = null, bool? critical = null, string subscriptionId = null, string region = null, string metricId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, NotificationHubNamespaceType? namespaceType = null, ReplicationRegion? replicationRegion = null, ZoneRedundancyPreference? zoneRedundancy = null, NetworkAcls networkAcls = null, PnsCredentials pnsCredentials = null, string serviceBusEndpoint = null, IEnumerable<PrivateEndpointConnectionResource> privateEndpointConnections = null, string scaleUnit = null, string dataCenter = null, PublicNetworkAccess? publicNetworkAccess = null)
        {
            privateEndpointConnections ??= new List<PrivateEndpointConnectionResource>();

            return new NamespaceProperties(namespaceName, provisioningState, status, enabled, critical, subscriptionId, region, metricId, createdOn, updatedOn, namespaceType, replicationRegion, zoneRedundancy, networkAcls, pnsCredentials, serviceBusEndpoint, privateEndpointConnections?.ToList(), scaleUnit, dataCenter, publicNetworkAccess);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Private Endpoint Connection properties. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionResource"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResource PrivateEndpointConnectionResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new PrivateEndpointConnectionResource(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionProperties. </summary>
        /// <param name="provisioningState"> State of Private Endpoint Connection. </param>
        /// <param name="privateEndpointId"> Represents a Private Endpoint that is connected to Notification Hubs namespace using Private Endpoint Connection. </param>
        /// <param name="groupIds"> List of group ids. For Notification Hubs, it always contains a single "namespace" element. </param>
        /// <param name="connectionState"> State of the Private Link Service connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(NotificationHubsPrivateEndpointConnectionProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, IEnumerable<string> groupIds = null, RemotePrivateLinkServiceConnectionState connectionState = null)
        {
            groupIds ??= new List<string>();

            return new PrivateEndpointConnectionProperties(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, groupIds?.ToList(), connectionState);
        }

        /// <summary> Initializes a new instance of RemotePrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> State of Private Link Connection. </param>
        /// <param name="description"> Human-friendly description. </param>
        /// <param name="actionsRequired"> Human-friendly description of required actions. </param>
        /// <returns> A new <see cref="Models.RemotePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static RemotePrivateLinkServiceConnectionState RemotePrivateLinkServiceConnectionState(PrivateLinkConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new RemotePrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of NotificationHubsPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Represents properties of Private Link Resource. </param>
        /// <returns> A new <see cref="Models.NotificationHubsPrivateLinkResource"/> instance for mocking. </returns>
        public static NotificationHubsPrivateLinkResource NotificationHubsPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NotificationHubsPrivateLinkResourceProperties properties = null)
        {
            return new NotificationHubsPrivateLinkResource(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of NotificationHubsPrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> A Group Id for Private Link. For Notification Hubs, it is always set to "namespace". </param>
        /// <param name="requiredMembers"> Required members. For Notification Hubs, it's always a collection with a single "namespace" item. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names. For Notification Hubs, it contains two CNames for Service Bus and Notification Hubs zones. </param>
        /// <returns> A new <see cref="Models.NotificationHubsPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static NotificationHubsPrivateLinkResourceProperties NotificationHubsPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new NotificationHubsPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }
    }
}
