// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Notificationhubs.Models
{
    /// <summary> State of Private Endpoint Connection. </summary>
    public readonly partial struct NotificationhubsPrivateEndpointConnectionProvisioningState : IEquatable<NotificationhubsPrivateEndpointConnectionProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NotificationhubsPrivateEndpointConnectionProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NotificationhubsPrivateEndpointConnectionProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string SucceededValue = "Succeeded";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string UpdatingByProxyValue = "UpdatingByProxy";
        private const string DeletingValue = "Deleting";
        private const string DeletingByProxyValue = "DeletingByProxy";
        private const string DeletedValue = "Deleted";

        /// <summary> Unknown. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Unknown { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(UnknownValue);
        /// <summary> Succeeded. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Succeeded { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(SucceededValue);
        /// <summary> Creating. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Creating { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(CreatingValue);
        /// <summary> Updating. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Updating { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(UpdatingValue);
        /// <summary> UpdatingByProxy. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState UpdatingByProxy { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(UpdatingByProxyValue);
        /// <summary> Deleting. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Deleting { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(DeletingValue);
        /// <summary> DeletingByProxy. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState DeletingByProxy { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(DeletingByProxyValue);
        /// <summary> Deleted. </summary>
        public static NotificationhubsPrivateEndpointConnectionProvisioningState Deleted { get; } = new NotificationhubsPrivateEndpointConnectionProvisioningState(DeletedValue);
        /// <summary> Determines if two <see cref="NotificationhubsPrivateEndpointConnectionProvisioningState"/> values are the same. </summary>
        public static bool operator ==(NotificationhubsPrivateEndpointConnectionProvisioningState left, NotificationhubsPrivateEndpointConnectionProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NotificationhubsPrivateEndpointConnectionProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(NotificationhubsPrivateEndpointConnectionProvisioningState left, NotificationhubsPrivateEndpointConnectionProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="NotificationhubsPrivateEndpointConnectionProvisioningState"/>. </summary>
        public static implicit operator NotificationhubsPrivateEndpointConnectionProvisioningState(string value) => new NotificationhubsPrivateEndpointConnectionProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NotificationhubsPrivateEndpointConnectionProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NotificationhubsPrivateEndpointConnectionProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
