// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Notificationhubs.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmNotificationhubsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Info"/>. </summary>
        /// <param name="name"> The name of the operation being performed on this particular object.". </param>
        /// <param name="display"> he localized display information for this particular operation / action. </param>
        /// <param name="isDataAction"> The intended executor of the operation.". </param>
        /// <param name="operationServiceSpecification"> Additional descriptions for the operation. </param>
        /// <returns> A new <see cref="Models.Info"/> instance for mocking. </returns>
        public static Info Info(string name = null, OperationDisplay display = null, bool? isDataAction = null, ServiceSpecification operationServiceSpecification = null)
        {
            return new Info(name, display, isDataAction, operationServiceSpecification != null ? new OperationProperties(operationServiceSpecification, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute". </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections". </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine". </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ServiceSpecification"/>. </summary>
        /// <param name="logSpecifications"> Log specifications. </param>
        /// <param name="metricSpecifications"> Metric specification. </param>
        /// <returns> A new <see cref="Models.ServiceSpecification"/> instance for mocking. </returns>
        public static ServiceSpecification ServiceSpecification(IEnumerable<LogSpecification> logSpecifications = null, IEnumerable<MetricSpecification> metricSpecifications = null)
        {
            logSpecifications ??= new List<LogSpecification>();
            metricSpecifications ??= new List<MetricSpecification>();

            return new ServiceSpecification(logSpecifications?.ToList(), metricSpecifications?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogSpecification"/>. </summary>
        /// <param name="name"> Name of the log category. </param>
        /// <param name="displayName"> Display name of the log category. </param>
        /// <param name="blobDuration"> Duration of data written to a single blob. </param>
        /// <param name="categoryGroups"> Category group for the log specification. </param>
        /// <returns> A new <see cref="Models.LogSpecification"/> instance for mocking. </returns>
        public static LogSpecification LogSpecification(string name = null, string displayName = null, string blobDuration = null, IEnumerable<string> categoryGroups = null)
        {
            categoryGroups ??= new List<string>();

            return new LogSpecification(name, displayName, blobDuration, categoryGroups?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricSpecification"/>. </summary>
        /// <param name="name"> Metric name / id. </param>
        /// <param name="displayName"> User-visible metric name. </param>
        /// <param name="displayDescription"> Description of the metric. </param>
        /// <param name="unit"> Metric unit. </param>
        /// <param name="aggregationType"> Type of the aggregation (Average, Minimum, Maximum, Total or Count). </param>
        /// <param name="availabilities"> List of availabilities. </param>
        /// <param name="supportedTimeGrainTypes"> List of supported time grain types. </param>
        /// <param name="metricFilterPattern"> The matching regex pattern to be applied to the field pointed by the "metricsFilterPathSelector" flag in the ARM manifest. </param>
        /// <param name="fillGapWithZero"> Optional property. If set to true, then zero will be returned for time duration where no metric is emitted / published. </param>
        /// <returns> A new <see cref="Models.MetricSpecification"/> instance for mocking. </returns>
        public static MetricSpecification MetricSpecification(string name = null, string displayName = null, string displayDescription = null, string unit = null, string aggregationType = null, IEnumerable<Availability> availabilities = null, IEnumerable<string> supportedTimeGrainTypes = null, string metricFilterPattern = null, bool? fillGapWithZero = null)
        {
            availabilities ??= new List<Availability>();
            supportedTimeGrainTypes ??= new List<string>();

            return new MetricSpecification(
                name,
                displayName,
                displayDescription,
                unit,
                aggregationType,
                availabilities?.ToList(),
                supportedTimeGrainTypes?.ToList(),
                metricFilterPattern,
                fillGapWithZero,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Availability"/>. </summary>
        /// <param name="timeGrain"> Time grain of the availability. </param>
        /// <param name="blobDuration"> Duration of the availability blob. </param>
        /// <returns> A new <see cref="Models.Availability"/> instance for mocking. </returns>
        public static Availability Availability(string timeGrain = null, string blobDuration = null)
        {
            return new Availability(timeGrain, blobDuration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Notificationhubs.NotificationHubResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="registrationTtl"> Gets or sets the RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> Gets or sets the AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredential"> Description of a NotificationHub ApnsCredential. </param>
        /// <param name="wnsCredential"> Description of a NotificationHub WnsCredential. </param>
        /// <param name="gcmCredential"> Description of a NotificationHub GcmCredential. </param>
        /// <param name="mpnsCredential"> Description of a NotificationHub MpnsCredential. </param>
        /// <param name="admCredential"> Description of a NotificationHub AdmCredential. </param>
        /// <param name="baiduCredential"> Description of a NotificationHub BaiduCredential. </param>
        /// <param name="browserCredential"> Description of a NotificationHub BrowserCredential. </param>
        /// <param name="xiaomiCredential"> Description of a NotificationHub XiaomiCredential. </param>
        /// <param name="fcmV1Credential"> Description of a NotificationHub FcmV1Credential. </param>
        /// <param name="dailyMaxActiveDevices"></param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <returns> A new <see cref="Notificationhubs.NotificationHubResourceData"/> instance for mocking. </returns>
        public static NotificationHubResourceData NotificationHubResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, ApnsCredential apnsCredential = null, WnsCredential wnsCredential = null, GcmCredential gcmCredential = null, MpnsCredential mpnsCredential = null, AdmCredential admCredential = null, BaiduCredential baiduCredential = null, BrowserCredential browserCredential = null, XiaomiCredential xiaomiCredential = null, FcmV1Credential fcmV1Credential = null, long? dailyMaxActiveDevices = null, NotificationhubsSku sku = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();

            return new NotificationHubResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                registrationTtl,
                authorizationRules?.ToList(),
                apnsCredential,
                wnsCredential,
                gcmCredential,
                mpnsCredential,
                admCredential,
                baiduCredential,
                browserCredential,
                xiaomiCredential,
                fcmV1Credential,
                dailyMaxActiveDevices,
                sku,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedAccessAuthorizationRuleProperties"/>. </summary>
        /// <param name="rights"> Gets or sets the rights associated with the rule. </param>
        /// <param name="primaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="secondaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="keyName"> Gets a string that describes the authorization rule. </param>
        /// <param name="modifiedOn"> Gets the last modified time for this rule. </param>
        /// <param name="createdOn"> Gets the created time for this rule. </param>
        /// <param name="claimType"> Gets a string that describes the claim type. </param>
        /// <param name="claimValue"> Gets a string that describes the claim value. </param>
        /// <param name="revision"> Gets the revision number for the rule. </param>
        /// <returns> A new <see cref="Models.SharedAccessAuthorizationRuleProperties"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleProperties SharedAccessAuthorizationRuleProperties(IEnumerable<AccessRight> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? createdOn = null, string claimType = null, string claimValue = null, int? revision = null)
        {
            rights ??= new List<AccessRight>();

            return new SharedAccessAuthorizationRuleProperties(
                rights?.ToList(),
                primaryKey,
                secondaryKey,
                keyName,
                modifiedOn,
                createdOn,
                claimType,
                claimValue,
                revision,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationHubResourcePatch"/>. </summary>
        /// <param name="name"> Gets or sets the NotificationHub name. </param>
        /// <param name="registrationTtl"> Gets or sets the RegistrationTtl of the created NotificationHub. </param>
        /// <param name="authorizationRules"> Gets or sets the AuthorizationRules of the created NotificationHub. </param>
        /// <param name="apnsCredential"> Description of a NotificationHub ApnsCredential. </param>
        /// <param name="wnsCredential"> Description of a NotificationHub WnsCredential. </param>
        /// <param name="gcmCredential"> Description of a NotificationHub GcmCredential. </param>
        /// <param name="mpnsCredential"> Description of a NotificationHub MpnsCredential. </param>
        /// <param name="admCredential"> Description of a NotificationHub AdmCredential. </param>
        /// <param name="baiduCredential"> Description of a NotificationHub BaiduCredential. </param>
        /// <param name="browserCredential"> Description of a NotificationHub BrowserCredential. </param>
        /// <param name="xiaomiCredential"> Description of a NotificationHub XiaomiCredential. </param>
        /// <param name="fcmV1Credential"> Description of a NotificationHub FcmV1Credential. </param>
        /// <param name="dailyMaxActiveDevices"></param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <param name="tags"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.NotificationHubResourcePatch"/> instance for mocking. </returns>
        public static NotificationHubResourcePatch NotificationHubResourcePatch(string name = null, string registrationTtl = null, IEnumerable<SharedAccessAuthorizationRuleProperties> authorizationRules = null, ApnsCredential apnsCredential = null, WnsCredential wnsCredential = null, GcmCredential gcmCredential = null, MpnsCredential mpnsCredential = null, AdmCredential admCredential = null, BaiduCredential baiduCredential = null, BrowserCredential browserCredential = null, XiaomiCredential xiaomiCredential = null, FcmV1Credential fcmV1Credential = null, long? dailyMaxActiveDevices = null, NotificationhubsSku sku = null, IDictionary<string, string> tags = null)
        {
            authorizationRules ??= new List<SharedAccessAuthorizationRuleProperties>();
            tags ??= new Dictionary<string, string>();

            return new NotificationHubResourcePatch(
                name,
                registrationTtl,
                authorizationRules?.ToList(),
                apnsCredential,
                wnsCredential,
                gcmCredential,
                mpnsCredential,
                admCredential,
                baiduCredential,
                browserCredential,
                xiaomiCredential,
                fcmV1Credential,
                dailyMaxActiveDevices,
                sku,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DebugSendResponseResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="success"> Gets or sets successful send. </param>
        /// <param name="failure"> Gets or sets send failure. </param>
        /// <param name="results"> Gets or sets actual failure description. </param>
        /// <param name="location"> Deprecated - only for compatibility. </param>
        /// <param name="tags"> Deprecated - only for compatibility. </param>
        /// <returns> A new <see cref="Models.DebugSendResponseResult"/> instance for mocking. </returns>
        public static DebugSendResponseResult DebugSendResponseResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, long? success = null, long? failure = null, IEnumerable<RegistrationResult> results = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            results ??= new List<RegistrationResult>();
            tags ??= new Dictionary<string, string>();

            return new DebugSendResponseResult(
                id,
                name,
                resourceType,
                systemData,
                success,
                failure,
                results?.ToList(),
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RegistrationResult"/>. </summary>
        /// <param name="applicationPlatform"> PNS type. </param>
        /// <param name="pnsHandle"> PNS handle. </param>
        /// <param name="registrationId"> Registration id. </param>
        /// <param name="outcome"> Notification outcome. </param>
        /// <returns> A new <see cref="Models.RegistrationResult"/> instance for mocking. </returns>
        public static RegistrationResult RegistrationResult(string applicationPlatform = null, string pnsHandle = null, string registrationId = null, string outcome = null)
        {
            return new RegistrationResult(applicationPlatform, pnsHandle, registrationId, outcome, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PnsCredentialsResource"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="admCredential"> Description of a NotificationHub AdmCredential. </param>
        /// <param name="apnsCredential"> Description of a NotificationHub ApnsCredential. </param>
        /// <param name="baiduCredential"> Description of a NotificationHub BaiduCredential. </param>
        /// <param name="browserCredential"> Description of a NotificationHub BrowserCredential. </param>
        /// <param name="gcmCredential"> Description of a NotificationHub GcmCredential. </param>
        /// <param name="mpnsCredential"> Description of a NotificationHub MpnsCredential. </param>
        /// <param name="wnsCredential"> Description of a NotificationHub WnsCredential. </param>
        /// <param name="xiaomiCredential"> Description of a NotificationHub XiaomiCredential. </param>
        /// <param name="fcmV1Credential"> Description of a NotificationHub FcmV1Credential. </param>
        /// <param name="location"> Deprecated - only for compatibility. </param>
        /// <param name="tags"> Deprecated - only for compatibility. </param>
        /// <returns> A new <see cref="Models.PnsCredentialsResource"/> instance for mocking. </returns>
        public static PnsCredentialsResource PnsCredentialsResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AdmCredential admCredential = null, ApnsCredential apnsCredential = null, BaiduCredential baiduCredential = null, BrowserCredential browserCredential = null, GcmCredential gcmCredential = null, MpnsCredential mpnsCredential = null, WnsCredential wnsCredential = null, XiaomiCredential xiaomiCredential = null, FcmV1Credential fcmV1Credential = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PnsCredentialsResource(
                id,
                name,
                resourceType,
                systemData,
                admCredential,
                apnsCredential,
                baiduCredential,
                browserCredential,
                gcmCredential,
                mpnsCredential,
                wnsCredential,
                xiaomiCredential,
                fcmV1Credential,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Notificationhubs.NamespaceResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <param name="provisioningState"> Defines values for OperationProvisioningState. </param>
        /// <param name="status"> Namespace status. </param>
        /// <param name="enabled"> Gets or sets whether or not the namespace is currently enabled. </param>
        /// <param name="critical"> Gets or sets whether or not the namespace is set as Critical. </param>
        /// <param name="subscriptionId"> Namespace subscription id. </param>
        /// <param name="region">
        /// Region. The value is always set to the same value as Namespace.Location, so we are deprecating
        /// this property.
        /// </param>
        /// <param name="metricId"> Azure Insights Metrics id. </param>
        /// <param name="createdOn"> Time when the namespace was created. </param>
        /// <param name="updatedOn"> Time when the namespace was updated. </param>
        /// <param name="namespaceType"> Defines values for NamespaceType. </param>
        /// <param name="replicationRegion"> Allowed replication region. </param>
        /// <param name="zoneRedundancy"> Namespace SKU name. </param>
        /// <param name="networkAcls"> A collection of network authorization rules. </param>
        /// <param name="pnsCredentials"> Collection of Notification Hub or Notification Hub Namespace PNS credentials. </param>
        /// <param name="serviceBusEndpoint">
        /// Gets or sets endpoint you can use to perform NotificationHub
        /// operations.
        /// </param>
        /// <param name="privateEndpointConnections"> Private Endpoint Connections for namespace. </param>
        /// <param name="scaleUnit"> Gets or sets scaleUnit where the namespace gets created. </param>
        /// <param name="dataCenter"> Deprecated. </param>
        /// <param name="publicNetworkAccess"> Type of public network access. </param>
        /// <returns> A new <see cref="Notificationhubs.NamespaceResourceData"/> instance for mocking. </returns>
        public static NamespaceResourceData NamespaceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NotificationhubsSku sku = null, OperationProvisioningState? provisioningState = null, NamespaceStatus? status = null, bool? enabled = null, bool? critical = null, string subscriptionId = null, string region = null, string metricId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, NamespaceType? namespaceType = null, ReplicationRegion? replicationRegion = null, ZoneRedundancyPreference? zoneRedundancy = null, NetworkAcls networkAcls = null, PnsCredentials pnsCredentials = null, string serviceBusEndpoint = null, IEnumerable<PrivateEndpointConnectionResourceData> privateEndpointConnections = null, string scaleUnit = null, string dataCenter = null, PublicNetworkAccess? publicNetworkAccess = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<PrivateEndpointConnectionResourceData>();

            return new NamespaceResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                sku,
                provisioningState,
                status,
                enabled,
                critical,
                subscriptionId,
                region,
                metricId,
                createdOn,
                updatedOn,
                namespaceType,
                replicationRegion,
                zoneRedundancy,
                networkAcls,
                pnsCredentials,
                serviceBusEndpoint,
                privateEndpointConnections?.ToList(),
                scaleUnit,
                dataCenter,
                publicNetworkAccess,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamespaceProperties"/>. </summary>
        /// <param name="name">
        /// Name of the Notification Hubs namespace. This is immutable property, set automatically
        /// by the service when the namespace is created.
        /// </param>
        /// <param name="provisioningState"> Defines values for OperationProvisioningState. </param>
        /// <param name="status"> Namespace status. </param>
        /// <param name="enabled"> Gets or sets whether or not the namespace is currently enabled. </param>
        /// <param name="critical"> Gets or sets whether or not the namespace is set as Critical. </param>
        /// <param name="subscriptionId"> Namespace subscription id. </param>
        /// <param name="region">
        /// Region. The value is always set to the same value as Namespace.Location, so we are deprecating
        /// this property.
        /// </param>
        /// <param name="metricId"> Azure Insights Metrics id. </param>
        /// <param name="createdOn"> Time when the namespace was created. </param>
        /// <param name="updatedOn"> Time when the namespace was updated. </param>
        /// <param name="namespaceType"> Defines values for NamespaceType. </param>
        /// <param name="replicationRegion"> Allowed replication region. </param>
        /// <param name="zoneRedundancy"> Namespace SKU name. </param>
        /// <param name="networkAcls"> A collection of network authorization rules. </param>
        /// <param name="pnsCredentials"> Collection of Notification Hub or Notification Hub Namespace PNS credentials. </param>
        /// <param name="serviceBusEndpoint">
        /// Gets or sets endpoint you can use to perform NotificationHub
        /// operations.
        /// </param>
        /// <param name="privateEndpointConnections"> Private Endpoint Connections for namespace. </param>
        /// <param name="scaleUnit"> Gets or sets scaleUnit where the namespace gets created. </param>
        /// <param name="dataCenter"> Deprecated. </param>
        /// <param name="publicNetworkAccess"> Type of public network access. </param>
        /// <returns> A new <see cref="Models.NamespaceProperties"/> instance for mocking. </returns>
        public static NamespaceProperties NamespaceProperties(string name = null, OperationProvisioningState? provisioningState = null, NamespaceStatus? status = null, bool? enabled = null, bool? critical = null, string subscriptionId = null, string region = null, string metricId = null, DateTimeOffset? createdOn = null, DateTimeOffset? updatedOn = null, NamespaceType? namespaceType = null, ReplicationRegion? replicationRegion = null, ZoneRedundancyPreference? zoneRedundancy = null, NetworkAcls networkAcls = null, PnsCredentials pnsCredentials = null, string serviceBusEndpoint = null, IEnumerable<PrivateEndpointConnectionResourceData> privateEndpointConnections = null, string scaleUnit = null, string dataCenter = null, PublicNetworkAccess? publicNetworkAccess = null)
        {
            privateEndpointConnections ??= new List<PrivateEndpointConnectionResourceData>();

            return new NamespaceProperties(
                name,
                provisioningState,
                status,
                enabled,
                critical,
                subscriptionId,
                region,
                metricId,
                createdOn,
                updatedOn,
                namespaceType,
                replicationRegion,
                zoneRedundancy,
                networkAcls,
                pnsCredentials,
                serviceBusEndpoint,
                privateEndpointConnections?.ToList(),
                scaleUnit,
                dataCenter,
                publicNetworkAccess,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Notificationhubs.PrivateEndpointConnectionResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Private Endpoint Connection properties. </param>
        /// <returns> A new <see cref="Notificationhubs.PrivateEndpointConnectionResourceData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResourceData PrivateEndpointConnectionResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new PrivateEndpointConnectionResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionProperties"/>. </summary>
        /// <param name="provisioningState"> State of Private Endpoint Connection. </param>
        /// <param name="privateEndpointId"> Represents a Private Endpoint that is connected to Notification Hubs namespace using Private Endpoint Connection. </param>
        /// <param name="groupIds"> List of group ids. For Notification Hubs, it always contains a single "namespace" element. </param>
        /// <param name="privateLinkServiceConnectionState"> State of the Private Link Service connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(NotificationhubsPrivateEndpointConnectionProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, IEnumerable<string> groupIds = null, RemotePrivateLinkServiceConnectionState privateLinkServiceConnectionState = null)
        {
            groupIds ??= new List<string>();

            return new PrivateEndpointConnectionProperties(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, groupIds?.ToList(), privateLinkServiceConnectionState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RemotePrivateLinkServiceConnectionState"/>. </summary>
        /// <param name="status"> State of Private Link Connection. </param>
        /// <param name="description"> Human-friendly description. </param>
        /// <param name="actionsRequired"> Human-friendly description of required actions. </param>
        /// <returns> A new <see cref="Models.RemotePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static RemotePrivateLinkServiceConnectionState RemotePrivateLinkServiceConnectionState(PrivateLinkConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new RemotePrivateLinkServiceConnectionState(status, description, actionsRequired, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckAvailabilityContent"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="isAvailiable"> Not used and deprecated since API version 2023-01-01-preview. </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <returns> A new <see cref="Models.CheckAvailabilityContent"/> instance for mocking. </returns>
        public static CheckAvailabilityContent CheckAvailabilityContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, bool? isAvailiable = null, NotificationhubsSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CheckAvailabilityContent(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                isAvailiable,
                sku,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckAvailabilityResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isAvailiable">
        /// Gets or sets true if the name is available and can be used to
        /// create new Namespace/NotificationHub. Otherwise false.
        /// </param>
        /// <param name="location"> Deprecated - only for compatibility. </param>
        /// <param name="tags"> Deprecated - only for compatibility. </param>
        /// <param name="sku"> The Sku description for a namespace. </param>
        /// <returns> A new <see cref="Models.CheckAvailabilityResult"/> instance for mocking. </returns>
        public static CheckAvailabilityResult CheckAvailabilityResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isAvailiable = null, string location = null, IReadOnlyDictionary<string, string> tags = null, NotificationhubsSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CheckAvailabilityResult(
                id,
                name,
                resourceType,
                systemData,
                isAvailiable,
                location,
                tags,
                sku,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Notificationhubs.SharedAccessAuthorizationRuleResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="rights"> Gets or sets the rights associated with the rule. </param>
        /// <param name="primaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="secondaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="keyName"> Gets a string that describes the authorization rule. </param>
        /// <param name="modifiedOn"> Gets the last modified time for this rule. </param>
        /// <param name="createdOn"> Gets the created time for this rule. </param>
        /// <param name="claimType"> Gets a string that describes the claim type. </param>
        /// <param name="claimValue"> Gets a string that describes the claim value. </param>
        /// <param name="revision"> Gets the revision number for the rule. </param>
        /// <returns> A new <see cref="Notificationhubs.SharedAccessAuthorizationRuleResourceData"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleResourceData SharedAccessAuthorizationRuleResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<AccessRight> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, DateTimeOffset? modifiedOn = null, DateTimeOffset? createdOn = null, string claimType = null, string claimValue = null, int? revision = null)
        {
            tags ??= new Dictionary<string, string>();
            rights ??= new List<AccessRight>();

            return new SharedAccessAuthorizationRuleResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                rights?.ToList(),
                primaryKey,
                secondaryKey,
                keyName,
                modifiedOn,
                createdOn,
                claimType,
                claimValue,
                revision,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceListKeys"/>. </summary>
        /// <param name="primaryConnectionString"> Gets or sets primaryConnectionString of the AuthorizationRule. </param>
        /// <param name="secondaryConnectionString">
        /// Gets or sets secondaryConnectionString of the created
        /// AuthorizationRule
        /// </param>
        /// <param name="primaryKey"> Gets or sets primaryKey of the created AuthorizationRule. </param>
        /// <param name="secondaryKey"> Gets or sets secondaryKey of the created AuthorizationRule. </param>
        /// <param name="keyName"> Gets or sets keyName of the created AuthorizationRule. </param>
        /// <returns> A new <see cref="Models.ResourceListKeys"/> instance for mocking. </returns>
        public static ResourceListKeys ResourceListKeys(string primaryConnectionString = null, string secondaryConnectionString = null, string primaryKey = null, string secondaryKey = null, string keyName = null)
        {
            return new ResourceListKeys(
                primaryConnectionString,
                secondaryConnectionString,
                primaryKey,
                secondaryKey,
                keyName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Notificationhubs.NotificationhubsPrivateLinkResourceDataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Represents properties of Private Link Resource. </param>
        /// <returns> A new <see cref="Notificationhubs.NotificationhubsPrivateLinkResourceDataData"/> instance for mocking. </returns>
        public static NotificationhubsPrivateLinkResourceDataData NotificationhubsPrivateLinkResourceDataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NotificationhubsPrivateLinkResourceProperties properties = null)
        {
            return new NotificationhubsPrivateLinkResourceDataData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationhubsPrivateLinkResourceProperties"/>. </summary>
        /// <param name="groupId"> A Group Id for Private Link. For Notification Hubs, it is always set to "namespace". </param>
        /// <param name="requiredMembers"> Required members. For Notification Hubs, it's always a collection with a single "namespace" item. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names. For Notification Hubs, it contains two CNames for Service Bus and Notification Hubs zones. </param>
        /// <returns> A new <see cref="Models.NotificationhubsPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static NotificationhubsPrivateLinkResourceProperties NotificationhubsPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new NotificationhubsPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
