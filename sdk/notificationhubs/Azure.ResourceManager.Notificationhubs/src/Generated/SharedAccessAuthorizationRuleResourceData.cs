// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Notificationhubs.Models;

namespace Azure.ResourceManager.Notificationhubs
{
    /// <summary>
    /// A class representing the SharedAccessAuthorizationRuleResource data model.
    /// Response for POST requests that return single SharedAccessAuthorizationRule.
    /// </summary>
    public partial class SharedAccessAuthorizationRuleResourceData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SharedAccessAuthorizationRuleResourceData"/>. </summary>
        /// <param name="location"> The location. </param>
        public SharedAccessAuthorizationRuleResourceData(AzureLocation location) : base(location)
        {
            Rights = new ChangeTrackingList<AccessRight>();
        }

        /// <summary> Initializes a new instance of <see cref="SharedAccessAuthorizationRuleResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="rights"> Gets or sets the rights associated with the rule. </param>
        /// <param name="primaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="secondaryKey">
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </param>
        /// <param name="keyName"> Gets a string that describes the authorization rule. </param>
        /// <param name="modifiedOn"> Gets the last modified time for this rule. </param>
        /// <param name="createdOn"> Gets the created time for this rule. </param>
        /// <param name="claimType"> Gets a string that describes the claim type. </param>
        /// <param name="claimValue"> Gets a string that describes the claim value. </param>
        /// <param name="revision"> Gets the revision number for the rule. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SharedAccessAuthorizationRuleResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, IList<AccessRight> rights, string primaryKey, string secondaryKey, string keyName, DateTimeOffset? modifiedOn, DateTimeOffset? createdOn, string claimType, string claimValue, int? revision, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Rights = rights;
            PrimaryKey = primaryKey;
            SecondaryKey = secondaryKey;
            KeyName = keyName;
            ModifiedOn = modifiedOn;
            CreatedOn = createdOn;
            ClaimType = claimType;
            ClaimValue = claimValue;
            Revision = revision;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SharedAccessAuthorizationRuleResourceData"/> for deserialization. </summary>
        internal SharedAccessAuthorizationRuleResourceData()
        {
        }

        /// <summary> Gets or sets the rights associated with the rule. </summary>
        public IList<AccessRight> Rights { get; }
        /// <summary>
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </summary>
        public string PrimaryKey { get; set; }
        /// <summary>
        /// Gets a base64-encoded 256-bit primary key for signing and
        /// validating the SAS token.
        /// </summary>
        public string SecondaryKey { get; set; }
        /// <summary> Gets a string that describes the authorization rule. </summary>
        public string KeyName { get; }
        /// <summary> Gets the last modified time for this rule. </summary>
        public DateTimeOffset? ModifiedOn { get; }
        /// <summary> Gets the created time for this rule. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Gets a string that describes the claim type. </summary>
        public string ClaimType { get; }
        /// <summary> Gets a string that describes the claim value. </summary>
        public string ClaimValue { get; }
        /// <summary> Gets the revision number for the rule. </summary>
        public int? Revision { get; }
    }
}
