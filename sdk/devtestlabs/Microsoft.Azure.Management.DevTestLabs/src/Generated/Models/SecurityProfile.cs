// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DevTestLabs.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The security profile settings for a virtual machine.
    /// </summary>
    public partial class SecurityProfile
    {
        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>
        public SecurityProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityProfile class.
        /// </summary>
        /// <param name="securityType">Specifies the SecurityType of the
        /// virtual machine. It has to be set to any specified value to enable
        /// UefiSettings. &lt;br&gt;&lt;br&gt; Default: UefiSettings will not
        /// be enabled unless this property is set. Possible values include:
        /// 'TrustedLaunch', 'ConfidentialVM'</param>
        /// <param name="uefiSettings">Security settings like secure boot and
        /// vTPM. Structure must be null if SecurityType string is
        /// null.</param>
        public SecurityProfile(string securityType = default(string), UefiSettings uefiSettings = default(UefiSettings))
        {
            SecurityType = securityType;
            UefiSettings = uefiSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the SecurityType of the virtual machine. It
        /// has to be set to any specified value to enable UefiSettings.
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; Default: UefiSettings will not
        /// be enabled unless this property is set. Possible values include:
        /// 'TrustedLaunch', 'ConfidentialVM'
        /// </summary>
        [JsonProperty(PropertyName = "securityType")]
        public string SecurityType { get; set; }

        /// <summary>
        /// Gets or sets security settings like secure boot and vTPM. Structure
        /// must be null if SecurityType string is null.
        /// </summary>
        [JsonProperty(PropertyName = "uefiSettings")]
        public UefiSettings UefiSettings { get; set; }

    }
}
