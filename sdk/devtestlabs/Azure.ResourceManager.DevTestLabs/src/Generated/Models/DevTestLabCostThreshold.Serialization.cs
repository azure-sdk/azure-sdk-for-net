// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabCostThreshold : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ThresholdId))
            {
                writer.WritePropertyName("thresholdId"u8);
                writer.WriteStringValue(ThresholdId);
            }
            if (Optional.IsDefined(DisplayOnChart))
            {
                writer.WritePropertyName("displayOnChart"u8);
                writer.WriteStringValue(DisplayOnChart.Value.ToString());
            }
            if (Optional.IsDefined(SendNotificationWhenExceeded))
            {
                writer.WritePropertyName("sendNotificationWhenExceeded"u8);
                writer.WriteStringValue(SendNotificationWhenExceeded.Value.ToString());
            }
            if (Optional.IsDefined(NotificationSent))
            {
                writer.WritePropertyName("notificationSent"u8);
                writer.WriteStringValue(NotificationSent);
            }
            writer.WritePropertyName("percentageThreshold"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ThresholdValue))
            {
                writer.WritePropertyName("thresholdValue"u8);
                writer.WriteNumberValue(ThresholdValue.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DevTestLabCostThreshold DeserializeDevTestLabCostThreshold(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> thresholdId = default;
            Optional<DevTestLabCostThresholdStatus> displayOnChart = default;
            Optional<DevTestLabCostThresholdStatus> sendNotificationWhenExceeded = default;
            Optional<string> notificationSent = default;
            Optional<double> thresholdValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("thresholdId"u8))
                {
                    thresholdId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayOnChart"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    displayOnChart = new DevTestLabCostThresholdStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sendNotificationWhenExceeded"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sendNotificationWhenExceeded = new DevTestLabCostThresholdStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationSent"u8))
                {
                    notificationSent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("percentageThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("thresholdValue"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            thresholdValue = property0.Value.GetDouble();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DevTestLabCostThreshold(thresholdId.Value, Optional.ToNullable(displayOnChart), Optional.ToNullable(sendNotificationWhenExceeded), notificationSent.Value, Optional.ToNullable(thresholdValue));
        }
    }
}
