// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabSubnetOverride : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId"u8);
                writer.WriteStringValue(ResourceId);
            }
            if (Optional.IsDefined(LabSubnetName))
            {
                writer.WritePropertyName("labSubnetName"u8);
                writer.WriteStringValue(LabSubnetName);
            }
            if (Optional.IsDefined(UseInVmCreationPermission))
            {
                writer.WritePropertyName("useInVmCreationPermission"u8);
                writer.WriteStringValue(UseInVmCreationPermission.Value.ToString());
            }
            if (Optional.IsDefined(UsePublicIPAddressPermission))
            {
                writer.WritePropertyName("usePublicIpAddressPermission"u8);
                writer.WriteStringValue(UsePublicIPAddressPermission.Value.ToString());
            }
            if (Optional.IsDefined(VirtualNetworkPoolName))
            {
                writer.WritePropertyName("virtualNetworkPoolName"u8);
                writer.WriteStringValue(VirtualNetworkPoolName);
            }
            writer.WritePropertyName("sharedPublicIpAddressConfiguration"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AllowedPorts))
            {
                writer.WritePropertyName("allowedPorts"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedPorts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DevTestLabSubnetOverride DeserializeDevTestLabSubnetOverride(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> resourceId = default;
            Optional<string> labSubnetName = default;
            Optional<DevTestLabUsagePermissionType> useInVmCreationPermission = default;
            Optional<DevTestLabUsagePermissionType> usePublicIPAddressPermission = default;
            Optional<string> virtualNetworkPoolName = default;
            Optional<IList<DevTestLabPort>> allowedPorts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("labSubnetName"u8))
                {
                    labSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("useInVmCreationPermission"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    useInVmCreationPermission = new DevTestLabUsagePermissionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("usePublicIpAddressPermission"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    usePublicIPAddressPermission = new DevTestLabUsagePermissionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("virtualNetworkPoolName"u8))
                {
                    virtualNetworkPoolName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sharedPublicIpAddressConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("allowedPorts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<DevTestLabPort> array = new List<DevTestLabPort>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DevTestLabPort.DeserializeDevTestLabPort(item));
                            }
                            allowedPorts = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DevTestLabSubnetOverride(resourceId.Value, labSubnetName.Value, Optional.ToNullable(useInVmCreationPermission), Optional.ToNullable(usePublicIPAddressPermission), virtualNetworkPoolName.Value, Optional.ToList(allowedPorts));
        }
    }
}
