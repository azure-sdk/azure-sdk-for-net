// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DevTestLabs.Models
{
    public partial class DevTestLabVmCreationContent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Notes))
            {
                writer.WritePropertyName("notes"u8);
                writer.WriteStringValue(Notes);
            }
            if (Optional.IsDefined(OwnerObjectId))
            {
                writer.WritePropertyName("ownerObjectId"u8);
                writer.WriteStringValue(OwnerObjectId);
            }
            if (Optional.IsDefined(OwnerUserPrincipalName))
            {
                writer.WritePropertyName("ownerUserPrincipalName"u8);
                writer.WriteStringValue(OwnerUserPrincipalName);
            }
            if (Optional.IsDefined(CreatedDatePropertiesCreatedOn))
            {
                writer.WritePropertyName("createdDate"u8);
                writer.WriteStringValue(CreatedDatePropertiesCreatedOn.Value, "O");
            }
            if (Optional.IsDefined(CustomImageId))
            {
                writer.WritePropertyName("customImageId"u8);
                writer.WriteStringValue(CustomImageId);
            }
            if (Optional.IsDefined(GalleryImageVersionId))
            {
                writer.WritePropertyName("galleryImageVersionId"u8);
                writer.WriteStringValue(GalleryImageVersionId);
            }
            if (Optional.IsDefined(SharedImageId))
            {
                writer.WritePropertyName("sharedImageId"u8);
                writer.WriteStringValue(SharedImageId);
            }
            if (Optional.IsDefined(SharedImageVersion))
            {
                writer.WritePropertyName("sharedImageVersion"u8);
                writer.WriteStringValue(SharedImageVersion);
            }
            if (Optional.IsDefined(Size))
            {
                writer.WritePropertyName("size"u8);
                writer.WriteStringValue(Size);
            }
            if (Optional.IsDefined(UserName))
            {
                writer.WritePropertyName("userName"u8);
                writer.WriteStringValue(UserName);
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password"u8);
                writer.WriteStringValue(Password);
            }
            if (Optional.IsDefined(SshKey))
            {
                writer.WritePropertyName("sshKey"u8);
                writer.WriteStringValue(SshKey);
            }
            if (Optional.IsDefined(IsAuthenticationWithSshKey))
            {
                writer.WritePropertyName("isAuthenticationWithSshKey"u8);
                writer.WriteBooleanValue(IsAuthenticationWithSshKey.Value);
            }
            if (Optional.IsDefined(LabSubnetName))
            {
                writer.WritePropertyName("labSubnetName"u8);
                writer.WriteStringValue(LabSubnetName);
            }
            if (Optional.IsDefined(LabVirtualNetworkId))
            {
                writer.WritePropertyName("labVirtualNetworkId"u8);
                writer.WriteStringValue(LabVirtualNetworkId);
            }
            if (Optional.IsDefined(DisallowPublicIPAddress))
            {
                writer.WritePropertyName("disallowPublicIpAddress"u8);
                writer.WriteBooleanValue(DisallowPublicIPAddress.Value);
            }
            if (Optional.IsCollectionDefined(Artifacts))
            {
                writer.WritePropertyName("artifacts"u8);
                writer.WriteStartArray();
                foreach (var item in Artifacts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PlanId))
            {
                writer.WritePropertyName("planId"u8);
                writer.WriteStringValue(PlanId);
            }
            if (Optional.IsDefined(OSDiskSizeGb))
            {
                writer.WritePropertyName("osDiskSizeGb"u8);
                writer.WriteNumberValue(OSDiskSizeGb.Value);
            }
            if (Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationDate"u8);
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (Optional.IsDefined(AllowClaim))
            {
                writer.WritePropertyName("allowClaim"u8);
                writer.WriteBooleanValue(AllowClaim.Value);
            }
            if (Optional.IsDefined(StorageType))
            {
                writer.WritePropertyName("storageType"u8);
                writer.WriteStringValue(StorageType.Value.ToString());
            }
            if (Optional.IsDefined(EnvironmentId))
            {
                writer.WritePropertyName("environmentId"u8);
                writer.WriteStringValue(EnvironmentId);
            }
            if (Optional.IsCollectionDefined(DataDiskParameters))
            {
                writer.WritePropertyName("dataDiskParameters"u8);
                writer.WriteStartArray();
                foreach (var item in DataDiskParameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ScheduleParameters))
            {
                writer.WritePropertyName("scheduleParameters"u8);
                writer.WriteStartArray();
                foreach (var item in ScheduleParameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("applicableSchedule"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(TagsPropertiesApplicableScheduleTags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in TagsPropertiesApplicableScheduleTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LocationPropertiesApplicableScheduleLocation))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(LocationPropertiesApplicableScheduleLocation.Value);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("labVmsStartup"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(TagsPropertiesApplicableSchedulePropertiesLabVmsStartupTags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in TagsPropertiesApplicableSchedulePropertiesLabVmsStartupTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LocationPropertiesApplicableSchedulePropertiesLabVmsStartupLocation))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(LocationPropertiesApplicableSchedulePropertiesLabVmsStartupLocation.Value);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(StatusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(StatusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus.Value.ToString());
            }
            if (Optional.IsDefined(TaskTypePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType))
            {
                writer.WritePropertyName("taskType"u8);
                writer.WriteStringValue(TaskTypePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType);
            }
            if (Optional.IsDefined(TimeZoneIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId))
            {
                writer.WritePropertyName("timeZoneId"u8);
                writer.WriteStringValue(TimeZoneIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId);
            }
            if (Optional.IsDefined(TargetResourceIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId))
            {
                writer.WritePropertyName("targetResourceId"u8);
                writer.WriteStringValue(TargetResourceIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId);
            }
            writer.WritePropertyName("notificationSettings"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(StatusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(StatusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus.Value.ToString());
            }
            if (Optional.IsDefined(TimeInMinutesPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes))
            {
                writer.WritePropertyName("timeInMinutes"u8);
                writer.WriteNumberValue(TimeInMinutesPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes.Value);
            }
            if (Optional.IsDefined(WebhookUrlPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUri))
            {
                writer.WritePropertyName("webhookUrl"u8);
                writer.WriteStringValue(WebhookUrlPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUri.AbsoluteUri);
            }
            if (Optional.IsDefined(EmailRecipientPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient))
            {
                writer.WritePropertyName("emailRecipient"u8);
                writer.WriteStringValue(EmailRecipientPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient);
            }
            if (Optional.IsDefined(NotificationLocalePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale))
            {
                writer.WritePropertyName("notificationLocale"u8);
                writer.WriteStringValue(NotificationLocalePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("hourlyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MinutePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute))
            {
                writer.WritePropertyName("minute"u8);
                writer.WriteNumberValue(MinutePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("dailyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(TimePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime))
            {
                writer.WritePropertyName("time"u8);
                writer.WriteStringValue(TimePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("weeklyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(WeekdaysPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays))
            {
                writer.WritePropertyName("weekdays"u8);
                writer.WriteStartArray();
                foreach (var item in WeekdaysPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TimePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime))
            {
                writer.WritePropertyName("time"u8);
                writer.WriteStringValue(TimePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WritePropertyName("labVmsShutdown"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(TagsPropertiesApplicableSchedulePropertiesLabVmsShutdownTags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in TagsPropertiesApplicableSchedulePropertiesLabVmsShutdownTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LocationPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(LocationPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation.Value);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(StatusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(StatusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus.Value.ToString());
            }
            if (Optional.IsDefined(TaskTypePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType))
            {
                writer.WritePropertyName("taskType"u8);
                writer.WriteStringValue(TaskTypePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType);
            }
            if (Optional.IsDefined(TimeZoneIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId))
            {
                writer.WritePropertyName("timeZoneId"u8);
                writer.WriteStringValue(TimeZoneIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId);
            }
            if (Optional.IsDefined(TargetResourceIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId))
            {
                writer.WritePropertyName("targetResourceId"u8);
                writer.WriteStringValue(TargetResourceIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId);
            }
            writer.WritePropertyName("notificationSettings"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(StatusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(StatusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus.Value.ToString());
            }
            if (Optional.IsDefined(TimeInMinutesPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes))
            {
                writer.WritePropertyName("timeInMinutes"u8);
                writer.WriteNumberValue(TimeInMinutesPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes.Value);
            }
            if (Optional.IsDefined(WebhookUrlPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUri))
            {
                writer.WritePropertyName("webhookUrl"u8);
                writer.WriteStringValue(WebhookUrlPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUri.AbsoluteUri);
            }
            if (Optional.IsDefined(EmailRecipientPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient))
            {
                writer.WritePropertyName("emailRecipient"u8);
                writer.WriteStringValue(EmailRecipientPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient);
            }
            if (Optional.IsDefined(NotificationLocalePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale))
            {
                writer.WritePropertyName("notificationLocale"u8);
                writer.WriteStringValue(NotificationLocalePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("hourlyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MinutePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute))
            {
                writer.WritePropertyName("minute"u8);
                writer.WriteNumberValue(MinutePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("dailyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(TimePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime))
            {
                writer.WritePropertyName("time"u8);
                writer.WriteStringValue(TimePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("weeklyRecurrence"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(WeekdaysPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays))
            {
                writer.WritePropertyName("weekdays"u8);
                writer.WriteStartArray();
                foreach (var item in WeekdaysPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TimePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime))
            {
                writer.WritePropertyName("time"u8);
                writer.WriteStringValue(TimePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WritePropertyName("networkInterface"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(VirtualNetworkId))
            {
                writer.WritePropertyName("virtualNetworkId"u8);
                writer.WriteStringValue(VirtualNetworkId);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(PublicIPAddressId))
            {
                writer.WritePropertyName("publicIpAddressId"u8);
                writer.WriteStringValue(PublicIPAddressId);
            }
            if (Optional.IsDefined(PublicIPAddress))
            {
                writer.WritePropertyName("publicIpAddress"u8);
                writer.WriteStringValue(PublicIPAddress);
            }
            if (Optional.IsDefined(PrivateIPAddress))
            {
                writer.WritePropertyName("privateIpAddress"u8);
                writer.WriteStringValue(PrivateIPAddress);
            }
            if (Optional.IsDefined(DnsName))
            {
                writer.WritePropertyName("dnsName"u8);
                writer.WriteStringValue(DnsName);
            }
            if (Optional.IsDefined(RdpAuthority))
            {
                writer.WritePropertyName("rdpAuthority"u8);
                writer.WriteStringValue(RdpAuthority);
            }
            if (Optional.IsDefined(SshAuthority))
            {
                writer.WritePropertyName("sshAuthority"u8);
                writer.WriteStringValue(SshAuthority);
            }
            writer.WritePropertyName("sharedPublicIpAddressConfiguration"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(InboundNatRules))
            {
                writer.WritePropertyName("inboundNatRules"u8);
                writer.WriteStartArray();
                foreach (var item in InboundNatRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WritePropertyName("computeVm"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Statuses))
            {
                writer.WritePropertyName("statuses"u8);
                writer.WriteStartArray();
                foreach (var item in Statuses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(OSTypePropertiesComputeVmOSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSTypePropertiesComputeVmOSType);
            }
            if (Optional.IsDefined(VmSize))
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Optional.IsDefined(NetworkInterfaceId))
            {
                writer.WritePropertyName("networkInterfaceId"u8);
                writer.WriteStringValue(NetworkInterfaceId);
            }
            if (Optional.IsDefined(OSDiskId))
            {
                writer.WritePropertyName("osDiskId"u8);
                writer.WriteStringValue(OSDiskId);
            }
            if (Optional.IsCollectionDefined(DataDiskIds))
            {
                writer.WritePropertyName("dataDiskIds"u8);
                writer.WriteStartArray();
                foreach (var item in DataDiskIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DataDisks))
            {
                writer.WritePropertyName("dataDisks"u8);
                writer.WriteStartArray();
                foreach (var item in DataDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("galleryImageReference"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Offer))
            {
                writer.WritePropertyName("offer"u8);
                writer.WriteStringValue(Offer);
            }
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher"u8);
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteStringValue(Sku);
            }
            if (Optional.IsDefined(OSTypePropertiesGalleryImageReferenceOSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSTypePropertiesGalleryImageReferenceOSType);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("artifactDeploymentStatus"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(DeploymentStatus))
            {
                writer.WritePropertyName("deploymentStatus"u8);
                writer.WriteStringValue(DeploymentStatus);
            }
            if (Optional.IsDefined(ArtifactsApplied))
            {
                writer.WritePropertyName("artifactsApplied"u8);
                writer.WriteNumberValue(ArtifactsApplied.Value);
            }
            if (Optional.IsDefined(TotalArtifacts))
            {
                writer.WritePropertyName("totalArtifacts"u8);
                writer.WriteNumberValue(TotalArtifacts.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("bulkCreationParameters"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(InstanceCount))
            {
                writer.WritePropertyName("instanceCount"u8);
                writer.WriteNumberValue(InstanceCount.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }
    }
}
