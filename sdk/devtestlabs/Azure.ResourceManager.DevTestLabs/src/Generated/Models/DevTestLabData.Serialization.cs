// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DevTestLabs.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevTestLabs
{
    public partial class DevTestLabData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("identity"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(TypeIdentityType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(TypeIdentityType.Value.ToString());
            }
            if (Optional.IsDefined(PrincipalId))
            {
                writer.WritePropertyName("principalId"u8);
                writer.WriteStringValue(PrincipalId);
            }
            if (Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantId"u8);
                writer.WriteStringValue(TenantId.Value);
            }
            if (Optional.IsDefined(ClientSecretUri))
            {
                writer.WritePropertyName("clientSecretUrl"u8);
                writer.WriteStringValue(ClientSecretUri.AbsoluteUri);
            }
            if (Optional.IsCollectionDefined(UserAssignedIdentities))
            {
                writer.WritePropertyName("userAssignedIdentities"u8);
                writer.WriteStartObject();
                foreach (var item in UserAssignedIdentities)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(LabStorageType))
            {
                writer.WritePropertyName("labStorageType"u8);
                writer.WriteStringValue(LabStorageType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(MandatoryArtifactsResourceIdsLinux))
            {
                writer.WritePropertyName("mandatoryArtifactsResourceIdsLinux"u8);
                writer.WriteStartArray();
                foreach (var item in MandatoryArtifactsResourceIdsLinux)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MandatoryArtifactsResourceIdsWindows))
            {
                writer.WritePropertyName("mandatoryArtifactsResourceIdsWindows"u8);
                writer.WriteStartArray();
                foreach (var item in MandatoryArtifactsResourceIdsWindows)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PremiumDataDisks))
            {
                writer.WritePropertyName("premiumDataDisks"u8);
                writer.WriteStringValue(PremiumDataDisks.Value.ToString());
            }
            if (Optional.IsDefined(EnvironmentPermission))
            {
                writer.WritePropertyName("environmentPermission"u8);
                writer.WriteStringValue(EnvironmentPermission.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ExtendedProperties))
            {
                writer.WritePropertyName("extendedProperties"u8);
                writer.WriteStartObject();
                foreach (var item in ExtendedProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(BrowserConnect))
            {
                writer.WritePropertyName("browserConnect"u8);
                writer.WriteStringValue(BrowserConnect.Value.ToString());
            }
            if (Optional.IsDefined(DisableAutoUpgradeCseMinorVersion))
            {
                writer.WritePropertyName("disableAutoUpgradeCseMinorVersion"u8);
                writer.WriteBooleanValue(DisableAutoUpgradeCseMinorVersion.Value);
            }
            if (Optional.IsCollectionDefined(ManagementIdentities))
            {
                writer.WritePropertyName("managementIdentities"u8);
                writer.WriteStartObject();
                foreach (var item in ManagementIdentities)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsolateLabResources))
            {
                writer.WritePropertyName("isolateLabResources"u8);
                writer.WriteStringValue(IsolateLabResources.Value.ToString());
            }
            if (Optional.IsDefined(DefaultSecretName))
            {
                writer.WritePropertyName("defaultSecretName"u8);
                writer.WriteStringValue(DefaultSecretName);
            }
            writer.WritePropertyName("encryption"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(DiskEncryptionSetId))
            {
                writer.WritePropertyName("diskEncryptionSetId"u8);
                writer.WriteStringValue(DiskEncryptionSetId);
            }
            if (Optional.IsDefined(TypePropertiesEncryptionType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(TypePropertiesEncryptionType.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WritePropertyName("support"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(EnabledPropertiesSupportEnabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteStringValue(EnabledPropertiesSupportEnabled.Value.ToString());
            }
            if (Optional.IsDefined(MarkdownPropertiesSupportMarkdown))
            {
                writer.WritePropertyName("markdown"u8);
                writer.WriteStringValue(MarkdownPropertiesSupportMarkdown);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("announcement"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(MarkdownPropertiesAnnouncementMarkdown))
            {
                writer.WritePropertyName("markdown"u8);
                writer.WriteStringValue(MarkdownPropertiesAnnouncementMarkdown);
            }
            if (Optional.IsDefined(EnabledPropertiesAnnouncementEnabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteStringValue(EnabledPropertiesAnnouncementEnabled.Value.ToString());
            }
            if (Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationDate"u8);
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (Optional.IsDefined(Expired))
            {
                writer.WritePropertyName("expired"u8);
                writer.WriteBooleanValue(Expired.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DevTestLabData DeserializeDevTestLabData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ManagedIdentityType> type0 = default;
            Optional<string> principalId = default;
            Optional<Guid> tenantId = default;
            Optional<Uri> clientSecretUrl = default;
            Optional<IDictionary<string, BinaryData>> userAssignedIdentities = default;
            Optional<string> defaultStorageAccount = default;
            Optional<string> defaultPremiumStorageAccount = default;
            Optional<string> artifactsStorageAccount = default;
            Optional<string> premiumDataDiskStorageAccount = default;
            Optional<string> vaultName = default;
            Optional<DevTestLabStorageType> labStorageType = default;
            Optional<IList<string>> mandatoryArtifactsResourceIdsLinux = default;
            Optional<IList<string>> mandatoryArtifactsResourceIdsWindows = default;
            Optional<DateTimeOffset> createdDate = default;
            Optional<DevTestLabPremiumDataDisk> premiumDataDisks = default;
            Optional<DevTestLabEnvironmentPermission> environmentPermission = default;
            Optional<string> vmCreationResourceGroup = default;
            Optional<string> publicIPId = default;
            Optional<string> loadBalancerId = default;
            Optional<string> networkSecurityGroupId = default;
            Optional<IDictionary<string, string>> extendedProperties = default;
            Optional<DevTestLabEnableStatus> browserConnect = default;
            Optional<bool> disableAutoUpgradeCseMinorVersion = default;
            Optional<IDictionary<string, BinaryData>> managementIdentities = default;
            Optional<DevTestLabEnableStatus> isolateLabResources = default;
            Optional<string> defaultSecretName = default;
            Optional<string> provisioningState = default;
            Optional<string> uniqueIdentifier = default;
            Optional<string> diskEncryptionSetId = default;
            Optional<EncryptionType> type1 = default;
            Optional<DevTestLabEnableStatus> enabled = default;
            Optional<string> markdown = default;
            Optional<string> title = default;
            Optional<string> markdown0 = default;
            Optional<DevTestLabEnableStatus> enabled0 = default;
            Optional<DateTimeOffset> expirationDate = default;
            Optional<bool> expired = default;
            Optional<string> provisioningState0 = default;
            Optional<string> uniqueIdentifier0 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("type"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            type0 = new ManagedIdentityType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("principalId"u8))
                        {
                            principalId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("tenantId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            tenantId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("clientSecretUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clientSecretUrl = null;
                                continue;
                            }
                            clientSecretUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("userAssignedIdentities"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            userAssignedIdentities = dictionary;
                            continue;
                        }
                    }
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("defaultStorageAccount"u8))
                        {
                            defaultStorageAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("defaultPremiumStorageAccount"u8))
                        {
                            defaultPremiumStorageAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("artifactsStorageAccount"u8))
                        {
                            artifactsStorageAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("premiumDataDiskStorageAccount"u8))
                        {
                            premiumDataDiskStorageAccount = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vaultName"u8))
                        {
                            vaultName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("labStorageType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            labStorageType = new DevTestLabStorageType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("mandatoryArtifactsResourceIdsLinux"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            mandatoryArtifactsResourceIdsLinux = array;
                            continue;
                        }
                        if (property0.NameEquals("mandatoryArtifactsResourceIdsWindows"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            mandatoryArtifactsResourceIdsWindows = array;
                            continue;
                        }
                        if (property0.NameEquals("createdDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("premiumDataDisks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            premiumDataDisks = new DevTestLabPremiumDataDisk(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("environmentPermission"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            environmentPermission = new DevTestLabEnvironmentPermission(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vmCreationResourceGroup"u8))
                        {
                            vmCreationResourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publicIpId"u8))
                        {
                            publicIPId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("loadBalancerId"u8))
                        {
                            loadBalancerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("networkSecurityGroupId"u8))
                        {
                            networkSecurityGroupId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("extendedProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            extendedProperties = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("browserConnect"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            browserConnect = new DevTestLabEnableStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("disableAutoUpgradeCseMinorVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            disableAutoUpgradeCseMinorVersion = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("managementIdentities"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            managementIdentities = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("isolateLabResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isolateLabResources = new DevTestLabEnableStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("defaultSecretName"u8))
                        {
                            defaultSecretName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("uniqueIdentifier"u8))
                        {
                            uniqueIdentifier = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("encryption"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("diskEncryptionSetId"u8))
                                {
                                    diskEncryptionSetId = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("type"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    type1 = new EncryptionType(property1.Value.GetString());
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("support"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("enabled"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    enabled = new DevTestLabEnableStatus(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("markdown"u8))
                                {
                                    markdown = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("announcement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("title"u8))
                                {
                                    title = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("markdown"u8))
                                {
                                    markdown0 = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("enabled"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    enabled0 = new DevTestLabEnableStatus(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("expirationDate"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    expirationDate = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("expired"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    expired = property1.Value.GetBoolean();
                                    continue;
                                }
                                if (property1.NameEquals("provisioningState"u8))
                                {
                                    provisioningState0 = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("uniqueIdentifier"u8))
                                {
                                    uniqueIdentifier0 = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DevTestLabData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, Optional.ToNullable(type0), principalId.Value, Optional.ToNullable(tenantId), clientSecretUrl.Value, Optional.ToDictionary(userAssignedIdentities), defaultStorageAccount.Value, defaultPremiumStorageAccount.Value, artifactsStorageAccount.Value, premiumDataDiskStorageAccount.Value, vaultName.Value, Optional.ToNullable(labStorageType), Optional.ToList(mandatoryArtifactsResourceIdsLinux), Optional.ToList(mandatoryArtifactsResourceIdsWindows), Optional.ToNullable(createdDate), Optional.ToNullable(premiumDataDisks), Optional.ToNullable(environmentPermission), vmCreationResourceGroup.Value, publicIPId.Value, loadBalancerId.Value, networkSecurityGroupId.Value, Optional.ToDictionary(extendedProperties), Optional.ToNullable(browserConnect), Optional.ToNullable(disableAutoUpgradeCseMinorVersion), Optional.ToDictionary(managementIdentities), Optional.ToNullable(isolateLabResources), defaultSecretName.Value, provisioningState.Value, uniqueIdentifier.Value, diskEncryptionSetId.Value, Optional.ToNullable(type1), Optional.ToNullable(enabled), markdown.Value, title.Value, markdown0.Value, Optional.ToNullable(enabled0), Optional.ToNullable(expirationDate), Optional.ToNullable(expired), provisioningState0.Value, uniqueIdentifier0.Value);
        }
    }
}
