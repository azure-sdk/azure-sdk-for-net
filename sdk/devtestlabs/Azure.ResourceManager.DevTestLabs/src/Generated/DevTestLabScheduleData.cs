// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DevTestLabs.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevTestLabs
{
    /// <summary>
    /// A class representing the DevTestLabSchedule data model.
    /// A schedule.
    /// </summary>
    public partial class DevTestLabScheduleData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of DevTestLabScheduleData. </summary>
        /// <param name="location"> The location. </param>
        public DevTestLabScheduleData(AzureLocation location) : base(location)
        {
            Weekdays = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of DevTestLabScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="statusPropertiesStatus"> The status of the schedule (i.e. Enabled, Disabled). </param>
        /// <param name="taskType"> The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). </param>
        /// <param name="timeZoneId"> The time zone ID (e.g. Pacific Standard time). </param>
        /// <param name="createdOn"> The creation date of the schedule. </param>
        /// <param name="targetResourceId"> The resource ID to which the schedule belongs. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        /// <param name="statusPropertiesNotificationSettingsStatus"> If notifications are enabled for this schedule (i.e. Enabled, Disabled). </param>
        /// <param name="timeInMinutes"> Time in minutes before event at which notification will be sent. </param>
        /// <param name="webhookUri"> The webhook URL to which the notification will be sent. </param>
        /// <param name="emailRecipient"> The email recipient to send notifications to (can be a list of semi-colon separated email addresses). </param>
        /// <param name="notificationLocale"> The locale to use when sending a notification (fallback for unsupported languages is EN). </param>
        /// <param name="minute"> Minutes of the hour the schedule will run. </param>
        /// <param name="timePropertiesDailyRecurrenceTime"> The time of day the schedule will occur. </param>
        /// <param name="weekdays"> The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). </param>
        /// <param name="timePropertiesWeeklyRecurrenceTime"> The time of the day the schedule will occur. </param>
        internal DevTestLabScheduleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, DevTestLabEnableStatus? statusPropertiesStatus, string taskType, string timeZoneId, DateTimeOffset? createdOn, string targetResourceId, string provisioningState, Guid? uniqueIdentifier, DevTestLabEnableStatus? statusPropertiesNotificationSettingsStatus, int? timeInMinutes, Uri webhookUri, string emailRecipient, string notificationLocale, int? minute, string timePropertiesDailyRecurrenceTime, IList<string> weekdays, string timePropertiesWeeklyRecurrenceTime) : base(id, name, resourceType, systemData, tags, location)
        {
            StatusPropertiesStatus = statusPropertiesStatus;
            TaskType = taskType;
            TimeZoneId = timeZoneId;
            CreatedOn = createdOn;
            TargetResourceId = targetResourceId;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
            StatusPropertiesNotificationSettingsStatus = statusPropertiesNotificationSettingsStatus;
            TimeInMinutes = timeInMinutes;
            WebhookUri = webhookUri;
            EmailRecipient = emailRecipient;
            NotificationLocale = notificationLocale;
            Minute = minute;
            TimePropertiesDailyRecurrenceTime = timePropertiesDailyRecurrenceTime;
            Weekdays = weekdays;
            TimePropertiesWeeklyRecurrenceTime = timePropertiesWeeklyRecurrenceTime;
        }

        /// <summary> The status of the schedule (i.e. Enabled, Disabled). </summary>
        public DevTestLabEnableStatus? StatusPropertiesStatus { get; set; }
        /// <summary> The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). </summary>
        public string TaskType { get; set; }
        /// <summary> The time zone ID (e.g. Pacific Standard time). </summary>
        public string TimeZoneId { get; set; }
        /// <summary> The creation date of the schedule. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> The resource ID to which the schedule belongs. </summary>
        public string TargetResourceId { get; set; }
        /// <summary> The provisioning status of the resource. </summary>
        public string ProvisioningState { get; }
        /// <summary> The unique immutable identifier of a resource (Guid). </summary>
        public Guid? UniqueIdentifier { get; }
        /// <summary> If notifications are enabled for this schedule (i.e. Enabled, Disabled). </summary>
        public DevTestLabEnableStatus? StatusPropertiesNotificationSettingsStatus { get; set; }
        /// <summary> Time in minutes before event at which notification will be sent. </summary>
        public int? TimeInMinutes { get; set; }
        /// <summary> The webhook URL to which the notification will be sent. </summary>
        public Uri WebhookUri { get; set; }
        /// <summary> The email recipient to send notifications to (can be a list of semi-colon separated email addresses). </summary>
        public string EmailRecipient { get; set; }
        /// <summary> The locale to use when sending a notification (fallback for unsupported languages is EN). </summary>
        public string NotificationLocale { get; set; }
        /// <summary> Minutes of the hour the schedule will run. </summary>
        public int? Minute { get; set; }
        /// <summary> The time of day the schedule will occur. </summary>
        public string TimePropertiesDailyRecurrenceTime { get; set; }
        /// <summary> The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). </summary>
        public IList<string> Weekdays { get; }
        /// <summary> The time of the day the schedule will occur. </summary>
        public string TimePropertiesWeeklyRecurrenceTime { get; set; }
    }
}
