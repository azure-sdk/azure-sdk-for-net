// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevTestLabs
{
    /// <summary>
    /// A class representing the BastionHost data model.
    /// Profile of a Bastion Host
    /// </summary>
    public partial class BastionHostData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of BastionHostData. </summary>
        /// <param name="location"> The location. </param>
        public BastionHostData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of BastionHostData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="externalBastionHostId"> The ID of the external BastionHost resource that corresponds to this DTL BastionHost. </param>
        /// <param name="ipAddressId"> The ID of the PublicIpAddress resource that is created by and paired with this BastionHost. </param>
        /// <param name="provisioningState"> The provisioning status of the resource. </param>
        /// <param name="uniqueIdentifier"> The unique immutable identifier of a resource (Guid). </param>
        internal BastionHostData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, string externalBastionHostId, string ipAddressId, string provisioningState, Guid? uniqueIdentifier) : base(id, name, resourceType, systemData, tags, location)
        {
            ExternalBastionHostId = externalBastionHostId;
            IPAddressId = ipAddressId;
            ProvisioningState = provisioningState;
            UniqueIdentifier = uniqueIdentifier;
        }

        /// <summary> The ID of the external BastionHost resource that corresponds to this DTL BastionHost. </summary>
        public string ExternalBastionHostId { get; }
        /// <summary> The ID of the PublicIpAddress resource that is created by and paired with this BastionHost. </summary>
        public string IPAddressId { get; }
        /// <summary> The provisioning status of the resource. </summary>
        public string ProvisioningState { get; }
        /// <summary> The unique immutable identifier of a resource (Guid). </summary>
        public Guid? UniqueIdentifier { get; }
    }
}
