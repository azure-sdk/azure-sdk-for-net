// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.HealthDataAIServices;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HealthDataAIServices.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableHealthDataAIServicesResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableHealthDataAIServicesResourceGroupResource for mocking. </summary>
        protected MockableHealthDataAIServicesResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableHealthDataAIServicesResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHealthDataAIServicesResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of DeidServices in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeidServices and their operations over a DeidServiceResource. </returns>
        public virtual DeidServiceCollection GetDeidServices()
        {
            return GetCachedClient(client => new DeidServiceCollection(client, Id));
        }

        /// <summary>
        /// Get a DeidService
        /// <list type="bullet">
        /// <item>
        /// <term> Request Path. </term>
        /// <description> /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthDataAIServices/deidServices/{deidServiceName}. </description>
        /// </item>
        /// <item>
        /// <term> Operation Id. </term>
        /// <description> Get. </description>
        /// </item>
        /// <item>
        /// <term> Default Api Version. </term>
        /// <description> 2024-09-20. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deidServiceName"> The name of the deid service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deidServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deidServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeidServiceResource>> GetDeidServiceAsync(string deidServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deidServiceName, nameof(deidServiceName));

            return await GetDeidServices().GetAsync(deidServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a DeidService
        /// <list type="bullet">
        /// <item>
        /// <term> Request Path. </term>
        /// <description> /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthDataAIServices/deidServices/{deidServiceName}. </description>
        /// </item>
        /// <item>
        /// <term> Operation Id. </term>
        /// <description> Get. </description>
        /// </item>
        /// <item>
        /// <term> Default Api Version. </term>
        /// <description> 2024-09-20. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deidServiceName"> The name of the deid service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deidServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deidServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeidServiceResource> GetDeidService(string deidServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(deidServiceName, nameof(deidServiceName));

            return GetDeidServices().Get(deidServiceName, cancellationToken);
        }
    }
}
