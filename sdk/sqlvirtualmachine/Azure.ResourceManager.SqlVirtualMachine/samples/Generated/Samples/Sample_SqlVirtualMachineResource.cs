// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SqlVirtualMachine.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.SqlVirtualMachine.Samples
{
    public partial class Sample_SqlVirtualMachineResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsASQLVirtualMachine()
        {
            // Generated from example definition: 2023-10-01/GetSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachine_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            SqlVirtualMachineResource result = await sqlVirtualMachine.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlVirtualMachineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeletesASQLVirtualMachine()
        {
            // Generated from example definition: 2023-10-01/DeleteSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachine_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm1";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            await sqlVirtualMachine.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdatesASQLVirtualMachineTags()
        {
            // Generated from example definition: 2023-10-01/UpdateSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachine_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            SqlVirtualMachinePatch patch = new SqlVirtualMachinePatch();
            ArmOperation<SqlVirtualMachineResource> lro = await sqlVirtualMachine.UpdateAsync(WaitUntil.Completed, patch);
            SqlVirtualMachineResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlVirtualMachineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task StartAssessment_StartsSQLBestPracticesAssessmentOnSQLVirtualMachine()
        {
            // Generated from example definition: 2023-10-01/StartAssessmentOnSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachines_StartAssessment" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            await sqlVirtualMachine.StartAssessmentAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task FetchDCAssessment_StartsSQLBestPracticesAssessmentWithDiskConfigRulesOnSQLVirtualMachine()
        {
            // Generated from example definition: 2023-10-01/StartDiskConfigAssessmentOnSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachines_FetchDCAssessment" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            DiskConfigAssessmentContent content = new DiskConfigAssessmentContent();
            await sqlVirtualMachine.FetchDCAssessmentAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Redeploy_UninstallsAndReinstallsTheSQLIaaSExtension()
        {
            // Generated from example definition: 2023-10-01/RedeploySqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachines_Redeploy" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            await sqlVirtualMachine.RedeployAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Troubleshoot_StartSQLVirtualMachineTroubleshootingOperation()
        {
            // Generated from example definition: 2023-10-01/TroubleshootSqlVirtualMachine.json
            // this example is just showing the usage of "SqlVirtualMachines_Troubleshoot" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlVirtualMachineResource created on azure
            // for more information of creating SqlVirtualMachineResource, please refer to the document of SqlVirtualMachineResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string sqlVirtualMachineName = "testvm";
            ResourceIdentifier sqlVirtualMachineResourceId = SqlVirtualMachineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sqlVirtualMachineName);
            SqlVirtualMachineResource sqlVirtualMachine = client.GetSqlVirtualMachineResource(sqlVirtualMachineResourceId);

            // invoke the operation
            SqlVmTroubleshooting sqlVmTroubleshooting = new SqlVmTroubleshooting();
            ArmOperation<SqlVmTroubleshooting> lro = await sqlVirtualMachine.TroubleshootAsync(WaitUntil.Completed, sqlVmTroubleshooting);
            SqlVmTroubleshooting result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
