// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmSqlVirtualMachineModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="SqlVirtualMachine.AvailabilityGroupListenerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="availabilityGroupName"> Name of the availability group. </param>
        /// <param name="loadBalancerConfigurations"> List of load balancer configurations for an availability group listener. </param>
        /// <param name="multiSubnetIPConfigurations"> List of multi subnet IP configurations for an AG listener. </param>
        /// <param name="createDefaultAvailabilityGroupIfNotExist"> Create a default availability group if it does not exist. </param>
        /// <param name="port"> Listener port. </param>
        /// <param name="availabilityGroupReplicas"> Availability Group configuration. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.AvailabilityGroupListenerData"/> instance for mocking. </returns>
        public static AvailabilityGroupListenerData AvailabilityGroupListenerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string availabilityGroupName = null, IEnumerable<AvailabilityGroupListenerLoadBalancerConfiguration> loadBalancerConfigurations = null, IEnumerable<MultiSubnetIPConfiguration> multiSubnetIPConfigurations = null, bool? createDefaultAvailabilityGroupIfNotExist = null, int? port = null, IEnumerable<AvailabilityGroupReplica> availabilityGroupReplicas = null)
        {
            loadBalancerConfigurations ??= new List<AvailabilityGroupListenerLoadBalancerConfiguration>();
            multiSubnetIPConfigurations ??= new List<MultiSubnetIPConfiguration>();
            availabilityGroupReplicas ??= new List<AvailabilityGroupReplica>();

            return new AvailabilityGroupListenerData(
                id,
                name,
                resourceType,
                systemData,
                provisioningState,
                availabilityGroupName,
                loadBalancerConfigurations?.ToList(),
                multiSubnetIPConfigurations?.ToList(),
                createDefaultAvailabilityGroupIfNotExist,
                port,
                availabilityGroupReplicas != null ? new AvailabilityGroupConfiguration(availabilityGroupReplicas?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SqlVirtualMachine.SqlVmGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="sqlImageOffer"> SQL image offer. Examples may include SQL2016-WS2016, SQL2017-WS2016. </param>
        /// <param name="sqlImageSku"> SQL image sku. </param>
        /// <param name="scaleType"> Scale type. </param>
        /// <param name="clusterManagerType"> Type of cluster manager: Windows Server Failover Cluster (WSFC), implied by the scale type of the group and the OS type. </param>
        /// <param name="clusterConfiguration"> Cluster type. </param>
        /// <param name="windowsServerFailoverClusterDomainProfile"> Cluster Active Directory domain profile. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.SqlVmGroupData"/> instance for mocking. </returns>
        public static SqlVmGroupData SqlVmGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, string sqlImageOffer = null, SqlVmGroupImageSku? sqlImageSku = null, SqlVmGroupScaleType? scaleType = null, SqlVmClusterManagerType? clusterManagerType = null, SqlVmClusterConfiguration? clusterConfiguration = null, WindowsServerFailoverClusterDomainProfile windowsServerFailoverClusterDomainProfile = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlVmGroupData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                provisioningState,
                sqlImageOffer,
                sqlImageSku,
                scaleType,
                clusterManagerType,
                clusterConfiguration,
                windowsServerFailoverClusterDomainProfile,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SqlVirtualMachine.SqlVmData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> DO NOT USE. This value will be deprecated. Azure Active Directory identity of the server. </param>
        /// <param name="virtualMachineResourceId"> ARM Resource id of underlying virtual machine created from SQL marketplace image. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="sqlImageOffer"> SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016. </param>
        /// <param name="sqlServerLicenseType"> SQL Server license type. </param>
        /// <param name="sqlManagement"> SQL Server Management type. NOTE: This parameter is not used anymore. API will automatically detect the Sql Management, refrain from using it. </param>
        /// <param name="leastPrivilegeMode"> SQL IaaS Agent least privilege mode. </param>
        /// <param name="sqlImageSku"> SQL Server edition type. </param>
        /// <param name="sqlVmGroupResourceId"> ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of. </param>
        /// <param name="windowsServerFailoverClusterDomainCredentials"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="windowsServerFailoverClusterStaticIP"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="autoPatchingSettings"> Auto patching settings for applying critical security updates to SQL virtual machine. </param>
        /// <param name="autoBackupSettings"> Auto backup settings for SQL Server. </param>
        /// <param name="keyVaultCredentialSettings"> Key vault credential settings. </param>
        /// <param name="serverConfigurationsManagementSettings"> SQL Server configuration management settings. </param>
        /// <param name="storageConfigurationSettings"> Storage Configuration Settings. </param>
        /// <param name="troubleshootingStatus"> Troubleshooting status. </param>
        /// <param name="assessmentSettings"> SQL best practices Assessment Settings. </param>
        /// <param name="enableAutomaticUpgrade"> Enable automatic upgrade of Sql IaaS extension Agent. </param>
        /// <param name="additionalVmPatch"> Additional VM Patching solution enabled on the Virtual Machine. </param>
        /// <param name="virtualMachineIdentitySettings"> Virtual Machine Identity details used for Sql IaaS extension configurations. </param>
        /// <param name="osType"> Operating System of the current SQL Virtual Machine. </param>
        /// <returns> A new <see cref="SqlVirtualMachine.SqlVmData"/> instance for mocking. </returns>
        public static SqlVmData SqlVmData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ResourceIdentifier virtualMachineResourceId = null, string provisioningState = null, string sqlImageOffer = null, SqlServerLicenseType? sqlServerLicenseType = null, SqlManagementMode? sqlManagement = null, LeastPrivilegeMode? leastPrivilegeMode = null, SqlImageSku? sqlImageSku = null, ResourceIdentifier sqlVmGroupResourceId = null, WindowsServerFailoverClusterDomainCredentials windowsServerFailoverClusterDomainCredentials = null, IPAddress windowsServerFailoverClusterStaticIP = null, SqlVmAutoPatchingSettings autoPatchingSettings = null, SqlVmAutoBackupSettings autoBackupSettings = null, SqlVmKeyVaultCredentialSettings keyVaultCredentialSettings = null, SqlServerConfigurationsManagementSettings serverConfigurationsManagementSettings = null, SqlVmStorageConfigurationSettings storageConfigurationSettings = null, TroubleshootingStatus troubleshootingStatus = null, SqlVmAssessmentSettings assessmentSettings = null, bool? enableAutomaticUpgrade = null, AdditionalOSPatch? additionalVmPatch = null, VirtualMachineIdentity virtualMachineIdentitySettings = null, OSType? osType = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlVmData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                virtualMachineResourceId,
                provisioningState,
                sqlImageOffer,
                sqlServerLicenseType,
                sqlManagement,
                leastPrivilegeMode,
                sqlImageSku,
                sqlVmGroupResourceId,
                windowsServerFailoverClusterDomainCredentials,
                windowsServerFailoverClusterStaticIP,
                autoPatchingSettings,
                autoBackupSettings,
                keyVaultCredentialSettings,
                serverConfigurationsManagementSettings,
                storageConfigurationSettings,
                troubleshootingStatus,
                assessmentSettings,
                enableAutomaticUpgrade,
                additionalVmPatch,
                virtualMachineIdentitySettings,
                osType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TroubleshootingStatus"/>. </summary>
        /// <param name="rootCause"> Root cause of the issue. </param>
        /// <param name="lastTriggerTimeUtc"> Last troubleshooting trigger time in UTC timezone. </param>
        /// <param name="startTimeUtc"> Start time in UTC timezone. </param>
        /// <param name="endTimeUtc"> End time in UTC timezone. </param>
        /// <param name="troubleshootingScenario"> SQL VM troubleshooting scenario. </param>
        /// <param name="unhealthyReplicaInfoAvailabilityGroupName"> Troubleshooting properties. </param>
        /// <returns> A new <see cref="Models.TroubleshootingStatus"/> instance for mocking. </returns>
        public static TroubleshootingStatus TroubleshootingStatus(string rootCause = null, DateTimeOffset? lastTriggerTimeUtc = null, DateTimeOffset? startTimeUtc = null, DateTimeOffset? endTimeUtc = null, TroubleshootingScenario? troubleshootingScenario = null, string unhealthyReplicaInfoAvailabilityGroupName = null)
        {
            return new TroubleshootingStatus(
                rootCause,
                lastTriggerTimeUtc,
                startTimeUtc,
                endTimeUtc,
                troubleshootingScenario,
                unhealthyReplicaInfoAvailabilityGroupName != null ? new TroubleshootingAdditionalProperties(new UnhealthyReplicaInfo(unhealthyReplicaInfoAvailabilityGroupName, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SqlVmTroubleshooting"/>. </summary>
        /// <param name="startTimeUtc"> Start time in UTC timezone. </param>
        /// <param name="endTimeUtc"> End time in UTC timezone. </param>
        /// <param name="troubleshootingScenario"> SQL VM troubleshooting scenario. </param>
        /// <param name="unhealthyReplicaInfoAvailabilityGroupName"> Troubleshooting properties. </param>
        /// <param name="virtualMachineResourceId"> Virtual machine resource id for response. </param>
        /// <returns> A new <see cref="Models.SqlVmTroubleshooting"/> instance for mocking. </returns>
        public static SqlVmTroubleshooting SqlVmTroubleshooting(DateTimeOffset? startTimeUtc = null, DateTimeOffset? endTimeUtc = null, TroubleshootingScenario? troubleshootingScenario = null, string unhealthyReplicaInfoAvailabilityGroupName = null, ResourceIdentifier virtualMachineResourceId = null)
        {
            return new SqlVmTroubleshooting(
                startTimeUtc,
                endTimeUtc,
                troubleshootingScenario,
                unhealthyReplicaInfoAvailabilityGroupName != null ? new TroubleshootingAdditionalProperties(new UnhealthyReplicaInfo(unhealthyReplicaInfoAvailabilityGroupName, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                virtualMachineResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.SqlVirtualMachine.SqlVmData" />. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Azure Active Directory identity of the server. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="virtualMachineResourceId"> ARM Resource id of underlying virtual machine created from SQL marketplace image. </param>
        /// <param name="provisioningState"> Provisioning state to track the async operation status. </param>
        /// <param name="sqlImageOffer"> SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016. </param>
        /// <param name="sqlServerLicenseType"> SQL Server license type. </param>
        /// <param name="sqlManagement"> SQL Server Management type. </param>
        /// <param name="sqlImageSku"> SQL Server edition type. </param>
        /// <param name="sqlVmGroupResourceId"> ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of. </param>
        /// <param name="windowsServerFailoverClusterDomainCredentials"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="windowsServerFailoverClusterStaticIP"> Domain credentials for setting up Windows Server Failover Cluster for SQL availability group. </param>
        /// <param name="autoPatchingSettings"> Auto patching settings for applying critical security updates to SQL virtual machine. </param>
        /// <param name="autoBackupSettings"> Auto backup settings for SQL Server. </param>
        /// <param name="keyVaultCredentialSettings"> Key vault credential settings. </param>
        /// <param name="serverConfigurationsManagementSettings"> SQL Server configuration management settings. </param>
        /// <param name="storageConfigurationSettings"> Storage Configuration Settings. </param>
        /// <param name="assessmentSettings"> Assessment Settings. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.SqlVirtualMachine.SqlVmData" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static SqlVmData SqlVmData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, ResourceIdentifier virtualMachineResourceId, string provisioningState, string sqlImageOffer, SqlServerLicenseType? sqlServerLicenseType, SqlManagementMode? sqlManagement, SqlImageSku? sqlImageSku, ResourceIdentifier sqlVmGroupResourceId, WindowsServerFailoverClusterDomainCredentials windowsServerFailoverClusterDomainCredentials, IPAddress windowsServerFailoverClusterStaticIP, SqlVmAutoPatchingSettings autoPatchingSettings, SqlVmAutoBackupSettings autoBackupSettings, SqlVmKeyVaultCredentialSettings keyVaultCredentialSettings, SqlServerConfigurationsManagementSettings serverConfigurationsManagementSettings, SqlVmStorageConfigurationSettings storageConfigurationSettings, SqlVmAssessmentSettings assessmentSettings)
        {
            return SqlVmData(id: id, name: name, resourceType: resourceType, systemData: systemData, tags: tags, location: location, identity: identity, virtualMachineResourceId: virtualMachineResourceId, provisioningState: provisioningState, sqlImageOffer: sqlImageOffer, sqlServerLicenseType: sqlServerLicenseType, sqlManagement: sqlManagement, leastPrivilegeMode: default, sqlImageSku: sqlImageSku, sqlVmGroupResourceId: sqlVmGroupResourceId, windowsServerFailoverClusterDomainCredentials: windowsServerFailoverClusterDomainCredentials, windowsServerFailoverClusterStaticIP: windowsServerFailoverClusterStaticIP, autoPatchingSettings: autoPatchingSettings, autoBackupSettings: autoBackupSettings, keyVaultCredentialSettings: keyVaultCredentialSettings, serverConfigurationsManagementSettings: serverConfigurationsManagementSettings, storageConfigurationSettings: storageConfigurationSettings, troubleshootingStatus: default, assessmentSettings: assessmentSettings, enableAutomaticUpgrade: default, additionalVmPatch: default, virtualMachineIdentitySettings: default, osType: default);
        }
    }
}
