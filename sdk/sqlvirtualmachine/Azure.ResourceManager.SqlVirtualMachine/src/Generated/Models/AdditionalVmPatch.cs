// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    /// <summary> Additional Patch to be enable or enabled on the SQL Virtual Machine. </summary>
    public readonly partial struct AdditionalVmPatch : IEquatable<AdditionalVmPatch>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AdditionalVmPatch"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AdditionalVmPatch(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSetValue = "NotSet";
        private const string MicrosoftUpdateValue = "MicrosoftUpdate";

        /// <summary> NotSet. </summary>
        public static AdditionalVmPatch NotSet { get; } = new AdditionalVmPatch(NotSetValue);
        /// <summary> MicrosoftUpdate. </summary>
        public static AdditionalVmPatch MicrosoftUpdate { get; } = new AdditionalVmPatch(MicrosoftUpdateValue);
        /// <summary> Determines if two <see cref="AdditionalVmPatch"/> values are the same. </summary>
        public static bool operator ==(AdditionalVmPatch left, AdditionalVmPatch right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AdditionalVmPatch"/> values are not the same. </summary>
        public static bool operator !=(AdditionalVmPatch left, AdditionalVmPatch right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AdditionalVmPatch"/>. </summary>
        public static implicit operator AdditionalVmPatch(string value) => new AdditionalVmPatch(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AdditionalVmPatch other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AdditionalVmPatch other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
