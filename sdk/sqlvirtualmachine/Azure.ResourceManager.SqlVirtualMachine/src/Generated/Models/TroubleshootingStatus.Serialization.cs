// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    public partial class TroubleshootingStatus
    {
        internal static TroubleshootingStatus DeserializeTroubleshootingStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> rootCause = default;
            Optional<DateTimeOffset> lastTriggerTimeUtc = default;
            Optional<DateTimeOffset> startTimeUtc = default;
            Optional<DateTimeOffset> endTimeUtc = default;
            Optional<TroubleshootingScenario> troubleshootingScenario = default;
            Optional<TroubleshootingAdditionalProperties> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rootCause"u8))
                {
                    rootCause = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastTriggerTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastTriggerTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("troubleshootingScenario"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    troubleshootingScenario = new TroubleshootingScenario(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    properties = TroubleshootingAdditionalProperties.DeserializeTroubleshootingAdditionalProperties(property.Value);
                    continue;
                }
            }
            return new TroubleshootingStatus(rootCause.Value, Optional.ToNullable(lastTriggerTimeUtc), Optional.ToNullable(startTimeUtc), Optional.ToNullable(endTimeUtc), Optional.ToNullable(troubleshootingScenario), properties.Value);
        }
    }
}
