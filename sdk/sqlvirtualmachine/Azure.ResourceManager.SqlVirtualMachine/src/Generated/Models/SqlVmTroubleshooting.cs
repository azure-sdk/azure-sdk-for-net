// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    /// <summary> Details required for SQL VM troubleshooting. </summary>
    public partial class SqlVmTroubleshooting
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SqlVmTroubleshooting"/>. </summary>
        public SqlVmTroubleshooting()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SqlVmTroubleshooting"/>. </summary>
        /// <param name="startTimeUtc"> Start time in UTC timezone. </param>
        /// <param name="endTimeUtc"> End time in UTC timezone. </param>
        /// <param name="troubleshootingScenario"> SQL VM troubleshooting scenario. </param>
        /// <param name="properties"> Troubleshooting properties. </param>
        /// <param name="virtualMachineResourceId"> Virtual machine resource id for response. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SqlVmTroubleshooting(DateTimeOffset? startTimeUtc, DateTimeOffset? endTimeUtc, TroubleshootingScenario? troubleshootingScenario, TroubleshootingAdditionalProperties properties, ResourceIdentifier virtualMachineResourceId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StartTimeUtc = startTimeUtc;
            EndTimeUtc = endTimeUtc;
            TroubleshootingScenario = troubleshootingScenario;
            Properties = properties;
            VirtualMachineResourceId = virtualMachineResourceId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Start time in UTC timezone. </summary>
        public DateTimeOffset? StartTimeUtc { get; set; }
        /// <summary> End time in UTC timezone. </summary>
        public DateTimeOffset? EndTimeUtc { get; set; }
        /// <summary> SQL VM troubleshooting scenario. </summary>
        public TroubleshootingScenario? TroubleshootingScenario { get; set; }
        /// <summary> Troubleshooting properties. </summary>
        internal TroubleshootingAdditionalProperties Properties { get; set; }
        /// <summary> The name of the availability group. </summary>
        public string UnhealthyReplicaInfoAvailabilityGroupName
        {
            get => Properties is null ? default : Properties.UnhealthyReplicaInfoAvailabilityGroupName;
            set
            {
                if (Properties is null)
                    Properties = new TroubleshootingAdditionalProperties();
                Properties.UnhealthyReplicaInfoAvailabilityGroupName = value;
            }
        }

        /// <summary> Virtual machine resource id for response. </summary>
        public ResourceIdentifier VirtualMachineResourceId { get; }
    }
}
