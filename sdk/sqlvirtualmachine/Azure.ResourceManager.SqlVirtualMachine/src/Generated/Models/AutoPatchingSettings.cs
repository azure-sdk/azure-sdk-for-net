// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SqlVirtualMachine.Models
{
    /// <summary> Set a patching window during which Windows and SQL patches will be applied. </summary>
    public partial class AutoPatchingSettings
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AutoPatchingSettings"/>. </summary>
        public AutoPatchingSettings()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AutoPatchingSettings"/>. </summary>
        /// <param name="enable"> Enable or disable autopatching on SQL virtual machine. </param>
        /// <param name="dayOfWeek"> Day of week to apply the patch on. </param>
        /// <param name="maintenanceWindowStartingHour"> Hour of the day when patching is initiated. Local VM time. </param>
        /// <param name="maintenanceWindowDuration"> Duration of patching. </param>
        /// <param name="additionalVmPatch"> Additional Patch to be enable or enabled on the SQL Virtual Machine. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AutoPatchingSettings(bool? enable, DayOfWeek? dayOfWeek, int? maintenanceWindowStartingHour, int? maintenanceWindowDuration, AdditionalVmPatch? additionalVmPatch, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Enable = enable;
            DayOfWeek = dayOfWeek;
            MaintenanceWindowStartingHour = maintenanceWindowStartingHour;
            MaintenanceWindowDuration = maintenanceWindowDuration;
            AdditionalVmPatch = additionalVmPatch;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Enable or disable autopatching on SQL virtual machine. </summary>
        public bool? Enable { get; set; }
        /// <summary> Day of week to apply the patch on. </summary>
        public DayOfWeek? DayOfWeek { get; set; }
        /// <summary> Hour of the day when patching is initiated. Local VM time. </summary>
        public int? MaintenanceWindowStartingHour { get; set; }
        /// <summary> Duration of patching. </summary>
        public int? MaintenanceWindowDuration { get; set; }
        /// <summary> Additional Patch to be enable or enabled on the SQL Virtual Machine. </summary>
        public AdditionalVmPatch? AdditionalVmPatch { get; set; }
    }
}
