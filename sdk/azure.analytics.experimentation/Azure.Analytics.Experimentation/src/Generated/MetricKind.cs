// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Experimentation
{
    /// <summary> How the metric should be calculated from the event data. </summary>
    internal readonly partial struct MetricKind : IEquatable<MetricKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MetricKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EventCountValue = "EventCount";
        private const string UserCountValue = "UserCount";
        private const string EventRateValue = "EventRate";
        private const string UserRateValue = "UserRate";
        private const string SumValue = "Sum";
        private const string AverageValue = "Average";
        private const string PercentileValue = "Percentile";

        /// <summary> Count the observations of an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricKind EventCount { get; } = new MetricKind(EventCountValue);
        /// <summary> Count the users who encounter an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricKind UserCount { get; } = new MetricKind(UserCountValue);
        /// <summary> Count the percentage of events that satisfy a condition. </summary>
        public static MetricKind EventRate { get; } = new MetricKind(EventRateValue);
        /// <summary> Count the percentage of users with the start event that then encounter the end event. The metric denominator counts the number of users who encounter the start event at least once. The metric numerator counts the number of users who encounter both the start and end events at least once. The computation is ordered, so the start event must occur before the end event. </summary>
        public static MetricKind UserRate { get; } = new MetricKind(UserRateValue);
        /// <summary> The sum of an event property. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricKind Sum { get; } = new MetricKind(SumValue);
        /// <summary> The average of an event property. </summary>
        public static MetricKind Average { get; } = new MetricKind(AverageValue);
        /// <summary> The percentile of an event property. </summary>
        public static MetricKind Percentile { get; } = new MetricKind(PercentileValue);
        /// <summary> Determines if two <see cref="MetricKind"/> values are the same. </summary>
        public static bool operator ==(MetricKind left, MetricKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricKind"/> values are not the same. </summary>
        public static bool operator !=(MetricKind left, MetricKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MetricKind"/>. </summary>
        public static implicit operator MetricKind(string value) => new MetricKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
