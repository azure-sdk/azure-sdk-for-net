// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Experimentation
{
    // Data plane generated sub-client.
    /// <summary> The Metrics sub-client. </summary>
    public partial class Metrics
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://exp.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Metrics for mocking. </summary>
        protected Metrics()
        {
        }

        /// <summary> Initializes a new instance of Metrics. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Metrics(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Fetch a Metric by Id. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetricAsync(string,string,RequestConditions,CancellationToken)']/*" />
        public virtual async Task<Response<Metric>> GetMetricAsync(string workspaceId, string metricId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetMetricAsync(workspaceId, metricId, requestConditions, context).ConfigureAwait(false);
            return Response.FromValue(Metric.FromResponse(response), response);
        }

        /// <summary> Fetch a Metric by Id. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetric(string,string,RequestConditions,CancellationToken)']/*" />
        public virtual Response<Metric> GetMetric(string workspaceId, string metricId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetMetric(workspaceId, metricId, requestConditions, context);
            return Response.FromValue(Metric.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Fetch a Metric by Id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMetricAsync(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetricAsync(string,string,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> GetMetricAsync(string workspaceId, string metricId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            using var scope = ClientDiagnostics.CreateScope("Metrics.GetMetric");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetMetricRequest(workspaceId, metricId, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch a Metric by Id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMetric(string,string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetric(string,string,RequestConditions,RequestContext)']/*" />
        public virtual Response GetMetric(string workspaceId, string metricId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            using var scope = ClientDiagnostics.CreateScope("Metrics.GetMetric");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetMetricRequest(workspaceId, metricId, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Metric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string workspaceId, string metricId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Metrics.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(workspaceId, metricId, content, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Metric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string workspaceId, string metricId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Metrics.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(workspaceId, metricId, content, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Validates a Metric. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="body"> Metric input to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='ValidateAsync(string,string,Metric,CancellationToken)']/*" />
        public virtual async Task<Response<MetricValidateResult>> ValidateAsync(string workspaceId, string metricId, Metric body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ValidateAsync(workspaceId, metricId, content, context).ConfigureAwait(false);
            return Response.FromValue(MetricValidateResult.FromResponse(response), response);
        }

        /// <summary> Validates a Metric. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="body"> Metric input to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='Validate(string,string,Metric,CancellationToken)']/*" />
        public virtual Response<MetricValidateResult> Validate(string workspaceId, string metricId, Metric body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Validate(workspaceId, metricId, content, context);
            return Response.FromValue(MetricValidateResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Validates a Metric.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ValidateAsync(string,string,Metric,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='ValidateAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> ValidateAsync(string workspaceId, string metricId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Metrics.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(workspaceId, metricId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Validates a Metric.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Validate(string,string,Metric,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/>, <paramref name="metricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='Validate(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response Validate(string workspaceId, string metricId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Metrics.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(workspaceId, metricId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete a Metric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='DeleteAsync(string,string,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string workspaceId, string metricId, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            using var scope = ClientDiagnostics.CreateScope("Metrics.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(workspaceId, metricId, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete a Metric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="metricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> or <paramref name="metricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='Delete(string,string,RequestConditions,RequestContext)']/*" />
        public virtual Response Delete(string workspaceId, string metricId, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));
            Argument.AssertNotNullOrEmpty(metricId, nameof(metricId));

            using var scope = ClientDiagnostics.CreateScope("Metrics.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(workspaceId, metricId, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List Metrics resources. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetricsAsync(string,CancellationToken)']/*" />
        public virtual AsyncPageable<Metric> GetMetricsAsync(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMetricsRequest(workspaceId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMetricsNextPageRequest(nextLink, workspaceId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => Metric.DeserializeMetric(e), ClientDiagnostics, _pipeline, "Metrics.GetMetrics", "value", "nextLink", context);
        }

        /// <summary> List Metrics resources. </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetrics(string,CancellationToken)']/*" />
        public virtual Pageable<Metric> GetMetrics(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMetricsRequest(workspaceId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMetricsNextPageRequest(nextLink, workspaceId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => Metric.DeserializeMetric(e), ClientDiagnostics, _pipeline, "Metrics.GetMetrics", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List Metrics resources
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMetricsAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetricsAsync(string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetMetricsAsync(string workspaceId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMetricsRequest(workspaceId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMetricsNextPageRequest(nextLink, workspaceId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Metrics.GetMetrics", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List Metrics resources
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMetrics(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId"> An ID used to uniquely identify and reference the experimentation workspace. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Metrics.xml" path="doc/members/member[@name='GetMetrics(string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetMetrics(string workspaceId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceId, nameof(workspaceId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMetricsRequest(workspaceId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMetricsNextPageRequest(nextLink, workspaceId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Metrics.GetMetrics", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetMetricRequest(string workspaceId, string metricId, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string workspaceId, string metricId, RequestContent content, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateValidateRequest(string workspaceId, string metricId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendPath(":validate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string workspaceId, string metricId, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/metrics/", false);
            uri.AppendPath(metricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateGetMetricsRequest(string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceId, true);
            uri.AppendPath("/metrics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetMetricsNextPageRequest(string nextLink, string workspaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
