// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.HealthDataAIServices.Deid.Samples
{
    public partial class Samples_Jobs
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Jobs_Cancel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.Cancel("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Jobs_Cancel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.CancelAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Jobs_Cancel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = client.Cancel("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Jobs_Cancel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = await client.CancelAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Jobs_Cancel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.Cancel("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Jobs_Cancel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.CancelAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Jobs_Cancel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = client.Cancel("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Jobs_Cancel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response<Job> response = await client.CancelAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.Delete("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Delete_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.DeleteAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = client.Delete("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Response response = await client.DeleteAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (BinaryData item in client.GetJobs(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (Job item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (Job item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJobs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (BinaryData item in client.GetJobs(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (BinaryData item in client.GetJobsAsync(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_GetJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (Job item in client.GetJobs(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_GetJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (Job item in client.GetJobsAsync(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_File_GetFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (BinaryData item in client.GetFiles("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_File_GetFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (BinaryData item in client.GetFilesAsync("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_File_GetFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (File item in client.GetFiles("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_File_GetFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (File item in client.GetFilesAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_File_GetFiles_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (BinaryData item in client.GetFiles("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_File_GetFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (BinaryData item in client.GetFilesAsync("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_File_GetFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            foreach (File item in client.GetFiles("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_File_GetFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            await foreach (File item in client.GetFilesAsync("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
            });
            Operation<BinaryData> operation = client.Create(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
            });
            Operation<BinaryData> operation = await client.CreateAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Job resource = new Job(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact);
            Operation<Job> operation = client.Create(WaitUntil.Completed, "<name>", resource);
            Job responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Job resource = new Job(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact);
            Operation<Job> operation = await client.CreateAsync(WaitUntil.Completed, "<name>", resource);
            Job responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Create_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = client.Create(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = await client.CreateAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Job_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Job resource = new Job(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Operation<Job> operation = client.Create(WaitUntil.Completed, "<name>", resource);
            Job responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Job_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Jobs client = new DeidentificationClient(endpoint, credential).GetJobsClient(apiVersion: "2024-01-31-preview");

            Job resource = new Job(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Operation<Job> operation = await client.CreateAsync(WaitUntil.Completed, "<name>", resource);
            Job responseData = operation.Value;
        }
    }
}
