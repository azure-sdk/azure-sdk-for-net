// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.HealthDataAIServices.Deid;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.HealthDataAIServices.Deid.Samples
{
    public partial class Samples_Realtime
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RealtimeOperations_Deid_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "Unknown",
                operation = "Redact",
            });
            Response response = client.Deid(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RealtimeOperations_Deid_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "Unknown",
                operation = "Redact",
            });
            Response response = await client.DeidAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RealtimeOperations_Deid_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            DeidRequest options = new DeidRequest("<inputText>", DocumentDataType.Unknown, OperationType.Redact);
            Response<DeidResponse> response = client.Deid(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RealtimeOperations_Deid_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            DeidRequest options = new DeidRequest("<inputText>", DocumentDataType.Unknown, OperationType.Redact);
            Response<DeidResponse> response = await client.DeidAsync(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RealtimeOperations_Deid_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "Unknown",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
                redactionFormat = "<redactionFormat>",
            });
            Response response = client.Deid(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("checksum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RealtimeOperations_Deid_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "Unknown",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
                redactionFormat = "<redactionFormat>",
            });
            Response response = await client.DeidAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("checksum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RealtimeOperations_Deid_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            DeidRequest options = new DeidRequest("<inputText>", DocumentDataType.Unknown, OperationType.Redact)
            {
                StringIndexType = StringIndexType.TextElementV8,
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidResponse> response = client.Deid(options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RealtimeOperations_Deid_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Realtime client = new DeidentificationClient(endpoint, credential).GetRealtimeClient(apiVersion: "2024-01-31-preview");

            DeidRequest options = new DeidRequest("<inputText>", DocumentDataType.Unknown, OperationType.Redact)
            {
                StringIndexType = StringIndexType.TextElementV8,
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidResponse> response = await client.DeidAsync(options);
        }
    }
}
