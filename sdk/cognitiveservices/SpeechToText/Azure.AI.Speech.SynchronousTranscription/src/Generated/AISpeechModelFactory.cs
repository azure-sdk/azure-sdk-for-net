// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Azure.AI.Speech
{
    /// <summary> Model factory for models. </summary>
    public static partial class AISpeechModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Speech.TranscribeResult"/>. </summary>
        /// <param name="durationMilliseconds"> The duration of the audio in milliseconds. </param>
        /// <param name="combinedPhrases"> The full transcript for each channel. </param>
        /// <param name="phrases"> The transcription results segmented into phrases. </param>
        /// <returns> A new <see cref="Speech.TranscribeResult"/> instance for mocking. </returns>
        public static TranscribeResult TranscribeResult(int durationMilliseconds = default, IEnumerable<ChannelCombinedPhrases> combinedPhrases = null, IEnumerable<Phrase> phrases = null)
        {
            combinedPhrases ??= new List<ChannelCombinedPhrases>();
            phrases ??= new List<Phrase>();

            return new TranscribeResult(durationMilliseconds, combinedPhrases?.ToList(), phrases?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.ChannelCombinedPhrases"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="text"> The complete transcribed text for the channel. </param>
        /// <returns> A new <see cref="Speech.ChannelCombinedPhrases"/> instance for mocking. </returns>
        public static ChannelCombinedPhrases ChannelCombinedPhrases(int? channel = null, string text = null)
        {
            return new ChannelCombinedPhrases(channel, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.Phrase"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="speaker"> A unique integer number that is assigned to each speaker detected in the audio without particular order. Only present if speaker diarization is enabled. </param>
        /// <param name="offsetMilliseconds"> The start offset of the phrase in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the phrase in milliseconds. </param>
        /// <param name="text"> The transcribed text of the phrase. </param>
        /// <param name="words"> The words that make up the phrase. Only present if word-level timestamps are enabled. </param>
        /// <param name="locale"> The locale of the phrase. </param>
        /// <param name="confidence"> The confidence value for the phrase. </param>
        /// <returns> A new <see cref="Speech.Phrase"/> instance for mocking. </returns>
        public static Phrase Phrase(int? channel = null, int? speaker = null, int offsetMilliseconds = default, int durationMilliseconds = default, string text = null, IEnumerable<Word> words = null, string locale = null, float confidence = default)
        {
            words ??= new List<Word>();

            return new Phrase(
                channel,
                speaker,
                offsetMilliseconds,
                durationMilliseconds,
                text,
                words?.ToList(),
                locale,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.Word"/>. </summary>
        /// <param name="text"> The recognized word, including punctuation. </param>
        /// <param name="offsetMilliseconds"> The start offset of the word in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the word in milliseconds. </param>
        /// <returns> A new <see cref="Speech.Word"/> instance for mocking. </returns>
        public static Word Word(string text = null, int offsetMilliseconds = default, int durationMilliseconds = default)
        {
            return new Word(text, offsetMilliseconds, durationMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.Transcription"/>. </summary>
        /// <param name="links"> TranscriptionLinks. </param>
        /// <param name="properties"> TranscriptionProperties. </param>
        /// <param name="self"> The location of this entity. </param>
        /// <param name="model"> EntityReference. </param>
        /// <param name="dataset"> EntityReference. </param>
        /// <param name="contentUrls">
        /// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="contentContainerUrl">
        /// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
        /// The maximum size for a blob is 2.5GB.
        /// Container SAS should contain 'r' (read) and 'l' (list) permissions.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="locale"> The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected. </param>
        /// <param name="displayName"> The display name of the object. </param>
        /// <param name="description"> The description of the object. </param>
        /// <param name="customProperties">
        /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
        /// allowed value length is 256 characters and the count of allowed entries is 10.
        /// </param>
        /// <param name="lastActionDateTime">
        /// The time-stamp when the current status was entered.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <param name="status"> The status of the object. </param>
        /// <param name="createdDateTime">
        /// The time-stamp when the object was created.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <returns> A new <see cref="Speech.Transcription"/> instance for mocking. </returns>
        public static Transcription Transcription(TranscriptionLinks links = null, TranscriptionProperties properties = null, Uri self = null, EntityReference model = null, EntityReference dataset = null, IEnumerable<Uri> contentUrls = null, Uri contentContainerUrl = null, string locale = null, string displayName = null, string description = null, IDictionary<string, string> customProperties = null, DateTimeOffset? lastActionDateTime = null, Status? status = null, DateTimeOffset? createdDateTime = null)
        {
            contentUrls ??= new List<Uri>();
            customProperties ??= new Dictionary<string, string>();

            return new Transcription(
                links,
                properties,
                self,
                model,
                dataset,
                contentUrls?.ToList(),
                contentContainerUrl,
                locale,
                displayName,
                description,
                customProperties,
                lastActionDateTime,
                status,
                createdDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.TranscriptionLinks"/>. </summary>
        /// <param name="files"> The location to get all files of this entity. See operation "Transcriptions_ListFiles" for more details. </param>
        /// <returns> A new <see cref="Speech.TranscriptionLinks"/> instance for mocking. </returns>
        public static TranscriptionLinks TranscriptionLinks(Uri files = null)
        {
            return new TranscriptionLinks(files, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.TranscriptionProperties"/>. </summary>
        /// <param name="wordLevelTimestampsEnabled"> A value indicating whether word level timestamps are requested. The default value is false. </param>
        /// <param name="displayFormWordLevelTimestampsEnabled"> A value indicating whether word level timestamps for the display form are requested. The default value is false. </param>
        /// <param name="duration"> The duration of the transcription. The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations). </param>
        /// <param name="channels"> A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered. </param>
        /// <param name="destinationContainerUrl">
        /// The requested destination container.
        ///
        /// Remarks
        ///
        /// When a destination container is used in combination with a timeToLive, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.
        ///
        /// To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)" instead of destinationContainerUrl, where blobs can be cleaned up.
        /// </param>
        /// <param name="punctuationMode"> The mode used for punctuation. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="timeToLive">
        /// How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion (successful or failed) it will be automatically deleted.
        ///
        /// Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted. Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.
        ///
        /// The shortest supported duration is 6h, the longest supported duration is 31 days. 2 days ("P2D") is the recommended default value when data is consumed directly. The duration is encoded as ISO 8601 duration ("PnYnMnDTnHnMnS", see https://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </param>
        /// <param name="error"> EntityError. </param>
        /// <param name="diarization"> DiarizationProperties. </param>
        /// <param name="languageIdentification"> LanguageIdentificationProperties. </param>
        /// <returns> A new <see cref="Speech.TranscriptionProperties"/> instance for mocking. </returns>
        public static TranscriptionProperties TranscriptionProperties(bool? wordLevelTimestampsEnabled = null, bool? displayFormWordLevelTimestampsEnabled = null, string duration = null, IEnumerable<int> channels = null, Uri destinationContainerUrl = null, PunctuationMode? punctuationMode = null, ProfanityFilterMode? profanityFilterMode = null, string timeToLive = null, EntityError error = null, DiarizationProperties diarization = null, LanguageIdentificationProperties languageIdentification = null)
        {
            channels ??= new List<int>();

            return new TranscriptionProperties(
                wordLevelTimestampsEnabled,
                displayFormWordLevelTimestampsEnabled,
                duration,
                channels?.ToList(),
                destinationContainerUrl,
                punctuationMode,
                profanityFilterMode,
                timeToLive,
                error,
                diarization,
                languageIdentification,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.EntityError"/>. </summary>
        /// <param name="code"> The code of this error. </param>
        /// <param name="message"> The message for this error. </param>
        /// <returns> A new <see cref="Speech.EntityError"/> instance for mocking. </returns>
        public static EntityError EntityError(string code = null, string message = null)
        {
            return new EntityError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Speech.PageableTranscription"/>. </summary>
        /// <param name="values">
        /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
        ///
        /// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
        /// It's recommended to build a list on the client and delete after the fetching of the complete list.
        /// </param>
        /// <param name="nextLink"> A link to the next set of paginated results if there are more entities available; otherwise null. </param>
        /// <returns> A new <see cref="Speech.PageableTranscription"/> instance for mocking. </returns>
        public static PageableTranscription PageableTranscription(IEnumerable<Transcription> values = null, Uri nextLink = null)
        {
            values ??= new List<Transcription>();

            return new PageableTranscription(values?.ToList(), nextLink, serializedAdditionalRawData: null);
        }
    }
}
