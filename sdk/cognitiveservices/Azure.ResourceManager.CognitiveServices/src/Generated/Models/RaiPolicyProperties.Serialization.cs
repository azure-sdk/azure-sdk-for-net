// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class RaiPolicyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsDefined(BasePolicyName))
            {
                writer.WritePropertyName("basePolicyName"u8);
                writer.WriteStringValue(BasePolicyName);
            }
            if (Optional.IsCollectionDefined(PromptBlocklists))
            {
                writer.WritePropertyName("promptBlocklists"u8);
                writer.WriteStartArray();
                foreach (var item in PromptBlocklists)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(CompletionBlocklists))
            {
                writer.WritePropertyName("completionBlocklists"u8);
                writer.WriteStartArray();
                foreach (var item in CompletionBlocklists)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ContentFilters))
            {
                writer.WritePropertyName("contentFilters"u8);
                writer.WriteStartArray();
                foreach (var item in ContentFilters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RaiPolicyProperties DeserializeRaiPolicyProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<RaiPolicyType> policyType = default;
            Optional<RaiPolicyMode> mode = default;
            Optional<string> basePolicyName = default;
            Optional<IList<RaiBlocklistConfig>> promptBlocklists = default;
            Optional<IList<RaiBlocklistConfig>> completionBlocklists = default;
            Optional<IList<RaiPolicyContentFilter>> contentFilters = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("policyType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    policyType = new RaiPolicyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new RaiPolicyMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("basePolicyName"u8))
                {
                    basePolicyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("promptBlocklists"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RaiBlocklistConfig> array = new List<RaiBlocklistConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RaiBlocklistConfig.DeserializeRaiBlocklistConfig(item));
                    }
                    promptBlocklists = array;
                    continue;
                }
                if (property.NameEquals("completionBlocklists"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RaiBlocklistConfig> array = new List<RaiBlocklistConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RaiBlocklistConfig.DeserializeRaiBlocklistConfig(item));
                    }
                    completionBlocklists = array;
                    continue;
                }
                if (property.NameEquals("contentFilters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RaiPolicyContentFilter> array = new List<RaiPolicyContentFilter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RaiPolicyContentFilter.DeserializeRaiPolicyContentFilter(item));
                    }
                    contentFilters = array;
                    continue;
                }
            }
            return new RaiPolicyProperties(Optional.ToNullable(policyType), Optional.ToNullable(mode), basePolicyName.Value, Optional.ToList(promptBlocklists), Optional.ToList(completionBlocklists), Optional.ToList(contentFilters));
        }
    }
}
