// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    /// <summary> Azure OpenAI Content Filters properties. </summary>
    public partial class RaiPolicyProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RaiPolicyProperties"/>. </summary>
        public RaiPolicyProperties()
        {
            PromptBlocklists = new ChangeTrackingList<RaiBlocklistConfig>();
            CompletionBlocklists = new ChangeTrackingList<RaiBlocklistConfig>();
            ContentFilters = new ChangeTrackingList<RaiPolicyContentFilter>();
        }

        /// <summary> Initializes a new instance of <see cref="RaiPolicyProperties"/>. </summary>
        /// <param name="policyType"> Content Filters policy type. </param>
        /// <param name="mode"> Content Filters mode. </param>
        /// <param name="basePolicyName"> Name of the base Content Filters. </param>
        /// <param name="promptBlocklists"> The list of blocklists for prompt. </param>
        /// <param name="completionBlocklists"> The list of blocklists for completion. </param>
        /// <param name="contentFilters"> The list of Content Filters. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RaiPolicyProperties(RaiPolicyType? policyType, RaiPolicyMode? mode, string basePolicyName, IList<RaiBlocklistConfig> promptBlocklists, IList<RaiBlocklistConfig> completionBlocklists, IList<RaiPolicyContentFilter> contentFilters, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PolicyType = policyType;
            Mode = mode;
            BasePolicyName = basePolicyName;
            PromptBlocklists = promptBlocklists;
            CompletionBlocklists = completionBlocklists;
            ContentFilters = contentFilters;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Content Filters policy type. </summary>
        public RaiPolicyType? PolicyType { get; }
        /// <summary> Content Filters mode. </summary>
        public RaiPolicyMode? Mode { get; set; }
        /// <summary> Name of the base Content Filters. </summary>
        public string BasePolicyName { get; set; }
        /// <summary> The list of blocklists for prompt. </summary>
        public IList<RaiBlocklistConfig> PromptBlocklists { get; }
        /// <summary> The list of blocklists for completion. </summary>
        public IList<RaiBlocklistConfig> CompletionBlocklists { get; }
        /// <summary> The list of Content Filters. </summary>
        public IList<RaiPolicyContentFilter> ContentFilters { get; }
    }
}
