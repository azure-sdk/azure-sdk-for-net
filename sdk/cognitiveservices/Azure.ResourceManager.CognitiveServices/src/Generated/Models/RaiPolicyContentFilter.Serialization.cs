// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CognitiveServices.Models
{
    public partial class RaiPolicyContentFilter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PolicyName))
            {
                writer.WritePropertyName("policyName"u8);
                writer.WriteStringValue(PolicyName);
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(AllowedContentLevel))
            {
                writer.WritePropertyName("allowedContentLevel"u8);
                writer.WriteStringValue(AllowedContentLevel.Value.ToString());
            }
            if (Optional.IsDefined(Blocking))
            {
                writer.WritePropertyName("blocking"u8);
                writer.WriteBooleanValue(Blocking.Value);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static RaiPolicyContentFilter DeserializeRaiPolicyContentFilter(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> policyName = default;
            Optional<bool> enabled = default;
            Optional<AllowedContentLevel> allowedContentLevel = default;
            Optional<bool> blocking = default;
            Optional<RaiPolicyContentSource> source = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("policyName"u8))
                {
                    policyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("allowedContentLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowedContentLevel = new AllowedContentLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("blocking"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    blocking = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    source = new RaiPolicyContentSource(property.Value.GetString());
                    continue;
                }
            }
            return new RaiPolicyContentFilter(policyName.Value, Optional.ToNullable(enabled), Optional.ToNullable(allowedContentLevel), Optional.ToNullable(blocking), Optional.ToNullable(source));
        }
    }
}
