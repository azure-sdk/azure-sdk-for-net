// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Azure.AI.Speech.Transcription
{
    /// <summary> Model factory for models. </summary>
    public static partial class AISpeechTranscriptionModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Transcription.TranscribeRequest"/>. </summary>
        /// <param name="options"> Metadata for a transcription request. This field contains a JSON-serialized object of type `TranscribeDefinition`. </param>
        /// <param name="audio"> The content of the audio file to be transcribed. The audio file must be shorter than 2 hours in audio duration and smaller than 250 MB in size. </param>
        /// <returns> A new <see cref="Transcription.TranscribeRequest"/> instance for mocking. </returns>
        public static TranscribeRequest TranscribeRequest(TranscriptionOptions options = null, Stream audio = null)
        {
            return new TranscribeRequest(options, audio, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Transcription.TranscriptionResult"/>. </summary>
        /// <param name="durationMilliseconds"> The duration of the audio in milliseconds. </param>
        /// <param name="combinedPhrases"> The full transcript for each channel. </param>
        /// <param name="phrases"> The transcription results segmented into phrases. </param>
        /// <returns> A new <see cref="Transcription.TranscriptionResult"/> instance for mocking. </returns>
        public static TranscriptionResult TranscriptionResult(int durationMilliseconds = default, IEnumerable<ChannelCombinedPhrases> combinedPhrases = null, IEnumerable<TranscribedPhrase> phrases = null)
        {
            combinedPhrases ??= new List<ChannelCombinedPhrases>();
            phrases ??= new List<TranscribedPhrase>();

            return new TranscriptionResult(durationMilliseconds, combinedPhrases?.ToList(), phrases?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Transcription.ChannelCombinedPhrases"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="text"> The complete transcribed text for the channel. </param>
        /// <returns> A new <see cref="Transcription.ChannelCombinedPhrases"/> instance for mocking. </returns>
        public static ChannelCombinedPhrases ChannelCombinedPhrases(int? channel = null, string text = null)
        {
            return new ChannelCombinedPhrases(channel, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Transcription.TranscribedPhrase"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="speaker"> A unique integer number that is assigned to each speaker detected in the audio without particular order. Only present if speaker diarization is enabled. </param>
        /// <param name="offsetMilliseconds"> The start offset of the phrase in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the phrase in milliseconds. </param>
        /// <param name="text"> The transcribed text of the phrase. </param>
        /// <param name="words"> The words that make up the phrase. Only present if word-level timestamps are enabled. </param>
        /// <param name="locale"> The locale of the phrase. </param>
        /// <param name="confidence"> The confidence value for the phrase. </param>
        /// <returns> A new <see cref="Transcription.TranscribedPhrase"/> instance for mocking. </returns>
        public static TranscribedPhrase TranscribedPhrase(int? channel = null, int? speaker = null, int offsetMilliseconds = default, int durationMilliseconds = default, string text = null, IEnumerable<TranscribedWord> words = null, string locale = null, float confidence = default)
        {
            words ??= new List<TranscribedWord>();

            return new TranscribedPhrase(
                channel,
                speaker,
                offsetMilliseconds,
                durationMilliseconds,
                text,
                words?.ToList(),
                locale,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Transcription.TranscribedWord"/>. </summary>
        /// <param name="text"> The recognized word, including punctuation. </param>
        /// <param name="offsetMilliseconds"> The start offset of the word in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the word in milliseconds. </param>
        /// <returns> A new <see cref="Transcription.TranscribedWord"/> instance for mocking. </returns>
        public static TranscribedWord TranscribedWord(string text = null, int offsetMilliseconds = default, int durationMilliseconds = default)
        {
            return new TranscribedWord(text, offsetMilliseconds, durationMilliseconds, serializedAdditionalRawData: null);
        }
    }
}
