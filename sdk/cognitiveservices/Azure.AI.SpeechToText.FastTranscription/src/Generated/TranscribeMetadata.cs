// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.SpeechToText.FastTranscription
{
    /// <summary> Metadata for a fast transcription request. </summary>
    public partial class TranscribeMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscribeMetadata"/>. </summary>
        public TranscribeMetadata()
        {
            Locales = new ChangeTrackingList<string>();
            Models = new ChangeTrackingDictionary<string, Uri>();
            Channels = new ChangeTrackingList<int>();
        }

        /// <summary> Initializes a new instance of <see cref="TranscribeMetadata"/>. </summary>
        /// <param name="locales"> A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales. </param>
        /// <param name="models"> Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="diarization"> Mode of diarization. </param>
        /// <param name="channels"> The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscribeMetadata(IList<string> locales, IDictionary<string, Uri> models, ProfanityFilterMode? profanityFilterMode, TranscribeDiarizationProperties diarization, IList<int> channels, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Locales = locales;
            Models = models;
            ProfanityFilterMode = profanityFilterMode;
            Diarization = diarization;
            Channels = channels;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales. </summary>
        public IList<string> Locales { get; }
        /// <summary> Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used. </summary>
        public IDictionary<string, Uri> Models { get; }
        /// <summary> Mode of profanity filtering. </summary>
        public ProfanityFilterMode? ProfanityFilterMode { get; set; }
        /// <summary> Mode of diarization. </summary>
        public TranscribeDiarizationProperties Diarization { get; set; }
        /// <summary> The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported. </summary>
        public IList<int> Channels { get; }
    }
}
