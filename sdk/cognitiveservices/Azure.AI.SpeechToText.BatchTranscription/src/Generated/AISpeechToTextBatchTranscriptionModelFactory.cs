// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.SpeechToText.BatchTranscription
{
    /// <summary> Model factory for models. </summary>
    public static partial class AISpeechToTextBatchTranscriptionModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.AsynchronousTranscription"/>. </summary>
        /// <param name="links"> TranscriptionLinks. </param>
        /// <param name="properties"> TranscriptionProperties. </param>
        /// <param name="self"> The location of this entity. </param>
        /// <param name="model"> EntityReference. </param>
        /// <param name="dataset"> EntityReference. </param>
        /// <param name="contentUrls">
        /// A list of content urls to get audio files to transcribe. Up to 1000 urls are allowed.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="contentContainerUrl">
        /// A URL for an Azure blob container that contains the audio files. A container is allowed to have a maximum size of 5GB and a maximum number of 10000 blobs.
        /// The maximum size for a blob is 2.5GB.
        /// Container SAS should contain 'r' (read) and 'l' (list) permissions.
        /// This property will not be returned in a response.
        /// </param>
        /// <param name="locale"> The locale of the contained data. If Language Identification is used, this locale is used to transcribe speech for which no language could be detected. </param>
        /// <param name="displayName"> The display name of the object. </param>
        /// <param name="description"> The description of the object. </param>
        /// <param name="customProperties">
        /// The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum
        /// allowed value length is 256 characters and the count of allowed entries is 10.
        /// </param>
        /// <param name="lastActionDateTime">
        /// The time-stamp when the current status was entered.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <param name="status"> The status of the object. </param>
        /// <param name="createdDateTime">
        /// The time-stamp when the object was created.
        /// The time stamp is encoded as ISO 8601 date and time format
        /// ("YYYY-MM-DDThh:mm:ssZ", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).
        /// </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.AsynchronousTranscription"/> instance for mocking. </returns>
        public static AsynchronousTranscription AsynchronousTranscription(TranscriptionLinks links = null, TranscriptionProperties properties = null, Uri self = null, EntityReference model = null, EntityReference dataset = null, IEnumerable<Uri> contentUrls = null, Uri contentContainerUrl = null, string locale = null, string displayName = null, string description = null, IDictionary<string, string> customProperties = null, DateTimeOffset? lastActionDateTime = null, ApiStatus? status = null, DateTimeOffset? createdDateTime = null)
        {
            contentUrls ??= new List<Uri>();
            customProperties ??= new Dictionary<string, string>();

            return new AsynchronousTranscription(
                links,
                properties,
                self,
                model,
                dataset,
                contentUrls?.ToList(),
                contentContainerUrl,
                locale,
                displayName,
                description,
                customProperties,
                lastActionDateTime,
                status,
                createdDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.TranscriptionLinks"/>. </summary>
        /// <param name="files"> The location to get all files of this entity. See operation "Transcriptions_ListFiles" for more details. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.TranscriptionLinks"/> instance for mocking. </returns>
        public static TranscriptionLinks TranscriptionLinks(Uri files = null)
        {
            return new TranscriptionLinks(files, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.TranscriptionProperties"/>. </summary>
        /// <param name="wordLevelTimestampsEnabled"> A value indicating whether word level timestamps are requested. The default value is false. </param>
        /// <param name="displayFormWordLevelTimestampsEnabled"> A value indicating whether word level timestamps for the display form are requested. The default value is false. </param>
        /// <param name="durationMilliseconds">
        /// The duration in milliseconds of the transcription.
        /// Durations larger than 2^53-1 are not supported to ensure compatibility with JavaScript integers.
        /// </param>
        /// <param name="channels"> A collection of the requested channel numbers. In the default case, the channels 0 and 1 are considered. </param>
        /// <param name="destinationContainerUrl">
        /// The requested destination container.
        ///
        /// Remarks
        ///
        /// When a destination container is used in combination with a timeToLive, the metadata of a transcription will be deleted normally, but the data stored in the destination container, including transcription results, will remain untouched, because no delete permissions are required for this container.
        ///
        /// To support automatic cleanup, either configure blob lifetimes on the container, or use "Bring your own Storage (BYOS)" instead of destinationContainerUrl, where blobs can be cleaned up.
        /// </param>
        /// <param name="punctuationMode"> The mode used for punctuation. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="timeToLiveHours">
        /// How long the transcription will be kept in the system after it has completed. Once the transcription reaches the time to live after completion(successful or failed) it will be automatically deleted.
        ///
        /// Note: When using BYOS (bring your own storage), the result files on the customer owned storage account will also be deleted.Use either destinationContainerUrl to specify a separate container for result files which will not be deleted when the timeToLive expires, or retrieve the result files through the API and store them as needed.
        ///
        /// The shortest supported duration is 6 hours, the longest supported duration is 31 days. 2 days (48 hours) is the recommended default value when data is consumed directly.
        /// </param>
        /// <param name="error"> EntityError. </param>
        /// <param name="diarization"> DiarizationProperties. </param>
        /// <param name="languageIdentification"> LanguageIdentificationProperties. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.TranscriptionProperties"/> instance for mocking. </returns>
        public static TranscriptionProperties TranscriptionProperties(bool? wordLevelTimestampsEnabled = null, bool? displayFormWordLevelTimestampsEnabled = null, int? durationMilliseconds = null, IEnumerable<int> channels = null, Uri destinationContainerUrl = null, PunctuationMode? punctuationMode = null, ProfanityFilterMode? profanityFilterMode = null, int timeToLiveHours = default, EntityError error = null, DiarizationProperties diarization = null, LanguageIdentificationProperties languageIdentification = null)
        {
            channels ??= new List<int>();

            return new TranscriptionProperties(
                wordLevelTimestampsEnabled,
                displayFormWordLevelTimestampsEnabled,
                durationMilliseconds,
                channels?.ToList(),
                destinationContainerUrl,
                punctuationMode,
                profanityFilterMode,
                timeToLiveHours,
                error,
                diarization,
                languageIdentification,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.EntityError"/>. </summary>
        /// <param name="code"> The code of this error. </param>
        /// <param name="message"> The message for this error. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.EntityError"/> instance for mocking. </returns>
        public static EntityError EntityError(string code = null, string message = null)
        {
            return new EntityError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.PageableTranscription"/>. </summary>
        /// <param name="values">
        /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
        ///
        /// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
        /// It's recommended to build a list on the client and delete after the fetching of the complete list.
        /// </param>
        /// <param name="nextLink"> A link to the next set of paginated results if there are more entities available; otherwise null. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.PageableTranscription"/> instance for mocking. </returns>
        public static PageableTranscription PageableTranscription(IEnumerable<AsynchronousTranscription> values = null, Uri nextLink = null)
        {
            values ??= new List<AsynchronousTranscription>();

            return new PageableTranscription(values?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.PageableFile"/>. </summary>
        /// <param name="values">
        /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
        ///
        /// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
        /// It's recommended to build a list on the client and delete after the fetching of the complete list.
        /// </param>
        /// <param name="nextLink"> A link to the next set of paginated results if there are more entities available; otherwise null. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.PageableFile"/> instance for mocking. </returns>
        public static PageableFile PageableFile(IEnumerable<TranscriptionFile> values = null, Uri nextLink = null)
        {
            values ??= new List<TranscriptionFile>();

            return new PageableFile(values?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.TranscriptionFile"/>. </summary>
        /// <param name="createdDateTime"> The creation time of this file. The time stamp is encoded as ISO 8601 date and time format (see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations). </param>
        /// <param name="kind"> FileKind. </param>
        /// <param name="links"> FileLinks. </param>
        /// <param name="name"> The name of this file. </param>
        /// <param name="properties"> FileProperties. </param>
        /// <param name="self"> The location of this entity. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.TranscriptionFile"/> instance for mocking. </returns>
        public static TranscriptionFile TranscriptionFile(DateTimeOffset createdDateTime = default, FileKind kind = default, FileLinks links = null, string name = null, FileProperties properties = null, Uri self = null)
        {
            return new TranscriptionFile(
                createdDateTime,
                kind,
                links,
                name,
                properties,
                self,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.FileLinks"/>. </summary>
        /// <param name="contentUrl"> The url to retrieve the content of this file. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.FileLinks"/> instance for mocking. </returns>
        public static FileLinks FileLinks(Uri contentUrl = null)
        {
            return new FileLinks(contentUrl, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="SpeechToText.BatchTranscription.FileProperties"/>. </summary>
        /// <param name="durationMilliseconds"> The total duration in milliseconds of the file in case this file is an audio file. </param>
        /// <param name="size"> The size of the data in bytes. </param>
        /// <returns> A new <see cref="SpeechToText.BatchTranscription.FileProperties"/> instance for mocking. </returns>
        public static FileProperties FileProperties(int durationMilliseconds = default, int size = default)
        {
            return new FileProperties(durationMilliseconds, size, serializedAdditionalRawData: null);
        }
    }
}
