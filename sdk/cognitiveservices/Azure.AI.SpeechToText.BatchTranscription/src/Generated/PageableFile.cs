// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.SpeechToText.BatchTranscription
{
    /// <summary> Page of entities. </summary>
    public partial class PageableFile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PageableFile"/>. </summary>
        internal PageableFile()
        {
            Values = new ChangeTrackingList<TranscriptionFile>();
        }

        /// <summary> Initializes a new instance of <see cref="PageableFile"/>. </summary>
        /// <param name="values">
        /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
        ///
        /// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
        /// It's recommended to build a list on the client and delete after the fetching of the complete list.
        /// </param>
        /// <param name="nextLink"> A link to the next set of paginated results if there are more entities available; otherwise null. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PageableFile(IReadOnlyList<TranscriptionFile> values, Uri nextLink, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Values = values;
            NextLink = nextLink;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// A list of entities limited by either the passed query parameters 'skip' and 'top' or their default values.
        ///
        /// When iterating through a list using pagination and deleting entities in parallel, some entities will be skipped in the results.
        /// It's recommended to build a list on the client and delete after the fetching of the complete list.
        /// </summary>
        public IReadOnlyList<TranscriptionFile> Values { get; }
        /// <summary> A link to the next set of paginated results if there are more entities available; otherwise null. </summary>
        public Uri NextLink { get; }
    }
}
