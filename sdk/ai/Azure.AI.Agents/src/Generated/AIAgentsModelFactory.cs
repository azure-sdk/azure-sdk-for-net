// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Azure.AI.Agents
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIAgentsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Agents.AzureFunctionBinding"/>. </summary>
        /// <param name="type"> The type of binding, which is always 'storage_queue'. </param>
        /// <param name="storageQueue"> Storage queue. </param>
        /// <returns> A new <see cref="Agents.AzureFunctionBinding"/> instance for mocking. </returns>
        public static AzureFunctionBinding AzureFunctionBinding(AzureFunctionBindingType type = default, AzureFunctionStorageQueue storageQueue = null)
        {
            return new AzureFunctionBinding(type, storageQueue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.ResponseFormatJsonSchemaType"/>. </summary>
        /// <param name="type"> Type. </param>
        /// <param name="jsonSchema"> The JSON schema, describing response format. </param>
        /// <returns> A new <see cref="Agents.ResponseFormatJsonSchemaType"/> instance for mocking. </returns>
        public static ResponseFormatJsonSchemaType ResponseFormatJsonSchemaType(ResponseFormatJsonSchemaTypeType type = default, ResponseFormatJsonSchema jsonSchema = null)
        {
            return new ResponseFormatJsonSchemaType(type, jsonSchema, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.Agent"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always assistant. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="name"> The name of the agent. </param>
        /// <param name="description"> The description of the agent. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The system instructions for the agent to use. </param>
        /// <param name="tools">
        /// The collection of tools enabled for the agent.
        /// Please note <see cref="ToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAISearchToolDefinition"/>, <see cref="AzureFunctionToolDefinition"/>, <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="MicrosoftFabricToolDefinition"/>, <see cref="FileSearchToolDefinition"/>, <see cref="FunctionToolDefinition"/>, <see cref="OpenApiToolDefinition"/> and <see cref="SharepointToolDefinition"/>.
        /// </param>
        /// <param name="toolResources">
        /// A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
        /// tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        /// </param>
        /// <param name="temperature">
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
        /// while lower values like 0.2 will make it more focused and deterministic.
        /// </param>
        /// <param name="topP">
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
        /// So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        ///
        /// We generally recommend altering this or temperature but not both.
        /// </param>
        /// <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.Agent"/> instance for mocking. </returns>
        public static Agent Agent(string id = null, AgentObject @object = default, DateTimeOffset createdAt = default, string name = null, string description = null, string model = null, string instructions = null, IEnumerable<ToolDefinition> tools = null, ToolResources toolResources = null, float? temperature = null, float? topP = null, BinaryData responseFormat = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            tools ??= new List<ToolDefinition>();
            metadata ??= new Dictionary<string, string>();

            return new Agent(
                id,
                @object,
                createdAt,
                name,
                description,
                model,
                instructions,
                tools?.ToList(),
                toolResources,
                temperature,
                topP,
                responseFormat,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.ThreadMessageOptions"/>. </summary>
        /// <param name="role">
        /// The role of the entity that is creating the message. Allowed values include:
        /// - `user`: Indicates the message is sent by an actual user and should be used in most
        /// cases to represent user-generated messages.
        /// - `assistant`: Indicates the message is generated by the agent. Use this value to insert
        /// messages from the agent into the
        /// conversation.
        /// </param>
        /// <param name="content">
        /// The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via
        /// a separate call to the create message API.
        /// </param>
        /// <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.ThreadMessageOptions"/> instance for mocking. </returns>
        public static ThreadMessageOptions ThreadMessageOptions(MessageRole role = default, string content = null, IEnumerable<MessageAttachment> attachments = null, IDictionary<string, string> metadata = null)
        {
            attachments ??= new List<MessageAttachment>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadMessageOptions(role, content, attachments?.ToList(), metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.AgentThread"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="toolResources">
        /// A set of resources that are made available to the agent's tools in this thread. The resources are specific to the type
        /// of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list
        /// of vector store IDs.
        /// </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.AgentThread"/> instance for mocking. </returns>
        public static AgentThread AgentThread(string id = null, AgentThreadObject @object = default, DateTimeOffset createdAt = default, ToolResources toolResources = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new AgentThread(
                id,
                @object,
                createdAt,
                toolResources,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.ThreadMessage"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.message'. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="threadId"> The ID of the thread that this message belongs to. </param>
        /// <param name="status"> The status of the message. </param>
        /// <param name="incompleteDetails"> On an incomplete message, details about why the message is incomplete. </param>
        /// <param name="completedAt"> The Unix timestamp (in seconds) for when the message was completed. </param>
        /// <param name="incompleteAt"> The Unix timestamp (in seconds) for when the message was marked as incomplete. </param>
        /// <param name="role"> The role associated with the agent thread message. </param>
        /// <param name="contentItems">
        /// The list of content items associated with the agent thread message.
        /// Please note <see cref="MessageContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MessageImageFileContent"/> and <see cref="MessageTextContent"/>.
        /// </param>
        /// <param name="agentId"> If applicable, the ID of the agent that authored this message. </param>
        /// <param name="runId"> If applicable, the ID of the run associated with the authoring of this message. </param>
        /// <param name="attachments"> A list of files attached to the message, and the tools they were added to. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.ThreadMessage"/> instance for mocking. </returns>
        public static ThreadMessage ThreadMessage(string id = null, ThreadMessageObject @object = default, DateTimeOffset createdAt = default, string threadId = null, MessageStatus status = default, MessageIncompleteDetails incompleteDetails = null, DateTimeOffset? completedAt = null, DateTimeOffset? incompleteAt = null, MessageRole role = default, IEnumerable<MessageContent> contentItems = null, string agentId = null, string runId = null, IEnumerable<MessageAttachment> attachments = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            contentItems ??= new List<MessageContent>();
            attachments ??= new List<MessageAttachment>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadMessage(
                id,
                @object,
                createdAt,
                threadId,
                status,
                incompleteDetails,
                completedAt,
                incompleteAt,
                role,
                contentItems?.ToList(),
                agentId,
                runId,
                attachments?.ToList(),
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageIncompleteDetails"/>. </summary>
        /// <param name="reason"> The provided reason describing why the message was marked as incomplete. </param>
        /// <returns> A new <see cref="Agents.MessageIncompleteDetails"/> instance for mocking. </returns>
        public static MessageIncompleteDetails MessageIncompleteDetails(MessageIncompleteDetailsReason reason = default)
        {
            return new MessageIncompleteDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <returns> A new <see cref="Agents.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null)
        {
            return new UnknownMessageTextAnnotation(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageTextUrlCitationAnnotation"/>. </summary>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="urlCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Agents.MessageTextUrlCitationAnnotation"/> instance for mocking. </returns>
        public static MessageTextUrlCitationAnnotation MessageTextUrlCitationAnnotation(string text = null, MessageTextUrlCitationDetails urlCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageTextUrlCitationAnnotation(
                "url_citation",
                text,
                serializedAdditionalRawData: null,
                urlCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageTextUrlCitationDetails"/>. </summary>
        /// <param name="url"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Agents.MessageTextUrlCitationDetails"/> instance for mocking. </returns>
        public static MessageTextUrlCitationDetails MessageTextUrlCitationDetails(string url = null, string title = null)
        {
            return new MessageTextUrlCitationDetails(url, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.ThreadRun"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.run'. </param>
        /// <param name="threadId"> The ID of the thread associated with this run. </param>
        /// <param name="agentId"> The ID of the agent associated with the thread this run was performed against. </param>
        /// <param name="status"> The status of the agent thread run. </param>
        /// <param name="requiredAction">
        /// The details of the action required for the agent thread run to continue.
        /// Please note <see cref="RequiredAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SubmitToolOutputsAction"/>.
        /// </param>
        /// <param name="lastError"> The last error, if any, encountered by this agent thread run. </param>
        /// <param name="model"> The ID of the model to use. </param>
        /// <param name="instructions"> The overridden system instructions used for this agent thread run. </param>
        /// <param name="tools">
        /// The overridden enabled tools used for this agent thread run.
        /// Please note <see cref="ToolDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureAISearchToolDefinition"/>, <see cref="AzureFunctionToolDefinition"/>, <see cref="BingGroundingToolDefinition"/>, <see cref="CodeInterpreterToolDefinition"/>, <see cref="MicrosoftFabricToolDefinition"/>, <see cref="FileSearchToolDefinition"/>, <see cref="FunctionToolDefinition"/>, <see cref="OpenApiToolDefinition"/> and <see cref="SharepointToolDefinition"/>.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiresAt"> The Unix timestamp, in seconds, representing when this item expires. </param>
        /// <param name="startedAt"> The Unix timestamp, in seconds, representing when this item was started. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="incompleteDetails"> Details on why the run is incomplete. Will be `null` if the run is not incomplete. </param>
        /// <param name="usage"> Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). </param>
        /// <param name="temperature"> The sampling temperature used for this run. If not set, defaults to 1. </param>
        /// <param name="topP"> The nucleus sampling value used for this run. If not set, defaults to 1. </param>
        /// <param name="maxPromptTokens"> The maximum number of prompt tokens specified to have been used over the course of the run. </param>
        /// <param name="maxCompletionTokens"> The maximum number of completion tokens specified to have been used over the course of the run. </param>
        /// <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        /// <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        /// <param name="responseFormat"> The response format of the tool calls used in this run. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <param name="toolResources"> Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis. </param>
        /// <param name="parallelToolCalls"> Determines if tools can be executed in parallel within the run. </param>
        /// <returns> A new <see cref="Agents.ThreadRun"/> instance for mocking. </returns>
        public static ThreadRun ThreadRun(string id = null, ThreadRunObject @object = default, string threadId = null, string agentId = null, RunStatus status = default, RequiredAction requiredAction = null, RunError lastError = null, string model = null, string instructions = null, IEnumerable<ToolDefinition> tools = null, DateTimeOffset createdAt = default, DateTimeOffset? expiresAt = null, DateTimeOffset? startedAt = null, DateTimeOffset? completedAt = null, DateTimeOffset? cancelledAt = null, DateTimeOffset? failedAt = null, IncompleteRunDetails incompleteDetails = null, RunCompletionUsage usage = null, float? temperature = null, float? topP = null, int? maxPromptTokens = null, int? maxCompletionTokens = null, TruncationObject truncationStrategy = null, BinaryData toolChoice = null, BinaryData responseFormat = null, IReadOnlyDictionary<string, string> metadata = null, UpdateToolResourcesOptions toolResources = null, bool parallelToolCalls = default)
        {
            tools ??= new List<ToolDefinition>();
            metadata ??= new Dictionary<string, string>();

            return new ThreadRun(
                id,
                @object,
                threadId,
                agentId,
                status,
                requiredAction,
                lastError,
                model,
                instructions,
                tools?.ToList(),
                createdAt,
                expiresAt,
                startedAt,
                completedAt,
                cancelledAt,
                failedAt,
                incompleteDetails,
                usage,
                temperature,
                topP,
                maxPromptTokens,
                maxCompletionTokens,
                truncationStrategy,
                toolChoice,
                responseFormat,
                metadata,
                toolResources,
                parallelToolCalls,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RequiredToolCall"/>. </summary>
        /// <param name="type"> The object type for the required tool call. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when submitting tool outputs. </param>
        /// <returns> A new <see cref="Agents.RequiredToolCall"/> instance for mocking. </returns>
        public static RequiredToolCall RequiredToolCall(string type = null, string id = null)
        {
            return new UnknownRequiredToolCall(type, id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunError"/>. </summary>
        /// <param name="code"> The status for the error. </param>
        /// <param name="message"> The human-readable text associated with the error. </param>
        /// <returns> A new <see cref="Agents.RunError"/> instance for mocking. </returns>
        public static RunError RunError(string code = null, string message = null)
        {
            return new RunError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.IncompleteRunDetails"/>. </summary>
        /// <param name="reason"> The reason why the run is incomplete. This indicates which specific token limit was reached during the run. </param>
        /// <returns> A new <see cref="Agents.IncompleteRunDetails"/> instance for mocking. </returns>
        public static IncompleteRunDetails IncompleteRunDetails(IncompleteDetailsReason reason = default)
        {
            return new IncompleteRunDetails(reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Agents.RunCompletionUsage"/> instance for mocking. </returns>
        public static RunCompletionUsage RunCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStep"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always 'thread.run.step'. </param>
        /// <param name="type"> The type of run step, which can be either message_creation or tool_calls. </param>
        /// <param name="agentId"> The ID of the agent associated with the run step. </param>
        /// <param name="threadId"> The ID of the thread that was run. </param>
        /// <param name="runId"> The ID of the run that this run step is a part of. </param>
        /// <param name="status"> The status of this run step. </param>
        /// <param name="stepDetails">
        /// The details for this run step.
        /// Please note <see cref="RunStepDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.RunStepMessageCreationDetails"/> and <see cref="Agents.RunStepToolCallDetails"/>.
        /// </param>
        /// <param name="lastError"> If applicable, information about the last error encountered by this run step. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="expiredAt"> The Unix timestamp, in seconds, representing when this item expired. </param>
        /// <param name="completedAt"> The Unix timestamp, in seconds, representing when this completed. </param>
        /// <param name="cancelledAt"> The Unix timestamp, in seconds, representing when this was cancelled. </param>
        /// <param name="failedAt"> The Unix timestamp, in seconds, representing when this failed. </param>
        /// <param name="usage"> Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.RunStep"/> instance for mocking. </returns>
        public static RunStep RunStep(string id = null, RunStepObject @object = default, RunStepType type = default, string agentId = null, string threadId = null, string runId = null, RunStepStatus status = default, RunStepDetails stepDetails = null, RunStepError lastError = null, DateTimeOffset createdAt = default, DateTimeOffset? expiredAt = null, DateTimeOffset? completedAt = null, DateTimeOffset? cancelledAt = null, DateTimeOffset? failedAt = null, RunStepCompletionUsage usage = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new RunStep(
                id,
                @object,
                type,
                agentId,
                threadId,
                runId,
                status,
                stepDetails,
                lastError,
                createdAt,
                expiredAt,
                completedAt,
                cancelledAt,
                failedAt,
                usage,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepMessageCreationDetails"/>. </summary>
        /// <param name="messageCreation"> Information about the message creation associated with this run step. </param>
        /// <returns> A new <see cref="Agents.RunStepMessageCreationDetails"/> instance for mocking. </returns>
        public static RunStepMessageCreationDetails RunStepMessageCreationDetails(RunStepMessageCreationReference messageCreation = null)
        {
            return new RunStepMessageCreationDetails(RunStepType.MessageCreation, serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepMessageCreationReference"/>. </summary>
        /// <param name="messageId"> The ID of the message created by this run step. </param>
        /// <returns> A new <see cref="Agents.RunStepMessageCreationReference"/> instance for mocking. </returns>
        public static RunStepMessageCreationReference RunStepMessageCreationReference(string messageId = null)
        {
            return new RunStepMessageCreationReference(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepToolCallDetails"/>. </summary>
        /// <param name="toolCalls">
        /// A list of tool call details for this run step.
        /// Please note <see cref="Agents.RunStepToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.RunStepAzureAISearchToolCall"/>, <see cref="Agents.RunStepBingGroundingToolCall"/>, <see cref="RunStepCodeInterpreterToolCall"/>, <see cref="Agents.RunStepMicrosoftFabricToolCall"/>, <see cref="Agents.RunStepFileSearchToolCall"/>, <see cref="RunStepFunctionToolCall"/> and <see cref="Agents.RunStepSharepointToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.RunStepToolCallDetails"/> instance for mocking. </returns>
        public static RunStepToolCallDetails RunStepToolCallDetails(IEnumerable<RunStepToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepToolCall>();

            return new RunStepToolCallDetails(RunStepType.ToolCalls, serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <returns> A new <see cref="Agents.RunStepToolCall"/> instance for mocking. </returns>
        public static RunStepToolCall RunStepToolCall(string type = null, string id = null)
        {
            return new UnknownRunStepToolCall(type, id, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepFileSearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="fileSearch"> For now, this is always going to be an empty object. </param>
        /// <returns> A new <see cref="Agents.RunStepFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCall RunStepFileSearchToolCall(string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepFileSearchToolCall("file_search", id, serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepFileSearchToolCallResults"/>. </summary>
        /// <param name="rankingOptions"> Ranking options for file search. </param>
        /// <param name="results"> The array of a file search results. </param>
        /// <returns> A new <see cref="Agents.RunStepFileSearchToolCallResults"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResults RunStepFileSearchToolCallResults(FileSearchRankingOptions rankingOptions = null, IEnumerable<RunStepFileSearchToolCallResult> results = null)
        {
            results ??= new List<RunStepFileSearchToolCallResult>();

            return new RunStepFileSearchToolCallResults(rankingOptions, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <param name="content"> The content of the result that was found. The content is only included if requested via the include query parameter. </param>
        /// <returns> A new <see cref="Agents.RunStepFileSearchToolCallResult"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResult RunStepFileSearchToolCallResult(string fileId = null, string fileName = null, float score = default, IEnumerable<FileSearchToolCallContent> content = null)
        {
            content ??= new List<FileSearchToolCallContent>();

            return new RunStepFileSearchToolCallResult(fileId, fileName, score, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.FileSearchToolCallContent"/>. </summary>
        /// <param name="type"> The type of the content. </param>
        /// <param name="text"> The text content of the file. </param>
        /// <returns> A new <see cref="Agents.FileSearchToolCallContent"/> instance for mocking. </returns>
        public static FileSearchToolCallContent FileSearchToolCallContent(FileSearchToolCallContentType type = default, string text = null)
        {
            return new FileSearchToolCallContent(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepBingGroundingToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="bingGrounding"> Reserved for future use. </param>
        /// <returns> A new <see cref="Agents.RunStepBingGroundingToolCall"/> instance for mocking. </returns>
        public static RunStepBingGroundingToolCall RunStepBingGroundingToolCall(string id = null, IReadOnlyDictionary<string, string> bingGrounding = null)
        {
            bingGrounding ??= new Dictionary<string, string>();

            return new RunStepBingGroundingToolCall("bing_grounding", id, serializedAdditionalRawData: null, bingGrounding);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepAzureAISearchToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="azureAISearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Agents.RunStepAzureAISearchToolCall"/> instance for mocking. </returns>
        public static RunStepAzureAISearchToolCall RunStepAzureAISearchToolCall(string id = null, IReadOnlyDictionary<string, string> azureAISearch = null)
        {
            azureAISearch ??= new Dictionary<string, string>();

            return new RunStepAzureAISearchToolCall("azure_ai_search", id, serializedAdditionalRawData: null, azureAISearch);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepSharepointToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="sharePoint"> Reserved for future use. </param>
        /// <returns> A new <see cref="Agents.RunStepSharepointToolCall"/> instance for mocking. </returns>
        public static RunStepSharepointToolCall RunStepSharepointToolCall(string id = null, IReadOnlyDictionary<string, string> sharePoint = null)
        {
            sharePoint ??= new Dictionary<string, string>();

            return new RunStepSharepointToolCall("sharepoint_grounding", id, serializedAdditionalRawData: null, sharePoint);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepMicrosoftFabricToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="microsoftFabric"> Reserved for future use. </param>
        /// <returns> A new <see cref="Agents.RunStepMicrosoftFabricToolCall"/> instance for mocking. </returns>
        public static RunStepMicrosoftFabricToolCall RunStepMicrosoftFabricToolCall(string id = null, IReadOnlyDictionary<string, string> microsoftFabric = null)
        {
            microsoftFabric ??= new Dictionary<string, string>();

            return new RunStepMicrosoftFabricToolCall("fabric_aiskill", id, serializedAdditionalRawData: null, microsoftFabric);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepError"/>. </summary>
        /// <param name="code"> The error code for this error. </param>
        /// <param name="message"> The human-readable text associated with this error. </param>
        /// <returns> A new <see cref="Agents.RunStepError"/> instance for mocking. </returns>
        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = null)
        {
            return new RunStepError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepCompletionUsage"/>. </summary>
        /// <param name="completionTokens"> Number of completion tokens used over the course of the run step. </param>
        /// <param name="promptTokens"> Number of prompt tokens used over the course of the run step. </param>
        /// <param name="totalTokens"> Total number of tokens used (prompt + completion). </param>
        /// <returns> A new <see cref="Agents.RunStepCompletionUsage"/> instance for mocking. </returns>
        public static RunStepCompletionUsage RunStepCompletionUsage(long completionTokens = default, long promptTokens = default, long totalTokens = default)
        {
            return new RunStepCompletionUsage(completionTokens, promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.OpenAIFile"/>. </summary>
        /// <param name="object"> The object type, which is always 'file'. </param>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="size"> The size of the file, in bytes. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="createdAt"> The Unix timestamp, in seconds, representing when this object was created. </param>
        /// <param name="purpose"> The intended purpose of a file. </param>
        /// <param name="status"> The state of the file. This field is available in Azure OpenAI only. </param>
        /// <param name="statusDetails"> The error message with details in case processing of this file failed. This field is available in Azure OpenAI only. </param>
        /// <returns> A new <see cref="Agents.OpenAIFile"/> instance for mocking. </returns>
        public static OpenAIFile OpenAIFile(OpenAIFileObject @object = default, string id = null, int size = default, string filename = null, DateTimeOffset createdAt = default, OpenAIFilePurpose purpose = default, FileState? status = null, string statusDetails = null)
        {
            return new OpenAIFile(
                @object,
                id,
                size,
                filename,
                createdAt,
                purpose,
                status,
                statusDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.OpenAIPageableListOfVectorStore"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Agents.OpenAIPageableListOfVectorStore"/> instance for mocking. </returns>
        public static OpenAIPageableListOfVectorStore OpenAIPageableListOfVectorStore(OpenAIPageableListOfVectorStoreObject @object = default, IEnumerable<VectorStore> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<VectorStore>();

            return new OpenAIPageableListOfVectorStore(
                @object,
                data?.ToList(),
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStore"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store was created. </param>
        /// <param name="name"> The name of the vector store. </param>
        /// <param name="usageBytes"> The total number of bytes used by the files in the vector store. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <param name="status"> The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. </param>
        /// <param name="expiresAfter"> Details on when this vector store expires. </param>
        /// <param name="expiresAt"> The Unix timestamp (in seconds) for when the vector store will expire. </param>
        /// <param name="lastActiveAt"> The Unix timestamp (in seconds) for when the vector store was last active. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Agents.VectorStore"/> instance for mocking. </returns>
        public static VectorStore VectorStore(string id = null, VectorStoreObject @object = default, DateTimeOffset createdAt = default, string name = null, int usageBytes = default, VectorStoreFileCount fileCounts = null, VectorStoreStatus status = default, VectorStoreExpirationPolicy expiresAfter = null, DateTimeOffset? expiresAt = null, DateTimeOffset? lastActiveAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new VectorStore(
                id,
                @object,
                createdAt,
                name,
                usageBytes,
                fileCounts,
                status,
                expiresAfter,
                expiresAt,
                lastActiveAt,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreFileCount"/>. </summary>
        /// <param name="inProgress"> The number of files that are currently being processed. </param>
        /// <param name="completed"> The number of files that have been successfully processed. </param>
        /// <param name="failed"> The number of files that have failed to process. </param>
        /// <param name="cancelled"> The number of files that were cancelled. </param>
        /// <param name="total"> The total number of files. </param>
        /// <returns> A new <see cref="Agents.VectorStoreFileCount"/> instance for mocking. </returns>
        public static VectorStoreFileCount VectorStoreFileCount(int inProgress = default, int completed = default, int failed = default, int cancelled = default, int total = default)
        {
            return new VectorStoreFileCount(
                inProgress,
                completed,
                failed,
                cancelled,
                total,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreStaticChunkingStrategyRequest"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Agents.VectorStoreStaticChunkingStrategyRequest"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyRequest VectorStoreStaticChunkingStrategyRequest(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyRequest(VectorStoreChunkingStrategyRequestType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'vector_store.deleted'. </param>
        /// <returns> A new <see cref="Agents.VectorStoreDeletionStatus"/> instance for mocking. </returns>
        public static VectorStoreDeletionStatus VectorStoreDeletionStatus(string id = null, bool deleted = default, VectorStoreDeletionStatusObject @object = default)
        {
            return new VectorStoreDeletionStatus(id, deleted, @object, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.OpenAIPageableListOfVectorStoreFile"/>. </summary>
        /// <param name="object"> The object type, which is always list. </param>
        /// <param name="data"> The requested list of items. </param>
        /// <param name="firstId"> The first ID represented in this list. </param>
        /// <param name="lastId"> The last ID represented in this list. </param>
        /// <param name="hasMore"> A value indicating whether there are additional values available not captured in this list. </param>
        /// <returns> A new <see cref="Agents.OpenAIPageableListOfVectorStoreFile"/> instance for mocking. </returns>
        public static OpenAIPageableListOfVectorStoreFile OpenAIPageableListOfVectorStoreFile(OpenAIPageableListOfVectorStoreFileObject @object = default, IEnumerable<VectorStoreFile> data = null, string firstId = null, string lastId = null, bool hasMore = default)
        {
            data ??= new List<VectorStoreFile>();

            return new OpenAIPageableListOfVectorStoreFile(
                @object,
                data?.ToList(),
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreFile"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file`. </param>
        /// <param name="usageBytes">
        /// The total vector store usage in bytes. Note that this may be different from the original file
        /// size.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <param name="chunkingStrategy">
        /// The strategy used to chunk the file.
        /// Please note <see cref="VectorStoreChunkingStrategyResponse"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VectorStoreAutoChunkingStrategyResponse"/> and <see cref="Agents.VectorStoreStaticChunkingStrategyResponse"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.VectorStoreFile"/> instance for mocking. </returns>
        public static VectorStoreFile VectorStoreFile(string id = null, VectorStoreFileObject @object = default, int usageBytes = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileStatus status = default, VectorStoreFileError lastError = null, VectorStoreChunkingStrategyResponse chunkingStrategy = null)
        {
            return new VectorStoreFile(
                id,
                @object,
                usageBytes,
                createdAt,
                vectorStoreId,
                status,
                lastError,
                chunkingStrategy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreFileError"/>. </summary>
        /// <param name="code"> One of `server_error` or `rate_limit_exceeded`. </param>
        /// <param name="message"> A human-readable description of the error. </param>
        /// <returns> A new <see cref="Agents.VectorStoreFileError"/> instance for mocking. </returns>
        public static VectorStoreFileError VectorStoreFileError(VectorStoreFileErrorCode code = default, string message = null)
        {
            return new VectorStoreFileError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreStaticChunkingStrategyResponse"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Agents.VectorStoreStaticChunkingStrategyResponse"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyResponse VectorStoreStaticChunkingStrategyResponse(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyResponse(VectorStoreChunkingStrategyResponseType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreFileDeletionStatus"/>. </summary>
        /// <param name="id"> The ID of the resource specified for deletion. </param>
        /// <param name="deleted"> A value indicating whether deletion was successful. </param>
        /// <param name="object"> The object type, which is always 'vector_store.deleted'. </param>
        /// <returns> A new <see cref="Agents.VectorStoreFileDeletionStatus"/> instance for mocking. </returns>
        public static VectorStoreFileDeletionStatus VectorStoreFileDeletionStatus(string id = null, bool deleted = default, VectorStoreFileDeletionStatusObject @object = default)
        {
            return new VectorStoreFileDeletionStatus(id, deleted, @object, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.VectorStoreFileBatch"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file_batch`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store files batch was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <returns> A new <see cref="Agents.VectorStoreFileBatch"/> instance for mocking. </returns>
        public static VectorStoreFileBatch VectorStoreFileBatch(string id = null, VectorStoreFileBatchObject @object = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileBatchStatus status = default, VectorStoreFileCount fileCounts = null)
        {
            return new VectorStoreFileBatch(
                id,
                @object,
                createdAt,
                vectorStoreId,
                status,
                fileCounts,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the message, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.message.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the Message. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaChunk"/> instance for mocking. </returns>
        public static MessageDeltaChunk MessageDeltaChunk(string id = null, MessageDeltaChunkObject @object = default, MessageDelta delta = null)
        {
            return new MessageDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDelta"/>. </summary>
        /// <param name="role"> The entity that produced the message. </param>
        /// <param name="content">
        /// The content of the message as an array of text and/or images.
        /// Please note <see cref="Agents.MessageDeltaContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.MessageDeltaImageFileContent"/> and <see cref="Agents.MessageDeltaTextContent"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.MessageDelta"/> instance for mocking. </returns>
        public static MessageDelta MessageDelta(MessageRole role = default, IEnumerable<MessageDeltaContent> content = null)
        {
            content ??= new List<MessageDeltaContent>();

            return new MessageDelta(role, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="type"> The type of content for this content part. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaContent"/> instance for mocking. </returns>
        public static MessageDeltaContent MessageDeltaContent(int index = default, string type = null)
        {
            return new UnknownMessageDeltaContent(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaImageFileContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="imageFile"> The image_file data. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaImageFileContent"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContent MessageDeltaImageFileContent(int index = default, MessageDeltaImageFileContentObject imageFile = null)
        {
            return new MessageDeltaImageFileContent(index, "image_file", serializedAdditionalRawData: null, imageFile);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaImageFileContentObject"/>. </summary>
        /// <param name="fileId"> The file ID of the image in the message content. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaImageFileContentObject"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContentObject MessageDeltaImageFileContentObject(string fileId = null)
        {
            return new MessageDeltaImageFileContentObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="text"> The text content details. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextContent"/> instance for mocking. </returns>
        public static MessageDeltaTextContent MessageDeltaTextContent(int index = default, MessageDeltaTextContentObject text = null)
        {
            return new MessageDeltaTextContent(index, "text", serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextContentObject"/>. </summary>
        /// <param name="value"> The data that makes up the text. </param>
        /// <param name="annotations">
        /// Annotations for the text.
        /// Please note <see cref="Agents.MessageDeltaTextAnnotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.MessageDeltaTextFileCitationAnnotation"/>, <see cref="Agents.MessageDeltaTextFilePathAnnotation"/> and <see cref="Agents.MessageDeltaTextUrlCitationAnnotation"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextContentObject"/> instance for mocking. </returns>
        public static MessageDeltaTextContentObject MessageDeltaTextContentObject(string value = null, IEnumerable<MessageDeltaTextAnnotation> annotations = null)
        {
            annotations ??= new List<MessageDeltaTextAnnotation>();

            return new MessageDeltaTextContentObject(value, annotations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="type"> The type of the text content annotation. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextAnnotation MessageDeltaTextAnnotation(int index = default, string type = null)
        {
            return new UnknownMessageDeltaTextAnnotation(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextUrlCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="urlCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextUrlCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextUrlCitationAnnotation MessageDeltaTextUrlCitationAnnotation(int index = default, MessageDeltaTextUrlCitationDetails urlCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextUrlCitationAnnotation(
                index,
                "url_citation",
                serializedAdditionalRawData: null,
                urlCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextUrlCitationDetails"/>. </summary>
        /// <param name="url"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextUrlCitationDetails"/> instance for mocking. </returns>
        public static MessageDeltaTextUrlCitationDetails MessageDeltaTextUrlCitationDetails(string url = null, string title = null)
        {
            return new MessageDeltaTextUrlCitationDetails(url, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextFileCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="fileCitation"> The file citation information. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextFileCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotation MessageDeltaTextFileCitationAnnotation(int index = default, MessageDeltaTextFileCitationAnnotationObject fileCitation = null, string text = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextFileCitationAnnotation(
                index,
                "file_citation",
                serializedAdditionalRawData: null,
                fileCitation,
                text,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextFileCitationAnnotationObject"/>. </summary>
        /// <param name="fileId"> The ID of the specific file the citation is from. </param>
        /// <param name="quote"> The specific quote in the cited file. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextFileCitationAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotationObject MessageDeltaTextFileCitationAnnotationObject(string fileId = null, string quote = null)
        {
            return new MessageDeltaTextFileCitationAnnotationObject(fileId, quote, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextFilePathAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="filePath"> The file path information. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextFilePathAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotation MessageDeltaTextFilePathAnnotation(int index = default, MessageDeltaTextFilePathAnnotationObject filePath = null, int? startIndex = null, int? endIndex = null, string text = null)
        {
            return new MessageDeltaTextFilePathAnnotation(
                index,
                "file_path",
                serializedAdditionalRawData: null,
                filePath,
                startIndex,
                endIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.MessageDeltaTextFilePathAnnotationObject"/>. </summary>
        /// <param name="fileId"> The file ID for the annotation. </param>
        /// <returns> A new <see cref="Agents.MessageDeltaTextFilePathAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotationObject MessageDeltaTextFilePathAnnotationObject(string fileId = null)
        {
            return new MessageDeltaTextFilePathAnnotationObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the run step, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.run.step.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the run step. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaChunk"/> instance for mocking. </returns>
        public static RunStepDeltaChunk RunStepDeltaChunk(string id = null, RunStepDeltaChunkObject @object = default, RunStepDelta delta = null)
        {
            return new RunStepDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDelta"/>. </summary>
        /// <param name="stepDetails">
        /// The details of the run step.
        /// Please note <see cref="RunStepDeltaDetail"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.RunStepDeltaMessageCreation"/> and <see cref="Agents.RunStepDeltaToolCallObject"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.RunStepDelta"/> instance for mocking. </returns>
        public static RunStepDelta RunStepDelta(RunStepDeltaDetail stepDetails = null)
        {
            return new RunStepDelta(stepDetails, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaMessageCreation"/>. </summary>
        /// <param name="messageCreation"> The message creation data. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaMessageCreation"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreation RunStepDeltaMessageCreation(RunStepDeltaMessageCreationObject messageCreation = null)
        {
            return new RunStepDeltaMessageCreation("message_creation", serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaMessageCreationObject"/>. </summary>
        /// <param name="messageId"> The ID of the newly-created message. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaMessageCreationObject"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreationObject RunStepDeltaMessageCreationObject(string messageId = null)
        {
            return new RunStepDeltaMessageCreationObject(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaToolCallObject"/>. </summary>
        /// <param name="toolCalls">
        /// The collection of tool calls for the tool call detail item.
        /// Please note <see cref="Agents.RunStepDeltaToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.RunStepDeltaCodeInterpreterToolCall"/>, <see cref="Agents.RunStepDeltaFileSearchToolCall"/> and <see cref="Agents.RunStepDeltaFunctionToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaToolCallObject"/> instance for mocking. </returns>
        public static RunStepDeltaToolCallObject RunStepDeltaToolCallObject(IEnumerable<RunStepDeltaToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepDeltaToolCall>();

            return new RunStepDeltaToolCallObject("tool_calls", serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="type"> The type of the tool call detail item in a streaming run step's details. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaToolCall RunStepDeltaToolCall(int index = default, string id = null, string type = null)
        {
            return new UnknownRunStepDeltaToolCall(index, id, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaFunctionToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="function"> The function data for the tool call. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaFunctionToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFunctionToolCall RunStepDeltaFunctionToolCall(int index = default, string id = null, RunStepDeltaFunction function = null)
        {
            return new RunStepDeltaFunctionToolCall(index, id, "function", serializedAdditionalRawData: null, function);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaFunction"/>. </summary>
        /// <param name="name"> The name of the function. </param>
        /// <param name="arguments"> The arguments passed to the function as input. </param>
        /// <param name="output"> The output of the function, null if outputs have not yet been submitted. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaFunction"/> instance for mocking. </returns>
        public static RunStepDeltaFunction RunStepDeltaFunction(string name = null, string arguments = null, string output = null)
        {
            return new RunStepDeltaFunction(name, arguments, output, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaFileSearchToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="fileSearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFileSearchToolCall RunStepDeltaFileSearchToolCall(int index = default, string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepDeltaFileSearchToolCall(index, id, "file_search", serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="codeInterpreter"> The Code Interpreter data for the tool call. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterToolCall RunStepDeltaCodeInterpreterToolCall(int index = default, string id = null, RunStepDeltaCodeInterpreterDetailItemObject codeInterpreter = null)
        {
            return new RunStepDeltaCodeInterpreterToolCall(index, id, "code_interpreter", serializedAdditionalRawData: null, codeInterpreter);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterDetailItemObject"/>. </summary>
        /// <param name="input"> The input into the Code Interpreter tool call. </param>
        /// <param name="outputs">
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// Please note <see cref="Agents.RunStepDeltaCodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Agents.RunStepDeltaCodeInterpreterImageOutput"/> and <see cref="Agents.RunStepDeltaCodeInterpreterLogOutput"/>.
        /// </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterDetailItemObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterDetailItemObject RunStepDeltaCodeInterpreterDetailItemObject(string input = null, IEnumerable<RunStepDeltaCodeInterpreterOutput> outputs = null)
        {
            outputs ??= new List<RunStepDeltaCodeInterpreterOutput>();

            return new RunStepDeltaCodeInterpreterDetailItemObject(input, outputs?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="type"> The type of the streaming run step tool call's Code Interpreter output. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterOutput RunStepDeltaCodeInterpreterOutput(int index = default, string type = null)
        {
            return new UnknownRunStepDeltaCodeInterpreterOutput(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterLogOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="logs"> The text output from the Code Interpreter tool call. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterLogOutput RunStepDeltaCodeInterpreterLogOutput(int index = default, string logs = null)
        {
            return new RunStepDeltaCodeInterpreterLogOutput(index, "logs", serializedAdditionalRawData: null, logs);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterImageOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="image"> The image data for the Code Interpreter tool call output. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutput RunStepDeltaCodeInterpreterImageOutput(int index = default, RunStepDeltaCodeInterpreterImageOutputObject image = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutput(index, "image", serializedAdditionalRawData: null, image);
        }

        /// <summary> Initializes a new instance of <see cref="Agents.RunStepDeltaCodeInterpreterImageOutputObject"/>. </summary>
        /// <param name="fileId"> The file ID for the image. </param>
        /// <returns> A new <see cref="Agents.RunStepDeltaCodeInterpreterImageOutputObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutputObject RunStepDeltaCodeInterpreterImageOutputObject(string fileId = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutputObject(fileId, serializedAdditionalRawData: null);
        }
    }
}
