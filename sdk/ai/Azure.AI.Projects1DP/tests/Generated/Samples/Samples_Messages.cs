// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects1DP.Samples
{
    public partial class Samples_Messages
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_SendMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
}
            },
            });
            Response response = client.SendMessage("<threadId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_SendMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
}
            },
            });
            Response response = await client.SendMessageAsync("<threadId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_SendMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
            });
            Response response = client.SendMessage("<threadId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_SendMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
            });
            Response response = await client.SendMessageAsync("<threadId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_SendMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
            },
                userId = "<userId>",
                agentId = "<agentId>",
                agentRunId = "<agentRunId>",
                authorName = "<authorName>",
                createdAt = 1234L,
                completedAt = 1234L,
            });
            Response response = client.SendMessage("<threadId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_SendMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
            },
                userId = "<userId>",
                agentId = "<agentId>",
                agentRunId = "<agentRunId>",
                authorName = "<authorName>",
                createdAt = 1234L,
                completedAt = 1234L,
            });
            Response response = await client.SendMessageAsync("<threadId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_SendMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
            })
            {
                UserId = "<userId>",
                AgentId = "<agentId>",
                AgentRunId = "<agentRunId>",
                AuthorName = "<authorName>",
                CreatedAt = 1234L,
                CompletedAt = 1234L,
            };
            Response response = client.SendMessage("<threadId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_SendMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
            })
            {
                UserId = "<userId>",
                AgentId = "<agentId>",
                AgentRunId = "<agentRunId>",
                AuthorName = "<authorName>",
                CreatedAt = 1234L,
                CompletedAt = 1234L,
            };
            Response response = await client.SendMessageAsync("<threadId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetMessage("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response<ChatMessage> response = client.GetMessage("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response<ChatMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetMessage("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetMessageAsync("<threadId>", "<messageId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response<ChatMessage> response = client.GetMessage("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response<ChatMessage> response = await client.GetMessageAsync("<threadId>", "<messageId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_UpdateMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
}
            },
            });
            Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_UpdateMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
}
            },
            });
            Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_UpdateMessage_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
            });
            Response<ChatMessage> response = client.UpdateMessage("<threadId>", "<messageId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_UpdateMessage_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
            });
            Response<ChatMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_UpdateMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
            },
                userId = "<userId>",
                agentId = "<agentId>",
                agentRunId = "<agentRunId>",
                authorName = "<authorName>",
                createdAt = 1234L,
                completedAt = 1234L,
            });
            Response response = client.UpdateMessage("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_UpdateMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = new object[]
            {
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
            },
                userId = "<userId>",
                agentId = "<agentId>",
                agentRunId = "<agentRunId>",
                authorName = "<authorName>",
                createdAt = 1234L,
                completedAt = 1234L,
            });
            Response response = await client.UpdateMessageAsync("<threadId>", "<messageId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("threadId").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_UpdateMessage_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
            })
            {
                UserId = "<userId>",
                AgentId = "<agentId>",
                AgentRunId = "<agentRunId>",
                AuthorName = "<authorName>",
                CreatedAt = 1234L,
                CompletedAt = 1234L,
            };
            Response<ChatMessage> response = client.UpdateMessage("<threadId>", "<messageId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_UpdateMessage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            ChatMessage resource = new UserMessage(new AIContent[]
            {
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
            })
            {
                UserId = "<userId>",
                AgentId = "<agentId>",
                AgentRunId = "<agentRunId>",
                AuthorName = "<authorName>",
                CreatedAt = 1234L,
                CompletedAt = 1234L,
            };
            Response<ChatMessage> response = await client.UpdateMessageAsync("<threadId>", "<messageId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_DeleteMessage_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteMessage("<threadId>", "<messageId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_DeleteMessage_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteMessageAsync("<threadId>", "<messageId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_DeleteMessage_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteMessage("<threadId>", "<messageId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_DeleteMessage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteMessageAsync("<threadId>", "<messageId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessages_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetMessages("<threadId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("threadId").ToString());
                Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessages_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetMessagesAsync("<threadId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("threadId").ToString());
                Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessages_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            foreach (ChatMessage item in client.GetMessages("<threadId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessages_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            await foreach (ChatMessage item in client.GetMessagesAsync("<threadId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessages_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetMessages("<threadId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("threadId").ToString());
                Console.WriteLine(result.GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessages_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetMessagesAsync("<threadId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("threadId").ToString());
                Console.WriteLine(result.GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ChatMessage_GetMessages_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            foreach (ChatMessage item in client.GetMessages("<threadId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ChatMessage_GetMessages_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Messages client = new AIProjectClient(endpoint, credential).GetMessagesClient(apiVersion: "2025-05-01-preview");

            await foreach (ChatMessage item in client.GetMessagesAsync("<threadId>"))
            {
            }
        }
    }
}
