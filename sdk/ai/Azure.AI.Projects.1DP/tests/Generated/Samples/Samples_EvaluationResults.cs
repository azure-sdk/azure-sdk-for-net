// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_EvaluationResults
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetVersion("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetVersionAsync("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersion_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.EvaluationResult > response = client.GetVersion("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersion_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.EvaluationResult > response = await client.GetVersionAsync("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetVersion("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("ResultType").ToString());
        Console.WriteLine(result.GetProperty("BlobUri").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetVersionAsync("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("ResultType").ToString());
        Console.WriteLine(result.GetProperty("BlobUri").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersion_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.EvaluationResult > response = client.GetVersion("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersion_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.EvaluationResult > response = await client.GetVersionAsync("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_DeleteVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.DeleteVersion("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_DeleteVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.DeleteVersionAsync("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_DeleteVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.DeleteVersion("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_DeleteVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.DeleteVersionAsync("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_CreateOrUpdateVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.CreateOrUpdateVersion("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_CreateOrUpdateVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.CreateOrUpdateVersionAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_CreateOrUpdateVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            ResultType = "Benchmark",
            BlobUri = "<BlobUri>",
            stage = "<stage>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
        });
        Response response = client.CreateOrUpdateVersion("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("ResultType").ToString());
        Console.WriteLine(result.GetProperty("BlobUri").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_CreateOrUpdateVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            ResultType = "Benchmark",
            BlobUri = "<BlobUri>",
            stage = "<stage>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
        });
        Response response = await client.CreateOrUpdateVersionAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("ResultType").ToString());
        Console.WriteLine(result.GetProperty("BlobUri").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_StartPendingUpload_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = client.StartPendingUpload("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_StartPendingUpload_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = await client.StartPendingUploadAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_StartPendingUpload_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest();
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = client.StartPendingUpload("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_StartPendingUpload_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest();
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = await client.StartPendingUploadAsync("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_StartPendingUpload_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadId = "<pendingUploadId>",
            connectionName = "<connectionName>",
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = client.StartPendingUpload("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("datasetVersion").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_StartPendingUpload_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadId = "<pendingUploadId>",
            connectionName = "<connectionName>",
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = await client.StartPendingUploadAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("datasetVersion").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_StartPendingUpload_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest
    {
            PendingUploadId = "<pendingUploadId>",
ConnectionName = "<connectionName>",
};
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = client.StartPendingUpload("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_StartPendingUpload_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest
    {
            PendingUploadId = "<pendingUploadId>",
ConnectionName = "<connectionName>",
};
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = await client.StartPendingUploadAsync("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetCredentials_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            BlobUri = "<BlobUri>",
        });
        Response response = client.GetCredentials("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetCredentials_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            BlobUri = "<BlobUri>",
        });
        Response response = await client.GetCredentialsAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetCredentials_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AssetCredentialRequest body = new Projects.1DP.AssetCredentialRequest("<BlobUri>");
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = client.GetCredentials("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetCredentials_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AssetCredentialRequest body = new Projects.1DP.AssetCredentialRequest("<BlobUri>");
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = await client.GetCredentialsAsync("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetCredentials_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            BlobUri = "<BlobUri>",
        });
        Response response = client.GetCredentials("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetCredentials_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            BlobUri = "<BlobUri>",
        });
        Response response = await client.GetCredentialsAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetCredentials_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AssetCredentialRequest body = new Projects.1DP.AssetCredentialRequest("<BlobUri>");
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = client.GetCredentials("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetCredentials_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AssetCredentialRequest body = new Projects.1DP.AssetCredentialRequest("<BlobUri>");
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = await client.GetCredentialsAsync("<name>", "<version>", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetAgentEvaluationResults_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetAgentEvaluationResults("<runId>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetAgentEvaluationResults_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetAgentEvaluationResultsAsync("<runId>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetAgentEvaluationResults_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.GetAgentEvaluationResults("<runId>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetAgentEvaluationResults_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.GetAgentEvaluationResultsAsync("<runId>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetAgentEvaluationResults_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetAgentEvaluationResults("<runId>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("evaluator").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("score").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("reason").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("threadId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("runId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("additionalDetails").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetAgentEvaluationResults_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetAgentEvaluationResultsAsync("<runId>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("evaluator").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("score").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("reason").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("threadId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("runId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("additionalDetails").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetAgentEvaluationResults_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.GetAgentEvaluationResults("<runId>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetAgentEvaluationResults_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.GetAgentEvaluationResultsAsync("<runId>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersions_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetVersions("<name>", (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersions_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetVersionsAsync("<name>", (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersions_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.EvaluationResult item in client.GetVersions("<name>"))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersions_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.EvaluationResult item in client.GetVersionsAsync("<name>"))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersions_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetVersions("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("ResultType").ToString());
            Console.WriteLine(result.GetProperty("BlobUri").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersions_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetVersionsAsync("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("ResultType").ToString());
            Console.WriteLine(result.GetProperty("BlobUri").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResults_GetVersions_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.EvaluationResult item in client.GetVersions("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResults_GetVersions_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.EvaluationResult item in client.GetVersionsAsync("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResult_GetLatests_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetLatests((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResult_GetLatests_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetLatestsAsync((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResult_GetLatests_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.EvaluationResult item in client.GetLatests())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResult_GetLatests_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.EvaluationResult item in client.GetLatestsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResult_GetLatests_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetLatests(1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("ResultType").ToString());
            Console.WriteLine(result.GetProperty("BlobUri").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResult_GetLatests_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetLatestsAsync(1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("ResultType").ToString());
            Console.WriteLine(result.GetProperty("BlobUri").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_EvaluationResult_GetLatests_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.EvaluationResult item in client.GetLatests(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_EvaluationResult_GetLatests_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.EvaluationResults client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationResultsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.EvaluationResult item in client.GetLatestsAsync(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }
}
}
