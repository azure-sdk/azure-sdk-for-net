// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Connections
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetConnection("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("authType").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetConnectionAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("authType").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = client.GetConnection("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = await client.GetConnectionAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetConnection("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("authType").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetConnectionAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("authType").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = client.GetConnection("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = await client.GetConnectionAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetConnections((string)null, (int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("authType").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetConnectionsAsync((string)null, (int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("authType").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Connection item in client.GetConnections())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Connection item in client.GetConnectionsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetConnections("AzureOpenAI", 1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("authType").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetConnectionsAsync("AzureOpenAI", 1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("authType").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Connection item in client.GetConnections(connectionType: AI.Projects.1DP.ConnectionType.AzureOpenAI, maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Connection item in client.GetConnectionsAsync(connectionType: AI.Projects.1DP.ConnectionType.AzureOpenAI, maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }
}
}
