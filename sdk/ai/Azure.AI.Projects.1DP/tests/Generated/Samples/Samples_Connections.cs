// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Connections
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_ConnectionsGetMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetConnection("ijxjmv", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("isDefault").ToString());
        Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_ConnectionsGetMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetConnectionAsync("ijxjmv", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("isDefault").ToString());
        Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnection_ConnectionsGetMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = client.GetConnection("ijxjmv");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnection_ConnectionsGetMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = await client.GetConnectionAsync("ijxjmv");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connections_GetWithCredentials_ConnectionsGetWithCredentialsMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetWithCredentials("bblabqcnrjcbxlyjsejqiyixfoil", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("isDefault").ToString());
        Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connections_GetWithCredentials_ConnectionsGetWithCredentialsMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetWithCredentialsAsync("bblabqcnrjcbxlyjsejqiyixfoil", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").ToString());
        Console.WriteLine(result.GetProperty("isDefault").ToString());
        Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connections_GetWithCredentials_ConnectionsGetWithCredentialsMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = client.GetWithCredentials("bblabqcnrjcbxlyjsejqiyixfoil");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connections_GetWithCredentials_ConnectionsGetWithCredentialsMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Connection > response = await client.GetWithCredentialsAsync("bblabqcnrjcbxlyjsejqiyixfoil");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_ConnectionsListMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetConnections("AzureOpenAI", true, (int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("isDefault").ToString());
            Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_ConnectionsListMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetConnectionsAsync("AzureOpenAI", true, (int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("isDefault").ToString());
            Console.WriteLine(result.GetProperty("credentials").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Connection_GetConnections_ConnectionsListMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Connection item in client.GetConnections())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Connection_GetConnections_ConnectionsListMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Connections client = new Projects.1DP.AIProjectClient(endpoint, credential).GetConnectionsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Connection item in client.GetConnectionsAsync())
{
        }
    }
}
}
