// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Datasets
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetVersion("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetVersionAsync("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersion_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.DatasetVersion > response = client.GetVersion("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersion_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.DatasetVersion > response = await client.GetVersionAsync("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetVersion("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("isReference").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetVersionAsync("<name>", "<version>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("isReference").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersion_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.DatasetVersion > response = client.GetVersion("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersion_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.DatasetVersion > response = await client.GetVersionAsync("<name>", "<version>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_DeleteVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = client.DeleteVersion("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_DeleteVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.DeleteVersionAsync("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_DeleteVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = client.DeleteVersion("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_DeleteVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.DeleteVersionAsync("<name>", "<version>");

        Console.WriteLine(response.Status);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_CreateOrUpdateVersion_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            type = "uri_file",
            openAIPurpose = "<openAIPurpose>",
            datasetUri = "<datasetUri>",
        });
        Response response = client.CreateOrUpdateVersion("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_CreateOrUpdateVersion_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            type = "uri_file",
            openAIPurpose = "<openAIPurpose>",
            datasetUri = "<datasetUri>",
        });
        Response response = await client.CreateOrUpdateVersionAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_CreateOrUpdateVersion_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            type = "uri_file",
            openAIPurpose = "<openAIPurpose>",
            datasetUri = "<datasetUri>",
            stage = "<stage>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
        });
        Response response = client.CreateOrUpdateVersion("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("isReference").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_CreateOrUpdateVersion_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            type = "uri_file",
            openAIPurpose = "<openAIPurpose>",
            datasetUri = "<datasetUri>",
            stage = "<stage>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
        });
        Response response = await client.CreateOrUpdateVersionAsync("<name>", "<version>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("datasetUri").ToString());
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("isReference").ToString());
        Console.WriteLine(result.GetProperty("stage").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("name").ToString());
        Console.WriteLine(result.GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
            connectionName = "bknvpmlisrqxaphkf",
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = client.StartPendingUploadVersion("sgrzyrpltz", "ozdqisviavgqgfbtnzk", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
            connectionName = "bknvpmlisrqxaphkf",
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = await client.StartPendingUploadVersionAsync("sgrzyrpltz", "ozdqisviavgqgfbtnzk", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest
    {
            PendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
ConnectionName = "bknvpmlisrqxaphkf",
};
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = client.StartPendingUploadVersion("sgrzyrpltz", "ozdqisviavgqgfbtnzk", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest
    {
            PendingUploadId = "mxjahcghabuplfwtlopiqgxtcyw",
ConnectionName = "bknvpmlisrqxaphkf",
};
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = await client.StartPendingUploadVersionAsync("sgrzyrpltz", "ozdqisviavgqgfbtnzk", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMinimumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = client.StartPendingUploadVersion("duxoiaywfik", "yzzzt", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMinimumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            pendingUploadType = "TemporaryBlobReference",
        });
        Response response = await client.StartPendingUploadVersionAsync("duxoiaywfik", "yzzzt", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
        Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMinimumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest();
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = client.StartPendingUploadVersion("duxoiaywfik", "yzzzt", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_StartPendingUploadVersion_DatasetsStartPendingUploadVersionMinimumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.PendingUploadRequest body = new Projects.1DP.PendingUploadRequest();
        Azure.Response < AI.Projects.1DP.PendingUploadResponse > response = await client.StartPendingUploadVersionAsync("duxoiaywfik", "yzzzt", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.GetCredentials("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.GetCredentialsAsync("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.GetCredentialsRequest body = new Projects.1DP.GetCredentialsRequest();
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = client.GetCredentials("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.GetCredentialsRequest body = new Projects.1DP.GetCredentialsRequest();
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = await client.GetCredentialsAsync("vzqmzhfdzfqegdk", "cuiflnznlzybcrc", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.GetCredentials("sbblxkyqnfvdiqacezyygvts", "ikak", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.GetCredentialsAsync("sbblxkyqnfvdiqacezyygvts", "ikak", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasUri").ToString());
        Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.GetCredentialsRequest body = new Projects.1DP.GetCredentialsRequest();
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = client.GetCredentials("sbblxkyqnfvdiqacezyygvts", "ikak", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetCredentials_DatasetsGetCredentialsMinimumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.GetCredentialsRequest body = new Projects.1DP.GetCredentialsRequest();
        Azure.Response < AI.Projects.1DP.AssetCredentialResponse > response = await client.GetCredentialsAsync("sbblxkyqnfvdiqacezyygvts", "ikak", body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersions_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetVersions("<name>", (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersions_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetVersionsAsync("<name>", (int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersions_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.DatasetVersion item in client.GetVersions("<name>"))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersions_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.DatasetVersion item in client.GetVersionsAsync("<name>"))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersions_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetVersions("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersions_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetVersionsAsync("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Datasets_GetVersions_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.DatasetVersion item in client.GetVersions("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Datasets_GetVersions_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.DatasetVersion item in client.GetVersionsAsync("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_DatasetVersion_GetLatests_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetLatests((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_DatasetVersion_GetLatests_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetLatestsAsync((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_DatasetVersion_GetLatests_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.DatasetVersion item in client.GetLatests())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_DatasetVersion_GetLatests_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.DatasetVersion item in client.GetLatestsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_DatasetVersion_GetLatests_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetLatests(1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_DatasetVersion_GetLatests_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetLatestsAsync(1234, "<skip>", "<tags>", "ActiveOnly", (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_DatasetVersion_GetLatests_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.DatasetVersion item in client.GetLatests(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_DatasetVersion_GetLatests_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Datasets client = new Projects.1DP.AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.DatasetVersion item in client.GetLatestsAsync(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: AI.Projects.1DP.ListViewType.ActiveOnly))
{
        }
    }
}
}
