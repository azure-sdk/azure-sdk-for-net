// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Evaluations
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetEvaluation("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetEvaluationAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = client.GetEvaluation("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.GetEvaluationAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetEvaluation("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetEvaluationAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = client.GetEvaluation("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.GetEvaluationAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    });
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    });
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            displayName = "<displayName>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            displayName = "<displayName>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        })
{
            DisplayName = "<displayName>",
Description = "<description>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        })
{
            DisplayName = "<displayName>",
Description = "<description>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "<runId>",
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
            appInsightsConnectionString = "<appInsightsConnectionString>",
        });
        Response response = client.CreateAgentEvaluation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "<runId>",
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
            appInsightsConnectionString = "<appInsightsConnectionString>",
        });
        Response response = await client.CreateAgentEvaluationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("<runId>", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    }, "<appInsightsConnectionString>");
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.CreateAgentEvaluation(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("<runId>", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    }, "<appInsightsConnectionString>");
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.CreateAgentEvaluationAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "<runId>",
            threadId = "<threadId>",
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            samplingConfiguration = new
            {
                name = "<name>",
                samplingPercent = 123.45F,
                maxRequestRate = 123.45F,
            },
            redactionConfiguration = new
            {
                redactScoreProperties = true,
            },
            appInsightsConnectionString = "<appInsightsConnectionString>",
        });
        Response response = client.CreateAgentEvaluation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("evaluator").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("score").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("reason").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("threadId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("runId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("additionalDetails").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "<runId>",
            threadId = "<threadId>",
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            samplingConfiguration = new
            {
                name = "<name>",
                samplingPercent = 123.45F,
                maxRequestRate = 123.45F,
            },
            redactionConfiguration = new
            {
                redactScoreProperties = true,
            },
            appInsightsConnectionString = "<appInsightsConnectionString>",
        });
        Response response = await client.CreateAgentEvaluationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("evaluator").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("score").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("reason").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("version").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("threadId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("runId").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("error").ToString());
        Console.WriteLine(result.GetProperty("result")[0].GetProperty("additionalDetails").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("<runId>", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        }, "<appInsightsConnectionString>")
{
            ThreadId = "<threadId>",
SamplingConfiguration = new Projects.1DP.AgentEvaluationSamplingConfiguration("<name>", 123.45F, 123.45F),
RedactionConfiguration = new Projects.1DP.AgentEvaluationRedactionConfiguration
{
                RedactScoreProperties = true,
},
};
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.CreateAgentEvaluation(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("<runId>", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        }, "<appInsightsConnectionString>")
{
            ThreadId = "<threadId>",
SamplingConfiguration = new Projects.1DP.AgentEvaluationSamplingConfiguration("<name>", 123.45F, 123.45F),
RedactionConfiguration = new Projects.1DP.AgentEvaluationRedactionConfiguration
{
                RedactScoreProperties = true,
},
};
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.CreateAgentEvaluationAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetEvaluations((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetEvaluationsAsync((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Evaluation item in client.GetEvaluations())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Evaluation item in client.GetEvaluationsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetEvaluations(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetEvaluationsAsync(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Evaluation item in client.GetEvaluations(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Evaluation item in client.GetEvaluationsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }
}
}
