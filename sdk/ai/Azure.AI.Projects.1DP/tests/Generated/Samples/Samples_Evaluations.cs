// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Evaluations
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetEvaluation("so", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetEvaluationAsync("so", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = client.GetEvaluation("so");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.GetEvaluationAsync("so");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_EvaluationsCreateRunMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            displayName = "ymjxkodggqrhjnmusta",
            description = "cuviaxytqckkybxwc",
            tags = new
            {
                key30 = "nqrdpedyhkjzgrbtqhxbmkdmlpdf",
            },
            properties = new
            {
                key9192 = "e",
            },
            evaluators = new
            {
                key2735 = new
                {
                    id = "gujwtvhptykq",
                    initParams = new object(),
                    dataMapping = new
                    {
                        key7400 = "ijkjfvoswni",
                    },
                },
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_EvaluationsCreateRunMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            displayName = "ymjxkodggqrhjnmusta",
            description = "cuviaxytqckkybxwc",
            tags = new
            {
                key30 = "nqrdpedyhkjzgrbtqhxbmkdmlpdf",
            },
            properties = new
            {
                key9192 = "e",
            },
            evaluators = new
            {
                key2735 = new
                {
                    id = "gujwtvhptykq",
                    initParams = new object(),
                    dataMapping = new
                    {
                        key7400 = "ijkjfvoswni",
                    },
                },
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_EvaluationsCreateRunMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(((AI.Projects.1DP.InputData)null), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key2735"] = new Projects.1DP.EvaluatorConfiguration("gujwtvhptykq")
    {
                InitParams = { },
DataMapping =
    {
                    ["key7400"] = "ijkjfvoswni"
    },
}
        })
{
            DisplayName = "ymjxkodggqrhjnmusta",
Description = "cuviaxytqckkybxwc",
Tags =
{
                ["key30"] = "nqrdpedyhkjzgrbtqhxbmkdmlpdf"
},
Properties =
{
                ["key9192"] = "e"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_EvaluationsCreateRunMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(((AI.Projects.1DP.InputData)null), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key2735"] = new Projects.1DP.EvaluatorConfiguration("gujwtvhptykq")
    {
                InitParams = { },
DataMapping =
    {
                    ["key7400"] = "ijkjfvoswni"
    },
}
        })
{
            DisplayName = "ymjxkodggqrhjnmusta",
Description = "cuviaxytqckkybxwc",
Tags =
{
                ["key30"] = "nqrdpedyhkjzgrbtqhxbmkdmlpdf"
},
Properties =
{
                ["key9192"] = "e"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_EvaluationsCreateRunMinimumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            evaluators = new object(),
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_EvaluationsCreateRunMinimumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            evaluators = new object(),
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_EvaluationsCreateRunMinimumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(((AI.Projects.1DP.InputData)null), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >);
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_EvaluationsCreateRunMinimumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(((AI.Projects.1DP.InputData)null), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >);
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "ecfcffqsrdhpecocrufffiqz",
            threadId = "cxjjsyhkeezgnaqqyerrdrbbth",
            evaluators = new
            {
                key2653 = new
                {
                    id = "gujwtvhptykq",
                    initParams = new object(),
                    dataMapping = new
                    {
                        key7400 = "ijkjfvoswni",
                    },
                },
            },
            samplingConfiguration = new
            {
                name = "tj",
                samplingPercent = 7F,
                maxRequestRate = 8F,
            },
            redactionConfiguration = new
            {
                redactScoreProperties = true,
            },
            appInsightsConnectionString = "dvcnrcwar",
        });
        Response response = client.CreateAgentEvaluation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "ecfcffqsrdhpecocrufffiqz",
            threadId = "cxjjsyhkeezgnaqqyerrdrbbth",
            evaluators = new
            {
                key2653 = new
                {
                    id = "gujwtvhptykq",
                    initParams = new object(),
                    dataMapping = new
                    {
                        key7400 = "ijkjfvoswni",
                    },
                },
            },
            samplingConfiguration = new
            {
                name = "tj",
                samplingPercent = 7F,
                maxRequestRate = 8F,
            },
            redactionConfiguration = new
            {
                redactScoreProperties = true,
            },
            appInsightsConnectionString = "dvcnrcwar",
        });
        Response response = await client.CreateAgentEvaluationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key2653"] = new Projects.1DP.EvaluatorConfiguration("gujwtvhptykq")
    {
                InitParams = { },
DataMapping =
    {
                    ["key7400"] = "ijkjfvoswni"
    },
}
        }, "dvcnrcwar")
{
            ThreadId = "cxjjsyhkeezgnaqqyerrdrbbth",
SamplingConfiguration = new Projects.1DP.AgentEvaluationSamplingConfiguration("tj", 7F, 8F),
RedactionConfiguration = new Projects.1DP.AgentEvaluationRedactionConfiguration
{
                RedactScoreProperties = true,
},
};
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.CreateAgentEvaluation(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key2653"] = new Projects.1DP.EvaluatorConfiguration("gujwtvhptykq")
    {
                InitParams = { },
DataMapping =
    {
                    ["key7400"] = "ijkjfvoswni"
    },
}
        }, "dvcnrcwar")
{
            ThreadId = "cxjjsyhkeezgnaqqyerrdrbbth",
SamplingConfiguration = new Projects.1DP.AgentEvaluationSamplingConfiguration("tj", 7F, 8F),
RedactionConfiguration = new Projects.1DP.AgentEvaluationRedactionConfiguration
{
                RedactScoreProperties = true,
},
};
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.CreateAgentEvaluationAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMinimumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "ecfcffqsrdhpecocrufffiqz",
            evaluators = new object(),
            appInsightsConnectionString = "dvcnrcwar",
        });
        Response response = client.CreateAgentEvaluation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMinimumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            runId = "ecfcffqsrdhpecocrufffiqz",
            evaluators = new object(),
            appInsightsConnectionString = "dvcnrcwar",
        });
        Response response = await client.CreateAgentEvaluationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMinimumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >, "dvcnrcwar");
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = client.CreateAgentEvaluation(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateAgentEvaluation_EvaluationsCreateAgentEvaluationMinimumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AgentEvaluationRequest evaluation = new Projects.1DP.AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, Projects.1DP.EvaluatorConfiguration >, "dvcnrcwar");
        Azure.Response < AI.Projects.1DP.AgentEvaluation > response = await client.CreateAgentEvaluationAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetEvaluations((int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetEvaluationsAsync((int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Evaluation item in client.GetEvaluations())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Evaluation item in client.GetEvaluationsAsync())
{
        }
    }
}
}
