// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_Evaluations
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetEvaluation("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetEvaluationAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = client.GetEvaluation("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.GetEvaluationAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetEvaluation("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetEvaluationAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = client.GetEvaluation("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.GetEvaluationAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                },
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    });
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    });
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CreateRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        })
{
            Target = new Projects.1DP.EvaluationTarget("<systemMessage>", new Projects.1DP.AOAIModelConfig("<azureEndpoint>", "<apiKey>", "<azureDeployment>"))
{
                ModelParams =
{
                    ["key"] = BinaryData.FromObjectAsJson(new object())
},
},
DisplayName = "<displayName>",
Description = "<description>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.CreateRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CreateRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.Evaluation evaluation = new Projects.1DP.Evaluation(new Projects.1DP.InputDataset("<id>"), new Dictionary<string, Projects.1DP.EvaluatorConfiguration >
    {
            ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                InitParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                    ["key"] = "<dataMapping>"
    },
}
        })
{
            Target = new Projects.1DP.EvaluationTarget("<systemMessage>", new Projects.1DP.AOAIModelConfig("<azureEndpoint>", "<apiKey>", "<azureDeployment>"))
{
                ModelParams =
{
                    ["key"] = BinaryData.FromObjectAsJson(new object())
},
},
DisplayName = "<displayName>",
Description = "<description>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.CreateRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CheckAnnotation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.CheckAnnotation((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CheckAnnotation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.CheckAnnotationAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CheckAnnotation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.CheckAnnotation();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CheckAnnotation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.CheckAnnotationAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CheckAnnotation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = client.CheckAnnotation((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CheckAnnotation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.CheckAnnotationAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_CheckAnnotation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.CheckAnnotation();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_CheckAnnotation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.CheckAnnotationAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_SubmitAnnotation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            AnnotationTask = "<AnnotationTask>",
            ContentType = "<ContentType>",
            UserTextList = new object[]
        {
"<UserTextList>"
        },
            Contents = new object[]
        {
new
{
Messages = new object[]
{
new object()
},
}
        },
            MetricList = new object[]
        {
"<MetricList>"
        },
            PromptVersion = "<PromptVersion>",
            UserAgent = "<UserAgent>",
            PartnerId = "<PartnerId>",
            ModelId = "<ModelId>",
            InferenceType = "<InferenceType>",
            ClientRequestId = "<ClientRequestId>",
        });
        Response response = client.SubmitAnnotation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_SubmitAnnotation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            AnnotationTask = "<AnnotationTask>",
            ContentType = "<ContentType>",
            UserTextList = new object[]
        {
"<UserTextList>"
        },
            Contents = new object[]
        {
new
{
Messages = new object[]
{
new object()
},
}
        },
            MetricList = new object[]
        {
"<MetricList>"
        },
            PromptVersion = "<PromptVersion>",
            UserAgent = "<UserAgent>",
            PartnerId = "<PartnerId>",
            ModelId = "<ModelId>",
            InferenceType = "<InferenceType>",
            ClientRequestId = "<ClientRequestId>",
        });
        Response response = await client.SubmitAnnotationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_SubmitAnnotation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AnnotationDTO annotationDTO = new Projects.1DP.AnnotationDTO(
            "<AnnotationTask>",
            "<ContentType>",
            new string[] { "<UserTextList>" },
            new Projects.1DP.Content[]
    {
            new Projects.1DP.Content(new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            })
    },
	new string[] { "<MetricList>" },
	"<PromptVersion>",
	"<UserAgent>",
	"<PartnerId>",
	"<ModelId>",
	"<InferenceType>",
	"<ClientRequestId>");
        Response<string> response = client.SubmitAnnotation(annotationDTO);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_SubmitAnnotation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AnnotationDTO annotationDTO = new Projects.1DP.AnnotationDTO(
            "<AnnotationTask>",
            "<ContentType>",
            new string[] { "<UserTextList>" },
            new Projects.1DP.Content[]
    {
            new Projects.1DP.Content(new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            })
    },
	new string[] { "<MetricList>" },
	"<PromptVersion>",
	"<UserAgent>",
	"<PartnerId>",
	"<ModelId>",
	"<InferenceType>",
	"<ClientRequestId>");
        Response<string> response = await client.SubmitAnnotationAsync(annotationDTO);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_SubmitAnnotation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            AnnotationTask = "<AnnotationTask>",
            ContentType = "<ContentType>",
            UserTextList = new object[]
        {
"<UserTextList>"
        },
            Contents = new object[]
        {
new
{
Messages = new object[]
{
new object()
},
}
        },
            MetricList = new object[]
        {
"<MetricList>"
        },
            PromptVersion = "<PromptVersion>",
            UserAgent = "<UserAgent>",
            PartnerId = "<PartnerId>",
            ModelId = "<ModelId>",
            InferenceType = "<InferenceType>",
            ClientRequestId = "<ClientRequestId>",
        });
        Response response = client.SubmitAnnotation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_SubmitAnnotation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            AnnotationTask = "<AnnotationTask>",
            ContentType = "<ContentType>",
            UserTextList = new object[]
        {
"<UserTextList>"
        },
            Contents = new object[]
        {
new
{
Messages = new object[]
{
new object()
},
}
        },
            MetricList = new object[]
        {
"<MetricList>"
        },
            PromptVersion = "<PromptVersion>",
            UserAgent = "<UserAgent>",
            PartnerId = "<PartnerId>",
            ModelId = "<ModelId>",
            InferenceType = "<InferenceType>",
            ClientRequestId = "<ClientRequestId>",
        });
        Response response = await client.SubmitAnnotationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_SubmitAnnotation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AnnotationDTO annotationDTO = new Projects.1DP.AnnotationDTO(
            "<AnnotationTask>",
            "<ContentType>",
            new string[] { "<UserTextList>" },
            new Projects.1DP.Content[]
    {
            new Projects.1DP.Content(new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            })
    },
	new string[] { "<MetricList>" },
	"<PromptVersion>",
	"<UserAgent>",
	"<PartnerId>",
	"<ModelId>",
	"<InferenceType>",
	"<ClientRequestId>");
        Response<string> response = client.SubmitAnnotation(annotationDTO);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_SubmitAnnotation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.AnnotationDTO annotationDTO = new Projects.1DP.AnnotationDTO(
            "<AnnotationTask>",
            "<ContentType>",
            new string[] { "<UserTextList>" },
            new Projects.1DP.Content[]
    {
            new Projects.1DP.Content(new BinaryData[]
            {
BinaryData.FromObjectAsJson(new object())
            })
    },
	new string[] { "<MetricList>" },
	"<PromptVersion>",
	"<UserAgent>",
	"<PartnerId>",
	"<ModelId>",
	"<InferenceType>",
	"<ClientRequestId>");
        Response<string> response = await client.SubmitAnnotationAsync(annotationDTO);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.UploadRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.UploadRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.EvaluationUpload evaluation = new Projects.1DP.EvaluationUpload();
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.UploadRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.EvaluationUpload evaluation = new Projects.1DP.EvaluationUpload();
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.UploadRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            status = "<status>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            outputs = new
            {
                key = "<outputs>",
            },
        });
        Response response = client.UploadRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            status = "<status>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            outputs = new
            {
                key = "<outputs>",
            },
        });
        Response response = await client.UploadRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.EvaluationUpload evaluation = new Projects.1DP.EvaluationUpload
    {
            Data = new Projects.1DP.InputDataset("<id>"),
Target = new Projects.1DP.EvaluationTarget("<systemMessage>", new Projects.1DP.AOAIModelConfig("<azureEndpoint>", "<apiKey>", "<azureDeployment>"))
    {
                ModelParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
},
DisplayName = "<displayName>",
Description = "<description>",
Status = "<status>",
Tags =
    {
                ["key"] = "<tags>"
    },
Properties =
    {
                ["key"] = "<properties>"
    },
Evaluators =
    {
                ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                    InitParams =
    {
                        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                        ["key"] = "<dataMapping>"
    },
}
            },
Outputs =
    {
                ["key"] = "<outputs>"
    },
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = client.UploadRun(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.EvaluationUpload evaluation = new Projects.1DP.EvaluationUpload
    {
            Data = new Projects.1DP.InputDataset("<id>"),
Target = new Projects.1DP.EvaluationTarget("<systemMessage>", new Projects.1DP.AOAIModelConfig("<azureEndpoint>", "<apiKey>", "<azureDeployment>"))
    {
                ModelParams =
    {
                    ["key"] = BinaryData.FromObjectAsJson(new object())
    },
},
DisplayName = "<displayName>",
Description = "<description>",
Status = "<status>",
Tags =
    {
                ["key"] = "<tags>"
    },
Properties =
    {
                ["key"] = "<properties>"
    },
Evaluators =
    {
                ["key"] = new Projects.1DP.EvaluatorConfiguration("<id>")
    {
                    InitParams =
    {
                        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
DataMapping =
    {
                        ["key"] = "<dataMapping>"
    },
}
            },
Outputs =
    {
                ["key"] = "<outputs>"
    },
};
        Azure.Response < AI.Projects.1DP.Evaluation > response = await client.UploadRunAsync(evaluation);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadUpdateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.UploadUpdateRun("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadUpdateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.UploadUpdateRunAsync("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluations_UploadUpdateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            status = "<status>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            outputs = new
            {
                key = "<outputs>",
            },
        });
        Response response = client.UploadUpdateRun("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluations_UploadUpdateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            data = new
            {
                type = "dataset",
                id = "<id>",
            },
            target = new
            {
                systemMessage = "<systemMessage>",
                modelConfig = new
                {
                    azureEndpoint = "<azureEndpoint>",
                    apiKey = "<apiKey>",
                    azureDeployment = "<azureDeployment>",
                    type = "AOAI",
                },
                modelParams = new
                {
                    key = new object(),
                },
            },
            displayName = "<displayName>",
            description = "<description>",
            status = "<status>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            evaluators = new
            {
                key = new
                {
                    id = "<id>",
                    initParams = new
                    {
                        key = new object(),
                    },
                    dataMapping = new
                    {
                        key = "<dataMapping>",
                    },
                },
            },
            outputs = new
            {
                key = "<outputs>",
            },
        });
        Response response = await client.UploadUpdateRunAsync("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("description").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetEvaluations((string)null, (string)null, (int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetEvaluationsAsync((string)null, (string)null, (int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Evaluation item in client.GetEvaluations())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Evaluation item in client.GetEvaluationsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetEvaluations("<tags>", "<properties>", 1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetEvaluationsAsync("<tags>", "<properties>", 1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("systemMessage").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("modelConfig").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("target").GetProperty("modelParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_Evaluation_GetEvaluations_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.Evaluation item in client.GetEvaluations(tags: "<tags>", properties: "<properties>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_Evaluation_GetEvaluations_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.Evaluations client = new Projects.1DP.AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.Evaluation item in client.GetEvaluationsAsync(tags: "<tags>", properties: "<properties>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }
}
}
