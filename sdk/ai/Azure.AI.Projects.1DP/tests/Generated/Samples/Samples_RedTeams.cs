// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_RedTeams
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetRedTeam("apwpcf", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetRedTeamAsync("apwpcf", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = client.GetRedTeam("apwpcf");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_RedTeamsGetMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.GetRedTeamAsync("apwpcf");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_RedTeamsCreateRunMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "edmalfvznuay",
            numTurns = 10,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "qaxxxhjp",
            tags = new
            {
                key1287 = "gbklekkgmxkfbhehgh",
            },
            properties = new
            {
                key9280 = "fwzjtipl",
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_RedTeamsCreateRunMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "edmalfvznuay",
            numTurns = 10,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "qaxxxhjp",
            tags = new
            {
                key1287 = "gbklekkgmxkfbhehgh",
            },
            properties = new
            {
                key9280 = "fwzjtipl",
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_RedTeamsCreateRunMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(10, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, ((AI.Projects.1DP.TargetConfig)null))
{
            ScanName = "edmalfvznuay",
ApplicationScenario = "qaxxxhjp",
Tags =
{
                ["key1287"] = "gbklekkgmxkfbhehgh"
},
Properties =
{
                ["key9280"] = "fwzjtipl"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_RedTeamsCreateRunMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(10, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, ((AI.Projects.1DP.TargetConfig)null))
{
            ScanName = "edmalfvznuay",
ApplicationScenario = "qaxxxhjp",
Tags =
{
                ["key1287"] = "gbklekkgmxkfbhehgh"
},
Properties =
{
                ["key9280"] = "fwzjtipl"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_RedTeamsCreateRunMinimumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            numTurns = 10,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_RedTeamsCreateRunMinimumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            numTurns = 10,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_RedTeamsCreateRunMinimumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(10, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, ((AI.Projects.1DP.TargetConfig)null));
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_RedTeamsCreateRunMinimumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(10, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, ((AI.Projects.1DP.TargetConfig)null));
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetRedTeams((int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetRedTeamsAsync((int?)null, 8, 21, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.RedTeam item in client.GetRedTeams())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_RedTeamsListMaximumSet_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.RedTeam item in client.GetRedTeamsAsync())
{
        }
    }
}
}
