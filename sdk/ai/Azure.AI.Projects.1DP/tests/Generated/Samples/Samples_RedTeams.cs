// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_RedTeams
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetRedTeam("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetRedTeamAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = client.GetRedTeam("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.GetRedTeamAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetRedTeam("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetRedTeamAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = client.GetRedTeam("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.GetRedTeamAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            numTurns = 1234,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            targetConfig = new
            {
                modelDeploymentName = "<modelDeploymentName>",
                type = "AzureOpenAIModel",
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            numTurns = 1234,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            targetConfig = new
            {
                modelDeploymentName = "<modelDeploymentName>",
                type = "AzureOpenAIModel",
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, new Projects.1DP.AzureOpenAIModelConfiguration("<modelDeploymentName>"));
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, new Projects.1DP.AzureOpenAIModelConfiguration("<modelDeploymentName>"));
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            targetConfig = new
            {
                modelDeploymentName = "<modelDeploymentName>",
                type = "AzureOpenAIModel",
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategies = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
            targetConfig = new
            {
                modelDeploymentName = "<modelDeploymentName>",
                type = "AzureOpenAIModel",
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, new Projects.1DP.AzureOpenAIModelConfiguration("<modelDeploymentName>"))
{
            ScanName = "<scanName>",
ApplicationScenario = "<applicationScenario>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam(1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness}, new Projects.1DP.AzureOpenAIModelConfiguration("<modelDeploymentName>"))
{
            ScanName = "<scanName>",
ApplicationScenario = "<applicationScenario>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetRedTeams((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetRedTeamsAsync((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.RedTeam item in client.GetRedTeams())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.RedTeam item in client.GetRedTeamsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetRedTeams(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationScenario").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetRedTeamsAsync(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategies")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationScenario").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("targetConfig").GetProperty("type").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.RedTeam item in client.GetRedTeams(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        TokenCredential credential = new DefaultAzureCredential();
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.RedTeam item in client.GetRedTeamsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }
}
}
