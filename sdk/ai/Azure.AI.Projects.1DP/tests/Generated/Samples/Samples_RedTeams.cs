// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.1DP.Samples
{
public partial class Samples_RedTeams
{
    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetRedTeam("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetRedTeamAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = client.GetRedTeam("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.GetRedTeamAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetRedTeam("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetRedTeamAsync("<name>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeam_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = client.GetRedTeam("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeam_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.GetRedTeamAsync("<name>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam("<scanName>", 1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness});
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam("<scanName>", 1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness});
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = client.CreateRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = await client.CreateRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_CreateRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam("<scanName>", 1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness})
{
            ApplicationScenario = "<applicationScenario>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.CreateRun(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_CreateRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeam redTeam = new Projects.1DP.RedTeam("<scanName>", 1234, new Projects.1DP.AttackStrategy[]{ AI.Projects.1DP.AttackStrategy.Easy}, true, new Projects.1DP.RiskCategory[]{ AI.Projects.1DP.RiskCategory.HateUnfairness})
{
            ApplicationScenario = "<applicationScenario>",
Tags =
{
                ["key"] = "<tags>"
},
Properties =
{
                ["key"] = "<properties>"
},
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.CreateRunAsync(redTeam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.UploadRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.UploadRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadRun_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeamUpload redteam = new Projects.1DP.RedTeamUpload();
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.UploadRun(redteam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadRun_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeamUpload redteam = new Projects.1DP.RedTeamUpload();
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.UploadRunAsync(redteam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = client.UploadRun(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = await client.UploadRunAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadRun_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeamUpload redteam = new Projects.1DP.RedTeamUpload
    {
            ScanName = "<scanName>",
NumTurns = 1234,
AttackStrategy = { AI.Projects.1DP.AttackStrategy.Easy},
SimulationOnly = true,
RiskCategories = { AI.Projects.1DP.RiskCategory.HateUnfairness},
ApplicationScenario = "<applicationScenario>",
Tags =
    {
                ["key"] = "<tags>"
    },
Properties =
    {
                ["key"] = "<properties>"
    },
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = client.UploadRun(redteam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadRun_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.RedTeamUpload redteam = new Projects.1DP.RedTeamUpload
    {
            ScanName = "<scanName>",
NumTurns = 1234,
AttackStrategy = { AI.Projects.1DP.AttackStrategy.Easy},
SimulationOnly = true,
RiskCategories = { AI.Projects.1DP.RiskCategory.HateUnfairness},
ApplicationScenario = "<applicationScenario>",
Tags =
    {
                ["key"] = "<tags>"
    },
Properties =
    {
                ["key"] = "<properties>"
    },
};
        Azure.Response < AI.Projects.1DP.RedTeam > response = await client.UploadRunAsync(redteam);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadUpdateRun_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.UploadUpdateRun("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadUpdateRun_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.UploadUpdateRunAsync("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_UploadUpdateRun_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = client.UploadUpdateRun("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_UploadUpdateRun_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            scanName = "<scanName>",
            numTurns = 1234,
            attackStrategy = new object[]
        {
"easy"
        },
            simulationOnly = true,
            riskCategories = new object[]
        {
"HateUnfairness"
        },
            applicationScenario = "<applicationScenario>",
            tags = new
            {
                key = "<tags>",
            },
            properties = new
            {
                key = "<properties>",
            },
        });
        Response response = await client.UploadUpdateRunAsync("<name>", content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("scanName").ToString());
        Console.WriteLine(result.GetProperty("numTurns").ToString());
        Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
        Console.WriteLine(result.GetProperty("simulationOnly").ToString());
        Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
        Console.WriteLine(result.GetProperty("applicationScenario").ToString());
        Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("status").ToString());
        Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
        Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDatasetWithType_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetJailBreakDatasetWithType("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDatasetWithType_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetJailBreakDatasetWithTypeAsync("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDatasetWithType_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.GetJailBreakDatasetWithType("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDatasetWithType_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.GetJailBreakDatasetWithTypeAsync("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDatasetWithType_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetJailBreakDatasetWithType("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDatasetWithType_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetJailBreakDatasetWithTypeAsync("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDatasetWithType_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.GetJailBreakDatasetWithType("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDatasetWithType_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.GetJailBreakDatasetWithTypeAsync("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetAttackObjectives_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetAttackObjectives((IEnumerable<string>)null, (string)null, (string)null, (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].GetProperty("Id").ToString());
        Console.WriteLine(result[0].GetProperty("Source")[0].ToString());
        Console.WriteLine(result[0].GetProperty("Modality").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetAttackObjectives_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetAttackObjectivesAsync((IEnumerable<string>)null, (string)null, (string)null, (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].GetProperty("Id").ToString());
        Console.WriteLine(result[0].GetProperty("Source")[0].ToString());
        Console.WriteLine(result[0].GetProperty("Modality").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetAttackObjectives_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < System.Collections.Generic.IReadOnlyList < AI.Projects.1DP.AttackObjective >> response = client.GetAttackObjectives();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetAttackObjectives_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < System.Collections.Generic.IReadOnlyList < AI.Projects.1DP.AttackObjective >> response = await client.GetAttackObjectivesAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetAttackObjectives_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetAttackObjectives(new string[] { "<riskTypes>" }, "<lang>", "<strategy>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].GetProperty("Id").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("TargetHarms")[0].GetProperty("RiskType").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("TargetHarms")[0].GetProperty("RiskSubType").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("Language").ToString());
        Console.WriteLine(result[0].GetProperty("Source")[0].ToString());
        Console.WriteLine(result[0].GetProperty("Modality").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].GetProperty("Role").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].GetProperty("Content").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetAttackObjectives_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetAttackObjectivesAsync(new string[] { "<riskTypes>" }, "<lang>", "<strategy>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].GetProperty("Id").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("TargetHarms")[0].GetProperty("RiskType").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("TargetHarms")[0].GetProperty("RiskSubType").ToString());
        Console.WriteLine(result[0].GetProperty("Metadata").GetProperty("Language").ToString());
        Console.WriteLine(result[0].GetProperty("Source")[0].ToString());
        Console.WriteLine(result[0].GetProperty("Modality").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].GetProperty("Role").ToString());
        Console.WriteLine(result[0].GetProperty("Messages")[0].GetProperty("Content").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetAttackObjectives_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < System.Collections.Generic.IReadOnlyList < AI.Projects.1DP.AttackObjective >> response = client.GetAttackObjectives(riskTypes: new string[] { "<riskTypes>" }, lang: "<lang>", strategy: "<strategy>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetAttackObjectives_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Azure.Response < System.Collections.Generic.IReadOnlyList < AI.Projects.1DP.AttackObjective >> response = await client.GetAttackObjectivesAsync(riskTypes: new string[] { "<riskTypes>" }, lang: "<lang>", strategy: "<strategy>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDataset_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetJailBreakDataset((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDataset_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetJailBreakDatasetAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDataset_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.GetJailBreakDataset();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDataset_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.GetJailBreakDatasetAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDataset_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetJailBreakDataset((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDataset_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetJailBreakDatasetAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result[0].ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetJailBreakDataset_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = client.GetJailBreakDataset();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetJailBreakDataset_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<IReadOnlyList<string>> response = await client.GetJailBreakDatasetAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersWithType_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParametersWithType("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersWithType_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersWithTypeAsync("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersWithType_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParametersWithType("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersWithType_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersWithTypeAsync("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersWithType_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParametersWithType("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersWithType_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersWithTypeAsync("<type>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersWithType_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParametersWithType("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersWithType_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersWithTypeAsync("<type>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParameters_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParameters((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParameters_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParameters_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParameters();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParameters_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParameters_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParameters((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParameters_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersAsync((RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParameters_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParameters();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParameters_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersAsync();
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersImage_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParametersImage("<path>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersImage_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersImageAsync("<path>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersImage_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParametersImage("<path>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersImage_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersImageAsync("<path>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersImage_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = client.GetTemplateParametersImage("<path>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersImage_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response response = await client.GetTemplateParametersImageAsync("<path>", (RequestContext)null);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_GetTemplateParametersImage_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = client.GetTemplateParametersImage("<path>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_GetTemplateParametersImage_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        Response<string> response = await client.GetTemplateParametersImageAsync("<path>");
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_SubmitSimulation_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = client.SubmitSimulation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("Location").ToString());
        Console.WriteLine(result.GetProperty("OperationResult").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_SubmitSimulation_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new object());
        Response response = await client.SubmitSimulationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("Location").ToString());
        Console.WriteLine(result.GetProperty("OperationResult").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_SubmitSimulation_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.SimulationDTO body = new Projects.1DP.SimulationDTO();
        Azure.Response < AI.Projects.1DP.LongRunningResponse > response = client.SubmitSimulation(body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_SubmitSimulation_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.SimulationDTO body = new Projects.1DP.SimulationDTO();
        Azure.Response < AI.Projects.1DP.LongRunningResponse > response = await client.SubmitSimulationAsync(body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_SubmitSimulation_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            Headers = new
            {
                key = "<Headers>",
            },
            Params = new
            {
                key = "<Params>",
            },
            TemplateParameters = new
            {
                key = "<TemplateParameters>",
            },
            CustomizationParameters = new
            {
                ApplicationScenario = "<ApplicationScenario>",
                HarmCategories = new object[]
        {
"<HarmCategories>"
        },
            },
            Json = "<Json>",
            Url = "<Url>",
            TemplateKey = "<TemplateKey>",
            SimulationType = "Default",
            IsMicrosoftTenant = true,
            SubscriptionId = "<SubscriptionId>",
            ResourceGroupName = "<ResourceGroupName>",
            WorkspaceName = "<WorkspaceName>",
        });
        Response response = client.SubmitSimulation(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("Location").ToString());
        Console.WriteLine(result.GetProperty("OperationResult").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_SubmitSimulation_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        using RequestContent content = RequestContent.Create(new
        {
            Headers = new
            {
                key = "<Headers>",
            },
            Params = new
            {
                key = "<Params>",
            },
            TemplateParameters = new
            {
                key = "<TemplateParameters>",
            },
            CustomizationParameters = new
            {
                ApplicationScenario = "<ApplicationScenario>",
                HarmCategories = new object[]
        {
"<HarmCategories>"
        },
            },
            Json = "<Json>",
            Url = "<Url>",
            TemplateKey = "<TemplateKey>",
            SimulationType = "Default",
            IsMicrosoftTenant = true,
            SubscriptionId = "<SubscriptionId>",
            ResourceGroupName = "<ResourceGroupName>",
            WorkspaceName = "<WorkspaceName>",
        });
        Response response = await client.SubmitSimulationAsync(content);

        JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        Console.WriteLine(result.GetProperty("Location").ToString());
        Console.WriteLine(result.GetProperty("OperationResult").ToString());
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeams_SubmitSimulation_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.SimulationDTO body = new Projects.1DP.SimulationDTO
    {
            Headers =
    {
                ["key"] = "<Headers>"
    },
Params =
    {
                ["key"] = "<Params>"
    },
TemplateParameters =
    {
                ["key"] = "<TemplateParameters>"
    },
CustomizationParameters = new Projects.1DP.CustomizationParameters(new string[] { "<HarmCategories>" })
    {
                ApplicationScenario = "<ApplicationScenario>",
},
Json = "<Json>",
Url = "<Url>",
TemplateKey = "<TemplateKey>",
SimulationType = AI.Projects.1DP.SimulationType.Default,
IsMicrosoftTenant = true,
SubscriptionId = "<SubscriptionId>",
ResourceGroupName = "<ResourceGroupName>",
WorkspaceName = "<WorkspaceName>",
};
        Azure.Response < AI.Projects.1DP.LongRunningResponse > response = client.SubmitSimulation(body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeams_SubmitSimulation_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        AI.Projects.1DP.SimulationDTO body = new Projects.1DP.SimulationDTO
    {
            Headers =
    {
                ["key"] = "<Headers>"
    },
Params =
    {
                ["key"] = "<Params>"
    },
TemplateParameters =
    {
                ["key"] = "<TemplateParameters>"
    },
CustomizationParameters = new Projects.1DP.CustomizationParameters(new string[] { "<HarmCategories>" })
    {
                ApplicationScenario = "<ApplicationScenario>",
},
Json = "<Json>",
Url = "<Url>",
TemplateKey = "<TemplateKey>",
SimulationType = AI.Projects.1DP.SimulationType.Default,
IsMicrosoftTenant = true,
SubscriptionId = "<SubscriptionId>",
ResourceGroupName = "<ResourceGroupName>",
WorkspaceName = "<WorkspaceName>",
};
        Azure.Response < AI.Projects.1DP.LongRunningResponse > response = await client.SubmitSimulationAsync(body);
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_ShortVersion()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetRedTeams((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_ShortVersion_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetRedTeamsAsync((int?)null, (int?)null, (int?)null, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_ShortVersion_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.RedTeam item in client.GetRedTeams())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_ShortVersion_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.RedTeam item in client.GetRedTeamsAsync())
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_AllParameters()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (BinaryData item in client.GetRedTeams(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationScenario").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_AllParameters_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (BinaryData item in client.GetRedTeamsAsync(1234, 1234, 1234, (RequestContext)null))
        {
            JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("scanName").ToString());
            Console.WriteLine(result.GetProperty("numTurns").ToString());
            Console.WriteLine(result.GetProperty("attackStrategy")[0].ToString());
            Console.WriteLine(result.GetProperty("simulationOnly").ToString());
            Console.WriteLine(result.GetProperty("riskCategories")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationScenario").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("outputs").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public void Example_RedTeam_GetRedTeams_AllParameters_Convenience()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        foreach (Projects.1DP.RedTeam item in client.GetRedTeams(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }

    [Test]
    [Ignore("Only validating compilation of examples")]
    public async Task Example_RedTeam_GetRedTeams_AllParameters_Convenience_Async()
    {
        Uri endpoint = new Uri("<endpoint>");
        AzureKeyCredential credential = new AzureKeyCredential("<key>");
        AI.Projects.1DP.RedTeams client = new Projects.1DP.AIProjectClient(endpoint, credential).GetRedTeamsClient(apiVersion: "2025-05-15-preview");

        await foreach (Projects.1DP.RedTeam item in client.GetRedTeamsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
        }
    }
}
}
