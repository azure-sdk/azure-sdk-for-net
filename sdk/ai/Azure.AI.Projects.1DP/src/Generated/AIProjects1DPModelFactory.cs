// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Projects.1DP
{

/// <summary> Initializes a new instance of <see cref="Projects.1DP.SystemData"/>. </summary>
/// <param name="createdAt"> The timestamp the resource was created at. </param>
/// <param name="createdBy"> The identity that created the resource. </param>
/// <param name="createdByType"> The identity type that created the resource. </param>
/// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
/// <returns> A new <see cref="Projects.1DP.SystemData"/> instance for mocking. </returns>
public static Projects.1DP.SystemData SystemData(DateTimeOffset? createdAt = null, string createdBy = null, string createdByType = null, DateTimeOffset? lastModifiedAt = null)
{
    return new Projects.1DP.SystemData(createdAt, createdBy, createdByType, lastModifiedAt, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Projects.1DP.AgentEvaluation"/>. </summary>
/// <param name="threadId"> Identifier of the agent thread. </param>
/// <param name="runId"> Identifier of the agent run. </param>
/// <param name="completionId"> Identifier of the agent completion, which is the combination of Thread ID and Run ID. </param>
/// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
/// <param name="query"> Conversation history passed to the agent, including all previous messages in the chat, including all agents' tool calls and tool results, and with the system message. The actual query that an evaluation will trigger for is the last message in the conversation. </param>
/// <param name="response"> Agent's direct response to the query from the conversation, including all tool calls, results, and agent's formatted responses. </param>
/// <param name="toolDefinitions"> Tools that were used in the conversation. </param>
/// <param name="appInsightsConnectionString"> Optional and temporary way to pass the app insights connection string to the evaluator. </param>
/// <returns> A new <see cref="Projects.1DP.AgentEvaluation"/> instance for mocking. </returns>
public static Projects.1DP.AgentEvaluation AgentEvaluation(string threadId = null, string runId = null, string completionId = null, System.Collections.Generic.IReadOnlyDictionary<string, Projects.1DP.EvaluatorConfiguration> evaluators = (System.Collections.Generic.IReadOnlyDictionary < string, AI.Projects.1DP.EvaluatorConfiguration>)null,System.Collections.Generic.IEnumerable<Projects.1DP.CompletionsMessage> query = (System.Collections.Generic.IEnumerable < AI.Projects.1DP.CompletionsMessage>)null,System.Collections.Generic.IEnumerable<Projects.1DP.CompletionsMessage> response = (System.Collections.Generic.IEnumerable < AI.Projects.1DP.CompletionsMessage>)null,System.Collections.Generic.IEnumerable<Projects.1DP.AgentToolDefinition> toolDefinitions = (System.Collections.Generic.IEnumerable < AI.Projects.1DP.AgentToolDefinition>)null,string appInsightsConnectionString = null)
{
evaluators ??= new System.Collections.Generic.Dictionary<string, Projects.1DP.EvaluatorConfiguration>();
query ??= new System.Collections.Generic.List<Projects.1DP.CompletionsMessage>();
response ??= new System.Collections.Generic.List<Projects.1DP.CompletionsMessage>();
toolDefinitions ??= new System.Collections.Generic.List<Projects.1DP.AgentToolDefinition>();

return new Projects.1DP.AgentEvaluation(
    threadId,
    runId,
    completionId,
    evaluators,
    query?.ToList(),
	response?.ToList(),
	toolDefinitions?.ToList(),
	appInsightsConnectionString,
	serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.CompletionsMessage"/>. </summary>
/// <param name="userId"> Identifier of user. </param>
/// <param name="agentId"> Identifier of agent. </param>
/// <param name="messageId"> Identifier of message. </param>
/// <param name="completionId"> Identifier of completion. </param>
/// <param name="threadId"> Identifier of thread. </param>
/// <param name="runId"> Identifier of run. </param>
/// <param name="role"> Role of the author. </param>
/// <param name="content"> Content of the message. </param>
/// <param name="authorName"> Name of the author. </param>
/// <param name="createdAt"> Timestamp of when the message was created. </param>
/// <param name="completedAt"> Timestamp of when the message was completed. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.CompletionsMessage"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.CompletionsMessage CompletionsMessage(string userId = (string)null, string agentId = (string)null, string messageId = (string)null, string completionId = (string)null, string threadId = (string)null, string runId = (string)null, Azure.AI.Projects.1DP.AuthorRoleEnum role = default, System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.TextContent> content = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.TextContent>)null,string authorName = null, global::System.DateTimeOffset? createdAt = (global::System.DateTimeOffset?)null,DateTimeOffset? completedAt = null)
{
    content ??= new List<Azure.AI.Projects.1DP.TextContent >;

    return new Azure.AI.Projects.1DP.CompletionsMessage(
        userId,
        agentId,
        messageId,
        completionId,
        threadId,
        runId,
        role,
        content?.ToList(),
        authorName,
        createdAt,
        completedAt,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.TextContent"/>. </summary>
/// <param name="type"> Type of the content. </param>
/// <param name="text"> Text content. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.TextContent"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.TextContent TextContent(Azure.AI.Projects.1DP.TextContentType type = default, string text = (string)null)
{
    return new Azure.AI.Projects.1DP.TextContent(type, text, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.AgentToolDefinition"/>. </summary>
/// <param name="name"> Name of the tool. </param>
/// <param name="description"> Description of the tool. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.AgentToolDefinition"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.AgentToolDefinition AgentToolDefinition(string name = (string)null, string description = (string)null)
{
    return new Azure.AI.Projects.1DP.AgentToolDefinition(name, description, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.AgentEvaluationResult"/>. </summary>
/// <param name="evaluator"> Evaluator's name. This is the name of the evaluator that was used to evaluate the agent's completion. </param>
/// <param name="score"> Score of the given evaluator. No restriction on range. </param>
/// <param name="status"> Status of the evaluation result. Options: Success, Failure, NotApplicable. </param>
/// <param name="reason"> Reasoning for the evaluation result. </param>
/// <param name="version"> Version of the evaluator that was used to evaluate the agent's completion. </param>
/// <param name="responseId"> The unique identifier for the completion. </param>
/// <param name="messageId"> Identifies message sent to or received from Generative AI model or agent. </param>
/// <param name="threadId"> The unique identifier of the thread. </param>
/// <param name="runId"> The unique identifier of the run. </param>
/// <param name="error"> A string explaining why there was an error, if applicable. </param>
/// <param name="additionalDetails"> Additional properties relevant to the evaluator. These will differ between evaluators. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.AgentEvaluationResult"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.AgentEvaluationResult AgentEvaluationResult(string evaluator = (string)null, float score = default, string status = (string)null, string reason = (string)null, string version = (string)null, string responseId = (string)null, string messageId = (string)null, string threadId = (string)null, string runId = (string)null, string error = (string)null, IReadOnlyDictionary<string, string> additionalDetails = (IReadOnlyDictionary<string, string>)null)
{
    additionalDetails ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.AgentEvaluationResult(
        evaluator,
        score,
        status,
        reason,
        version,
        responseId,
        messageId,
        threadId,
        runId,
        error,
        additionalDetails,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.EvaluationUpload"/>. </summary>
/// <param name="id"> Identifier of the evaluation. </param>
/// <param name="data">
/// Data for evaluation.
/// Please note <see cref="Azure.AI.Projects.1DP.InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
/// The available derived classes include <see cref="Azure.AI.Projects.1DP.InputDataset"/>.
/// </param>
/// <param name="target"> Evaluation target specifying the model config and parameters. </param>
/// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
/// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
/// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
/// <param name="status"> Status of the evaluation. For upload: Failed or Completed. </param>
/// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
/// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
/// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
/// <param name="outputs"> Outputs of the evaluation as a dictionary of IDs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}'}. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.EvaluationUpload"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.EvaluationUpload EvaluationUpload(string id = (string)null, Azure.AI.Projects.1DP.InputData data = (Azure.AI.Projects.1DP.InputData)null,Azure.AI.Projects.1DP.EvaluationTarget target = (Azure.AI.Projects.1DP.EvaluationTarget)null,string displayName = null,string description = (string)null,Azure.AI.Projects.1DP.SystemData systemData = (Azure.AI.Projects.1DP.SystemData)null,string status = null, global::System.Collections.Generic.IDictionary<string, string> tags = (global::System.Collections.Generic.IDictionary<string, string>)null,IDictionary<string, string> properties = null, global::System.Collections.Generic.IDictionary<string, global::Azure.AI.Projects.1DP.EvaluatorConfiguration> evaluators = (global::System.Collections.Generic.IDictionary<string, global::Azure.AI.Projects.1DP.EvaluatorConfiguration>)null,IDictionary<string, string> outputs = null)
{
    tags ??= new Dictionary<string, string>();
    properties ??= new global::System.Collections.Generic.Dictionary<string, string>();
    evaluators ??= new Dictionary<string, Azure.AI.Projects.1DP.EvaluatorConfiguration >;
    outputs ??= new global::System.Collections.Generic.Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.EvaluationUpload(
        id,
        data,
        target,
        displayName,
        description,
        systemData,
        status,
        tags,
        properties,
        evaluators,
        outputs,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.DatasetVersion"/>. </summary>
/// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
/// <param name="type"> Dataset type. </param>
/// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.DatasetVersion"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.DatasetVersion DatasetVersion(string datasetUri = (string)null, string type = (string)null, bool? isReference = (bool?)null, string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.UnknownDatasetVersion(
        datasetUri,
        type == null ? ((Azure.AI.Projects.1DP.DatasetType)default) : new Azure.AI.Projects.1DP.DatasetType(type),
	isReference,
	stage,
	id,
	name,
	version,
	description,
	tags,
	serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.FileDatasetVersion"/>. </summary>
/// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
/// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <param name="openAIPurpose"> Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.FileDatasetVersion"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.FileDatasetVersion FileDatasetVersion(string datasetUri = (string)null, bool? isReference = (bool?)null, string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null, string openAIPurpose = (string)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.FileDatasetVersion(
        datasetUri,
        Azure.AI.Projects.1DP.DatasetType.UriFile,
        isReference,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null,
        openAIPurpose);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.FolderDatasetVersion"/>. </summary>
/// <param name="datasetUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
/// <param name="isReference"> Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be deleted when the dataset version is deleted. </param>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.FolderDatasetVersion"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.FolderDatasetVersion FolderDatasetVersion(string datasetUri = (string)null, bool? isReference = (bool?)null, string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.FolderDatasetVersion(
        datasetUri,
        Azure.AI.Projects.1DP.DatasetType.UriFolder,
        isReference,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PendingUploadRequest"/>. </summary>
/// <param name="pendingUploadId"> If PendingUploadId is not provided, a random GUID will be used. </param>
/// <param name="connectionName"> Name of Azure blob storage connection to use for generating temporary SAS token. </param>
/// <param name="pendingUploadType"> TemporaryBlobReference is the only supported type. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PendingUploadRequest"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PendingUploadRequest PendingUploadRequest(string pendingUploadId = (string)null, string connectionName = (string)null, Azure.AI.Projects.1DP.PendingUploadType pendingUploadType = default)
{
    return new Azure.AI.Projects.1DP.PendingUploadRequest(pendingUploadId, connectionName, pendingUploadType, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PendingUploadResponse"/>. </summary>
/// <param name="blobReferenceForConsumption"> Container-level read, write, list SAS. </param>
/// <param name="pendingUploadId"> ID for this upload request. </param>
/// <param name="datasetVersion"> Version of dataset to be created if user did not specify version when initially creating upload. </param>
/// <param name="pendingUploadType"> TemporaryBlobReference is the only supported type. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PendingUploadResponse"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PendingUploadResponse PendingUploadResponse(Azure.AI.Projects.1DP.BlobReferenceForConsumption blobReferenceForConsumption = (Azure.AI.Projects.1DP.BlobReferenceForConsumption)null,string pendingUploadId = null,string datasetVersion = (string)null,Azure.AI.Projects.1DP.PendingUploadType pendingUploadType = default)
{
    return new Azure.AI.Projects.1DP.PendingUploadResponse(blobReferenceForConsumption, pendingUploadId, datasetVersion, pendingUploadType, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.BlobReferenceForConsumption"/>. </summary>
/// <param name="blobUri"> Blob URI path for client to upload data. Example: https://blob.windows.core.net/Container/Path. </param>
/// <param name="storageAccountArmId"> ARM ID of the storage account to use. </param>
/// <param name="credential"> Credential info to access the storage account. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.BlobReferenceForConsumption"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.BlobReferenceForConsumption BlobReferenceForConsumption(string blobUri = (string)null, string storageAccountArmId = (string)null, Azure.AI.Projects.1DP.SasCredential credential = (Azure.AI.Projects.1DP.SasCredential)null)
{
    return new Azure.AI.Projects.1DP.BlobReferenceForConsumption(blobUri, storageAccountArmId, credential, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.SasCredential"/>. </summary>
/// <param name="sasUri"> SAS uri. </param>
/// <param name="type"> Type of credential. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.SasCredential"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.SasCredential SasCredential(string sasUri = (string)null, Azure.AI.Projects.1DP.SasCredentialType type = default)
{
    return new Azure.AI.Projects.1DP.SasCredential(sasUri, type, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.AssetCredentialResponse"/>. </summary>
/// <param name="blobReferenceForConsumption"> Blob Reference for Consumption. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.AssetCredentialResponse"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.AssetCredentialResponse AssetCredentialResponse(Azure.AI.Projects.1DP.BlobReferenceForConsumption blobReferenceForConsumption = (Azure.AI.Projects.1DP.BlobReferenceForConsumption)null)
{
    return new Azure.AI.Projects.1DP.AssetCredentialResponse(blobReferenceForConsumption, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.Index"/>. </summary>
/// <param name="type"> Type of index. </param>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.Index"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.Index Index(string type = (string)null, string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.UnknownIndex(
        type == null ? ((Azure.AI.Projects.1DP.IndexType)default) : new Azure.AI.Projects.1DP.IndexType(type),
	stage,
	id,
	name,
	version,
	description,
	tags,
	serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.AzureAISearchIndex"/>. </summary>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <param name="connectionName"> Name of connection to Azure AI Search. </param>
/// <param name="indexName"> Name of index in Azure AI Search resource to attach. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.AzureAISearchIndex"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.AzureAISearchIndex AzureAISearchIndex(string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null, string connectionName = (string)null, string indexName = (string)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.AzureAISearchIndex(
        Azure.AI.Projects.1DP.IndexType.AzureSearch,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null,
        connectionName,
        indexName);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.ManagedAzureAISearchIndex"/>. </summary>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <param name="vectorStoreId"> Vector store id of managed index. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.ManagedAzureAISearchIndex"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.ManagedAzureAISearchIndex ManagedAzureAISearchIndex(string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null, string vectorStoreId = (string)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.ManagedAzureAISearchIndex(
        Azure.AI.Projects.1DP.IndexType.ManagedAzureSearch,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null,
        vectorStoreId);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.CosmosDBIndex"/>. </summary>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <param name="connectionName"> Name of connection to CosmosDB. </param>
/// <param name="databaseName"> Name of the CosmosDB Database. </param>
/// <param name="containerName"> Name of CosmosDB Container. </param>
/// <param name="embeddingConfiguration"> Embedding model configuration. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.CosmosDBIndex"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.CosmosDBIndex CosmosDBIndex(string stage = (string)null, string id = (string)null, string name = (string)null, string version = (string)null, string description = (string)null, IDictionary<string, string> tags = (IDictionary<string, string>)null, string connectionName = (string)null, string databaseName = (string)null, string containerName = (string)null, Azure.AI.Projects.1DP.EmbeddingConfiguration embeddingConfiguration = (Azure.AI.Projects.1DP.EmbeddingConfiguration)null)
{
    tags ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.CosmosDBIndex(
        Azure.AI.Projects.1DP.IndexType.CosmosDB,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null,
        connectionName,
        databaseName,
        containerName,
        embeddingConfiguration);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.Deployment"/>. </summary>
/// <param name="type"> The type of the deployment. </param>
/// <param name="name"> Name of the deployment. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.Deployment"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.Deployment Deployment(string type = (string)null, string name = (string)null)
{
    return new Azure.AI.Projects.1DP.UnknownDeployment(type == null ? ((Azure.AI.Projects.1DP.DeploymentType)default) : new Azure.AI.Projects.1DP.DeploymentType(type), name, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.ModelDeployment"/>. </summary>
/// <param name="name"> Name of the deployment. </param>
/// <param name="modelName"> Publisher-specific name of the deployed model. </param>
/// <param name="modelVersion"> Publisher-specific version of the deployed model. </param>
/// <param name="modelPublisher"> Name of the deployed model's publisher. </param>
/// <param name="capabilities"> Capabilities of deployed model. </param>
/// <param name="sku"> Sku of the model deployment. </param>
/// <param name="connectionName"> Name of the connection the deployment comes from. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.ModelDeployment"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.ModelDeployment ModelDeployment(string name = (string)null, string modelName = (string)null, string modelVersion = (string)null, string modelPublisher = (string)null, IReadOnlyDictionary<string, string> capabilities = (IReadOnlyDictionary<string, string>)null, Azure.AI.Projects.1DP.Sku sku = (Azure.AI.Projects.1DP.Sku)null,string connectionName = null)
{
    capabilities ??= new Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.ModelDeployment(
        Azure.AI.Projects.1DP.DeploymentType.ModelDeployment,
        name,
        serializedAdditionalRawData: null,
        modelName,
        modelVersion,
        modelPublisher,
        capabilities,
        sku,
        connectionName);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.Sku"/>. </summary>
/// <param name="capacity"> Sku capacity. </param>
/// <param name="family"> Sku family. </param>
/// <param name="name"> Sku name. </param>
/// <param name="size"> Sku size. </param>
/// <param name="tier"> Sku tier. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.Sku"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.Sku Sku(long capacity = default, string family = (string)null, string name = (string)null, string size = (string)null, string tier = (string)null)
{
    return new Azure.AI.Projects.1DP.Sku(
        capacity,
        family,
        name,
        size,
        tier,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.RedTeam"/>. </summary>
/// <param name="id"> Identifier of the red team. </param>
/// <param name="scanName"> Name of the red-team scan. </param>
/// <param name="numTurns"> Number of simulation rounds. </param>
/// <param name="attackStrategy"> List of attack strategies or nested lists of attack strategies. </param>
/// <param name="simulationOnly"> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </param>
/// <param name="riskCategories"> List of risk categories to generate attack objectives for. </param>
/// <param name="applicationScenario"> Application scenario for the red team operation, to generate scenario specific attacks. </param>
/// <param name="tags"> Red team's tags. Unlike properties, tags are fully mutable. </param>
/// <param name="properties"> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
/// <param name="status"> Status of the red-team. It is set by service and is read-only. </param>
/// <param name="outputs"> Read-only result outputs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}', 'logId': 'azureai://accounts/{AccountName}/projects/{myproject}/datasets/{dataset-name}/versions/{dataset-version}' }. </param>
/// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.RedTeam"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.RedTeam RedTeam(string id = (string)null, string scanName = (string)null, int numTurns = default, System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.AttackStrategy> attackStrategy = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.AttackStrategy>)null,bool simulationOnly = default, global::System.Collections.Generic.IEnumerable<global::Azure.AI.Projects.1DP.RiskCategory> riskCategories = (global::System.Collections.Generic.IEnumerable<global::Azure.AI.Projects.1DP.RiskCategory>)null,string applicationScenario = null, global::System.Collections.Generic.IDictionary<string, string> tags = (global::System.Collections.Generic.IDictionary<string, string>)null,IDictionary<string, string> properties = null,string status = (string)null,IReadOnlyDictionary<string, string> outputs = null, global::Azure.AI.Projects.1DP.SystemData systemData = (global::Azure.AI.Projects.1DP.SystemData)null)
{
    attackStrategy ??= new List<Azure.AI.Projects.1DP.AttackStrategy >;
    riskCategories ??= new List<Azure.AI.Projects.1DP.RiskCategory >;
    tags ??= new Dictionary<string, string>();
    properties ??= new global::System.Collections.Generic.Dictionary<string, string>();
    outputs ??= new global::System.Collections.Generic.Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.RedTeam(
        id,
        scanName,
        numTurns,
        attackStrategy?.ToList(),
        simulationOnly,
        riskCategories?.ToList(),
        applicationScenario,
        tags,
        properties,
        status,
        outputs,
        systemData,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.RedTeamUpload"/>. </summary>
/// <param name="id"> Identifier of the red team. </param>
/// <param name="scanName"> Name of the red-team scan. </param>
/// <param name="numTurns"> Number of simulation rounds. </param>
/// <param name="attackStrategy"> List of attack strategies or nested lists of attack strategies. </param>
/// <param name="simulationOnly"> Simulation-only or Simulation + Evaluation. Default false, if true the scan outputs conversation not evaluation result. </param>
/// <param name="riskCategories"> List of risk categories to generate attack objectives for. </param>
/// <param name="applicationScenario"> Application scenario for the red team operation, to generate scenario specific attacks. </param>
/// <param name="tags"> Red team's tags. Unlike properties, tags are fully mutable. </param>
/// <param name="properties"> Red team's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
/// <param name="status"> Status of the red-team. It is set by service and is read-only. </param>
/// <param name="outputs"> Read-only result outputs. Example: { 'evaluationResultId': 'azureai://accounts/{AccountName}/projects/{myproject}/evaluationresults/{name}/versions/{version}' }. </param>
/// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.RedTeamUpload"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.RedTeamUpload RedTeamUpload(string id = (string)null, string scanName = (string)null, int? numTurns = (int?)null, System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.AttackStrategy> attackStrategy = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.AttackStrategy>)null,bool? simulationOnly = null, global::System.Collections.Generic.IEnumerable<global::Azure.AI.Projects.1DP.RiskCategory> riskCategories = (global::System.Collections.Generic.IEnumerable<global::Azure.AI.Projects.1DP.RiskCategory>)null,string applicationScenario = null, global::System.Collections.Generic.IDictionary<string, string> tags = (global::System.Collections.Generic.IDictionary<string, string>)null,IDictionary<string, string> properties = null,string status = (string)null,IReadOnlyDictionary<string, string> outputs = null, global::Azure.AI.Projects.1DP.SystemData systemData = (global::Azure.AI.Projects.1DP.SystemData)null)
{
    attackStrategy ??= new List<Azure.AI.Projects.1DP.AttackStrategy >;
    riskCategories ??= new List<Azure.AI.Projects.1DP.RiskCategory >;
    tags ??= new Dictionary<string, string>();
    properties ??= new global::System.Collections.Generic.Dictionary<string, string>();
    outputs ??= new global::System.Collections.Generic.Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.RedTeamUpload(
        id,
        scanName,
        numTurns,
        attackStrategy?.ToList(),
        simulationOnly,
        riskCategories?.ToList(),
        applicationScenario,
        tags,
        properties,
        status,
        outputs,
        systemData,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.AttackObjective"/>. </summary>
/// <param name="id"> The unique identifier. </param>
/// <param name="metadata"> The metadata. </param>
/// <param name="source"> List of sources. </param>
/// <param name="modality"> The modality. </param>
/// <param name="messages"> The messages. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.AttackObjective"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.AttackObjective AttackObjective(string id = (string)null, Azure.AI.Projects.1DP.Metadata metadata = (Azure.AI.Projects.1DP.Metadata)null,IEnumerable<string> source = null,string modality = (string)null,System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Message > messages = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Message >)null)
{
    source ??= new global::System.Collections.Generic.List<string>();
    messages ??= new List<Azure.AI.Projects.1DP.Message >;

    return new Azure.AI.Projects.1DP.AttackObjective(
        id,
        metadata,
        source?.ToList(),
        modality,
        messages?.ToList(),
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.Metadata"/>. </summary>
/// <param name="targetHarms"> List of target harms. </param>
/// <param name="language"> The language. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.Metadata"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.Metadata Metadata(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.TargetHarm> targetHarms = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.TargetHarm>)null,string language = null)
{
    targetHarms ??= new List<Azure.AI.Projects.1DP.TargetHarm >;

    return new Azure.AI.Projects.1DP.Metadata(targetHarms?.ToList(), language, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.TargetHarm"/>. </summary>
/// <param name="riskType"> The risk type. </param>
/// <param name="riskSubType"> The risk sub type. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.TargetHarm"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.TargetHarm TargetHarm(string riskType = (string)null, string riskSubType = (string)null)
{
    return new Azure.AI.Projects.1DP.TargetHarm(riskType, riskSubType, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.Message"/>. </summary>
/// <param name="role"> The role. </param>
/// <param name="content"> The content. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.Message"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.Message Message(string role = (string)null, string content = (string)null)
{
    return new Azure.AI.Projects.1DP.Message(role, content, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.LongRunningResponse"/>. </summary>
/// <param name="location"> The location. </param>
/// <param name="operationResult"> The OperationResult. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.LongRunningResponse"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.LongRunningResponse LongRunningResponse(string location = (string)null, BinaryData operationResult = (BinaryData)null)
{
    return new Azure.AI.Projects.1DP.LongRunningResponse(location, operationResult, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.EvaluationResult"/>. </summary>
/// <param name="resultType"> Type of Evaluation result. </param>
/// <param name="blobUri"> Blob URI. </param>
/// <param name="stage"> Asset stage. </param>
/// <param name="id"> A unique identifier for the asset, assetId probably?. </param>
/// <param name="name"> The name of the resource. </param>
/// <param name="version"> The version of the resource. </param>
/// <param name="description"> The asset description text. </param>
/// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.EvaluationResult"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.EvaluationResult EvaluationResult(Azure.AI.Projects.1DP.ResultType? resultType = (Azure.AI.Projects.1DP.ResultType?)null,string blobUri = null,string stage = (string)null,string id = null,string name = (string)null,string version = null,string description = (string)null,IDictionary<string, string> tags = null)
{
    tags ??= new global::System.Collections.Generic.Dictionary<string, string>();

    return new Azure.AI.Projects.1DP.EvaluationResult(
        resultType,
        blobUri,
        stage,
        id,
        name,
        version,
        description,
        tags,
        serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedConnection"/>. </summary>
/// <param name="value"> The Connection items on this page. </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedConnection"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedConnection PagedConnection(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.Connection> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Connection>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.Connection >;

    return new Azure.AI.Projects.1DP.PagedConnection(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedEvaluation"/>. </summary>
/// <param name="value"> The Evaluation items on this page. </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedEvaluation"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedEvaluation PagedEvaluation(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.Evaluation> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Evaluation>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.Evaluation >;

    return new Azure.AI.Projects.1DP.PagedEvaluation(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedDatasetVersion"/>. </summary>
/// <param name="value">
/// The DatasetVersion items on this page
/// Please note <see cref="Azure.AI.Projects.1DP.DatasetVersion"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
/// The available derived classes include <see cref="Azure.AI.Projects.1DP.FileDatasetVersion"/> and <see cref="Azure.AI.Projects.1DP.FolderDatasetVersion"/>.
/// </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedDatasetVersion"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedDatasetVersion PagedDatasetVersion(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.DatasetVersion> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.DatasetVersion>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.DatasetVersion >;

    return new Azure.AI.Projects.1DP.PagedDatasetVersion(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedIndex"/>. </summary>
/// <param name="value">
/// The Index items on this page
/// Please note <see cref="Azure.AI.Projects.1DP.Index"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
/// The available derived classes include <see cref="Azure.AI.Projects.1DP.AzureAISearchIndex"/>, <see cref="Azure.AI.Projects.1DP.CosmosDBIndex"/> and <see cref="Azure.AI.Projects.1DP.ManagedAzureAISearchIndex"/>.
/// </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedIndex"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedIndex PagedIndex(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.Index> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Index>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.Index >;

    return new Azure.AI.Projects.1DP.PagedIndex(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedDeployment"/>. </summary>
/// <param name="value">
/// The Deployment items on this page
/// Please note <see cref="Azure.AI.Projects.1DP.Deployment"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
/// The available derived classes include <see cref="Azure.AI.Projects.1DP.ModelDeployment"/>.
/// </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedDeployment"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedDeployment PagedDeployment(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.Deployment> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.Deployment>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.Deployment >;

    return new Azure.AI.Projects.1DP.PagedDeployment(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedRedTeam"/>. </summary>
/// <param name="value"> The RedTeam items on this page. </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedRedTeam"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedRedTeam PagedRedTeam(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.RedTeam> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.RedTeam>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.RedTeam >;

    return new Azure.AI.Projects.1DP.PagedRedTeam(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}

/// <summary> Initializes a new instance of <see cref="Azure.AI.Projects.1DP.PagedEvaluationResult"/>. </summary>
/// <param name="value"> The EvaluationResult items on this page. </param>
/// <param name="nextLink"> The link to the next page of items. </param>
/// <returns> A new <see cref="Azure.AI.Projects.1DP.PagedEvaluationResult"/> instance for mocking. </returns>
public static Azure.AI.Projects .1DP.PagedEvaluationResult PagedEvaluationResult(System.Collections.Generic.IEnumerable<Azure.AI.Projects.1DP.EvaluationResult> value = (System.Collections.Generic.IEnumerable < Azure.AI.Projects.1DP.EvaluationResult>)null,Uri nextLink = null)
{
    value ??= new List<Azure.AI.Projects.1DP.EvaluationResult >;

    return new Azure.AI.Projects.1DP.PagedEvaluationResult(value?.ToList(), nextLink, serializedAdditionalRawData: null);
}
}
}
