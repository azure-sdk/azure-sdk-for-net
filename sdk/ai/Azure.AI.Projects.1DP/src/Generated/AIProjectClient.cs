// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Projects.1DP
{
// Data plane generated client.
/// <summary> The AIProject service client. </summary>
public partial class AIProjectClient
{
    private const string AuthorizationHeader = "Authorization";
    private readonly AzureKeyCredential _keyCredential;
    private const string AuthorizationApiKeyPrefix = "Bearer";
    private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
    private readonly TokenCredential _tokenCredential;
    private readonly HttpPipeline _pipeline;
    private readonly Uri _endpoint;

    /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
    internal ClientDiagnostics ClientDiagnostics { get; }

    /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
    public virtual HttpPipeline Pipeline => _pipeline;

    /// <summary> Initializes a new instance of AIProjectClient for mocking. </summary>
    protected AIProjectClient()
    {
    }

    /// <summary> Initializes a new instance of AIProjectClient. </summary>
    /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
    public AIProjectClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new Projects.1DP.AIProjectClientOptions())
    {
    }

    /// <summary> Initializes a new instance of AIProjectClient. </summary>
    /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
    public AIProjectClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new Projects.1DP.AIProjectClientOptions())
    {
    }

    /// <summary> Initializes a new instance of AIProjectClient. </summary>
    /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <param name="options"> The options for configuring the client. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
    public AIProjectClient(Uri endpoint, AzureKeyCredential credential, Projects.1DP.AIProjectClientOptions options)
    {
        AI.Projects.1DP.Argument.AssertNotNull(endpoint, nameof(endpoint));
        AI.Projects.1DP.Argument.AssertNotNull(credential, nameof(credential));
        options ??= new Projects.1DP.AIProjectClientOptions();

        ClientDiagnostics = new ClientDiagnostics(options, true);
        _keyCredential = credential;
        _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader, AuthorizationApiKeyPrefix) }, new ResponseClassifier());
        _endpoint = endpoint;
    }

    /// <summary> Initializes a new instance of AIProjectClient. </summary>
    /// <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
    /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
    /// <param name="options"> The options for configuring the client. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
    public AIProjectClient(Uri endpoint, TokenCredential credential, Projects.1DP.AIProjectClientOptions options)
    {
        AI.Projects.1DP.Argument.AssertNotNull(endpoint, nameof(endpoint));
        AI.Projects.1DP.Argument.AssertNotNull(credential, nameof(credential));
        options ??= new Projects.1DP.AIProjectClientOptions();

        ClientDiagnostics = new ClientDiagnostics(options, true);
        _tokenCredential = credential;
        _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
        _endpoint = endpoint;
    }

    private Projects.1DP.Evaluations _cachedEvaluations;
    private Projects.1DP.Datasets _cachedDatasets;
    private Projects.1DP.ServicePatterns _cachedServicePatterns;
    private Projects.1DP.Indexes _cachedIndexes;
    private Projects.1DP.Deployments _cachedDeployments;
    private Projects.1DP.EvaluationResults _cachedEvaluationResults;
    private Projects.1DP.RedTeams _cachedRedTeams;

    /// <summary> Initializes a new instance of Connections. </summary>
    /// <param name="apiVersion"> The API version to use for this operation. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
    public virtual Projects.1DP.Connections GetConnectionsClient(string apiVersion = "2025-05-15-preview")
    {
        AI.Projects.1DP.Argument.AssertNotNull(apiVersion, nameof(apiVersion));

        return new Projects.1DP.Connections(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint, apiVersion);
    }

    /// <summary> Initializes a new instance of Evaluations. </summary>
    public virtual Projects.1DP.Evaluations GetEvaluationsClient()
    {
        return Volatile.Read(ref _cachedEvaluations) ?? Interlocked.CompareExchange(ref _cachedEvaluations, new Projects.1DP.Evaluations(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedEvaluations;
    }

    /// <summary> Initializes a new instance of Datasets. </summary>
    public virtual Projects.1DP.Datasets GetDatasetsClient()
    {
        return Volatile.Read(ref _cachedDatasets) ?? Interlocked.CompareExchange(ref _cachedDatasets, new Projects.1DP.Datasets(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedDatasets;
    }

    /// <summary> Initializes a new instance of ServicePatterns. </summary>
    public virtual Projects.1DP.ServicePatterns GetServicePatternsClient()
    {
        return Volatile.Read(ref _cachedServicePatterns) ?? Interlocked.CompareExchange(ref _cachedServicePatterns, new Projects.1DP.ServicePatterns(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedServicePatterns;
    }

    /// <summary> Initializes a new instance of Indexes. </summary>
    public virtual Projects.1DP.Indexes GetIndexesClient()
    {
        return Volatile.Read(ref _cachedIndexes) ?? Interlocked.CompareExchange(ref _cachedIndexes, new Projects.1DP.Indexes(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedIndexes;
    }

    /// <summary> Initializes a new instance of Deployments. </summary>
    public virtual Projects.1DP.Deployments GetDeploymentsClient()
    {
        return Volatile.Read(ref _cachedDeployments) ?? Interlocked.CompareExchange(ref _cachedDeployments, new Projects.1DP.Deployments(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedDeployments;
    }

    /// <summary> Initializes a new instance of EvaluationResults. </summary>
    public virtual Projects.1DP.EvaluationResults GetEvaluationResultsClient()
    {
        return Volatile.Read(ref _cachedEvaluationResults) ?? Interlocked.CompareExchange(ref _cachedEvaluationResults, new Projects.1DP.EvaluationResults(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedEvaluationResults;
    }

    /// <summary> Initializes a new instance of RedTeams. </summary>
    public virtual Projects.1DP.RedTeams GetRedTeamsClient()
    {
        return Volatile.Read(ref _cachedRedTeams) ?? Interlocked.CompareExchange(ref _cachedRedTeams, new Projects.1DP.RedTeams(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedRedTeams;
    }
}
}
