// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.Projects.1DP
{
internal partial class UnknownIndex : IUtf8JsonSerializable, System.ClientModel.Primitives.IJsonModel<Projects.1DP.Index>
{
    void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((System.ClientModel.Primitives.IJsonModel < AI.Projects.1DP.Index>)this).Write(writer, Projects.1DP.ModelSerializationExtensions.WireOptions);

    void System.ClientModel.Primitives.IJsonModel<global::Projects.1DP.Index>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        writer.WriteStartObject();
        this.JsonModelWriteCore(writer, options);
        writer.WriteEndObject();
    }

    /// <param name="writer"> The JSON writer. </param>
    /// <param name="options"> The client options for reading and writing models. </param>
    protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel < AI.Projects.1DP.Index >)this).GetFormatFromOptions(options) : options.Format;
        if (format != "J")
        {
            throw new FormatException($"The model {nameof(AI.Projects.1DP.Index)} does not support writing '{format}' format.");
        }

        base.JsonModelWriteCore(writer, options);
    }

    Projects.1DP.Index System.ClientModel.Primitives.IJsonModel<global::Projects.1DP.Index>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel < AI.Projects.1DP.Index >)this).GetFormatFromOptions(options) : options.Format;
        if (format != "J")
        {
            throw new FormatException($"The model {nameof(AI.Projects.1DP.Index)} does not support reading '{format}' format.");
        }

        using JsonDocument document = JsonDocument.ParseValue(ref reader);
        return AI.Projects.1DP.Index.DeserializeIndex(document.RootElement, options);
    }

    internal static Projects.1DP.UnknownIndex DeserializeUnknownIndex(JsonElement element, ModelReaderWriterOptions options = null)
    {
        options ??= AI.Projects.1DP.ModelSerializationExtensions.WireOptions;

        if (element.ValueKind == JsonValueKind.Null)
        {
            return null;
        }
        AI.Projects.1DP.IndexType type = "Unknown";
        string id = default;
        string name = default;
        string version = default;
        string description = default;
        IDictionary<string, string> tags = default;
        IDictionary<string, BinaryData> serializedAdditionalRawData = default;
        Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
        foreach (var property in element.EnumerateObject())
        {
            if (property.NameEquals("type"u8))
            {
                type = new Projects.1DP.IndexType(property.Value.GetString());
                continue;
            }
            if (property.NameEquals("id"u8))
            {
                id = property.Value.GetString();
                continue;
            }
            if (property.NameEquals("name"u8))
            {
                name = property.Value.GetString();
                continue;
            }
            if (property.NameEquals("version"u8))
            {
                version = property.Value.GetString();
                continue;
            }
            if (property.NameEquals("description"u8))
            {
                description = property.Value.GetString();
                continue;
            }
            if (property.NameEquals("tags"u8))
            {
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    continue;
                }
                Dictionary<string, string> dictionary = new Dictionary<string, string>();
                foreach (var property0 in property.Value.EnumerateObject())
                {
                    dictionary.Add(property0.Name, property0.Value.GetString());
                }
                tags = dictionary;
                continue;
            }
            if (options.Format != "W")
            {
                rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
        }
        serializedAdditionalRawData = rawDataDictionary;
        return new Projects.1DP.UnknownIndex(
            type,
            id,
            name,
            version,
            description,
            (tags ?? new Projects.1DP.ChangeTrackingDictionary<string, string>()),
	serializedAdditionalRawData);
    }

    BinaryData System.ClientModel.Primitives.IPersistableModel<global::Projects.1DP.Index>.Write(ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel < AI.Projects.1DP.Index >)this).GetFormatFromOptions(options) : options.Format;

        switch (format)
        {
            case "J":
                return ModelReaderWriter.Write(this, options);
            default:
                throw new FormatException($"The model {nameof(AI.Projects.1DP.Index)} does not support writing '{options.Format}' format.");
        }
    }

    Projects.1DP.Index System.ClientModel.Primitives.IPersistableModel<global::Projects.1DP.Index>.Create(BinaryData data, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? ((System.ClientModel.Primitives.IPersistableModel < AI.Projects.1DP.Index >)this).GetFormatFromOptions(options) : options.Format;

        switch (format)
        {
            case "J":
                {
                    using JsonDocument document = JsonDocument.Parse(data, AI.Projects.1DP.ModelSerializationExtensions.JsonDocumentOptions);
                    return AI.Projects.1DP.Index.DeserializeIndex(document.RootElement, options);
                }
            default:
                throw new FormatException($"The model {nameof(AI.Projects.1DP.Index)} does not support reading '{options.Format}' format.");
        }
    }

    string System.ClientModel.Primitives.IPersistableModel<global::Projects.1DP.Index>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

    /// <summary> Deserializes the model from a raw response. </summary>
    /// <param name="response"> The response to deserialize the model from. </param>
    internal static new Projects.1DP.UnknownIndex FromResponse(Response response)
    {
        using var document = JsonDocument.Parse(response.Content, AI.Projects.1DP.ModelSerializationExtensions.JsonDocumentOptions);
        return AI.Projects.1DP.UnknownIndex.DeserializeUnknownIndex(document.RootElement);
    }

    /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
    internal override RequestContent ToRequestContent()
    {
        var content = new Projects.1DP.Utf8JsonRequestContent();
        content.JsonWriter.WriteObjectValue < AI.Projects.1DP.Index > (this, AI.Projects.1DP.ModelSerializationExtensions.WireOptions);
        return content;
    }
}
}
