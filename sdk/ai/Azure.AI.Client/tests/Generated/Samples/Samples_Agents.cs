// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.AI.Client.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Client.Samples
{
    public partial class Samples_Agents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "ximnug",
                name = "jvcprwldjyvyleowaaegjo",
                description = "ezxwphblxjky",
                instructions = "ajiwshlwqquziirbphqgqd",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                temperature = 10F,
                top_p = 29F,
                metadata = new
                {
                    key4459 = "jowdzyazieyts",
                },
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "ximnug",
                name = "jvcprwldjyvyleowaaegjo",
                description = "ezxwphblxjky",
                instructions = "ajiwshlwqquziirbphqgqd",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                temperature = 10F,
                top_p = 29F,
                metadata = new
                {
                    key4459 = "jowdzyazieyts",
                },
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.CreateAgent("ximnug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("ximnug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "ximnug",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "ximnug",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.CreateAgent("ximnug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("ximnug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetAgent("k", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetAgentAsync("k", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.GetAgent("k");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.GetAgentAsync("k");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetAgent("fysaemqflkjbgasltosvlehacq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetAgentAsync("fysaemqflkjbgasltosvlehacq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.GetAgent("fysaemqflkjbgasltosvlehacq");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.GetAgentAsync("fysaemqflkjbgasltosvlehacq");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "nfjkfakxuzxtxmnglerfhwk",
                name = "awuzlr",
                description = "t",
                instructions = "bdzydyrwfijjoxzslhzqzjvkzmxbrb",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                temperature = 2F,
                top_p = 13F,
                metadata = new
                {
                    key700 = "mailuuwatjdzopa",
                },
            });
            Response response = client.UpdateAgent("revxagdokhgrr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "nfjkfakxuzxtxmnglerfhwk",
                name = "awuzlr",
                description = "t",
                instructions = "bdzydyrwfijjoxzslhzqzjvkzmxbrb",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                temperature = 2F,
                top_p = 13F,
                metadata = new
                {
                    key700 = "mailuuwatjdzopa",
                },
            });
            Response response = await client.UpdateAgentAsync("revxagdokhgrr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.UpdateAgent("revxagdokhgrr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.UpdateAgentAsync("revxagdokhgrr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAgent("revxagdokhgrr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAgentAsync("revxagdokhgrr", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.UpdateAgent("revxagdokhgrr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.UpdateAgentAsync("revxagdokhgrr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "cvyvswmuibckty",
attachments = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
metadata = new
{
key4388 = "mttjnekxgmmewtno",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                metadata = new
                {
                    key791 = "onpqfrxnrafjzo",
                },
            });
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "cvyvswmuibckty",
attachments = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
metadata = new
{
key4388 = "mttjnekxgmmewtno",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                metadata = new
                {
                    key791 = "onpqfrxnrafjzo",
                },
            });
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetThread("ofacd", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetThreadAsync("ofacd", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.GetThread("ofacd");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.GetThreadAsync("ofacd");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetThread("tsfbehet", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetThreadAsync("tsfbehet", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.GetThread("tsfbehet");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.GetThreadAsync("tsfbehet");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                metadata = new
                {
                    key9373 = "nbcxoehedpbecojwvloonycrsixqy",
                },
            });
            Response response = client.UpdateThread("bhpkkgczhcgxcho", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                metadata = new
                {
                    key9373 = "nbcxoehedpbecojwvloonycrsixqy",
                },
            });
            Response response = await client.UpdateThreadAsync("bhpkkgczhcgxcho", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.UpdateThread("bhpkkgczhcgxcho");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.UpdateThreadAsync("bhpkkgczhcgxcho");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateThread("bhpkkgczhcgxcho", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateThreadAsync("bhpkkgczhcgxcho", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.UpdateThread("bhpkkgczhcgxcho");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.UpdateThreadAsync("bhpkkgczhcgxcho");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "cvyvswmuibckty",
                attachments = new object[]
            {
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
            },
                metadata = new
                {
                    key4388 = "mttjnekxgmmewtno",
                },
            });
            Response response = client.CreateMessage("fjijrnwaopujhztilwqfayml", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "cvyvswmuibckty",
                attachments = new object[]
            {
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
            },
                metadata = new
                {
                    key4388 = "mttjnekxgmmewtno",
                },
            });
            Response response = await client.CreateMessageAsync("fjijrnwaopujhztilwqfayml", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.CreateMessage("fjijrnwaopujhztilwqfayml", MessageRole.User, "cvyvswmuibckty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.CreateMessageAsync("fjijrnwaopujhztilwqfayml", MessageRole.User, "cvyvswmuibckty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "cvyvswmuibckty",
            });
            Response response = client.CreateMessage("ctavbfdieyjbdxrztxpozuwuhmvake", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "cvyvswmuibckty",
            });
            Response response = await client.CreateMessageAsync("ctavbfdieyjbdxrztxpozuwuhmvake", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.CreateMessage("ctavbfdieyjbdxrztxpozuwuhmvake", MessageRole.User, "cvyvswmuibckty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.CreateMessageAsync("ctavbfdieyjbdxrztxpozuwuhmvake", MessageRole.User, "cvyvswmuibckty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetMessage("r", "zfgkxn", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetMessageAsync("r", "zfgkxn", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.GetMessage("r", "zfgkxn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.GetMessageAsync("r", "zfgkxn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetMessage("tgadelnptfvfq", "on", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetMessageAsync("tgadelnptfvfq", "on", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.GetMessage("tgadelnptfvfq", "on");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.GetMessageAsync("tgadelnptfvfq", "on");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key833 = "rvgofkhcn",
                },
            });
            Response response = client.UpdateMessage("qptzmzimfo", "irklexg", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key833 = "rvgofkhcn",
                },
            });
            Response response = await client.UpdateMessageAsync("qptzmzimfo", "irklexg", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.UpdateMessage("qptzmzimfo", "irklexg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.UpdateMessageAsync("qptzmzimfo", "irklexg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateMessage("gqicivgmgueowxzjmi", "axrabaqm", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateMessageAsync("gqicivgmgueowxzjmi", "axrabaqm", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.UpdateMessage("gqicivgmgueowxzjmi", "axrabaqm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.UpdateMessageAsync("gqicivgmgueowxzjmi", "axrabaqm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "y",
                model = "defacxyrfjrjzmlktnqmidelazn",
                instructions = "lhauztadjbldsrquotaryjfdaqckfc",
                additional_instructions = "emxqyzpksdweudxiazpbqurbp",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "otbvqbedal",
["object"] = "thread.message",
["created_at"] = 6,
["thread_id"] = "mbykpl",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 11,
["incomplete_at"] = 1,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "xipggylerg",
["run_id"] = "rofvupudvkrvn",
["attachments"] = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4293 = "tqimnzgfeqpdrzwkzpkkwgbs",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 4F,
                top_p = 15F,
                max_prompt_tokens = 21,
                max_completion_tokens = 7,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 22,
                },
                metadata = new
                {
                    key399 = "mkspxzepbbdmenkwxwkcneze",
                },
            });
            Response response = client.CreateRun("vvhllsilqtjkgp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "y",
                model = "defacxyrfjrjzmlktnqmidelazn",
                instructions = "lhauztadjbldsrquotaryjfdaqckfc",
                additional_instructions = "emxqyzpksdweudxiazpbqurbp",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "otbvqbedal",
["object"] = "thread.message",
["created_at"] = 6,
["thread_id"] = "mbykpl",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 11,
["incomplete_at"] = 1,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "xipggylerg",
["run_id"] = "rofvupudvkrvn",
["attachments"] = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4293 = "tqimnzgfeqpdrzwkzpkkwgbs",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 4F,
                top_p = 15F,
                max_prompt_tokens = 21,
                max_completion_tokens = 7,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 22,
                },
                metadata = new
                {
                    key399 = "mkspxzepbbdmenkwxwkcneze",
                },
            });
            Response response = await client.CreateRunAsync("vvhllsilqtjkgp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateRun("vvhllsilqtjkgp", "y");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateRunAsync("vvhllsilqtjkgp", "y");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRun("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunAsync("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.GetRun("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.GetRunAsync("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5079 = "scbmgzdiuxvahelszuwmakhoi",
                },
            });
            Response response = client.UpdateRun("fgadoftudzxnjxwnaaigonurdwn", "gdhbn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key5079 = "scbmgzdiuxvahelszuwmakhoi",
                },
            });
            Response response = await client.UpdateRunAsync("fgadoftudzxnjxwnaaigonurdwn", "gdhbn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.UpdateRun("fgadoftudzxnjxwnaaigonurdwn", "gdhbn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.UpdateRunAsync("fgadoftudzxnjxwnaaigonurdwn", "gdhbn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "lytjdh",
output = "skwwaymbqmkypuootigmksqtxibknl",
}
            },
                stream = true,
            });
            Response response = client.SubmitToolOutputsToRun("ptykzylmkyvsons", "mdp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "lytjdh",
output = "skwwaymbqmkypuootigmksqtxibknl",
}
            },
                stream = true,
            });
            Response response = await client.SubmitToolOutputsToRunAsync("ptykzylmkyvsons", "mdp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.SubmitToolOutputsToRun("ptykzylmkyvsons", "mdp", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "lytjdh",
Output = "skwwaymbqmkypuootigmksqtxibknl",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("ptykzylmkyvsons", "mdp", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "lytjdh",
Output = "skwwaymbqmkypuootigmksqtxibknl",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelRun("qxaxcdilw", "pnmxizjncmidzhoz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelRunAsync("qxaxcdilw", "pnmxizjncmidzhoz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CancelRun("qxaxcdilw", "pnmxizjncmidzhoz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CancelRunAsync("qxaxcdilw", "pnmxizjncmidzhoz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "cknhphzepfh",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "cvyvswmuibckty",
attachments = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
metadata = new
{
key4388 = "mttjnekxgmmewtno",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                        },
                        bing_search = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        microsoft_fabric = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        sharepoint = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key791 = "onpqfrxnrafjzo",
                    },
                },
                model = "rssodmhcbengnbj",
                instructions = "ggvmyg",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"pyhnnsigjloaofaztgiygxqlzmlm"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                stream = true,
                temperature = 23F,
                top_p = 19F,
                max_prompt_tokens = 16,
                max_completion_tokens = 20,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 15,
                },
                metadata = new
                {
                    key4511 = "awqocknoqijsjhsuhzenku",
                },
            });
            Response response = client.CreateThreadAndRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "cknhphzepfh",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "cvyvswmuibckty",
attachments = new object[]
{
new
{
file_id = "qvaflfmlh",
tools = new object[]
{
null
},
}
},
metadata = new
{
key4388 = "mttjnekxgmmewtno",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"xfjluezo",
"xfjluezo",
"xfjluezo",
"xfjluezo"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"tkrmfcvsrjcmfglzh"
            },
                        },
                        bing_search = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        microsoft_fabric = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        sharepoint = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key791 = "onpqfrxnrafjzo",
                    },
                },
                model = "rssodmhcbengnbj",
                instructions = "ggvmyg",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar",
"ghoncpszeonnurisar"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"pyhnnsigjloaofaztgiygxqlzmlm"
            },
                    },
                    bing_search = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "vogvghmhcyitloax",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
index_name = "ydknycpsxzjssqbodi",
}
            },
                    },
                },
                stream = true,
                temperature = 23F,
                top_p = 19F,
                max_prompt_tokens = 16,
                max_completion_tokens = 20,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 15,
                },
                metadata = new
                {
                    key4511 = "awqocknoqijsjhsuhzenku",
                },
            });
            Response response = await client.CreateThreadAndRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateThreadAndRun("cknhphzepfh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateThreadAndRunAsync("cknhphzepfh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRunStep("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunStepAsync("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = client.GetRunStep("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = await client.GetRunStepAsync("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRunStep("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunStepAsync("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = client.GetRunStep("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = await client.GetRunStepAsync("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = client.UploadFile(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = await client.UploadFileAsync(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.UploadFile(null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.UploadFileAsync(null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFile("ufojngfeua", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileAsync("ufojngfeua", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.GetFile("ufojngfeua");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.GetFileAsync("ufojngfeua");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFile("peavyzbnfikv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileAsync("peavyzbnfikv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.GetFile("peavyzbnfikv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.GetFileAsync("peavyzbnfikv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFileContent("exhjkpahqmgcxkomhei", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileContentAsync("exhjkpahqmgcxkomhei", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = client.GetFileContent("exhjkpahqmgcxkomhei");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = await client.GetFileContentAsync("exhjkpahqmgcxkomhei");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFileContent("zlhbjpdeckqboklqmhimxhjxcrx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileContentAsync("zlhbjpdeckqboklqmhimxhjxcrx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = client.GetFileContent("zlhbjpdeckqboklqmhimxhjxcrx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = await client.GetFileContentAsync("zlhbjpdeckqboklqmhimxhjxcrx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStores(29, "asc", "plijv", "fzavpmcwmeztscxtpvtcexivojnra", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoresAsync(29, "asc", "plijv", "fzavpmcwmeztscxtpvtcexivojnra", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStores(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue"
            },
                name = "zbexkhlhiuqcaofjtt",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 11,
                },
                metadata = new
                {
                    key2352 = "avynvyphzaltjgixhhjisgb",
                },
            });
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue",
"ue"
            },
                name = "zbexkhlhiuqcaofjtt",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 11,
                },
                metadata = new
                {
                    key2352 = "avynvyphzaltjgixhhjisgb",
                },
            });
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStore("g", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreAsync("g", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.GetVectorStore("g");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.GetVectorStoreAsync("g");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStore("fpjjowckiubhpztlcqbfhfa", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreAsync("fpjjowckiubhpztlcqbfhfa", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.GetVectorStore("fpjjowckiubhpztlcqbfhfa");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.GetVectorStoreAsync("fpjjowckiubhpztlcqbfhfa");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "wbmiloitvjvjvjwilxafqnlfvv",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 63,
                },
                metadata = new
                {
                    key444 = "unreilooopnblxmsrpcsl",
                },
            });
            Response response = client.ModifyVectorStore("mxsxmccsxgcwaxqgtrweidhsmz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "wbmiloitvjvjvjwilxafqnlfvv",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 63,
                },
                metadata = new
                {
                    key444 = "unreilooopnblxmsrpcsl",
                },
            });
            Response response = await client.ModifyVectorStoreAsync("mxsxmccsxgcwaxqgtrweidhsmz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.ModifyVectorStore("mxsxmccsxgcwaxqgtrweidhsmz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("mxsxmccsxgcwaxqgtrweidhsmz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("ilwuelhsqktqisvpoekoxhtptzhur", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("ilwuelhsqktqisvpoekoxhtptzhur", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.ModifyVectorStore("ilwuelhsqktqisvpoekoxhtptzhur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("ilwuelhsqktqisvpoekoxhtptzhur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStore("vwpjybjeilzplivgay", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreAsync("vwpjybjeilzplivgay", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("vwpjybjeilzplivgay");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("vwpjybjeilzplivgay");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStore("harydbxi", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreAsync("harydbxi", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("harydbxi");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("harydbxi");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFiles("vhcgiqtynclzstwyttpdoakkpdzvow", "in_progress", 8, "asc", "cbgnuv", "yzbru", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFilesAsync("vhcgiqtynclzstwyttpdoakkpdzvow", "in_progress", 8, "asc", "cbgnuv", "yzbru", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("vhcgiqtynclzstwyttpdoakkpdzvow");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("vhcgiqtynclzstwyttpdoakkpdzvow");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFiles("tdtpz", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFilesAsync("tdtpz", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("tdtpz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("tdtpz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "pigrjhpteqmunmnqjpzgedr",
            });
            Response response = client.CreateVectorStoreFile("zunlhdfkhkpbvxobpxvlxjz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "pigrjhpteqmunmnqjpzgedr",
            });
            Response response = await client.CreateVectorStoreFileAsync("zunlhdfkhkpbvxobpxvlxjz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("zunlhdfkhkpbvxobpxvlxjz", "pigrjhpteqmunmnqjpzgedr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("zunlhdfkhkpbvxobpxvlxjz", "pigrjhpteqmunmnqjpzgedr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFile("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileAsync("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.GetVectorStoreFile("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFile("wieyrxliksmh", "lt", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileAsync("wieyrxliksmh", "lt", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.GetVectorStoreFile("wieyrxliksmh", "lt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("wieyrxliksmh", "lt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStoreFile("qdzd", "c", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreFileAsync("qdzd", "c", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("qdzd", "c");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("qdzd", "c");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStoreFile("znosndunewbffykrovuwlk", "vkbgby", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreFileAsync("znosndunewbffykrovuwlk", "vkbgby", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("znosndunewbffykrovuwlk", "vkbgby");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("znosndunewbffykrovuwlk", "vkbgby");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf"
            },
            });
            Response response = client.CreateVectorStoreFileBatch("mxemjjytjfucwueylxoe", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf",
"keuygleycdqjtvcrjlcf"
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("mxemjjytjfucwueylxoe", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("mxemjjytjfucwueylxoe", new string[] { "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("mxemjjytjfucwueylxoe", new string[] { "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq"
            },
            });
            Response response = client.CreateVectorStoreFileBatch("obzxcqqbxndczmylyaestuak", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq",
"oekexmyuuq"
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("obzxcqqbxndczmylyaestuak", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("obzxcqqbxndczmylyaestuak", new string[] { "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("obzxcqqbxndczmylyaestuak", new string[] { "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatch("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchAsync("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatch("axyxovstvdhq", "u", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchAsync("axyxovstvdhq", "u", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("axyxovstvdhq", "u");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("axyxovstvdhq", "u");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelVectorStoreFileBatch("hxwzwvugywkyvkksball", "p", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelVectorStoreFileBatchAsync("hxwzwvugywkyvkksball", "p", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("hxwzwvugywkyvkksball", "p");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("hxwzwvugywkyvkksball", "p");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelVectorStoreFileBatch("he", "rkbrzvkohmyfy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelVectorStoreFileBatchAsync("he", "rkbrzvkohmyfy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("he", "rkbrzvkohmyfy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("he", "rkbrzvkohmyfy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatchFiles("vertrqm", "aiusuqqfxha", "in_progress", 25, "asc", "tphmbicpesfpdriwaryc", "t", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchFilesAsync("vertrqm", "aiusuqqfxha", "in_progress", 25, "asc", "tphmbicpesfpdriwaryc", "t", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("vertrqm", "aiusuqqfxha");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("vertrqm", "aiusuqqfxha");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatchFiles("wbi", "jxvaqasaclquvpqiajfe", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchFilesAsync("wbi", "jxvaqasaclquvpqiajfe", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("wbi", "jxvaqasaclquvpqiajfe");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("wbi", "jxvaqasaclquvpqiajfe");
        }
    }
}
