// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Client.Samples
{
    public partial class Samples_Agents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "thruucsorxrfwc",
                name = "vyqwptlstznjc",
                description = "tfcggattnkqwwvtxcs",
                instructions = "bvaiybqrkflc",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                temperature = 2F,
                top_p = 10F,
                metadata = new
                {
                    key542 = "bwysnvpyumdtjdk",
                },
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "thruucsorxrfwc",
                name = "vyqwptlstznjc",
                description = "tfcggattnkqwwvtxcs",
                instructions = "bvaiybqrkflc",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                temperature = 2F,
                top_p = 10F,
                metadata = new
                {
                    key542 = "bwysnvpyumdtjdk",
                },
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.CreateAgent("thruucsorxrfwc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("thruucsorxrfwc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "thruucsorxrfwc",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "thruucsorxrfwc",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.CreateAgent("thruucsorxrfwc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AgentsCreateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("thruucsorxrfwc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetAgent("kzpsutvzpgzhixzjuoctb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetAgentAsync("kzpsutvzpgzhixzjuoctb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.GetAgent("kzpsutvzpgzhixzjuoctb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.GetAgentAsync("kzpsutvzpgzhixzjuoctb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetAgent("bcgzitbbxperca", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetAgentAsync("bcgzitbbxperca", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.GetAgent("bcgzitbbxperca");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AgentsGetAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.GetAgentAsync("bcgzitbbxperca");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "lrgkxewuevesjdwvktxatrn",
                name = "oga",
                description = "ufx",
                instructions = "ovvorhelxeldyqyrduhkoenxarxa",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                temperature = 18F,
                top_p = 28F,
                metadata = new
                {
                    key7285 = "jmznptvovpu",
                },
            });
            Response response = client.UpdateAgent("yswgzhfulrty", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                model = "lrgkxewuevesjdwvktxatrn",
                name = "oga",
                description = "ufx",
                instructions = "ovvorhelxeldyqyrduhkoenxarxa",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                temperature = 18F,
                top_p = 28F,
                metadata = new
                {
                    key7285 = "jmznptvovpu",
                },
            });
            Response response = await client.UpdateAgentAsync("yswgzhfulrty", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.UpdateAgent("yswgzhfulrty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.UpdateAgentAsync("yswgzhfulrty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAgent("yswgzhfulrty", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAgentAsync("yswgzhfulrty", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("temperature").ToString());
            Console.WriteLine(result.GetProperty("top_p").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = client.UpdateAgent("yswgzhfulrty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AgentsUpdateAgentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<Agent> response = await client.UpdateAgentAsync("yswgzhfulrty");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "ur",
attachments = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
metadata = new
{
key6045 = "ybc",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                metadata = new
                {
                    key1026 = "izfvhsneonftvdraqlqvsyhqax",
                },
            });
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = "ur",
attachments = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
metadata = new
{
key6045 = "ybc",
},
}
            },
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                metadata = new
                {
                    key1026 = "izfvhsneonftvdraqlqvsyhqax",
                },
            });
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateThread(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateThreadAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.CreateThread();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThread_AgentsCreateThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.CreateThreadAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetThread("pmkewfzpwpesemuoinkdnkwqtsxnkm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetThreadAsync("pmkewfzpwpesemuoinkdnkwqtsxnkm", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.GetThread("pmkewfzpwpesemuoinkdnkwqtsxnkm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.GetThreadAsync("pmkewfzpwpesemuoinkdnkwqtsxnkm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetThread("jjc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetThreadAsync("jjc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetThread_AgentsGetThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.GetThread("jjc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetThread_AgentsGetThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.GetThreadAsync("jjc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                metadata = new
                {
                    key2066 = "krvvdegxtcho",
                },
            });
            Response response = client.UpdateThread("usdgvyfcuwaxpw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                metadata = new
                {
                    key2066 = "krvvdegxtcho",
                },
            });
            Response response = await client.UpdateThreadAsync("usdgvyfcuwaxpw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.UpdateThread("usdgvyfcuwaxpw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.UpdateThreadAsync("usdgvyfcuwaxpw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateThread("usdgvyfcuwaxpw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateThreadAsync("usdgvyfcuwaxpw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("tool_resources").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = client.UpdateThread("usdgvyfcuwaxpw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateThread_AgentsUpdateThreadMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<AgentThread> response = await client.UpdateThreadAsync("usdgvyfcuwaxpw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "ur",
                attachments = new object[]
            {
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
            },
                metadata = new
                {
                    key6045 = "ybc",
                },
            });
            Response response = client.CreateMessage("fkjtcwoeopiqymgichizgoprrxcz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "ur",
                attachments = new object[]
            {
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
            },
                metadata = new
                {
                    key6045 = "ybc",
                },
            });
            Response response = await client.CreateMessageAsync("fkjtcwoeopiqymgichizgoprrxcz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.CreateMessage("fkjtcwoeopiqymgichizgoprrxcz", MessageRole.User, "ur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.CreateMessageAsync("fkjtcwoeopiqymgichizgoprrxcz", MessageRole.User, "ur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "ur",
            });
            Response response = client.CreateMessage("tbvzbivqguuxweo", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                role = "user",
                content = "ur",
            });
            Response response = await client.CreateMessageAsync("tbvzbivqguuxweo", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.CreateMessage("tbvzbivqguuxweo", MessageRole.User, "ur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateMessage_AgentsCreateMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.CreateMessageAsync("tbvzbivqguuxweo", MessageRole.User, "ur");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetMessage("bduuygx", "etsywyesoswlqtyuufssbuktcodgp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetMessageAsync("bduuygx", "etsywyesoswlqtyuufssbuktcodgp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.GetMessage("bduuygx", "etsywyesoswlqtyuufssbuktcodgp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.GetMessageAsync("bduuygx", "etsywyesoswlqtyuufssbuktcodgp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetMessage("sy", "psebhanklaoopwiwu", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetMessageAsync("sy", "psebhanklaoopwiwu", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.GetMessage("sy", "psebhanklaoopwiwu");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetMessage_AgentsGetMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.GetMessageAsync("sy", "psebhanklaoopwiwu");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key2634 = "loegg",
                },
            });
            Response response = client.UpdateMessage("zfhomevxqxia", "vgmrljinfqieousdtyravzmzddrak", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key2634 = "loegg",
                },
            });
            Response response = await client.UpdateMessageAsync("zfhomevxqxia", "vgmrljinfqieousdtyravzmzddrak", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.UpdateMessage("zfhomevxqxia", "vgmrljinfqieousdtyravzmzddrak");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.UpdateMessageAsync("zfhomevxqxia", "vgmrljinfqieousdtyravzmzddrak");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateMessage("grgwksslopoyxzdvuxz", "na", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateMessageAsync("grgwksslopoyxzdvuxz", "na", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_at").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = client.UpdateMessage("grgwksslopoyxzdvuxz", "na");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateMessage_AgentsUpdateMessageMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadMessage> response = await client.UpdateMessageAsync("grgwksslopoyxzdvuxz", "na");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "vnqnpyneclx",
                model = "h",
                instructions = "ruhhlkit",
                additional_instructions = "bakxnrgnivgchytugbxap",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "pzz",
["object"] = "thread.message",
["created_at"] = 18,
["thread_id"] = "ajwsqwpybxwbloybaehobakv",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 6,
["incomplete_at"] = 22,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "i",
["run_id"] = "sgnblowigoplcjbtfkwzaogdq",
["attachments"] = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4571 = "pknsnk",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 2F,
                top_p = 27F,
                max_prompt_tokens = 11,
                max_completion_tokens = 22,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 29,
                },
                metadata = new
                {
                    key8034 = "mdscvsqhhq",
                },
            });
            Response response = client.CreateRun("cqbv", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "vnqnpyneclx",
                model = "h",
                instructions = "ruhhlkit",
                additional_instructions = "bakxnrgnivgchytugbxap",
                additional_messages = new object[]
            {
new Dictionary<string, object>
{
["id"] = "pzz",
["object"] = "thread.message",
["created_at"] = 18,
["thread_id"] = "ajwsqwpybxwbloybaehobakv",
["status"] = "in_progress",
["incomplete_details"] = new
{
reason = "content_filter",
},
["completed_at"] = 6,
["incomplete_at"] = 22,
["role"] = "user",
["content"] = Array.Empty<object>(),
["assistant_id"] = "i",
["run_id"] = "sgnblowigoplcjbtfkwzaogdq",
["attachments"] = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
["metadata"] = new
{
key4571 = "pknsnk",
}
}
            },
                tools = Array.Empty<object>(),
                stream = true,
                temperature = 2F,
                top_p = 27F,
                max_prompt_tokens = 11,
                max_completion_tokens = 22,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 29,
                },
                metadata = new
                {
                    key8034 = "mdscvsqhhq",
                },
            });
            Response response = await client.CreateRunAsync("cqbv", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateRun("cqbv", "vnqnpyneclx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateRun_AgentsCreateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateRunAsync("cqbv", "vnqnpyneclx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRun("bropa", "ryzfxluee", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunAsync("bropa", "ryzfxluee", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRun_AgentsGetRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.GetRun("bropa", "ryzfxluee");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRun_AgentsGetRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.GetRunAsync("bropa", "ryzfxluee");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key1132 = "sthcmmiicrv",
                },
            });
            Response response = client.UpdateRun("ayrllus", "faouhbotzpaemwhetp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    key1132 = "sthcmmiicrv",
                },
            });
            Response response = await client.UpdateRunAsync("ayrllus", "faouhbotzpaemwhetp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.UpdateRun("ayrllus", "faouhbotzpaemwhetp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateRun_AgentsUpdateRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.UpdateRunAsync("ayrllus", "faouhbotzpaemwhetp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "yfixpjllwwlm",
output = "rwzkdoplixcufmdhvfnninw",
}
            },
                stream = true,
            });
            Response response = client.SubmitToolOutputsToRun("ejfkquufqcghwuxsjpigzpfq", "qabwssslmeiyaovsff", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                tool_outputs = new object[]
            {
new
{
tool_call_id = "yfixpjllwwlm",
output = "rwzkdoplixcufmdhvfnninw",
}
            },
                stream = true,
            });
            Response response = await client.SubmitToolOutputsToRunAsync("ejfkquufqcghwuxsjpigzpfq", "qabwssslmeiyaovsff", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.SubmitToolOutputsToRun("ejfkquufqcghwuxsjpigzpfq", "qabwssslmeiyaovsff", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "yfixpjllwwlm",
Output = "rwzkdoplixcufmdhvfnninw",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_SubmitToolOutputsToRun_AgentsSubmitToolOutputsToRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("ejfkquufqcghwuxsjpigzpfq", "qabwssslmeiyaovsff", new ToolOutput[]
            {
new ToolOutput
{
ToolCallId = "yfixpjllwwlm",
Output = "rwzkdoplixcufmdhvfnninw",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelRun("ocaaexzkqtltgeddmxoyj", "zgzcqnfeqwqnjhcqatlnastzhzzy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelRunAsync("ocaaexzkqtltgeddmxoyj", "zgzcqnfeqwqnjhcqatlnastzhzzy", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CancelRun("ocaaexzkqtltgeddmxoyj", "zgzcqnfeqwqnjhcqatlnastzhzzy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelRun_AgentsCancelRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CancelRunAsync("ocaaexzkqtltgeddmxoyj", "zgzcqnfeqwqnjhcqatlnastzhzzy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "fegjgu",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "ur",
attachments = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
metadata = new
{
key6045 = "ybc",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                        },
                        bing_grounding = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        microsoft_fabric = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        sharepoint = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key1026 = "izfvhsneonftvdraqlqvsyhqax",
                    },
                },
                model = "eejibsxjwcghcrk",
                instructions = "xtzxpnydztnwyozqrabeer",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"serkhpbssabegswnqjdkc"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                stream = true,
                temperature = 22F,
                top_p = 25F,
                max_prompt_tokens = 6,
                max_completion_tokens = 14,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 11,
                },
                metadata = new
                {
                    key7809 = "kfemrnsvsipznpiadqsdxtz",
                },
            });
            Response response = client.CreateThreadAndRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                assistant_id = "fegjgu",
                thread = new
                {
                    messages = new object[]
            {
new
{
role = "user",
content = "ur",
attachments = new object[]
{
new
{
file_id = "ymxjxuecmgylyytgseltozkheo",
tools = new object[]
{
null
},
}
},
metadata = new
{
key6045 = "ybc",
},
}
            },
                    tool_resources = new
                    {
                        code_interpreter = new
                        {
                            file_ids = new object[]
            {
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye",
"cclazeyye"
            },
                        },
                        file_search = new
                        {
                            vector_store_ids = new object[]
            {
"tzkmmungqqak"
            },
                        },
                        bing_grounding = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        microsoft_fabric = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        sharepoint = new
                        {
                            connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                        },
                        azure_ai_search = new
                        {
                            indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                        },
                    },
                    metadata = new
                    {
                        key1026 = "izfvhsneonftvdraqlqvsyhqax",
                    },
                },
                model = "eejibsxjwcghcrk",
                instructions = "xtzxpnydztnwyozqrabeer",
                tools = Array.Empty<object>(),
                tool_resources = new
                {
                    code_interpreter = new
                    {
                        file_ids = new object[]
            {
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx",
"ufhxvhuhdqxtvobbx"
            },
                    },
                    file_search = new
                    {
                        vector_store_ids = new object[]
            {
"serkhpbssabegswnqjdkc"
            },
                    },
                    bing_grounding = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    microsoft_fabric = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    sharepoint = new
                    {
                        connections = new object[]
            {
new
{
connection_id = "m",
}
            },
                    },
                    azure_ai_search = new
                    {
                        indexes = new object[]
            {
new
{
index_connection_id = "qrxfyslswadlfeyiieqiribmf",
index_name = "ujaejclyguwypfonelsby",
}
            },
                    },
                },
                stream = true,
                temperature = 22F,
                top_p = 25F,
                max_prompt_tokens = 6,
                max_completion_tokens = 14,
                truncation_strategy = new
                {
                    type = "auto",
                    last_messages = 11,
                },
                metadata = new
                {
                    key7809 = "kfemrnsvsipznpiadqsdxtz",
                },
            });
            Response response = await client.CreateThreadAndRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("model").ToString());
            Console.WriteLine(result.GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expires_at").ToString());
            Console.WriteLine(result.GetProperty("started_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("incomplete_details").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
            Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
            Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("tool_choice").ToString());
            Console.WriteLine(result.GetProperty("response_format").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = client.CreateThreadAndRun("fegjgu");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateThreadAndRun_AgentsCreateThreadAndRunMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<ThreadRun> response = await client.CreateThreadAndRunAsync("fegjgu");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRunStep("vmbqx", "zpvcenofnzcywgtmdiskwynmdsfhha", "tepgr", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunStepAsync("vmbqx", "zpvcenofnzcywgtmdiskwynmdsfhha", "tepgr", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = client.GetRunStep("vmbqx", "zpvcenofnzcywgtmdiskwynmdsfhha", "tepgr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = await client.GetRunStepAsync("vmbqx", "zpvcenofnzcywgtmdiskwynmdsfhha", "tepgr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetRunStep("anpdjhnluheslvmxydyw", "azgpnrknxxjmkgcbkda", "uxdlrovlhxlvgh", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetRunStepAsync("anpdjhnluheslvmxydyw", "azgpnrknxxjmkgcbkda", "uxdlrovlhxlvgh", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assistant_id").ToString());
            Console.WriteLine(result.GetProperty("thread_id").ToString());
            Console.WriteLine(result.GetProperty("run_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("expired_at").ToString());
            Console.WriteLine(result.GetProperty("completed_at").ToString());
            Console.WriteLine(result.GetProperty("cancelled_at").ToString());
            Console.WriteLine(result.GetProperty("failed_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = client.GetRunStep("anpdjhnluheslvmxydyw", "azgpnrknxxjmkgcbkda", "uxdlrovlhxlvgh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunStep_AgentsGetRunStepMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<RunStep> response = await client.GetRunStepAsync("anpdjhnluheslvmxydyw", "azgpnrknxxjmkgcbkda", "uxdlrovlhxlvgh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = client.UploadFile(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = null;
            Response response = await client.UploadFileAsync(content, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.UploadFile(null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UploadFile_AgentsUploadFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.UploadFileAsync(null, (OpenAIFilePurpose)null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFile("wbdoxcgmamcwliuvrzcng", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileAsync("wbdoxcgmamcwliuvrzcng", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.GetFile("wbdoxcgmamcwliuvrzcng");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.GetFileAsync("wbdoxcgmamcwliuvrzcng");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFile("mvtbxiassyexpnfgzylrz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileAsync("mvtbxiassyexpnfgzylrz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("bytes").ToString());
            Console.WriteLine(result.GetProperty("filename").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("purpose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFile_AgentsGetFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = client.GetFile("mvtbxiassyexpnfgzylrz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFile_AgentsGetFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIFile> response = await client.GetFileAsync("mvtbxiassyexpnfgzylrz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFileContent("txrrxillvoyf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileContentAsync("txrrxillvoyf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = client.GetFileContent("txrrxillvoyf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = await client.GetFileContentAsync("txrrxillvoyf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetFileContent("wddehz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetFileContentAsync("wddehz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("content").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = client.GetFileContent("wddehz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetFileContent_AgentsGetFileContentMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<FileContentResponse> response = await client.GetFileContentAsync("wddehz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStores(1, "asc", "zyyjyysboqtluscrzagt", "shvbrsgkxmokovzjoyazw", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoresAsync(1, "asc", "zyyjyysboqtluscrzagt", "shvbrsgkxmokovzjoyazw", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStores(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStores_AgentsListVectorStoresMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k"
            },
                name = "feoszutn",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 63,
                },
                metadata = new
                {
                    key9608 = "yueqghambezwkadonnazagfzkqgmm",
                },
            });
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k",
"k"
            },
                name = "feoszutn",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 63,
                },
                metadata = new
                {
                    key9608 = "yueqghambezwkadonnazagfzkqgmm",
                },
            });
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStore_AgentsCreateVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStore("xoawwgox", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreAsync("xoawwgox", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.GetVectorStore("xoawwgox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.GetVectorStoreAsync("xoawwgox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStore("ngpvrzhklv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreAsync("ngpvrzhklv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.GetVectorStore("ngpvrzhklv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStore_AgentsGetVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.GetVectorStoreAsync("ngpvrzhklv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "jdbbllohsyzngfncklcexxvrwfzs",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 251,
                },
                metadata = new
                {
                    key7482 = "xdrvvy",
                },
            });
            Response response = client.ModifyVectorStore("urpusksgwgtmcqnblxppt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                name = "jdbbllohsyzngfncklcexxvrwfzs",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 251,
                },
                metadata = new
                {
                    key7482 = "xdrvvy",
                },
            });
            Response response = await client.ModifyVectorStoreAsync("urpusksgwgtmcqnblxppt", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.ModifyVectorStore("urpusksgwgtmcqnblxppt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("urpusksgwgtmcqnblxppt");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("j", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("j", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = client.ModifyVectorStore("j");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_ModifyVectorStore_AgentsModifyVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStore> response = await client.ModifyVectorStoreAsync("j");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStore("gnomkrjahwalv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreAsync("gnomkrjahwalv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("gnomkrjahwalv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("gnomkrjahwalv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStore("ympjthipobplaakfogzqtibwhp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreAsync("ympjthipobplaakfogzqtibwhp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("ympjthipobplaakfogzqtibwhp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStore_AgentsDeleteVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("ympjthipobplaakfogzqtibwhp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFiles("yair", "in_progress", 19, "asc", "uwfoglmnwagbnlzabhbiih", "tyjszbgffswbnlatdtmurvzjn", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFilesAsync("yair", "in_progress", 19, "asc", "uwfoglmnwagbnlzabhbiih", "tyjszbgffswbnlatdtmurvzjn", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("yair");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("yair");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFiles("xddqywnr", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFilesAsync("xddqywnr", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("xddqywnr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFiles_AgentsListVectorStoreFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("xddqywnr");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "ijmpik",
            });
            Response response = client.CreateVectorStoreFile("iormiklrkmqrllprupctrstmy", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "ijmpik",
            });
            Response response = await client.CreateVectorStoreFileAsync("iormiklrkmqrllprupctrstmy", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("iormiklrkmqrllprupctrstmy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFile_AgentsCreateVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("iormiklrkmqrllprupctrstmy");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFile("lulinsobosuzlfumkmqlhvpgw", "hg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileAsync("lulinsobosuzlfumkmqlhvpgw", "hg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.GetVectorStoreFile("lulinsobosuzlfumkmqlhvpgw", "hg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("lulinsobosuzlfumkmqlhvpgw", "hg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFile("pgmgiblhqrmjbyuofpjuwbujylekl", "rorepwngbrkgelpqvgziywreswgvbb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileAsync("pgmgiblhqrmjbyuofpjuwbujylekl", "rorepwngbrkgelpqvgziywreswgvbb", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = client.GetVectorStoreFile("pgmgiblhqrmjbyuofpjuwbujylekl", "rorepwngbrkgelpqvgziywreswgvbb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFile_AgentsGetVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("pgmgiblhqrmjbyuofpjuwbujylekl", "rorepwngbrkgelpqvgziywreswgvbb");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStoreFile("o", "h", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreFileAsync("o", "h", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("o", "h");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("o", "h");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteVectorStoreFile("bzogswmq", "pprqzdxjgtzindokdhyptpdjo", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteVectorStoreFileAsync("bzogswmq", "pprqzdxjgtzindokdhyptpdjo", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deleted").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("bzogswmq", "pprqzdxjgtzindokdhyptpdjo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteVectorStoreFile_AgentsDeleteVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("bzogswmq", "pprqzdxjgtzindokdhyptpdjo");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim"
            },
            });
            Response response = client.CreateVectorStoreFileBatch("fpvagkh", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim",
"crcsim"
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("fpvagkh", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("fpvagkh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("fpvagkh");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw"
            },
            });
            Response response = client.CreateVectorStoreFileBatch("yymhovkoalzxdxkz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw",
"uvw"
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("yymhovkoalzxdxkz", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("yymhovkoalzxdxkz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateVectorStoreFileBatch_AgentsCreateVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("yymhovkoalzxdxkz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatch("mjjvwkwdzsnumnwilcmd", "cxbudppebsouqravrf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchAsync("mjjvwkwdzsnumnwilcmd", "cxbudppebsouqravrf", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("mjjvwkwdzsnumnwilcmd", "cxbudppebsouqravrf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("mjjvwkwdzsnumnwilcmd", "cxbudppebsouqravrf");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatch("jgylqdzusstraxpvavvdqvn", "cdqwlyabmpvxopetzcowaamuyurej", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchAsync("jgylqdzusstraxpvavvdqvn", "cdqwlyabmpvxopetzcowaamuyurej", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("jgylqdzusstraxpvavvdqvn", "cdqwlyabmpvxopetzcowaamuyurej");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatch_AgentsGetVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("jgylqdzusstraxpvavvdqvn", "cdqwlyabmpvxopetzcowaamuyurej");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelVectorStoreFileBatch("qosvoadlooeqgjkisf", "khumc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelVectorStoreFileBatchAsync("qosvoadlooeqgjkisf", "khumc", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("qosvoadlooeqgjkisf", "khumc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("qosvoadlooeqgjkisf", "khumc");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.CancelVectorStoreFileBatch("qjdfcawygbsz", "qkabmreojrvnbtnrolajymusirkg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.CancelVectorStoreFileBatchAsync("qjdfcawygbsz", "qkabmreojrvnbtnrolajymusirkg", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("qjdfcawygbsz", "qkabmreojrvnbtnrolajymusirkg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CancelVectorStoreFileBatch_AgentsCancelVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("qjdfcawygbsz", "qkabmreojrvnbtnrolajymusirkg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatchFiles("htbmrelm", "bctlugkgahep", "in_progress", 24, "asc", "cenhlysndywxegalgd", "ynreyzypizsluktrlq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchFilesAsync("htbmrelm", "bctlugkgahep", "in_progress", 24, "asc", "cenhlysndywxegalgd", "ynreyzypizsluktrlq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("htbmrelm", "bctlugkgahep");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("htbmrelm", "bctlugkgahep");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetVectorStoreFileBatchFiles("jrukzpnsigokxilkcmepscdlpmhvxg", "kecuzbragzqesnojjlqsa", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetVectorStoreFileBatchFilesAsync("jrukzpnsigokxilkcmepscdlpmhvxg", "kecuzbragzqesnojjlqsa", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("first_id").ToString());
            Console.WriteLine(result.GetProperty("last_id").ToString());
            Console.WriteLine(result.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("jrukzpnsigokxilkcmepscdlpmhvxg", "kecuzbragzqesnojjlqsa");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetVectorStoreFileBatchFiles_AgentsListVectorStoreFileBatchFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

            Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("jrukzpnsigokxilkcmepscdlpmhvxg", "kecuzbragzqesnojjlqsa");
        }
    }
}
