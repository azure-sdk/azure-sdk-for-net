// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Client.Samples
{
    public partial class Samples_Evaluations
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetEvaluation("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetEvaluationAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = client.GetEvaluation("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_EvaluationsGetMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<Evaluation> response = await client.GetEvaluationAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "yasufofyvvvrxyuhr");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "ylirqymkfsrfvovglzgvguegajnu",
                description = "wqtdvmxxcy",
                systemData = new object(),
                tags = new
                {
                    key7128 = "ndxwpinzrqbdgopaiiohe",
                },
                properties = new
                {
                    key7217 = "ihwrrrkaopcxcmdajlmvnbjpfomb",
                },
                evaluators = new
                {
                    key9653 = new
                    {
                        id = "tocrsevtgwfevzkawsihymxun",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key7843 = "iu",
                        },
                    },
                },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "yasufofyvvvrxyuhr");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "ylirqymkfsrfvovglzgvguegajnu",
                description = "wqtdvmxxcy",
                systemData = new object(),
                tags = new
                {
                    key7128 = "ndxwpinzrqbdgopaiiohe",
                },
                properties = new
                {
                    key7217 = "ihwrrrkaopcxcmdajlmvnbjpfomb",
                },
                evaluators = new
                {
                    key9653 = new
                    {
                        id = "tocrsevtgwfevzkawsihymxun",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key7843 = "iu",
                        },
                    },
                },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_Create_EvaluationsCreateMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "yasufofyvvvrxyuhr");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key9653"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
                {
                    InitParams = { },
                    DataMapping =
{
["key7843"] = "iu"
},
                }
            })
            {
                DisplayName = "ylirqymkfsrfvovglzgvguegajnu",
                Description = "wqtdvmxxcy",
                Tags =
{
["key7128"] = "ndxwpinzrqbdgopaiiohe"
},
                Properties =
{
["key7217"] = "ihwrrrkaopcxcmdajlmvnbjpfomb"
},
            };
            Response<Evaluation> response = client.Create(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_Create_EvaluationsCreateMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "yasufofyvvvrxyuhr");

            Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key9653"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
                {
                    InitParams = { },
                    DataMapping =
{
["key7843"] = "iu"
},
                }
            })
            {
                DisplayName = "ylirqymkfsrfvovglzgvguegajnu",
                Description = "wqtdvmxxcy",
                Tags =
{
["key7128"] = "ndxwpinzrqbdgopaiiohe"
},
                Properties =
{
["key7217"] = "ihwrrrkaopcxcmdajlmvnbjpfomb"
},
            };
            Response<Evaluation> response = await client.CreateAsync(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_Update_EvaluationsUpdateMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "tkcgtwopcqsbbuzkhbkxbj",
                description = "kprhmbdhjtdglzrgwyfvchuuvg",
                tags = new
                {
                    key6615 = "xnfv",
                },
            });
            Response response = client.Update("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_Update_EvaluationsUpdateMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "tkcgtwopcqsbbuzkhbkxbj",
                description = "kprhmbdhjtdglzrgwyfvchuuvg",
                tags = new
                {
                    key6615 = "xnfv",
                },
            });
            Response response = await client.UpdateAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_GetSchedule_EvaluationsGetScheduleMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.GetSchedule("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_GetSchedule_EvaluationsGetScheduleMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.GetScheduleAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_GetSchedule_EvaluationsGetScheduleMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = client.GetSchedule("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_GetSchedule_EvaluationsGetScheduleMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response<EvaluationSchedule> response = await client.GetScheduleAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_CreateOrReplaceSchedule_EvaluationsCreateOrReplaceScheduleMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "elnf",
                description = "fdkzlyymirwpgnczwpopb",
                systemData = new object(),
                tags = new
                {
                    key1442 = "mevcd",
                },
                properties = new
                {
                    key6062 = "vdamafahkojuqpcjymbkzet",
                },
                evaluators = new
                {
                    key8500 = new
                    {
                        id = "tocrsevtgwfevzkawsihymxun",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key7843 = "iu",
                        },
                    },
                },
                samplingStrategy = new
                {
                    rate = 17F,
                },
            });
            Response response = client.CreateOrReplaceSchedule("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_CreateOrReplaceSchedule_EvaluationsCreateOrReplaceScheduleMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "elnf",
                description = "fdkzlyymirwpgnczwpopb",
                systemData = new object(),
                tags = new
                {
                    key1442 = "mevcd",
                },
                properties = new
                {
                    key6062 = "vdamafahkojuqpcjymbkzet",
                },
                evaluators = new
                {
                    key8500 = new
                    {
                        id = "tocrsevtgwfevzkawsihymxun",
                        initParams = new object(),
                        dataMapping = new
                        {
                            key7843 = "iu",
                        },
                    },
                },
                samplingStrategy = new
                {
                    rate = 17F,
                },
            });
            Response response = await client.CreateOrReplaceScheduleAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_CreateOrReplaceSchedule_EvaluationsCreateOrReplaceScheduleMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key8500"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
                {
                    InitParams = { },
                    DataMapping =
{
["key7843"] = "iu"
},
                }
            }, null, new SamplingStrategy(17F))
            {
                DisplayName = "elnf",
                Description = "fdkzlyymirwpgnczwpopb",
                Tags =
{
["key1442"] = "mevcd"
},
                Properties =
{
["key6062"] = "vdamafahkojuqpcjymbkzet"
},
            };
            Response<EvaluationSchedule> response = client.CreateOrReplaceSchedule("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_CreateOrReplaceSchedule_EvaluationsCreateOrReplaceScheduleMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
            {
                ["key8500"] = new EvaluatorConfiguration("tocrsevtgwfevzkawsihymxun")
                {
                    InitParams = { },
                    DataMapping =
{
["key7843"] = "iu"
},
                }
            }, null, new SamplingStrategy(17F))
            {
                DisplayName = "elnf",
                Description = "fdkzlyymirwpgnczwpopb",
                Tags =
{
["key1442"] = "mevcd"
},
                Properties =
{
["key6062"] = "vdamafahkojuqpcjymbkzet"
},
            };
            Response<EvaluationSchedule> response = await client.CreateOrReplaceScheduleAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_DeleteSchedule_EvaluationsDeleteScheduleMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = client.DeleteSchedule("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_DeleteSchedule_EvaluationsDeleteScheduleMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            Response response = await client.DeleteScheduleAsync("Replace this value with a string matching RegExp ^[a-zA-Z0-9][a-zA-Z0-9-_]*$");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetEvaluations(null, 2, 30, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetEvaluationsAsync(null, 2, 30, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (Evaluation item in client.GetEvaluations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_EvaluationsListMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (Evaluation item in client.GetEvaluationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_GetSchedules_EvaluationsListScheduleMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (BinaryData item in client.GetSchedules(null, 2, 30, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_GetSchedules_EvaluationsListScheduleMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (BinaryData item in client.GetSchedulesAsync(null, 2, 30, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluationSchedule_GetSchedules_EvaluationsListScheduleMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            foreach (EvaluationSchedule item in client.GetSchedules())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluationSchedule_GetSchedules_EvaluationsListScheduleMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

            await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
            {
            }
        }
    }
}
