<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEvaluationAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("0xN_deK0smlYuLr");
]]></code></example>
    </member>
    <member name="GetEvaluation(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = client.GetEvaluation("0xN_deK0smlYuLr");
]]></code></example>
    </member>
    <member name="GetEvaluationAsync(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetEvaluationAsync("0xN_deK0smlYuLr", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluation(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetEvaluation("0xN_deK0smlYuLr", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(Evaluation,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "wdonaierlhvnxrtfskensotythrinl");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key2491"] = new EvaluatorConfiguration("rcqsadxzlb")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6333"] = "qyeymhyrqjnlykeovvoovrpagoeq"
        },
    }
})
{
    DisplayName = "nkueulyyyroeuxt",
    Description = "jsqfsapowadz",
    Tags =
    {
        ["key1124"] = "iqyrpdh"
    },
    Properties =
    {
        ["key571"] = "zglz"
    },
};
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code></example>
    </member>
    <member name="Create(Evaluation,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "wdonaierlhvnxrtfskensotythrinl");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key2491"] = new EvaluatorConfiguration("rcqsadxzlb")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6333"] = "qyeymhyrqjnlykeovvoovrpagoeq"
        },
    }
})
{
    DisplayName = "nkueulyyyroeuxt",
    Description = "jsqfsapowadz",
    Tags =
    {
        ["key1124"] = "iqyrpdh"
    },
    Properties =
    {
        ["key571"] = "zglz"
    },
};
Response<Evaluation> response = client.Create(evaluation);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "wdonaierlhvnxrtfskensotythrinl");

using RequestContent content = RequestContent.Create(new
{
    displayName = "nkueulyyyroeuxt",
    description = "jsqfsapowadz",
    systemData = new object(),
    tags = new
    {
        key1124 = "iqyrpdh",
    },
    properties = new
    {
        key571 = "zglz",
    },
    evaluators = new
    {
        key2491 = new
        {
            id = "rcqsadxzlb",
            initParams = new object(),
            dataMapping = new
            {
                key6333 = "qyeymhyrqjnlykeovvoovrpagoeq",
            },
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "wdonaierlhvnxrtfskensotythrinl");

using RequestContent content = RequestContent.Create(new
{
    displayName = "nkueulyyyroeuxt",
    description = "jsqfsapowadz",
    systemData = new object(),
    tags = new
    {
        key1124 = "iqyrpdh",
    },
    properties = new
    {
        key571 = "zglz",
    },
    evaluators = new
    {
        key2491 = new
        {
            id = "rcqsadxzlb",
            initParams = new object(),
            dataMapping = new
            {
                key6333 = "qyeymhyrqjnlykeovvoovrpagoeq",
            },
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "cxevvjunofv",
    description = "hzeepixidcwovcreuqmevwuaml",
    tags = new
    {
        key796 = "b",
    },
});
Response response = await client.UpdateAsync("d9_gzvJT", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "cxevvjunofv",
    description = "hzeepixidcwovcreuqmevwuaml",
    tags = new
    {
        key796 = "b",
    },
});
Response response = client.Update("d9_gzvJT", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = await client.GetScheduleAsync("zMGKlmyweXP4tY0SNQ2TH1rE");
]]></code></example>
    </member>
    <member name="GetSchedule(string,CancellationToken)">
      <example>
This sample shows how to call GetSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = client.GetSchedule("zMGKlmyweXP4tY0SNQ2TH1rE");
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call GetScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetScheduleAsync("zMGKlmyweXP4tY0SNQ2TH1rE", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="GetSchedule(string,RequestContext)">
      <example>
This sample shows how to call GetSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetSchedule("zMGKlmyweXP4tY0SNQ2TH1rE", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key7661"] = new EvaluatorConfiguration("rcqsadxzlb")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6333"] = "qyeymhyrqjnlykeovvoovrpagoeq"
        },
    }
}, null, new SamplingStrategy(19F))
{
    DisplayName = "eoluldjrfuaglnqkbazqtmbjrgmry",
    Description = "vfccbdcjhhmrkdulwxp",
    Tags =
    {
        ["key8934"] = "ztirwmjvgxqwefn"
    },
    Properties =
    {
        ["key7360"] = "wzwajaxfgupsmc"
    },
};
Response<EvaluationSchedule> response = await client.CreateOrReplaceScheduleAsync("T7DC90Ktz34ZHs6Ab-aynrP_Qic2", resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key7661"] = new EvaluatorConfiguration("rcqsadxzlb")
    {
        InitParams = { },
        DataMapping =
        {
            ["key6333"] = "qyeymhyrqjnlykeovvoovrpagoeq"
        },
    }
}, null, new SamplingStrategy(19F))
{
    DisplayName = "eoluldjrfuaglnqkbazqtmbjrgmry",
    Description = "vfccbdcjhhmrkdulwxp",
    Tags =
    {
        ["key8934"] = "ztirwmjvgxqwefn"
    },
    Properties =
    {
        ["key7360"] = "wzwajaxfgupsmc"
    },
};
Response<EvaluationSchedule> response = client.CreateOrReplaceSchedule("T7DC90Ktz34ZHs6Ab-aynrP_Qic2", resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "eoluldjrfuaglnqkbazqtmbjrgmry",
    description = "vfccbdcjhhmrkdulwxp",
    systemData = new object(),
    tags = new
    {
        key8934 = "ztirwmjvgxqwefn",
    },
    properties = new
    {
        key7360 = "wzwajaxfgupsmc",
    },
    evaluators = new
    {
        key7661 = new
        {
            id = "rcqsadxzlb",
            initParams = new object(),
            dataMapping = new
            {
                key6333 = "qyeymhyrqjnlykeovvoovrpagoeq",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 19F,
    },
});
Response response = await client.CreateOrReplaceScheduleAsync("T7DC90Ktz34ZHs6Ab-aynrP_Qic2", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "eoluldjrfuaglnqkbazqtmbjrgmry",
    description = "vfccbdcjhhmrkdulwxp",
    systemData = new object(),
    tags = new
    {
        key8934 = "ztirwmjvgxqwefn",
    },
    properties = new
    {
        key7360 = "wzwajaxfgupsmc",
    },
    evaluators = new
    {
        key7661 = new
        {
            id = "rcqsadxzlb",
            initParams = new object(),
            dataMapping = new
            {
                key6333 = "qyeymhyrqjnlykeovvoovrpagoeq",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 19F,
    },
});
Response response = client.CreateOrReplaceSchedule("T7DC90Ktz34ZHs6Ab-aynrP_Qic2", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="DeleteScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteScheduleAsync("2nRBpm8bKrXgO1iGQoaweZ");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteSchedule(string,RequestContext)">
      <example>
This sample shows how to call DeleteSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteSchedule("2nRBpm8bKrXgO1iGQoaweZ");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null, 23, 25, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetEvaluations(null, 23, 25, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
{
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (EvaluationSchedule item in client.GetSchedules())
{
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetSchedulesAsync(null, 23, 25, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetSchedules(null, 23, 25, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>