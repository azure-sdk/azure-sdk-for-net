<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEvaluationAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("KWT-645");
]]></code></example>
    </member>
    <member name="GetEvaluation(string,CancellationToken)">
      <example>
This sample shows how to call GetEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<Evaluation> response = client.GetEvaluation("KWT-645");
]]></code></example>
    </member>
    <member name="GetEvaluationAsync(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetEvaluationAsync("KWT-645", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetEvaluation(string,RequestContext)">
      <example>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetEvaluation("KWT-645", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="CreateAsync(Evaluation,CancellationToken)">
      <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "szhwuywjcvotinaoyiyb");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key197"] = new EvaluatorConfiguration("xdechn")
    {
        InitParams = { },
        DataMapping =
        {
            ["key8654"] = "v"
        },
    }
})
{
    DisplayName = "nro",
    Description = "nrvdyeiwffzphprknctudo",
    Tags =
    {
        ["key2540"] = "rtattbnvgfehuszryj"
    },
    Properties =
    {
        ["key3829"] = "yglxeicgyxfjw"
    },
};
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code></example>
    </member>
    <member name="Create(Evaluation,CancellationToken)">
      <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "szhwuywjcvotinaoyiyb");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key197"] = new EvaluatorConfiguration("xdechn")
    {
        InitParams = { },
        DataMapping =
        {
            ["key8654"] = "v"
        },
    }
})
{
    DisplayName = "nro",
    Description = "nrvdyeiwffzphprknctudo",
    Tags =
    {
        ["key2540"] = "rtattbnvgfehuszryj"
    },
    Properties =
    {
        ["key3829"] = "yglxeicgyxfjw"
    },
};
Response<Evaluation> response = client.Create(evaluation);
]]></code></example>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "szhwuywjcvotinaoyiyb");

using RequestContent content = RequestContent.Create(new
{
    displayName = "nro",
    description = "nrvdyeiwffzphprknctudo",
    systemData = new object(),
    tags = new
    {
        key2540 = "rtattbnvgfehuszryj",
    },
    properties = new
    {
        key3829 = "yglxeicgyxfjw",
    },
    evaluators = new
    {
        key197 = new
        {
            id = "xdechn",
            initParams = new object(),
            dataMapping = new
            {
                key8654 = "v",
            },
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Create(RequestContent,RequestContext)">
      <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "szhwuywjcvotinaoyiyb");

using RequestContent content = RequestContent.Create(new
{
    displayName = "nro",
    description = "nrvdyeiwffzphprknctudo",
    systemData = new object(),
    tags = new
    {
        key2540 = "rtattbnvgfehuszryj",
    },
    properties = new
    {
        key3829 = "yglxeicgyxfjw",
    },
    evaluators = new
    {
        key197 = new
        {
            id = "xdechn",
            initParams = new object(),
            dataMapping = new
            {
                key8654 = "v",
            },
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "vuzvrguv",
    description = "jzfgydsxbvqhyteiwbzc",
    tags = new
    {
        key6486 = "vapsdfyjiwfbdagudnoy",
    },
});
Response response = await client.UpdateAsync("mzNy-G6htWvH40QBJbiOKrEf3d", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="Update(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "vuzvrguv",
    description = "jzfgydsxbvqhyteiwbzc",
    tags = new
    {
        key6486 = "vapsdfyjiwfbdagudnoy",
    },
});
Response response = client.Update("mzNy-G6htWvH40QBJbiOKrEf3d", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = await client.GetScheduleAsync("WG3b9ECAf");
]]></code></example>
    </member>
    <member name="GetSchedule(string,CancellationToken)">
      <example>
This sample shows how to call GetSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response<EvaluationSchedule> response = client.GetSchedule("WG3b9ECAf");
]]></code></example>
    </member>
    <member name="GetScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call GetScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetScheduleAsync("WG3b9ECAf", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="GetSchedule(string,RequestContext)">
      <example>
This sample shows how to call GetSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetSchedule("WG3b9ECAf", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key7304"] = new EvaluatorConfiguration("xdechn")
    {
        InitParams = { },
        DataMapping =
        {
            ["key8654"] = "v"
        },
    }
}, null, new SamplingStrategy(5F))
{
    DisplayName = "yceptpwfgywzcvo",
    Description = "hvaejebaklaznfnyutiezlpnmjrnvt",
    Tags =
    {
        ["key7085"] = "ihmxlcjbqfgvjwx"
    },
    Properties =
    {
        ["key3139"] = "hzwnyhdsof"
    },
};
Response<EvaluationSchedule> response = await client.CreateOrReplaceScheduleAsync("wZUT9MptRl", resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,EvaluationSchedule,CancellationToken)">
      <example>
This sample shows how to call CreateOrReplaceSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

EvaluationSchedule resource = new EvaluationSchedule(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key7304"] = new EvaluatorConfiguration("xdechn")
    {
        InitParams = { },
        DataMapping =
        {
            ["key8654"] = "v"
        },
    }
}, null, new SamplingStrategy(5F))
{
    DisplayName = "yceptpwfgywzcvo",
    Description = "hvaejebaklaznfnyutiezlpnmjrnvt",
    Tags =
    {
        ["key7085"] = "ihmxlcjbqfgvjwx"
    },
    Properties =
    {
        ["key3139"] = "hzwnyhdsof"
    },
};
Response<EvaluationSchedule> response = client.CreateOrReplaceSchedule("wZUT9MptRl", resource);
]]></code></example>
    </member>
    <member name="CreateOrReplaceScheduleAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "yceptpwfgywzcvo",
    description = "hvaejebaklaznfnyutiezlpnmjrnvt",
    systemData = new object(),
    tags = new
    {
        key7085 = "ihmxlcjbqfgvjwx",
    },
    properties = new
    {
        key3139 = "hzwnyhdsof",
    },
    evaluators = new
    {
        key7304 = new
        {
            id = "xdechn",
            initParams = new object(),
            dataMapping = new
            {
                key8654 = "v",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 5F,
    },
});
Response response = await client.CreateOrReplaceScheduleAsync("wZUT9MptRl", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="CreateOrReplaceSchedule(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrReplaceSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "yceptpwfgywzcvo",
    description = "hvaejebaklaznfnyutiezlpnmjrnvt",
    systemData = new object(),
    tags = new
    {
        key7085 = "ihmxlcjbqfgvjwx",
    },
    properties = new
    {
        key3139 = "hzwnyhdsof",
    },
    evaluators = new
    {
        key7304 = new
        {
            id = "xdechn",
            initParams = new object(),
            dataMapping = new
            {
                key8654 = "v",
            },
        },
    },
    samplingStrategy = new
    {
        rate = 5F,
    },
});
Response response = client.CreateOrReplaceSchedule("wZUT9MptRl", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
]]></code></example>
    </member>
    <member name="DeleteScheduleAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteScheduleAsync("Gge3C-PZ69f_aOFNHB");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteSchedule(string,RequestContext)">
      <example>
This sample shows how to call DeleteSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteSchedule("Gge3C-PZ69f_aOFNHB");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code></example>
    </member>
    <member name="GetEvaluationsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null, 13, 29, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetEvaluations(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetEvaluations(null, 13, 29, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (EvaluationSchedule item in client.GetSchedulesAsync())
{
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (EvaluationSchedule item in client.GetSchedules())
{
}
]]></code></example>
    </member>
    <member name="GetSchedulesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

await foreach (BinaryData item in client.GetSchedulesAsync(null, 13, 29, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
    <member name="GetSchedules(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AzureAIClient(endpoint, null, null, null, credential).GetEvaluationsClient(apiVersion: "2024-07-01-preview");

foreach (BinaryData item in client.GetSchedules(null, 13, 29, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("trigger").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("samplingStrategy").GetProperty("rate").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>