<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAgentAsync(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.CreateAgentAsync("ximnug");
]]></code>
This sample shows how to call CreateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.CreateAgentAsync("ximnug");
]]></code></example>
    </member>
    <member name="CreateAgent(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.CreateAgent("ximnug");
]]></code>
This sample shows how to call CreateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.CreateAgent("ximnug");
]]></code></example>
    </member>
    <member name="CreateAgentAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "ximnug",
    name = "jvcprwldjyvyleowaaegjo",
    description = "ezxwphblxjky",
    instructions = "ajiwshlwqquziirbphqgqd",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    temperature = 10F,
    top_p = 29F,
    metadata = new
    {
        key4459 = "jowdzyazieyts",
    },
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "ximnug",
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateAgent(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "ximnug",
    name = "jvcprwldjyvyleowaaegjo",
    description = "ezxwphblxjky",
    instructions = "ajiwshlwqquziirbphqgqd",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    temperature = 10F,
    top_p = 29F,
    metadata = new
    {
        key4459 = "jowdzyazieyts",
    },
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "ximnug",
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.GetAgentAsync("k");
]]></code>
This sample shows how to call GetAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.GetAgentAsync("fysaemqflkjbgasltosvlehacq");
]]></code></example>
    </member>
    <member name="GetAgent(string,CancellationToken)">
      <example>
This sample shows how to call GetAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.GetAgent("k");
]]></code>
This sample shows how to call GetAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.GetAgent("fysaemqflkjbgasltosvlehacq");
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetAgentAsync("k", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetAgentAsync("fysaemqflkjbgasltosvlehacq", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgent(string,RequestContext)">
      <example>
This sample shows how to call GetAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetAgent("k", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetAgent("fysaemqflkjbgasltosvlehacq", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.UpdateAgentAsync("revxagdokhgrr");
]]></code>
This sample shows how to call UpdateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.UpdateAgentAsync("revxagdokhgrr");
]]></code></example>
    </member>
    <member name="UpdateAgent(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.UpdateAgent("revxagdokhgrr");
]]></code>
This sample shows how to call UpdateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.UpdateAgent("revxagdokhgrr");
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "nfjkfakxuzxtxmnglerfhwk",
    name = "awuzlr",
    description = "t",
    instructions = "bdzydyrwfijjoxzslhzqzjvkzmxbrb",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    temperature = 2F,
    top_p = 13F,
    metadata = new
    {
        key700 = "mailuuwatjdzopa",
    },
});
Response response = await client.UpdateAgentAsync("revxagdokhgrr", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAgentAsync("revxagdokhgrr", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgent(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "nfjkfakxuzxtxmnglerfhwk",
    name = "awuzlr",
    description = "t",
    instructions = "bdzydyrwfijjoxzslhzqzjvkzmxbrb",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    temperature = 2F,
    top_p = 13F,
    metadata = new
    {
        key700 = "mailuuwatjdzopa",
    },
});
Response response = client.UpdateAgent("revxagdokhgrr", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateAgent("revxagdokhgrr", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAsync(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.CreateThreadAsync();
]]></code>
This sample shows how to call CreateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.CreateThreadAsync();
]]></code></example>
    </member>
    <member name="CreateThread(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.CreateThread();
]]></code>
This sample shows how to call CreateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.CreateThread();
]]></code></example>
    </member>
    <member name="CreateThreadAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "cvyvswmuibckty",
            attachments = new object[]
            {
                new
                {
                    file_id = "qvaflfmlh",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            metadata = new
            {
                key4388 = "mttjnekxgmmewtno",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    metadata = new
    {
        key791 = "onpqfrxnrafjzo",
    },
});
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThread(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "cvyvswmuibckty",
            attachments = new object[]
            {
                new
                {
                    file_id = "qvaflfmlh",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            metadata = new
            {
                key4388 = "mttjnekxgmmewtno",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    metadata = new
    {
        key791 = "onpqfrxnrafjzo",
    },
});
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.GetThreadAsync("ofacd");
]]></code>
This sample shows how to call GetThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.GetThreadAsync("tsfbehet");
]]></code></example>
    </member>
    <member name="GetThread(string,CancellationToken)">
      <example>
This sample shows how to call GetThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.GetThread("ofacd");
]]></code>
This sample shows how to call GetThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.GetThread("tsfbehet");
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,RequestContext)">
      <example>
This sample shows how to call GetThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetThreadAsync("ofacd", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetThreadAsync("tsfbehet", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThread(string,RequestContext)">
      <example>
This sample shows how to call GetThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetThread("ofacd", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetThread("tsfbehet", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.UpdateThreadAsync("bhpkkgczhcgxcho");
]]></code>
This sample shows how to call UpdateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.UpdateThreadAsync("bhpkkgczhcgxcho");
]]></code></example>
    </member>
    <member name="UpdateThread(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.UpdateThread("bhpkkgczhcgxcho");
]]></code>
This sample shows how to call UpdateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.UpdateThread("bhpkkgczhcgxcho");
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    metadata = new
    {
        key9373 = "nbcxoehedpbecojwvloonycrsixqy",
    },
});
Response response = await client.UpdateThreadAsync("bhpkkgczhcgxcho", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateThreadAsync("bhpkkgczhcgxcho", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThread(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "xfjluezo",
                "xfjluezo",
                "xfjluezo",
                "xfjluezo"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "tkrmfcvsrjcmfglzh"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    metadata = new
    {
        key9373 = "nbcxoehedpbecojwvloonycrsixqy",
    },
});
Response response = client.UpdateThread("bhpkkgczhcgxcho", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateThread("bhpkkgczhcgxcho", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.CreateMessageAsync("fjijrnwaopujhztilwqfayml", MessageRole.User, "cvyvswmuibckty");
]]></code>
This sample shows how to call CreateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.CreateMessageAsync("ctavbfdieyjbdxrztxpozuwuhmvake", MessageRole.User, "cvyvswmuibckty");
]]></code></example>
    </member>
    <member name="CreateMessage(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.CreateMessage("fjijrnwaopujhztilwqfayml", MessageRole.User, "cvyvswmuibckty");
]]></code>
This sample shows how to call CreateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.CreateMessage("ctavbfdieyjbdxrztxpozuwuhmvake", MessageRole.User, "cvyvswmuibckty");
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "cvyvswmuibckty",
    attachments = new object[]
    {
        new
        {
            file_id = "qvaflfmlh",
            tools = new object[]
            {
                null
            },
        }
    },
    metadata = new
    {
        key4388 = "mttjnekxgmmewtno",
    },
});
Response response = await client.CreateMessageAsync("fjijrnwaopujhztilwqfayml", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "cvyvswmuibckty",
});
Response response = await client.CreateMessageAsync("ctavbfdieyjbdxrztxpozuwuhmvake", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessage(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "cvyvswmuibckty",
    attachments = new object[]
    {
        new
        {
            file_id = "qvaflfmlh",
            tools = new object[]
            {
                null
            },
        }
    },
    metadata = new
    {
        key4388 = "mttjnekxgmmewtno",
    },
});
Response response = client.CreateMessage("fjijrnwaopujhztilwqfayml", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "cvyvswmuibckty",
});
Response response = client.CreateMessage("ctavbfdieyjbdxrztxpozuwuhmvake", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.GetMessageAsync("r", "zfgkxn");
]]></code>
This sample shows how to call GetMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.GetMessageAsync("tgadelnptfvfq", "on");
]]></code></example>
    </member>
    <member name="GetMessage(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.GetMessage("r", "zfgkxn");
]]></code>
This sample shows how to call GetMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.GetMessage("tgadelnptfvfq", "on");
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetMessageAsync("r", "zfgkxn", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetMessageAsync("tgadelnptfvfq", "on", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessage(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetMessage("r", "zfgkxn", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetMessage("tgadelnptfvfq", "on", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.UpdateMessageAsync("qptzmzimfo", "irklexg");
]]></code>
This sample shows how to call UpdateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.UpdateMessageAsync("gqicivgmgueowxzjmi", "axrabaqm");
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.UpdateMessage("qptzmzimfo", "irklexg");
]]></code>
This sample shows how to call UpdateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.UpdateMessage("gqicivgmgueowxzjmi", "axrabaqm");
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key833 = "rvgofkhcn",
    },
});
Response response = await client.UpdateMessageAsync("qptzmzimfo", "irklexg", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateMessageAsync("gqicivgmgueowxzjmi", "axrabaqm", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key833 = "rvgofkhcn",
    },
});
Response response = client.UpdateMessage("qptzmzimfo", "irklexg", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateMessage("gqicivgmgueowxzjmi", "axrabaqm", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,string,string,string,string,IEnumerable{ThreadMessage},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CreateRunAsync("vvhllsilqtjkgp", "y");
]]></code></example>
    </member>
    <member name="CreateRun(string,string,string,string,string,IEnumerable{ThreadMessage},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CreateRun("vvhllsilqtjkgp", "y");
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "y",
    model = "defacxyrfjrjzmlktnqmidelazn",
    instructions = "lhauztadjbldsrquotaryjfdaqckfc",
    additional_instructions = "emxqyzpksdweudxiazpbqurbp",
    additional_messages = new object[]
    {
        new Dictionary<string, object>
        {
            ["id"] = "otbvqbedal",
            ["object"] = "thread.message",
            ["created_at"] = 6,
            ["thread_id"] = "mbykpl",
            ["status"] = "in_progress",
            ["incomplete_details"] = new
            {
                reason = "content_filter",
            },
            ["completed_at"] = 11,
            ["incomplete_at"] = 1,
            ["role"] = "user",
            ["content"] = Array.Empty<object>(),
            ["assistant_id"] = "xipggylerg",
            ["run_id"] = "rofvupudvkrvn",
            ["attachments"] = new object[]
            {
                new
                {
                    file_id = "qvaflfmlh",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            ["metadata"] = new
            {
                key4293 = "tqimnzgfeqpdrzwkzpkkwgbs",
            }
        }
    },
    tools = Array.Empty<object>(),
    stream = true,
    temperature = 4F,
    top_p = 15F,
    max_prompt_tokens = 21,
    max_completion_tokens = 7,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 22,
    },
    metadata = new
    {
        key399 = "mkspxzepbbdmenkwxwkcneze",
    },
});
Response response = await client.CreateRunAsync("vvhllsilqtjkgp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateRun(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "y",
    model = "defacxyrfjrjzmlktnqmidelazn",
    instructions = "lhauztadjbldsrquotaryjfdaqckfc",
    additional_instructions = "emxqyzpksdweudxiazpbqurbp",
    additional_messages = new object[]
    {
        new Dictionary<string, object>
        {
            ["id"] = "otbvqbedal",
            ["object"] = "thread.message",
            ["created_at"] = 6,
            ["thread_id"] = "mbykpl",
            ["status"] = "in_progress",
            ["incomplete_details"] = new
            {
                reason = "content_filter",
            },
            ["completed_at"] = 11,
            ["incomplete_at"] = 1,
            ["role"] = "user",
            ["content"] = Array.Empty<object>(),
            ["assistant_id"] = "xipggylerg",
            ["run_id"] = "rofvupudvkrvn",
            ["attachments"] = new object[]
            {
                new
                {
                    file_id = "qvaflfmlh",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            ["metadata"] = new
            {
                key4293 = "tqimnzgfeqpdrzwkzpkkwgbs",
            }
        }
    },
    tools = Array.Empty<object>(),
    stream = true,
    temperature = 4F,
    top_p = 15F,
    max_prompt_tokens = 21,
    max_completion_tokens = 7,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 22,
    },
    metadata = new
    {
        key399 = "mkspxzepbbdmenkwxwkcneze",
    },
});
Response response = client.CreateRun("vvhllsilqtjkgp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.GetRunAsync("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl");
]]></code></example>
    </member>
    <member name="GetRun(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.GetRun("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl");
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunAsync("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRun(string,string,RequestContext)">
      <example>
This sample shows how to call GetRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRun("yzwtacajgymeftqudapvwtcxaois", "xzwdbgnerwdiqwjdkgdl", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.UpdateRunAsync("fgadoftudzxnjxwnaaigonurdwn", "gdhbn");
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.UpdateRun("fgadoftudzxnjxwnaaigonurdwn", "gdhbn");
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key5079 = "scbmgzdiuxvahelszuwmakhoi",
    },
});
Response response = await client.UpdateRunAsync("fgadoftudzxnjxwnaaigonurdwn", "gdhbn", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key5079 = "scbmgzdiuxvahelszuwmakhoi",
    },
});
Response response = client.UpdateRun("fgadoftudzxnjxwnaaigonurdwn", "gdhbn", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("ptykzylmkyvsons", "mdp", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "lytjdh",
        Output = "skwwaymbqmkypuootigmksqtxibknl",
    }
});
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.SubmitToolOutputsToRun("ptykzylmkyvsons", "mdp", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "lytjdh",
        Output = "skwwaymbqmkypuootigmksqtxibknl",
    }
});
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "lytjdh",
            output = "skwwaymbqmkypuootigmksqtxibknl",
        }
    },
    stream = true,
});
Response response = await client.SubmitToolOutputsToRunAsync("ptykzylmkyvsons", "mdp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "lytjdh",
            output = "skwwaymbqmkypuootigmksqtxibknl",
        }
    },
    stream = true,
});
Response response = client.SubmitToolOutputsToRun("ptykzylmkyvsons", "mdp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CancelRunAsync("qxaxcdilw", "pnmxizjncmidzhoz");
]]></code></example>
    </member>
    <member name="CancelRun(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CancelRun("qxaxcdilw", "pnmxizjncmidzhoz");
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelRunAsync("qxaxcdilw", "pnmxizjncmidzhoz", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CancelRun(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelRun("qxaxcdilw", "pnmxizjncmidzhoz", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CreateThreadAndRunAsync("cknhphzepfh");
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CreateThreadAndRun("cknhphzepfh");
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "cknhphzepfh",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "cvyvswmuibckty",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "qvaflfmlh",
                        tools = new object[]
                        {
                            null
                        },
                    }
                },
                metadata = new
                {
                    key4388 = "mttjnekxgmmewtno",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "xfjluezo",
                    "xfjluezo",
                    "xfjluezo",
                    "xfjluezo"
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "tkrmfcvsrjcmfglzh"
                },
            },
            bing_search = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            microsoft_fabric = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            sharepoint = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                        index_name = "ydknycpsxzjssqbodi",
                    }
                },
            },
        },
        metadata = new
        {
            key791 = "onpqfrxnrafjzo",
        },
    },
    model = "rssodmhcbengnbj",
    instructions = "ggvmyg",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "pyhnnsigjloaofaztgiygxqlzmlm"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    stream = true,
    temperature = 23F,
    top_p = 19F,
    max_prompt_tokens = 16,
    max_completion_tokens = 20,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 15,
    },
    metadata = new
    {
        key4511 = "awqocknoqijsjhsuhzenku",
    },
});
Response response = await client.CreateThreadAndRunAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "cknhphzepfh",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "cvyvswmuibckty",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "qvaflfmlh",
                        tools = new object[]
                        {
                            null
                        },
                    }
                },
                metadata = new
                {
                    key4388 = "mttjnekxgmmewtno",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "xfjluezo",
                    "xfjluezo",
                    "xfjluezo",
                    "xfjluezo"
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "tkrmfcvsrjcmfglzh"
                },
            },
            bing_search = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            microsoft_fabric = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            sharepoint = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "vogvghmhcyitloax",
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                        index_name = "ydknycpsxzjssqbodi",
                    }
                },
            },
        },
        metadata = new
        {
            key791 = "onpqfrxnrafjzo",
        },
    },
    model = "rssodmhcbengnbj",
    instructions = "ggvmyg",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar",
                "ghoncpszeonnurisar"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "pyhnnsigjloaofaztgiygxqlzmlm"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "vogvghmhcyitloax",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "ncresuyzigatgxzfbxjxycmdtdp",
                    index_name = "ydknycpsxzjssqbodi",
                }
            },
        },
    },
    stream = true,
    temperature = 23F,
    top_p = 19F,
    max_prompt_tokens = 16,
    max_completion_tokens = 20,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 15,
    },
    metadata = new
    {
        key4511 = "awqocknoqijsjhsuhzenku",
    },
});
Response response = client.CreateThreadAndRun(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunStepAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = await client.GetRunStepAsync("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim");
]]></code>
This sample shows how to call GetRunStepAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = await client.GetRunStepAsync("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps");
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunStep.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = client.GetRunStep("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim");
]]></code>
This sample shows how to call GetRunStep.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = client.GetRunStep("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps");
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetRunStepAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunStepAsync("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStepAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunStepAsync("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetRunStep and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRunStep("eysnisxmkoplnper", "cxbyqyizrmpmjfepyclouunqetx", "qnnikjgsygyttrsiwswaim", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStep and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRunStep("okzvbmhtudnxzddbizrhqt", "ujwgzjbmejhftgzfrh", "wklgdjps", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UploadFileAsync(Stream,OpenAIFilePurpose,string,CancellationToken)">
      <example>
This sample shows how to call UploadFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.UploadFileAsync(null, (OpenAIFilePurpose)null);
]]></code></example>
    </member>
    <member name="UploadFile(Stream,OpenAIFilePurpose,string,CancellationToken)">
      <example>
This sample shows how to call UploadFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.UploadFile(null, (OpenAIFilePurpose)null);
]]></code></example>
    </member>
    <member name="UploadFileAsync(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = null;
Response response = await client.UploadFileAsync(content, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="UploadFile(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = null;
Response response = client.UploadFile(content, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFileAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.GetFileAsync("ufojngfeua");
]]></code>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.GetFileAsync("peavyzbnfikv");
]]></code></example>
    </member>
    <member name="GetFile(string,CancellationToken)">
      <example>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.GetFile("ufojngfeua");
]]></code>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.GetFile("peavyzbnfikv");
]]></code></example>
    </member>
    <member name="GetFileAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileAsync("ufojngfeua", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileAsync("peavyzbnfikv", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFile(string,RequestContext)">
      <example>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFile("ufojngfeua", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFile("peavyzbnfikv", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = await client.GetFileContentAsync("exhjkpahqmgcxkomhei");
]]></code>
This sample shows how to call GetFileContentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = await client.GetFileContentAsync("zlhbjpdeckqboklqmhimxhjxcrx");
]]></code></example>
    </member>
    <member name="GetFileContent(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = client.GetFileContent("exhjkpahqmgcxkomhei");
]]></code>
This sample shows how to call GetFileContent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = client.GetFileContent("zlhbjpdeckqboklqmhimxhjxcrx");
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileContentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileContentAsync("exhjkpahqmgcxkomhei", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code>
This sample shows how to call GetFileContentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileContentAsync("zlhbjpdeckqboklqmhimxhjxcrx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code></example>
    </member>
    <member name="GetFileContent(string,RequestContext)">
      <example>
This sample shows how to call GetFileContent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFileContent("exhjkpahqmgcxkomhei", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code>
This sample shows how to call GetFileContent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFileContent("zlhbjpdeckqboklqmhimxhjxcrx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoresAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
]]></code>
This sample shows how to call GetVectorStoresAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStores.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
]]></code>
This sample shows how to call GetVectorStores.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoresAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoresAsync(29, "asc", "plijv", "fzavpmcwmeztscxtpvtcexivojnra", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoresAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStores and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStores(29, "asc", "plijv", "fzavpmcwmeztscxtpvtcexivojnra", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStores and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStores(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(IEnumerable{string},string,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.CreateVectorStoreAsync();
]]></code>
This sample shows how to call CreateVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.CreateVectorStoreAsync();
]]></code></example>
    </member>
    <member name="CreateVectorStore(IEnumerable{string},string,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.CreateVectorStore();
]]></code>
This sample shows how to call CreateVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.CreateVectorStore();
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue"
    },
    name = "zbexkhlhiuqcaofjtt",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 11,
    },
    metadata = new
    {
        key2352 = "avynvyphzaltjgixhhjisgb",
    },
});
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStore(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue",
        "ue"
    },
    name = "zbexkhlhiuqcaofjtt",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 11,
    },
    metadata = new
    {
        key2352 = "avynvyphzaltjgixhhjisgb",
    },
});
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.GetVectorStoreAsync("g");
]]></code>
This sample shows how to call GetVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.GetVectorStoreAsync("fpjjowckiubhpztlcqbfhfa");
]]></code></example>
    </member>
    <member name="GetVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.GetVectorStore("g");
]]></code>
This sample shows how to call GetVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.GetVectorStore("fpjjowckiubhpztlcqbfhfa");
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreAsync("g", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreAsync("fpjjowckiubhpztlcqbfhfa", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStore(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStore("g", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStore("fpjjowckiubhpztlcqbfhfa", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.ModifyVectorStoreAsync("mxsxmccsxgcwaxqgtrweidhsmz");
]]></code>
This sample shows how to call ModifyVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.ModifyVectorStoreAsync("ilwuelhsqktqisvpoekoxhtptzhur");
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.ModifyVectorStore("mxsxmccsxgcwaxqgtrweidhsmz");
]]></code>
This sample shows how to call ModifyVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.ModifyVectorStore("ilwuelhsqktqisvpoekoxhtptzhur");
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    name = "wbmiloitvjvjvjwilxafqnlfvv",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 63,
    },
    metadata = new
    {
        key444 = "unreilooopnblxmsrpcsl",
    },
});
Response response = await client.ModifyVectorStoreAsync("mxsxmccsxgcwaxqgtrweidhsmz", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.ModifyVectorStoreAsync("ilwuelhsqktqisvpoekoxhtptzhur", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    name = "wbmiloitvjvjvjwilxafqnlfvv",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 63,
    },
    metadata = new
    {
        key444 = "unreilooopnblxmsrpcsl",
    },
});
Response response = client.ModifyVectorStore("mxsxmccsxgcwaxqgtrweidhsmz", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.ModifyVectorStore("ilwuelhsqktqisvpoekoxhtptzhur", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("vwpjybjeilzplivgay");
]]></code>
This sample shows how to call DeleteVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("harydbxi");
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("vwpjybjeilzplivgay");
]]></code>
This sample shows how to call DeleteVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("harydbxi");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreAsync("vwpjybjeilzplivgay", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreAsync("harydbxi", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStore("vwpjybjeilzplivgay", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStore("harydbxi", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("vhcgiqtynclzstwyttpdoakkpdzvow");
]]></code>
This sample shows how to call GetVectorStoreFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("tdtpz");
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("vhcgiqtynclzstwyttpdoakkpdzvow");
]]></code>
This sample shows how to call GetVectorStoreFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("tdtpz");
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFilesAsync("vhcgiqtynclzstwyttpdoakkpdzvow", "in_progress", 8, "asc", "cbgnuv", "yzbru", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFilesAsync("tdtpz", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFiles("vhcgiqtynclzstwyttpdoakkpdzvow", "in_progress", 8, "asc", "cbgnuv", "yzbru", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFiles("tdtpz", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,string,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("zunlhdfkhkpbvxobpxvlxjz", "pigrjhpteqmunmnqjpzgedr");
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,string,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.CreateVectorStoreFile("zunlhdfkhkpbvxobpxvlxjz", "pigrjhpteqmunmnqjpzgedr");
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_id = "pigrjhpteqmunmnqjpzgedr",
});
Response response = await client.CreateVectorStoreFileAsync("zunlhdfkhkpbvxobpxvlxjz", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_id = "pigrjhpteqmunmnqjpzgedr",
});
Response response = client.CreateVectorStoreFile("zunlhdfkhkpbvxobpxvlxjz", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt");
]]></code>
This sample shows how to call GetVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("wieyrxliksmh", "lt");
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.GetVectorStoreFile("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt");
]]></code>
This sample shows how to call GetVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.GetVectorStoreFile("wieyrxliksmh", "lt");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileAsync("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileAsync("wieyrxliksmh", "lt", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFile("wbderhebzhtdipcdqszqonxlfpr", "sqmpkiobwnmcjamzlydofsafcxqt", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFile("wieyrxliksmh", "lt", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("qdzd", "c");
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("znosndunewbffykrovuwlk", "vkbgby");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("qdzd", "c");
]]></code>
This sample shows how to call DeleteVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("znosndunewbffykrovuwlk", "vkbgby");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreFileAsync("qdzd", "c", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreFileAsync("znosndunewbffykrovuwlk", "vkbgby", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStoreFile("qdzd", "c", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStoreFile("znosndunewbffykrovuwlk", "vkbgby", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,IEnumerable{string},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("mxemjjytjfucwueylxoe", new string[] { "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf" });
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("obzxcqqbxndczmylyaestuak", new string[] { "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq" });
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,IEnumerable{string},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("mxemjjytjfucwueylxoe", new string[] { "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf", "keuygleycdqjtvcrjlcf" });
]]></code>
This sample shows how to call CreateVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("obzxcqqbxndczmylyaestuak", new string[] { "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq", "oekexmyuuq" });
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf"
    },
});
Response response = await client.CreateVectorStoreFileBatchAsync("mxemjjytjfucwueylxoe", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq"
    },
});
Response response = await client.CreateVectorStoreFileBatchAsync("obzxcqqbxndczmylyaestuak", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf",
        "keuygleycdqjtvcrjlcf"
    },
});
Response response = client.CreateVectorStoreFileBatch("mxemjjytjfucwueylxoe", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq",
        "oekexmyuuq"
    },
});
Response response = client.CreateVectorStoreFileBatch("obzxcqqbxndczmylyaestuak", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb");
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("axyxovstvdhq", "u");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb");
]]></code>
This sample shows how to call GetVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("axyxovstvdhq", "u");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchAsync("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchAsync("axyxovstvdhq", "u", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatch("ekelmos", "ixfbwfzepromrshwtkcaodlanrvb", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatch("axyxovstvdhq", "u", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("hxwzwvugywkyvkksball", "p");
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("he", "rkbrzvkohmyfy");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("hxwzwvugywkyvkksball", "p");
]]></code>
This sample shows how to call CancelVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("he", "rkbrzvkohmyfy");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelVectorStoreFileBatchAsync("hxwzwvugywkyvkksball", "p", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelVectorStoreFileBatchAsync("he", "rkbrzvkohmyfy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelVectorStoreFileBatch("hxwzwvugywkyvkksball", "p", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelVectorStoreFileBatch("he", "rkbrzvkohmyfy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("vertrqm", "aiusuqqfxha");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("wbi", "jxvaqasaclquvpqiajfe");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("vertrqm", "aiusuqqfxha");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("wbi", "jxvaqasaclquvpqiajfe");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchFilesAsync("vertrqm", "aiusuqqfxha", "in_progress", 25, "asc", "tphmbicpesfpdriwaryc", "t", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchFilesAsync("wbi", "jxvaqasaclquvpqiajfe", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatchFiles("vertrqm", "aiusuqqfxha", "in_progress", 25, "asc", "tphmbicpesfpdriwaryc", "t", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatchFiles("wbi", "jxvaqasaclquvpqiajfe", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
  </members>
</doc>