<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAgentAsync(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.CreateAgentAsync("dak");
]]></code>
This sample shows how to call CreateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.CreateAgentAsync("dak");
]]></code></example>
    </member>
    <member name="CreateAgent(string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.CreateAgent("dak");
]]></code>
This sample shows how to call CreateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.CreateAgent("dak");
]]></code></example>
    </member>
    <member name="CreateAgentAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "dak",
    name = "oxmggmcd",
    description = "dlraqnudpaslgyroeqyehqfihducu",
    instructions = "bnvpfqtc",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    temperature = 26F,
    top_p = 12F,
    metadata = new
    {
        key5885 = "dybdtghxzape",
    },
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "dak",
});
Response response = await client.CreateAgentAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateAgent(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "dak",
    name = "oxmggmcd",
    description = "dlraqnudpaslgyroeqyehqfihducu",
    instructions = "bnvpfqtc",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    temperature = 26F,
    top_p = 12F,
    metadata = new
    {
        key5885 = "dybdtghxzape",
    },
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "dak",
});
Response response = client.CreateAgent(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.GetAgentAsync("nmx");
]]></code>
This sample shows how to call GetAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.GetAgentAsync("fnaoslzyuwrifjrmwegzqimj");
]]></code></example>
    </member>
    <member name="GetAgent(string,CancellationToken)">
      <example>
This sample shows how to call GetAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.GetAgent("nmx");
]]></code>
This sample shows how to call GetAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.GetAgent("fnaoslzyuwrifjrmwegzqimj");
]]></code></example>
    </member>
    <member name="GetAgentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetAgentAsync("nmx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetAgentAsync("fnaoslzyuwrifjrmwegzqimj", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetAgent(string,RequestContext)">
      <example>
This sample shows how to call GetAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetAgent("nmx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetAgent("fnaoslzyuwrifjrmwegzqimj", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.UpdateAgentAsync("vevnyxdlsdzbwaul");
]]></code>
This sample shows how to call UpdateAgentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = await client.UpdateAgentAsync("vevnyxdlsdzbwaul");
]]></code></example>
    </member>
    <member name="UpdateAgent(string,string,string,string,string,IEnumerable{ToolDefinition},ToolResources,float?,float?,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.UpdateAgent("vevnyxdlsdzbwaul");
]]></code>
This sample shows how to call UpdateAgent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<Agent> response = client.UpdateAgent("vevnyxdlsdzbwaul");
]]></code></example>
    </member>
    <member name="UpdateAgentAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "np",
    name = "yvrhgcgfpygxwercvmvmdp",
    description = "mwbkxkplzjerxyqnpbcheqhpe",
    instructions = "upiewinpzeissnuqhixvoxa",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    temperature = 6F,
    top_p = 15F,
    metadata = new
    {
        key7262 = "dudgtwwbckkbpgkzfkchnefdfg",
    },
});
Response response = await client.UpdateAgentAsync("vevnyxdlsdzbwaul", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateAgentAsync("vevnyxdlsdzbwaul", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAgent(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    model = "np",
    name = "yvrhgcgfpygxwercvmvmdp",
    description = "mwbkxkplzjerxyqnpbcheqhpe",
    instructions = "upiewinpzeissnuqhixvoxa",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    temperature = 6F,
    top_p = 15F,
    metadata = new
    {
        key7262 = "dudgtwwbckkbpgkzfkchnefdfg",
    },
});
Response response = client.UpdateAgent("vevnyxdlsdzbwaul", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateAgent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateAgent("vevnyxdlsdzbwaul", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("temperature").ToString());
Console.WriteLine(result.GetProperty("top_p").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAsync(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.CreateThreadAsync();
]]></code>
This sample shows how to call CreateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.CreateThreadAsync();
]]></code></example>
    </member>
    <member name="CreateThread(IEnumerable{ThreadMessageOptions},ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.CreateThread();
]]></code>
This sample shows how to call CreateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.CreateThread();
]]></code></example>
    </member>
    <member name="CreateThreadAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "tcl",
            attachments = new object[]
            {
                new
                {
                    file_id = "c",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            metadata = new
            {
                key7585 = "jobhoyp",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    metadata = new
    {
        key6197 = "ejiifwziyadwghrnw",
    },
});
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateThreadAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThread(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    messages = new object[]
    {
        new
        {
            role = "user",
            content = "tcl",
            attachments = new object[]
            {
                new
                {
                    file_id = "c",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            metadata = new
            {
                key7585 = "jobhoyp",
            },
        }
    },
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    metadata = new
    {
        key6197 = "ejiifwziyadwghrnw",
    },
});
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateThread(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.GetThreadAsync("ooucqsli");
]]></code>
This sample shows how to call GetThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.GetThreadAsync("ipsngdzefwm");
]]></code></example>
    </member>
    <member name="GetThread(string,CancellationToken)">
      <example>
This sample shows how to call GetThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.GetThread("ooucqsli");
]]></code>
This sample shows how to call GetThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.GetThread("ipsngdzefwm");
]]></code></example>
    </member>
    <member name="GetThreadAsync(string,RequestContext)">
      <example>
This sample shows how to call GetThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetThreadAsync("ooucqsli", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetThreadAsync("ipsngdzefwm", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetThread(string,RequestContext)">
      <example>
This sample shows how to call GetThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetThread("ooucqsli", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetThread("ipsngdzefwm", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.UpdateThreadAsync("pnagufmyo");
]]></code>
This sample shows how to call UpdateThreadAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = await client.UpdateThreadAsync("pnagufmyo");
]]></code></example>
    </member>
    <member name="UpdateThread(string,ToolResources,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.UpdateThread("pnagufmyo");
]]></code>
This sample shows how to call UpdateThread.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<AgentThread> response = client.UpdateThread("pnagufmyo");
]]></code></example>
    </member>
    <member name="UpdateThreadAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    metadata = new
    {
        key7915 = "lnpzpunhuiz",
    },
});
Response response = await client.UpdateThreadAsync("pnagufmyo", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThreadAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateThreadAsync("pnagufmyo", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateThread(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi",
                "vfi"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "spwil"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    metadata = new
    {
        key7915 = "lnpzpunhuiz",
    },
});
Response response = client.UpdateThread("pnagufmyo", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateThread and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateThread("pnagufmyo", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("tool_resources").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.CreateMessageAsync("bplrwwdcquemggrulohtstoy", MessageRole.User, "tcl");
]]></code>
This sample shows how to call CreateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.CreateMessageAsync("kyfgpgkkpy", MessageRole.User, "tcl");
]]></code></example>
    </member>
    <member name="CreateMessage(string,MessageRole,string,IEnumerable{MessageAttachment},IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.CreateMessage("bplrwwdcquemggrulohtstoy", MessageRole.User, "tcl");
]]></code>
This sample shows how to call CreateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.CreateMessage("kyfgpgkkpy", MessageRole.User, "tcl");
]]></code></example>
    </member>
    <member name="CreateMessageAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "tcl",
    attachments = new object[]
    {
        new
        {
            file_id = "c",
            tools = new object[]
            {
                null
            },
        }
    },
    metadata = new
    {
        key7585 = "jobhoyp",
    },
});
Response response = await client.CreateMessageAsync("bplrwwdcquemggrulohtstoy", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "tcl",
});
Response response = await client.CreateMessageAsync("kyfgpgkkpy", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateMessage(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "tcl",
    attachments = new object[]
    {
        new
        {
            file_id = "c",
            tools = new object[]
            {
                null
            },
        }
    },
    metadata = new
    {
        key7585 = "jobhoyp",
    },
});
Response response = client.CreateMessage("bplrwwdcquemggrulohtstoy", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    role = "user",
    content = "tcl",
});
Response response = client.CreateMessage("kyfgpgkkpy", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.GetMessageAsync("m", "xwbdcjinzocktklzdkesj");
]]></code>
This sample shows how to call GetMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.GetMessageAsync("hqupscaarjlqcansxbzigombif", "drimtpcotx");
]]></code></example>
    </member>
    <member name="GetMessage(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.GetMessage("m", "xwbdcjinzocktklzdkesj");
]]></code>
This sample shows how to call GetMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.GetMessage("hqupscaarjlqcansxbzigombif", "drimtpcotx");
]]></code></example>
    </member>
    <member name="GetMessageAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetMessageAsync("m", "xwbdcjinzocktklzdkesj", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetMessageAsync("hqupscaarjlqcansxbzigombif", "drimtpcotx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetMessage(string,string,RequestContext)">
      <example>
This sample shows how to call GetMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetMessage("m", "xwbdcjinzocktklzdkesj", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetMessage("hqupscaarjlqcansxbzigombif", "drimtpcotx", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.UpdateMessageAsync("cd", "wnwbweyizv");
]]></code>
This sample shows how to call UpdateMessageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = await client.UpdateMessageAsync("bymofzcgkeiamduokophlbcqmmkx", "mulqbpevgerlnpbuoqlu");
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.UpdateMessage("cd", "wnwbweyizv");
]]></code>
This sample shows how to call UpdateMessage.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadMessage> response = client.UpdateMessage("bymofzcgkeiamduokophlbcqmmkx", "mulqbpevgerlnpbuoqlu");
]]></code></example>
    </member>
    <member name="UpdateMessageAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key2065 = "lydtmchmlcaxqpgdkyxuwckzygce",
    },
});
Response response = await client.UpdateMessageAsync("cd", "wnwbweyizv", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateMessageAsync("bymofzcgkeiamduokophlbcqmmkx", "mulqbpevgerlnpbuoqlu", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateMessage(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key2065 = "lydtmchmlcaxqpgdkyxuwckzygce",
    },
});
Response response = client.UpdateMessage("cd", "wnwbweyizv", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateMessage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateMessage("bymofzcgkeiamduokophlbcqmmkx", "mulqbpevgerlnpbuoqlu", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").GetProperty("reason").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_at").ToString());
Console.WriteLine(result.GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("content")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("file_id").ToString());
Console.WriteLine(result.GetProperty("attachments")[0].GetProperty("tools")[0].ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,string,string,string,string,IEnumerable{ThreadMessage},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CreateRunAsync("pypswuqiijoabdytwcsnmowiwvyso", "bwnlanmilqamoyocilelvcognmqtwa");
]]></code></example>
    </member>
    <member name="CreateRun(string,string,string,string,string,IEnumerable{ThreadMessage},IEnumerable{ToolDefinition},bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CreateRun("pypswuqiijoabdytwcsnmowiwvyso", "bwnlanmilqamoyocilelvcognmqtwa");
]]></code></example>
    </member>
    <member name="CreateRunAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "bwnlanmilqamoyocilelvcognmqtwa",
    model = "adewccozklbmcgqbqdbazyck",
    instructions = "mrsjaaogvw",
    additional_instructions = "yj",
    additional_messages = new object[]
    {
        new Dictionary<string, object>
        {
            ["id"] = "mhyiytfanz",
            ["object"] = "thread.message",
            ["created_at"] = 15,
            ["thread_id"] = "dzl",
            ["status"] = "in_progress",
            ["incomplete_details"] = new
            {
                reason = "content_filter",
            },
            ["completed_at"] = 9,
            ["incomplete_at"] = 1,
            ["role"] = "user",
            ["content"] = Array.Empty<object>(),
            ["assistant_id"] = "ohozddtyqpptooyxypbzpi",
            ["run_id"] = "cykyzguknrrdruio",
            ["attachments"] = new object[]
            {
                new
                {
                    file_id = "c",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            ["metadata"] = new
            {
                key1929 = "uiukasuyttfxtnktmngilmznogv",
            }
        }
    },
    tools = Array.Empty<object>(),
    stream = true,
    temperature = 19F,
    top_p = 8F,
    max_prompt_tokens = 22,
    max_completion_tokens = 2,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 25,
    },
    metadata = new
    {
        key1136 = "nigiwmnboqrmjyvwkru",
    },
});
Response response = await client.CreateRunAsync("pypswuqiijoabdytwcsnmowiwvyso", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateRun(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "bwnlanmilqamoyocilelvcognmqtwa",
    model = "adewccozklbmcgqbqdbazyck",
    instructions = "mrsjaaogvw",
    additional_instructions = "yj",
    additional_messages = new object[]
    {
        new Dictionary<string, object>
        {
            ["id"] = "mhyiytfanz",
            ["object"] = "thread.message",
            ["created_at"] = 15,
            ["thread_id"] = "dzl",
            ["status"] = "in_progress",
            ["incomplete_details"] = new
            {
                reason = "content_filter",
            },
            ["completed_at"] = 9,
            ["incomplete_at"] = 1,
            ["role"] = "user",
            ["content"] = Array.Empty<object>(),
            ["assistant_id"] = "ohozddtyqpptooyxypbzpi",
            ["run_id"] = "cykyzguknrrdruio",
            ["attachments"] = new object[]
            {
                new
                {
                    file_id = "c",
                    tools = new object[]
                    {
                        null
                    },
                }
            },
            ["metadata"] = new
            {
                key1929 = "uiukasuyttfxtnktmngilmznogv",
            }
        }
    },
    tools = Array.Empty<object>(),
    stream = true,
    temperature = 19F,
    top_p = 8F,
    max_prompt_tokens = 22,
    max_completion_tokens = 2,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 25,
    },
    metadata = new
    {
        key1136 = "nigiwmnboqrmjyvwkru",
    },
});
Response response = client.CreateRun("pypswuqiijoabdytwcsnmowiwvyso", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.GetRunAsync("qjawblqqlqbcczkjrwkarvc", "updjxkhacskxguqtnuhnasy");
]]></code></example>
    </member>
    <member name="GetRun(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.GetRun("qjawblqqlqbcczkjrwkarvc", "updjxkhacskxguqtnuhnasy");
]]></code></example>
    </member>
    <member name="GetRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunAsync("qjawblqqlqbcczkjrwkarvc", "updjxkhacskxguqtnuhnasy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRun(string,string,RequestContext)">
      <example>
This sample shows how to call GetRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRun("qjawblqqlqbcczkjrwkarvc", "updjxkhacskxguqtnuhnasy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.UpdateRunAsync("yctrycl", "zecizrzninlzcqobzubziiwczk");
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call UpdateRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.UpdateRun("yctrycl", "zecizrzninlzcqobzubziiwczk");
]]></code></example>
    </member>
    <member name="UpdateRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key6537 = "bpzolrikxnuusrbykc",
    },
});
Response response = await client.UpdateRunAsync("yctrycl", "zecizrzninlzcqobzubziiwczk", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    metadata = new
    {
        key6537 = "bpzolrikxnuusrbykc",
    },
});
Response response = client.UpdateRun("yctrycl", "zecizrzninlzcqobzubziiwczk", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.SubmitToolOutputsToRunAsync("lywmd", "udehuylvbyltmjbguijlnkczvmi", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "wlyyjwcbhttoyhejgjtwmkmcm",
        Output = "vqwtxchezfnbzpw",
    }
});
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,IEnumerable{ToolOutput},bool?,CancellationToken)">
      <example>
This sample shows how to call SubmitToolOutputsToRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.SubmitToolOutputsToRun("lywmd", "udehuylvbyltmjbguijlnkczvmi", new ToolOutput[]
{
    new ToolOutput
    {
        ToolCallId = "wlyyjwcbhttoyhejgjtwmkmcm",
        Output = "vqwtxchezfnbzpw",
    }
});
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRunAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "wlyyjwcbhttoyhejgjtwmkmcm",
            output = "vqwtxchezfnbzpw",
        }
    },
    stream = true,
});
Response response = await client.SubmitToolOutputsToRunAsync("lywmd", "udehuylvbyltmjbguijlnkczvmi", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="SubmitToolOutputsToRun(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitToolOutputsToRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    tool_outputs = new object[]
    {
        new
        {
            tool_call_id = "wlyyjwcbhttoyhejgjtwmkmcm",
            output = "vqwtxchezfnbzpw",
        }
    },
    stream = true,
});
Response response = client.SubmitToolOutputsToRun("lywmd", "udehuylvbyltmjbguijlnkczvmi", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CancelRunAsync("psbhvycwpenpzjpfwxhcvewmjnvkpn", "uhddvpq");
]]></code></example>
    </member>
    <member name="CancelRun(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CancelRun("psbhvycwpenpzjpfwxhcvewmjnvkpn", "uhddvpq");
]]></code></example>
    </member>
    <member name="CancelRunAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelRunAsync("psbhvycwpenpzjpfwxhcvewmjnvkpn", "uhddvpq", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CancelRun(string,string,RequestContext)">
      <example>
This sample shows how to call CancelRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelRun("psbhvycwpenpzjpfwxhcvewmjnvkpn", "uhddvpq", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRunAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = await client.CreateThreadAndRunAsync("egjqywdmzs");
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(string,AgentThreadCreationOptions,string,string,IEnumerable{ToolDefinition},UpdateToolResourcesOptions,bool?,float?,float?,int?,int?,TruncationObject,BinaryData,BinaryData,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateThreadAndRun.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<ThreadRun> response = client.CreateThreadAndRun("egjqywdmzs");
]]></code></example>
    </member>
    <member name="CreateThreadAndRunAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRunAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "egjqywdmzs",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "tcl",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "c",
                        tools = new object[]
                        {
                            null
                        },
                    }
                },
                metadata = new
                {
                    key7585 = "jobhoyp",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi"
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "spwil"
                },
            },
            bing_search = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            microsoft_fabric = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            sharepoint = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "wvqlrwzbzbfcofafx",
                        index_name = "bsxrdsj",
                    }
                },
            },
        },
        metadata = new
        {
            key6197 = "ejiifwziyadwghrnw",
        },
    },
    model = "ugaeupddczulafsls",
    instructions = "pyzcxwmtgudencvlqpctghpp",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "kydqzwvtj"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    stream = true,
    temperature = 28F,
    top_p = 29F,
    max_prompt_tokens = 29,
    max_completion_tokens = 2,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 24,
    },
    metadata = new
    {
        key6318 = "wuncd",
    },
});
Response response = await client.CreateThreadAndRunAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateThreadAndRun(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateThreadAndRun and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    assistant_id = "egjqywdmzs",
    thread = new
    {
        messages = new object[]
        {
            new
            {
                role = "user",
                content = "tcl",
                attachments = new object[]
                {
                    new
                    {
                        file_id = "c",
                        tools = new object[]
                        {
                            null
                        },
                    }
                },
                metadata = new
                {
                    key7585 = "jobhoyp",
                },
            }
        },
        tool_resources = new
        {
            code_interpreter = new
            {
                file_ids = new object[]
                {
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi",
                    "vfi"
                },
            },
            file_search = new
            {
                vector_store_ids = new object[]
                {
                    "spwil"
                },
            },
            bing_search = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            microsoft_fabric = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            sharepoint = new
            {
                connections = new object[]
                {
                    new
                    {
                        connection_id = "mezarept",
                    }
                },
            },
            azure_ai_search = new
            {
                indexes = new object[]
                {
                    new
                    {
                        index_connection_id = "wvqlrwzbzbfcofafx",
                        index_name = "bsxrdsj",
                    }
                },
            },
        },
        metadata = new
        {
            key6197 = "ejiifwziyadwghrnw",
        },
    },
    model = "ugaeupddczulafsls",
    instructions = "pyzcxwmtgudencvlqpctghpp",
    tools = Array.Empty<object>(),
    tool_resources = new
    {
        code_interpreter = new
        {
            file_ids = new object[]
            {
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh",
                "rwhddmvvyaqbmpgharihzhrkoopeh"
            },
        },
        file_search = new
        {
            vector_store_ids = new object[]
            {
                "kydqzwvtj"
            },
        },
        bing_search = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        microsoft_fabric = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        sharepoint = new
        {
            connections = new object[]
            {
                new
                {
                    connection_id = "mezarept",
                }
            },
        },
        azure_ai_search = new
        {
            indexes = new object[]
            {
                new
                {
                    index_connection_id = "wvqlrwzbzbfcofafx",
                    index_name = "bsxrdsj",
                }
            },
        },
    },
    stream = true,
    temperature = 28F,
    top_p = 29F,
    max_prompt_tokens = 29,
    max_completion_tokens = 2,
    truncation_strategy = new
    {
        type = "auto",
        last_messages = 24,
    },
    metadata = new
    {
        key6318 = "wuncd",
    },
});
Response response = client.CreateThreadAndRun(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("instructions").ToString());
Console.WriteLine(result.GetProperty("tools")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expires_at").ToString());
Console.WriteLine(result.GetProperty("started_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("incomplete_details").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("completion_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("usage").GetProperty("total_tokens").ToString());
Console.WriteLine(result.GetProperty("max_prompt_tokens").ToString());
Console.WriteLine(result.GetProperty("max_completion_tokens").ToString());
Console.WriteLine(result.GetProperty("truncation_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tool_choice").ToString());
Console.WriteLine(result.GetProperty("response_format").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunStepAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = await client.GetRunStepAsync("yemnf", "qkncgjiuolkbetkvptmtojdf", "dtdhhejldbyolhmadcubawtpy");
]]></code>
This sample shows how to call GetRunStepAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = await client.GetRunStepAsync("fkhmujvwzjdpfviomvauuk", "wauuufqovwydubhusmxwwztebd", "chzywbxigobbttgbdjwovjzuhrxvoa");
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetRunStep.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = client.GetRunStep("yemnf", "qkncgjiuolkbetkvptmtojdf", "dtdhhejldbyolhmadcubawtpy");
]]></code>
This sample shows how to call GetRunStep.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<RunStep> response = client.GetRunStep("fkhmujvwzjdpfviomvauuk", "wauuufqovwydubhusmxwwztebd", "chzywbxigobbttgbdjwovjzuhrxvoa");
]]></code></example>
    </member>
    <member name="GetRunStepAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetRunStepAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunStepAsync("yemnf", "qkncgjiuolkbetkvptmtojdf", "dtdhhejldbyolhmadcubawtpy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStepAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetRunStepAsync("fkhmujvwzjdpfviomvauuk", "wauuufqovwydubhusmxwwztebd", "chzywbxigobbttgbdjwovjzuhrxvoa", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetRunStep(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetRunStep and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRunStep("yemnf", "qkncgjiuolkbetkvptmtojdf", "dtdhhejldbyolhmadcubawtpy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetRunStep and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetRunStep("fkhmujvwzjdpfviomvauuk", "wauuufqovwydubhusmxwwztebd", "chzywbxigobbttgbdjwovjzuhrxvoa", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assistant_id").ToString());
Console.WriteLine(result.GetProperty("thread_id").ToString());
Console.WriteLine(result.GetProperty("run_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("step_details").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("expired_at").ToString());
Console.WriteLine(result.GetProperty("completed_at").ToString());
Console.WriteLine(result.GetProperty("cancelled_at").ToString());
Console.WriteLine(result.GetProperty("failed_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UploadFileAsync(Stream,OpenAIFilePurpose,string,CancellationToken)">
      <example>
This sample shows how to call UploadFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.UploadFileAsync(null, (OpenAIFilePurpose)null);
]]></code></example>
    </member>
    <member name="UploadFile(Stream,OpenAIFilePurpose,string,CancellationToken)">
      <example>
This sample shows how to call UploadFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.UploadFile(null, (OpenAIFilePurpose)null);
]]></code></example>
    </member>
    <member name="UploadFileAsync(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = null;
Response response = await client.UploadFileAsync(content, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="UploadFile(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call UploadFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = null;
Response response = client.UploadFile(content, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFileAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.GetFileAsync("vzxeqtfgkhopgstmirzyagxi");
]]></code>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = await client.GetFileAsync("nhcdk");
]]></code></example>
    </member>
    <member name="GetFile(string,CancellationToken)">
      <example>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.GetFile("vzxeqtfgkhopgstmirzyagxi");
]]></code>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIFile> response = client.GetFile("nhcdk");
]]></code></example>
    </member>
    <member name="GetFileAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileAsync("vzxeqtfgkhopgstmirzyagxi", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileAsync("nhcdk", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFile(string,RequestContext)">
      <example>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFile("vzxeqtfgkhopgstmirzyagxi", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFile("nhcdk", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = await client.GetFileContentAsync("hmctswctbkmumtie");
]]></code>
This sample shows how to call GetFileContentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = await client.GetFileContentAsync("wpyhpbrnblvjknyurrw");
]]></code></example>
    </member>
    <member name="GetFileContent(string,CancellationToken)">
      <example>
This sample shows how to call GetFileContent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = client.GetFileContent("hmctswctbkmumtie");
]]></code>
This sample shows how to call GetFileContent.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<FileContentResponse> response = client.GetFileContent("wpyhpbrnblvjknyurrw");
]]></code></example>
    </member>
    <member name="GetFileContentAsync(string,RequestContext)">
      <example>
This sample shows how to call GetFileContentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileContentAsync("hmctswctbkmumtie", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code>
This sample shows how to call GetFileContentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetFileContentAsync("wpyhpbrnblvjknyurrw", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code></example>
    </member>
    <member name="GetFileContent(string,RequestContext)">
      <example>
This sample shows how to call GetFileContent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFileContent("hmctswctbkmumtie", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code>
This sample shows how to call GetFileContent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetFileContent("wpyhpbrnblvjknyurrw", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("content").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoresAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
]]></code>
This sample shows how to call GetVectorStoresAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = await client.GetVectorStoresAsync();
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStores.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
]]></code>
This sample shows how to call GetVectorStores.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStore> response = client.GetVectorStores();
]]></code></example>
    </member>
    <member name="GetVectorStoresAsync(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoresAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoresAsync(16, "asc", "mzdooohcmwhpvsv", "muzy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoresAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoresAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStores(int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStores and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStores(16, "asc", "mzdooohcmwhpvsv", "muzy", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStores and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStores(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("metadata").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(IEnumerable{string},string,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.CreateVectorStoreAsync();
]]></code>
This sample shows how to call CreateVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.CreateVectorStoreAsync();
]]></code></example>
    </member>
    <member name="CreateVectorStore(IEnumerable{string},string,VectorStoreExpirationPolicy,VectorStoreChunkingStrategyRequest,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call CreateVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.CreateVectorStore();
]]></code>
This sample shows how to call CreateVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.CreateVectorStore();
]]></code></example>
    </member>
    <member name="CreateVectorStoreAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov"
    },
    name = "ispuhecjtzwdxdycbunmmoecnibf",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 177,
    },
    metadata = new
    {
        key4595 = "hgoocniatfqojbhjgnmlavig",
    },
});
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateVectorStoreAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStore(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov",
        "tpqtyynwhyxxeufwzmnov"
    },
    name = "ispuhecjtzwdxdycbunmmoecnibf",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 177,
    },
    metadata = new
    {
        key4595 = "hgoocniatfqojbhjgnmlavig",
    },
});
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call CreateVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateVectorStore(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.GetVectorStoreAsync("brxovpszbizhbhhkneve");
]]></code>
This sample shows how to call GetVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.GetVectorStoreAsync("edmsb");
]]></code></example>
    </member>
    <member name="GetVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.GetVectorStore("brxovpszbizhbhhkneve");
]]></code>
This sample shows how to call GetVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.GetVectorStore("edmsb");
]]></code></example>
    </member>
    <member name="GetVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreAsync("brxovpszbizhbhhkneve", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreAsync("edmsb", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStore(string,RequestContext)">
      <example>
This sample shows how to call GetVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStore("brxovpszbizhbhhkneve", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStore("edmsb", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.ModifyVectorStoreAsync("ttnhfhxvgokxlburplcmvuywajp");
]]></code>
This sample shows how to call ModifyVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = await client.ModifyVectorStoreAsync("htuqemgsuonvaoystfb");
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,string,VectorStoreExpirationPolicy,IReadOnlyDictionary{string,string},CancellationToken)">
      <example>
This sample shows how to call ModifyVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.ModifyVectorStore("ttnhfhxvgokxlburplcmvuywajp");
]]></code>
This sample shows how to call ModifyVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStore> response = client.ModifyVectorStore("htuqemgsuonvaoystfb");
]]></code></example>
    </member>
    <member name="ModifyVectorStoreAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    name = "sps",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 56,
    },
    metadata = new
    {
        key2625 = "oxcrbqeoq",
    },
});
Response response = await client.ModifyVectorStoreAsync("ttnhfhxvgokxlburplcmvuywajp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.ModifyVectorStoreAsync("htuqemgsuonvaoystfb", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="ModifyVectorStore(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ModifyVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    name = "sps",
    expires_after = new
    {
        anchor = "last_active_at",
        days = 56,
    },
    metadata = new
    {
        key2625 = "oxcrbqeoq",
    },
});
Response response = client.ModifyVectorStore("ttnhfhxvgokxlburplcmvuywajp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call ModifyVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.ModifyVectorStore("htuqemgsuonvaoystfb", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_active_at").ToString());
Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("xu");
]]></code>
This sample shows how to call DeleteVectorStoreAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = await client.DeleteVectorStoreAsync("oakyyspjycdr");
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("xu");
]]></code>
This sample shows how to call DeleteVectorStore.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreDeletionStatus> response = client.DeleteVectorStore("oakyyspjycdr");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreAsync("xu", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreAsync("oakyyspjycdr", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStore(string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStore("xu", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStore and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStore("oakyyspjycdr", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("rcidjxomqghwmsvnixj");
]]></code>
This sample shows how to call GetVectorStoreFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFilesAsync("crlch");
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("rcidjxomqghwmsvnixj");
]]></code>
This sample shows how to call GetVectorStoreFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFiles("crlch");
]]></code></example>
    </member>
    <member name="GetVectorStoreFilesAsync(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFilesAsync("rcidjxomqghwmsvnixj", "in_progress", 2, "asc", "xihohufoyczosyvgudbkjmdoa", "kucempvgknojdbropdwtiinqgnd", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFilesAsync("crlch", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFiles(string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFiles("rcidjxomqghwmsvnixj", "in_progress", 2, "asc", "xihohufoyczosyvgudbkjmdoa", "kucempvgknojdbropdwtiinqgnd", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFiles("crlch", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,string,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("fcgkptskzp", "jeajiewjmgraabfc");
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,string,VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.CreateVectorStoreFile("fcgkptskzp", "jeajiewjmgraabfc");
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_id = "jeajiewjmgraabfc",
});
Response response = await client.CreateVectorStoreFileAsync("fcgkptskzp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFile(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_id = "jeajiewjmgraabfc",
});
Response response = client.CreateVectorStoreFile("fcgkptskzp", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("yq", "tklfmjlryeqqjeqovfm");
]]></code>
This sample shows how to call GetVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("ywxcetmabeywlcvmvgn", "fxiyenuiajqdluqcck");
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.GetVectorStoreFile("yq", "tklfmjlryeqqjeqovfm");
]]></code>
This sample shows how to call GetVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFile> response = client.GetVectorStoreFile("ywxcetmabeywlcvmvgn", "fxiyenuiajqdluqcck");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileAsync("yq", "tklfmjlryeqqjeqovfm", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileAsync("ywxcetmabeywlcvmvgn", "fxiyenuiajqdluqcck", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFile("yq", "tklfmjlryeqqjeqovfm", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code>
This sample shows how to call GetVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFile("ywxcetmabeywlcvmvgn", "fxiyenuiajqdluqcck", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("shoyymwphexekjrmsykiaeyzxvib", "ogoksqnkyoepzto");
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = await client.DeleteVectorStoreFileAsync("lwkpoq", "cpdgroeiocyacserjykrsxqaz");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("shoyymwphexekjrmsykiaeyzxvib", "ogoksqnkyoepzto");
]]></code>
This sample shows how to call DeleteVectorStoreFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileDeletionStatus> response = client.DeleteVectorStoreFile("lwkpoq", "cpdgroeiocyacserjykrsxqaz");
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFileAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreFileAsync("shoyymwphexekjrmsykiaeyzxvib", "ogoksqnkyoepzto", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.DeleteVectorStoreFileAsync("lwkpoq", "cpdgroeiocyacserjykrsxqaz", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="DeleteVectorStoreFile(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStoreFile("shoyymwphexekjrmsykiaeyzxvib", "ogoksqnkyoepzto", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code>
This sample shows how to call DeleteVectorStoreFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.DeleteVectorStoreFile("lwkpoq", "cpdgroeiocyacserjykrsxqaz", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deleted").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,IEnumerable{string},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("nwklulgazapnjsxqifaqgftoly", new string[] { "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql" });
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("gawziujcztuwv", new string[] { "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje" });
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,IEnumerable{string},VectorStoreChunkingStrategyRequest,CancellationToken)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("nwklulgazapnjsxqifaqgftoly", new string[] { "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql", "fpwmpql" });
]]></code>
This sample shows how to call CreateVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("gawziujcztuwv", new string[] { "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje", "ohlcskpunlnuwgxiyniwagtje" });
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatchAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql"
    },
});
Response response = await client.CreateVectorStoreFileBatchAsync("nwklulgazapnjsxqifaqgftoly", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje"
    },
});
Response response = await client.CreateVectorStoreFileBatchAsync("gawziujcztuwv", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CreateVectorStoreFileBatch(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql",
        "fpwmpql"
    },
});
Response response = client.CreateVectorStoreFileBatch("nwklulgazapnjsxqifaqgftoly", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CreateVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

using RequestContent content = RequestContent.Create(new
{
    file_ids = new object[]
    {
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje",
        "ohlcskpunlnuwgxiyniwagtje"
    },
});
Response response = client.CreateVectorStoreFileBatch("gawziujcztuwv", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("rghf", "xmxqqulwqdueyzcmnlrchuvaun");
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("dn", "dopabrmnxxv");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("rghf", "xmxqqulwqdueyzcmnlrchuvaun");
]]></code>
This sample shows how to call GetVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("dn", "dopabrmnxxv");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchAsync("rghf", "xmxqqulwqdueyzcmnlrchuvaun", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchAsync("dn", "dopabrmnxxv", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatch("rghf", "xmxqqulwqdueyzcmnlrchuvaun", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatch("dn", "dopabrmnxxv", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("xlfiypivuoudb", "twcbn");
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("kepdgxxdritorzxzdcbyuxbopn", "lqegoqhjkmwpmvpaban");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,CancellationToken)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("xlfiypivuoudb", "twcbn");
]]></code>
This sample shows how to call CancelVectorStoreFileBatch.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("kepdgxxdritorzxzdcbyuxbopn", "lqegoqhjkmwpmvpaban");
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatchAsync(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelVectorStoreFileBatchAsync("xlfiypivuoudb", "twcbn", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatchAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.CancelVectorStoreFileBatchAsync("kepdgxxdritorzxzdcbyuxbopn", "lqegoqhjkmwpmvpaban", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="CancelVectorStoreFileBatch(string,string,RequestContext)">
      <example>
This sample shows how to call CancelVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelVectorStoreFileBatch("xlfiypivuoudb", "twcbn", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code>
This sample shows how to call CancelVectorStoreFileBatch and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.CancelVectorStoreFileBatch("kepdgxxdritorzxzdcbyuxbopn", "lqegoqhjkmwpmvpaban", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("wnldouxsvkutdevl", "mcvaaldchlsk");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = await client.GetVectorStoreFileBatchFilesAsync("muzhjkmjzoswvphjialdxzqmchqp", "ljhqexpdbduxvwdgkwjkbblgsoz");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,VectorStoreFileStatusFilter?,int?,ListSortOrder?,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("wnldouxsvkutdevl", "mcvaaldchlsk");
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response<OpenAIPageableListOfVectorStoreFile> response = client.GetVectorStoreFileBatchFiles("muzhjkmjzoswvphjialdxzqmchqp", "ljhqexpdbduxvwdgkwjkbblgsoz");
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFilesAsync(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchFilesAsync("wnldouxsvkutdevl", "mcvaaldchlsk", "in_progress", 3, "asc", "kfebkxtsiysiuobnrwg", "ve", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = await client.GetVectorStoreFileBatchFilesAsync("muzhjkmjzoswvphjialdxzqmchqp", "ljhqexpdbduxvwdgkwjkbblgsoz", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
    <member name="GetVectorStoreFileBatchFiles(string,string,string,int?,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVectorStoreFileBatchFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatchFiles("wnldouxsvkutdevl", "mcvaaldchlsk", "in_progress", 3, "asc", "kfebkxtsiysiuobnrwg", "ve", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code>
This sample shows how to call GetVectorStoreFileBatchFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Agents client = new AzureAIClient(endpoint, null, null, null, credential).GetAgentsClient(apiVersion: "2024-07-01-preview");

Response response = client.GetVectorStoreFileBatchFiles("muzhjkmjzoswvphjialdxzqmchqp", "ljhqexpdbduxvwdgkwjkbblgsoz", null, null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("usage_bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("vector_store_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("last_error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("chunking_strategy").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("first_id").ToString());
Console.WriteLine(result.GetProperty("last_id").ToString());
Console.WriteLine(result.GetProperty("has_more").ToString());
]]></code></example>
    </member>
  </members>
</doc>