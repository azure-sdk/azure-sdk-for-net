// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Evaluations
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIEvaluationsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AI.Evaluations.Evaluation"/>. </summary>
        /// <param name="id"> Identifier of the evaluation. </param>
        /// <param name="data">
        /// Data for evaluation.
        /// Please note <see cref="InputData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ApplicationInsightsConfiguration"/> and <see cref="Dataset"/>.
        /// </param>
        /// <param name="displayName"> Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
        /// <param name="status"> Status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <returns> A new <see cref="AI.Evaluations.Evaluation"/> instance for mocking. </returns>
        public static Evaluation Evaluation(string id = null, InputData data = null, string displayName = null, string description = null, SystemData systemData = null, string status = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, IDictionary<string, EvaluatorConfiguration> evaluators = null)
        {
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new Evaluation(
                id,
                data,
                displayName,
                description,
                systemData,
                status,
                tags,
                properties,
                evaluators,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AI.Evaluations.SystemData"/>. </summary>
        /// <param name="createdAt"> The timestamp the resource was created at. </param>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="createdByType"> The identity type that created the resource. </param>
        /// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
        /// <returns> A new <see cref="AI.Evaluations.SystemData"/> instance for mocking. </returns>
        public static SystemData SystemData(DateTimeOffset? createdAt = null, string createdBy = null, string createdByType = null, DateTimeOffset? lastModifiedAt = null)
        {
            return new SystemData(createdAt, createdBy, createdByType, lastModifiedAt, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AI.Evaluations.EvaluationSchedule"/>. </summary>
        /// <param name="name"> Name of the schedule, which also serves as the unique identifier for the evaluation. </param>
        /// <param name="data"> Data for evaluation. </param>
        /// <param name="description"> Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. </param>
        /// <param name="systemData"> Metadata containing createdBy and modifiedBy information. </param>
        /// <param name="provisioningState"> Provisioning State of the evaluation. It is set by service and is read-only. </param>
        /// <param name="tags"> Evaluation's tags. Unlike properties, tags are fully mutable. </param>
        /// <param name="properties"> Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. </param>
        /// <param name="isEnabled"> Enabled status of the evaluation. It is set by service and is read-only. </param>
        /// <param name="evaluators"> Evaluators to be used for the evaluation. </param>
        /// <param name="trigger">
        /// Trigger for the evaluation.
        /// Please note <see cref="Trigger"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CronTrigger"/> and <see cref="RecurrenceTrigger"/>.
        /// </param>
        /// <returns> A new <see cref="AI.Evaluations.EvaluationSchedule"/> instance for mocking. </returns>
        public static EvaluationSchedule EvaluationSchedule(string name = null, ApplicationInsightsConfiguration data = null, string description = null, SystemData systemData = null, string provisioningState = null, IDictionary<string, string> tags = null, IDictionary<string, string> properties = null, string isEnabled = null, IDictionary<string, EvaluatorConfiguration> evaluators = null, Trigger trigger = null)
        {
            tags ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            evaluators ??= new Dictionary<string, EvaluatorConfiguration>();

            return new EvaluationSchedule(
                name,
                data,
                description,
                systemData,
                provisioningState,
                tags,
                properties,
                isEnabled,
                evaluators,
                trigger,
                serializedAdditionalRawData: null);
        }
    }
}
