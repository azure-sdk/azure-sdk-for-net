// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.OneDP.Samples
{
    public partial class Samples_Agents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = client.CreateAgent("<displayName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = await client.CreateAgentAsync("<displayName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                agentModel = new
                {
                    provider = "openai",
                    options = new
                    {
                        temperature = 123.45F,
                        topP = 123.45F,
                    },
                    id = "<id>",
                    endpoint = "<endpoint>",
                },
                instructions = "<instructions>",
                tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                toolChoice = new
                {
                    type = "auto",
                    toolNames = new object[]
            {
"<toolNames>"
            },
                },
            });
            Response response = client.CreateAgent(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                agentModel = new
                {
                    provider = "openai",
                    options = new
                    {
                        temperature = 123.45F,
                        topP = 123.45F,
                    },
                    id = "<id>",
                    endpoint = "<endpoint>",
                },
                instructions = "<instructions>",
                tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                toolChoice = new
                {
                    type = "auto",
                    toolNames = new object[]
            {
"<toolNames>"
            },
                },
            });
            Response response = await client.CreateAgentAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_CreateAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            AgentModel agentModel = new OpenAIAgentModel("<id>", new JSONAny())
            {
                Endpoint = "<endpoint>",
            };
            ToolChoiceBehavior toolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" });
            Response<Agent> response = client.CreateAgent("<displayName>", agentModel: agentModel, instructions: "<instructions>", tools: new AgentToolDefinition[]
            {
new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}
            }, toolChoice: toolChoice);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_CreateAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            AgentModel agentModel = new OpenAIAgentModel("<id>", new JSONAny())
            {
                Endpoint = "<endpoint>",
            };
            ToolChoiceBehavior toolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" });
            Response<Agent> response = await client.CreateAgentAsync("<displayName>", agentModel: agentModel, instructions: "<instructions>", tools: new AgentToolDefinition[]
            {
new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}
            }, toolChoice: toolChoice);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetAgent("<agentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetAgentAsync("<agentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = client.GetAgent("<agentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = await client.GetAgentAsync("<agentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetAgent("<agentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetAgentAsync("<agentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = client.GetAgent("<agentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Agent> response = await client.GetAgentAsync("<agentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                configurationOptions = new
                {
                    displayName = "<displayName>",
                },
            });
            Response response = client.UpdateAgent("<agentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                configurationOptions = new
                {
                    displayName = "<displayName>",
                },
            });
            Response response = await client.UpdateAgentAsync("<agentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Agent body = new Agent(new AgentConfigurationOptions("<displayName>"));
            Response<Agent> response = client.UpdateAgent("<agentId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Agent body = new Agent(new AgentConfigurationOptions("<displayName>"));
            Response<Agent> response = await client.UpdateAgentAsync("<agentId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                metadata = new
                {
                    key = "<metadata>",
                },
                configurationOptions = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = client.UpdateAgent("<agentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                metadata = new
                {
                    key = "<metadata>",
                },
                configurationOptions = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = await client.UpdateAgentAsync("<agentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_UpdateAgent_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Agent body = new Agent(new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            })
            {
                Description = "<description>",
                Metadata =
{
["key"] = "<metadata>"
},
            };
            Response<Agent> response = client.UpdateAgent("<agentId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_UpdateAgent_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Agent body = new Agent(new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            })
            {
                Description = "<description>",
                Metadata =
{
["key"] = "<metadata>"
},
            };
            Response<Agent> response = await client.UpdateAgentAsync("<agentId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteAgent_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteAgent("<agentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteAgent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteAgentAsync("<agentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_DeleteAgent_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteAgent("<agentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_DeleteAgent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteAgentAsync("<agentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetAgents(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetAgentsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("displayName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Agent>> response = client.GetAgents();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Agent>> response = await client.GetAgentsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetAgents(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetAgentsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("instructions").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result[0].GetProperty("configurationOptions").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetAgents_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Agent>> response = client.GetAgents();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetAgents_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Agent>> response = await client.GetAgentsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Run_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = client.Run(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Run_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = await client.RunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Run_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = client.Run(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Run_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = await client.RunAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Run_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                agentId = "<agentId>",
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
                conversationId = "<conversationId>",
                metadata = new
                {
                    key = "<metadata>",
                },
                options = new
                {
                    truncationStrategy = new
                    {
                        type = "auto",
                        lastMessages = 1234,
                    },
                },
                userId = "<userId>",
                agentConfiguration = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = client.Run(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("store").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
            Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Run_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                agentId = "<agentId>",
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
                conversationId = "<conversationId>",
                metadata = new
                {
                    key = "<metadata>",
                },
                options = new
                {
                    truncationStrategy = new
                    {
                        type = "auto",
                        lastMessages = 1234,
                    },
                },
                userId = "<userId>",
                agentConfiguration = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = await client.RunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("store").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
            Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Run_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            RunOptions options = new RunOptions
            {
                TruncationStrategy = new TruncationStrategy(TruncationStrategyType.Auto)
                {
                    LastMessages = 1234,
                },
            };
            AgentConfigurationOptions agentConfiguration = new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            };
            Response<Run> response = client.Run(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            }, agentId: "<agentId>", conversationId: "<conversationId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, options: options, userId: "<userId>", agentConfiguration: agentConfiguration);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Run_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            RunOptions options = new RunOptions
            {
                TruncationStrategy = new TruncationStrategy(TruncationStrategyType.Auto)
                {
                    LastMessages = 1234,
                },
            };
            AgentConfigurationOptions agentConfiguration = new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            };
            Response<Run> response = await client.RunAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            }, agentId: "<agentId>", conversationId: "<conversationId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, options: options, userId: "<userId>", agentConfiguration: agentConfiguration);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Stream_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = client.Stream(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Stream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = await client.StreamAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Stream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.Stream(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Stream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.StreamAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Stream_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                agentId = "<agentId>",
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
                conversationId = "<conversationId>",
                metadata = new
                {
                    key = "<metadata>",
                },
                options = new
                {
                    truncationStrategy = new
                    {
                        type = "auto",
                        lastMessages = 1234,
                    },
                },
                userId = "<userId>",
                agentConfiguration = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = client.Stream(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Stream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                agentId = "<agentId>",
                input = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
                conversationId = "<conversationId>",
                metadata = new
                {
                    key = "<metadata>",
                },
                options = new
                {
                    truncationStrategy = new
                    {
                        type = "auto",
                        lastMessages = 1234,
                    },
                },
                userId = "<userId>",
                agentConfiguration = new
                {
                    displayName = "<displayName>",
                    agentModel = new
                    {
                        provider = "openai",
                        options = new
                        {
                            temperature = 123.45F,
                            topP = 123.45F,
                        },
                        id = "<id>",
                        endpoint = "<endpoint>",
                    },
                    instructions = "<instructions>",
                    tools = new object[]
            {
new Dictionary<string, object>
{
["type"] = "Function",
["name"] = "<name>",
["description"] = "<description>",
["parameters"] = new
{
type = "<type>",
properties = new {},
required = new object[]
{
"<required>"
},
},
["strict"] = true,
["options"] = null,
["override"] = new
{
name = "<name>",
description = "<description>",
}
}
            },
                    toolChoice = new
                    {
                        type = "auto",
                        toolNames = new object[]
            {
"<toolNames>"
            },
                    },
                },
            });
            Response response = await client.StreamAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_Stream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            RunOptions options = new RunOptions
            {
                TruncationStrategy = new TruncationStrategy(TruncationStrategyType.Auto)
                {
                    LastMessages = 1234,
                },
            };
            AgentConfigurationOptions agentConfiguration = new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            };
            Response response = client.Stream(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            }, agentId: "<agentId>", conversationId: "<conversationId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, options: options, userId: "<userId>", agentConfiguration: agentConfiguration);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_Stream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            RunOptions options = new RunOptions
            {
                TruncationStrategy = new TruncationStrategy(TruncationStrategyType.Auto)
                {
                    LastMessages = 1234,
                },
            };
            AgentConfigurationOptions agentConfiguration = new AgentConfigurationOptions("<displayName>")
            {
                AgentModel = new OpenAIAgentModel("<id>", new JSONAny())
                {
                    Endpoint = "<endpoint>",
                },
                Instructions = "<instructions>",
                Tools = {new FunctionToolDefinition("<name>")
{
Description = "<description>",
Parameters = new JSONSchema("<type>", new Dictionary<string, JSONSchema>
{
["key"] = default
})
{
Required = {"<required>"},
},
Strict = true,
Options = default,
Override = new AgentToolDefinitionOverride
{
Name = "<name>",
Description = "<description>",
Parameters = default,
},
}},
                ToolChoice = new AutoToolChoiceBehavior(new string[] { "<toolNames>" }),
            };
            Response response = await client.StreamAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            }, agentId: "<agentId>", conversationId: "<conversationId>", metadata: new Dictionary<string, string>
            {
                ["key"] = "<metadata>"
            }, options: options, userId: "<userId>", agentConfiguration: agentConfiguration);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetRun("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetRunAsync("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = client.GetRun("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = await client.GetRunAsync("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetRun("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("store").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
            Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetRunAsync("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runId").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("store").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
            Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
            Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = client.GetRun("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<Run> response = await client.GetRunAsync("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunInputs_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetRunInputs("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunInputs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetRunInputsAsync("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunInputs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<RunInputs> response = client.GetRunInputs("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunInputs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<RunInputs> response = await client.GetRunInputsAsync("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunInputs_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetRunInputs("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunInputs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetRunInputsAsync("<runId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("input")[0].GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("instructions").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
            Console.WriteLine(result.GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Agents_GetRunInputs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<RunInputs> response = client.GetRunInputs("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Agents_GetRunInputs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            Response<RunInputs> response = await client.GetRunInputsAsync("<runId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRuns_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetRuns(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRuns_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetRunsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRuns_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            foreach (Run item in client.GetRuns())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRuns_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            await foreach (Run item in client.GetRunsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRuns_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetRuns(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("store").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
                Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRuns_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetRunsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("input")[0].GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("options").GetProperty("truncationStrategy").GetProperty("lastMessages").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("endpoint").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("stringValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("intValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("floatValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("boolValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("agentModel").GetProperty("options").GetProperty("nullValue").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("instructions").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("options").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("tools")[0].GetProperty("override").GetProperty("parameters").GetProperty("required")[0].ToString());
                Console.WriteLine(result.GetProperty("runInputs").GetProperty("agentConfiguration").GetProperty("toolChoice").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("store").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("userId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("messageId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("agentRunId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("conversationId").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("role").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("content")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("authorName").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("output")[0].GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("totalTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("inputTokenDetails").GetProperty("cachedTokens").ToString());
                Console.WriteLine(result.GetProperty("usage").GetProperty("outputTokenDetails").GetProperty("reasoningTokens").ToString());
                Console.WriteLine(result.GetProperty("incompleteDetails").GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Run_GetRuns_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            foreach (Run item in client.GetRuns())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Run_GetRuns_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Agents client = new AIProjectClient(endpoint, credential).GetAgentsClient(apiVersion: "2025-05-01-preview");

            await foreach (Run item in client.GetRunsAsync())
            {
            }
        }
    }
}
