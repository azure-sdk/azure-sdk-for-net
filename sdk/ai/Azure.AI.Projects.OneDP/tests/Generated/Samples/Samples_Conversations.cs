// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.OneDP.Samples
{
    public partial class Samples_Conversations
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_CreateConversation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = client.CreateConversation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_CreateConversation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = await client.CreateConversationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_CreateConversation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = client.CreateConversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_CreateConversation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = await client.CreateConversationAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_CreateConversation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
            });
            Response response = client.CreateConversation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_CreateConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
            });
            Response response = await client.CreateConversationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_CreateConversation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = client.CreateConversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_CreateConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = await client.CreateConversationAsync(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = client.GetConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = await client.GetConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetConversation("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetConversationAsync("<conversationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = client.GetConversation("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<Conversation> response = await client.GetConversationAsync("<conversationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_UpdateConversation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = client.UpdateConversation("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_UpdateConversation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
}
},
}
            },
            });
            Response response = await client.UpdateConversationAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_UpdateConversation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Conversation body = new Conversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
            Response<Conversation> response = client.UpdateConversation("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_UpdateConversation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Conversation body = new Conversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
})
            });
            Response<Conversation> response = await client.UpdateConversationAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_UpdateConversation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
            });
            Response response = client.UpdateConversation("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_UpdateConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                messages = new object[]
            {
new
{
role = "user",
content = new object[]
{
new
{
type = "text",
text = "<text>",
annotations = new object[]
{
new
{
type = "<type>",
ToolCallId = "<ToolCallId>",
jsonPath = "<jsonPath>",
url = "<url>",
start = 1234,
end = 1234,
}
},
}
},
userId = "<userId>",
agentId = "<agentId>",
agentRunId = "<agentRunId>",
authorName = "<authorName>",
createdAt = 1234L,
completedAt = 1234L,
}
            },
            });
            Response response = await client.UpdateConversationAsync("<conversationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_UpdateConversation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Conversation body = new Conversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            });
            Response<Conversation> response = client.UpdateConversation("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_UpdateConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Conversation body = new Conversation(new ChatMessage[]
            {
new UserMessage(new AIContent[]
{
new TextContent("<text>")
{
Annotations = {new Annotations("<type>")
{
ToolCallId = "<ToolCallId>",
JsonPath = "<jsonPath>",
Url = "<url>",
Start = 1234,
End = 1234,
}},
}
})
{
UserId = "<userId>",
AgentId = "<agentId>",
AgentRunId = "<agentRunId>",
AuthorName = "<authorName>",
CreatedAt = 1234L,
CompletedAt = 1234L,
}
            });
            Response<Conversation> response = await client.UpdateConversationAsync("<conversationId>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_DeleteConversation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_DeleteConversation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_DeleteConversation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteConversation("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_DeleteConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteConversationAsync("<conversationId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversations_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetConversations(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversations_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetConversationsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversations_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Conversation>> response = client.GetConversations();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversations_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Conversation>> response = await client.GetConversationsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversations_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetConversations(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversations_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetConversationsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("userId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("agentId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("messageId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("agentRunId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("conversationId").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("role").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("content")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("authorName").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result[0].GetProperty("messages")[0].GetProperty("completedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Conversations_GetConversations_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Conversation>> response = client.GetConversations();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Conversations_GetConversations_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Conversations client = new AIProjectClient(endpoint, credential).GetConversationsClient(apiVersion: "2025-05-01-preview");

            Response<IReadOnlyList<Conversation>> response = await client.GetConversationsAsync();
        }
    }
}
