// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.OneDP.Samples
{
    public partial class Samples_Datasets
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersion_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetVersion("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersion_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetVersionAsync("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersion_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<DatasetVersion> response = client.GetVersion("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersion_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<DatasetVersion> response = await client.GetVersionAsync("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersion_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetVersion("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetVersionAsync("<name>", "<version>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersion_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<DatasetVersion> response = client.GetVersion("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersion_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<DatasetVersion> response = await client.GetVersionAsync("<name>", "<version>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_DeleteVersion_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteVersion("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_DeleteVersion_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteVersionAsync("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_DeleteVersion_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = client.DeleteVersion("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_DeleteVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.DeleteVersionAsync("<name>", "<version>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Create_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
            });
            Response response = client.Create("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Create_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
            });
            Response response = await client.CreateAsync("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Create_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>");
            Response<DatasetVersion> response = client.Create("<name>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Create_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>");
            Response<DatasetVersion> response = await client.CreateAsync("<name>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Create_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
                stage = "<stage>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = client.Create("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Create_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
                stage = "<stage>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = await client.CreateAsync("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_Create_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>")
            {
                Stage = "<stage>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
            };
            Response<DatasetVersion> response = client.Create("<name>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_Create_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>")
            {
                Stage = "<stage>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
            };
            Response<DatasetVersion> response = await client.CreateAsync("<name>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateVersion_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
            });
            Response response = client.CreateVersion("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateVersion_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
            });
            Response response = await client.CreateVersionAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateVersion_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>");
            Response<DatasetVersion> response = client.CreateVersion("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateVersion_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>");
            Response<DatasetVersion> response = await client.CreateVersionAsync("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateVersion_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
                stage = "<stage>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = client.CreateVersion("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateVersion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                type = "uri_file",
                openAIPurpose = "<openAIPurpose>",
                datasetUri = "<datasetUri>",
                stage = "<stage>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Response response = await client.CreateVersionAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("datasetUri").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("isReference").ToString());
            Console.WriteLine(result.GetProperty("stage").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_CreateVersion_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>")
            {
                Stage = "<stage>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
            };
            Response<DatasetVersion> response = client.CreateVersion("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_CreateVersion_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            DatasetVersion body = new FileDatasetVersion("<datasetUri>", "<openAIPurpose>")
            {
                Stage = "<stage>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
            };
            Response<DatasetVersion> response = await client.CreateVersionAsync("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUpload_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = client.StartPendingUpload("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUpload_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = await client.StartPendingUploadAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUpload_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            PendingUploadRequest body = new PendingUploadRequest();
            Response<PendingUploadResponse> response = client.StartPendingUpload("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUpload_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            PendingUploadRequest body = new PendingUploadRequest();
            Response<PendingUploadResponse> response = await client.StartPendingUploadAsync("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUpload_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "<pendingUploadId>",
                connectionName = "<connectionName>",
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = client.StartPendingUpload("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("datasetVersion").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUpload_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "<pendingUploadId>",
                connectionName = "<connectionName>",
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = await client.StartPendingUploadAsync("<name>", "<version>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("datasetVersion").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUpload_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            PendingUploadRequest body = new PendingUploadRequest
            {
                PendingUploadId = "<pendingUploadId>",
                ConnectionName = "<connectionName>",
            };
            Response<PendingUploadResponse> response = client.StartPendingUpload("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUpload_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            PendingUploadRequest body = new PendingUploadRequest
            {
                PendingUploadId = "<pendingUploadId>",
                ConnectionName = "<connectionName>",
            };
            Response<PendingUploadResponse> response = await client.StartPendingUploadAsync("<name>", "<version>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUploadAutoIncrement_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = client.StartPendingUploadAutoIncrement("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUploadAutoIncrement_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = await client.StartPendingUploadAutoIncrementAsync("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUploadAutoIncrement_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<PendingUploadResponse> response = client.StartPendingUploadAutoIncrement("<name>", PendingUploadType.TemporaryBlobReference);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUploadAutoIncrement_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<PendingUploadResponse> response = await client.StartPendingUploadAutoIncrementAsync("<name>", PendingUploadType.TemporaryBlobReference);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUploadAutoIncrement_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "<pendingUploadId>",
                connectionName = "<connectionName>",
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = client.StartPendingUploadAutoIncrement("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("datasetVersion").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUploadAutoIncrement_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                pendingUploadId = "<pendingUploadId>",
                connectionName = "<connectionName>",
                pendingUploadType = "TemporaryBlobReference",
            });
            Response response = await client.StartPendingUploadAutoIncrementAsync("<name>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("blobUri").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("storageAccountArmId").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("sasToken").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("blobReferenceForConsumption").GetProperty("credential").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadId").ToString());
            Console.WriteLine(result.GetProperty("datasetVersion").ToString());
            Console.WriteLine(result.GetProperty("pendingUploadType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_StartPendingUploadAutoIncrement_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<PendingUploadResponse> response = client.StartPendingUploadAutoIncrement("<name>", PendingUploadType.TemporaryBlobReference, pendingUploadId: "<pendingUploadId>", connectionName: "<connectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_StartPendingUploadAutoIncrement_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            Response<PendingUploadResponse> response = await client.StartPendingUploadAutoIncrementAsync("<name>", PendingUploadType.TemporaryBlobReference, pendingUploadId: "<pendingUploadId>", connectionName: "<connectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetVersions("<name>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetVersionsAsync("<name>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (DatasetVersion item in client.GetVersions("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (DatasetVersion item in client.GetVersionsAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetVersions("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("stage").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetVersionsAsync("<name>", 1234, "<skip>", "<tags>", "ActiveOnly", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("stage").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Datasets_GetVersions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (DatasetVersion item in client.GetVersions("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: ListViewType.ActiveOnly))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Datasets_GetVersions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (DatasetVersion item in client.GetVersionsAsync("<name>", maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: ListViewType.ActiveOnly))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetLatests_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetLatests(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetLatests_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetLatestsAsync(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetLatests_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (DatasetVersion item in client.GetLatests())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetLatests_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (DatasetVersion item in client.GetLatestsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetLatests_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetLatests(1234, "<skip>", "<tags>", "ActiveOnly", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("stage").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetLatests_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetLatestsAsync(1234, "<skip>", "<tags>", "ActiveOnly", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("datasetUri").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("isReference").ToString());
                Console.WriteLine(result.GetProperty("stage").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DatasetVersion_GetLatests_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            foreach (DatasetVersion item in client.GetLatests(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: ListViewType.ActiveOnly))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DatasetVersion_GetLatests_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Datasets client = new AIProjectClient(endpoint, credential).GetDatasetsClient(apiVersion: "2025-05-01-preview");

            await foreach (DatasetVersion item in client.GetLatestsAsync(maxCount: 1234, skip: "<skip>", tags: "<tags>", listViewType: ListViewType.ActiveOnly))
            {
            }
        }
    }
}
