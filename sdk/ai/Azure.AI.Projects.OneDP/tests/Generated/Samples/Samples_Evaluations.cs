// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Projects.OneDP.Samples
{
    public partial class Samples_Evaluations
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetEvaluation("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetEvaluationAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response<Evaluation> response = client.GetEvaluation("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response<Evaluation> response = await client.GetEvaluationAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response response = client.GetEvaluation("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response response = await client.GetEvaluationAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response<Evaluation> response = client.GetEvaluation("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Response<Evaluation> response = await client.GetEvaluationAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateRun_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    type = "dataset",
                    id = "<id>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                    },
                },
            });
            Response response = client.CreateRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    type = "dataset",
                    id = "<id>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                    },
                },
            });
            Response response = await client.CreateRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Evaluation evaluation = new Evaluation(new InputDataset("<id>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
            });
            Response<Evaluation> response = client.CreateRun(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Evaluation evaluation = new Evaluation(new InputDataset("<id>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
            });
            Response<Evaluation> response = await client.CreateRunAsync(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateRun_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    type = "dataset",
                    id = "<id>",
                },
                displayName = "<displayName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
                properties = new
                {
                    key = "<properties>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                        initParams = new
                        {
                            key = new object(),
                        },
                        dataMapping = new
                        {
                            key = "<dataMapping>",
                        },
                    },
                },
            });
            Response response = client.CreateRun(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                data = new
                {
                    type = "dataset",
                    id = "<id>",
                },
                displayName = "<displayName>",
                description = "<description>",
                tags = new
                {
                    key = "<tags>",
                },
                properties = new
                {
                    key = "<properties>",
                },
                evaluators = new
                {
                    key = new
                    {
                        id = "<id>",
                        initParams = new
                        {
                            key = new object(),
                        },
                        dataMapping = new
                        {
                            key = "<dataMapping>",
                        },
                    },
                },
            });
            Response response = await client.CreateRunAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluations_CreateRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Evaluation evaluation = new Evaluation(new InputDataset("<id>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
                {
                    InitParams =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                    DataMapping =
{
["key"] = "<dataMapping>"
},
                }
            })
            {
                DisplayName = "<displayName>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
                Properties =
{
["key"] = "<properties>"
},
            };
            Response<Evaluation> response = client.CreateRun(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluations_CreateRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            Evaluation evaluation = new Evaluation(new InputDataset("<id>"), new Dictionary<string, EvaluatorConfiguration>
            {
                ["key"] = new EvaluatorConfiguration("<id>")
                {
                    InitParams =
{
["key"] = BinaryData.FromObjectAsJson(new object())
},
                    DataMapping =
{
["key"] = "<dataMapping>"
},
                }
            })
            {
                DisplayName = "<displayName>",
                Description = "<description>",
                Tags =
{
["key"] = "<tags>"
},
                Properties =
{
["key"] = "<properties>"
},
            };
            Response<Evaluation> response = await client.CreateRunAsync(evaluation);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetEvaluations(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetEvaluationsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            foreach (Evaluation item in client.GetEvaluations())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            await foreach (Evaluation item in client.GetEvaluationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            foreach (BinaryData item in client.GetEvaluations(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            await foreach (BinaryData item in client.GetEvaluationsAsync(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("initParams").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("dataMapping").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Evaluation_GetEvaluations_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            foreach (Evaluation item in client.GetEvaluations(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Evaluation_GetEvaluations_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-01-preview");

            await foreach (Evaluation item in client.GetEvaluationsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
