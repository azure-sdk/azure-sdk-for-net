// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_VectorStores
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc"
            },
                name = "pgcxfuhwpslcx",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "wcjtwvdweaxymq",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 144,
                },
                metadata = new
                {
                    key2484 = "txjmlynjqsgsmxptcevvuedz",
                },
            });
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc",
"jjunjzpidhksuuintlc"
            },
                name = "pgcxfuhwpslcx",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "wcjtwvdweaxymq",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 144,
                },
                metadata = new
                {
                    key2484 = "txjmlynjqsgsmxptcevvuedz",
                },
            });
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response response = client.GetVectorStore("bdgmwefpjgthamfkdp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response response = await client.GetVectorStoreAsync("bdgmwefpjgthamfkdp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.GetVectorStore("bdgmwefpjgthamfkdp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.GetVectorStoreAsync("bdgmwefpjgthamfkdp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response response = client.GetVectorStore("yhpurthosqpykbuejivau", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response response = await client.GetVectorStoreAsync("yhpurthosqpykbuejivau", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.GetVectorStore("yhpurthosqpykbuejivau");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.GetVectorStoreAsync("yhpurthosqpykbuejivau");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "bqtrlkeq",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 144,
                },
                metadata = new
                {
                    key2875 = "ezdyb",
                },
            });
            Response response = client.ModifyVectorStore("htazgznotfwp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "bqtrlkeq",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 144,
                },
                metadata = new
                {
                    key2875 = "ezdyb",
                },
            });
            Response response = await client.ModifyVectorStoreAsync("htazgznotfwp", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.ModifyVectorStore("htazgznotfwp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.ModifyVectorStoreAsync("htazgznotfwp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("vkkqftvpggdhfaojmckllokbgvug", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("vkkqftvpggdhfaojmckllokbgvug", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = client.ModifyVectorStore("vkkqftvpggdhfaojmckllokbgvug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            Response<PersistentAgentsVectorStore> response = await client.ModifyVectorStoreAsync("vkkqftvpggdhfaojmckllokbgvug");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            foreach (BinaryData item in client.GetVectorStores(12, "asc", "eptjqoruahrjhtsectwl", "eyxgezixezcnsshbqluqexmegnnb", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            await foreach (BinaryData item in client.GetVectorStoresAsync(12, "asc", "eptjqoruahrjhtsectwl", "eyxgezixezcnsshbqluqexmegnnb", (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            foreach (PersistentAgentsVectorStore item in client.GetVectorStores())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            await foreach (PersistentAgentsVectorStore item in client.GetVectorStoresAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            foreach (BinaryData item in client.GetVectorStores((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            await foreach (BinaryData item in client.GetVectorStoresAsync((int?)null, (string)null, (string)null, (string)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            foreach (PersistentAgentsVectorStore item in client.GetVectorStores())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStores_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStores client = new PersistentAgentsAdministrationClient(endpoint, credential).GetVectorStoresClient();

            await foreach (PersistentAgentsVectorStore item in client.GetVectorStoresAsync())
            {
            }
        }
    }
}
