// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Agents.Persistent.Samples
{
    public partial class Samples_VectorStoresClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt"
            },
                name = "u",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 73,
                },
                metadata = new
                {
                    key9029 = "ghicfhykvpyj",
                },
            });
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt",
"hileejdmsljnblywbqgrycpbeczbt"
            },
                name = "u",
                configuration = new
                {
                    data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
                },
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 73,
                },
                metadata = new
                {
                    key9029 = "ghicfhykvpyj",
                },
            });
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStore(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.CreateVectorStore();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStore_VectorStoresCreateVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.CreateVectorStoreAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStore("vjsfufonwjwzvygdq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreAsync("vjsfufonwjwzvygdq", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.GetVectorStore("vjsfufonwjwzvygdq");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.GetVectorStoreAsync("vjsfufonwjwzvygdq");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStore("jhrejmwmyblsdagsx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreAsync("jhrejmwmyblsdagsx", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.GetVectorStore("jhrejmwmyblsdagsx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStore_VectorStoresGetVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.GetVectorStoreAsync("jhrejmwmyblsdagsx");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "jcrzfsgxsgelufbkjidfvnu",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 73,
                },
                metadata = new
                {
                    key9792 = "cxmmdtwupsjnjixdoaravhbkrqqqm",
                },
            });
            Response response = client.ModifyVectorStore("pqhrqxzleymrjogjppdtlmxlsfculn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "jcrzfsgxsgelufbkjidfvnu",
                expires_after = new
                {
                    anchor = "last_active_at",
                    days = 73,
                },
                metadata = new
                {
                    key9792 = "cxmmdtwupsjnjixdoaravhbkrqqqm",
                },
            });
            Response response = await client.ModifyVectorStoreAsync("pqhrqxzleymrjogjppdtlmxlsfculn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.ModifyVectorStore("pqhrqxzleymrjogjppdtlmxlsfculn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.ModifyVectorStoreAsync("pqhrqxzleymrjogjppdtlmxlsfculn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ModifyVectorStore("jlamdmhxwayxxeiexcyulxcocw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModifyVectorStoreAsync("jlamdmhxwayxxeiexcyulxcocw", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_active_at").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = client.ModifyVectorStore("jlamdmhxwayxxeiexcyulxcocw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_ModifyVectorStore_VectorStoresModifyVectorStoreMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<PersistentAgentsVectorStore> response = await client.ModifyVectorStoreAsync("jlamdmhxwayxxeiexcyulxcocw");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "emdzaopxo",
                data_source = new
                {
                    uri = "soctjzrqyjyxixlqr",
                    type = "uri_asset",
                },
            });
            Response response = client.CreateVectorStoreFile("kox", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_id = "emdzaopxo",
                data_source = new
                {
                    uri = "soctjzrqyjyxixlqr",
                    type = "uri_asset",
                },
            });
            Response response = await client.CreateVectorStoreFileAsync("kox", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = client.CreateVectorStoreFile("kox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFile_VectorStoreFilesCreateVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.CreateVectorStoreFileAsync("kox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStoreFile("qusinxkarhcskvxntuym", "bds", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileAsync("qusinxkarhcskvxntuym", "bds", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = client.GetVectorStoreFile("qusinxkarhcskvxntuym", "bds");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("qusinxkarhcskvxntuym", "bds");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStoreFile("sar", "fakyvuniwxszpqxxcovnohhacypzp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileAsync("sar", "fakyvuniwxszpqxxcovnohhacypzp", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("usage_bytes").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = client.GetVectorStoreFile("sar", "fakyvuniwxszpqxxcovnohhacypzp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFile_VectorStoreFilesGetVectorStoreFileMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFile> response = await client.GetVectorStoreFileAsync("sar", "fakyvuniwxszpqxxcovnohhacypzp");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall"
            },
                data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
            });
            Response response = client.CreateVectorStoreFileBatch("bvcjtemrnqtycjuaerlxllednm", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                file_ids = new object[]
            {
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall",
"sseovtmhsfpghlqyzulhnhhhasall"
            },
                data_sources = new object[]
            {
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
},
new
{
uri = "soctjzrqyjyxixlqr",
type = "uri_asset",
}
            },
            });
            Response response = await client.CreateVectorStoreFileBatchAsync("bvcjtemrnqtycjuaerlxllednm", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("bvcjtemrnqtycjuaerlxllednm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("bvcjtemrnqtycjuaerlxllednm");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateVectorStoreFileBatch("eyxdrn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateVectorStoreFileBatchAsync("eyxdrn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CreateVectorStoreFileBatch("eyxdrn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CreateVectorStoreFileBatch_VectorStoreFileBatchesCreateVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CreateVectorStoreFileBatchAsync("eyxdrn");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatch("juytv", "kdcqszoqvfaipuhvijnwxmegovmeuv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchAsync("juytv", "kdcqszoqvfaipuhvijnwxmegovmeuv", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("juytv", "kdcqszoqvfaipuhvijnwxmegovmeuv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("juytv", "kdcqszoqvfaipuhvijnwxmegovmeuv");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.GetVectorStoreFileBatch("pmzxfueg", "kz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.GetVectorStoreFileBatchAsync("pmzxfueg", "kz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.GetVectorStoreFileBatch("pmzxfueg", "kz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatch_VectorStoreFileBatchesGetVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.GetVectorStoreFileBatchAsync("pmzxfueg", "kz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.CancelVectorStoreFileBatch("lqtvimqtqecqy", "kpjojtaxsspjvzyxmfgwxusqde", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.CancelVectorStoreFileBatchAsync("lqtvimqtqecqy", "kpjojtaxsspjvzyxmfgwxusqde", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("lqtvimqtqecqy", "kpjojtaxsspjvzyxmfgwxusqde");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("lqtvimqtqecqy", "kpjojtaxsspjvzyxmfgwxusqde");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = client.CancelVectorStoreFileBatch("qsniwwejf", "fldyjeftzzkqinhz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response response = await client.CancelVectorStoreFileBatchAsync("qsniwwejf", "fldyjeftzzkqinhz", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("object").ToString());
            Console.WriteLine(result.GetProperty("created_at").ToString());
            Console.WriteLine(result.GetProperty("vector_store_id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = client.CancelVectorStoreFileBatch("qsniwwejf", "fldyjeftzzkqinhz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_CancelVectorStoreFileBatch_VectorStoreFileBatchesCancelVectorStoreFileBatchMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            Response<VectorStoreFileBatch> response = await client.CancelVectorStoreFileBatchAsync("qsniwwejf", "fldyjeftzzkqinhz");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStores(20, "asc", "cfgbzxzpyyflnolbxpkbsz", "forspimiuzzd", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoresAsync(20, "asc", "cfgbzxzpyyflnolbxpkbsz", "forspimiuzzd", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (PersistentAgentsVectorStore item in client.GetVectorStores())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (PersistentAgentsVectorStore item in client.GetVectorStoresAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStores(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoresAsync(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("in_progress").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("completed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("file_counts").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_active_at").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (PersistentAgentsVectorStore item in client.GetVectorStores())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStores_VectorStoresListVectorStoresMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (PersistentAgentsVectorStore item in client.GetVectorStoresAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStoreFiles("nuppye", "in_progress", 8, "asc", "cayfrop", "rdxomcqockbejgfxd", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoreFilesAsync("nuppye", "in_progress", 8, "asc", "cayfrop", "rdxomcqockbejgfxd", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (VectorStoreFile item in client.GetVectorStoreFiles("nuppye"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (VectorStoreFile item in client.GetVectorStoreFilesAsync("nuppye"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStoreFiles("rijuypqar", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoreFilesAsync("rijuypqar", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (VectorStoreFile item in client.GetVectorStoreFiles("rijuypqar"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFiles_VectorStoreFilesListVectorStoreFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (VectorStoreFile item in client.GetVectorStoreFilesAsync("rijuypqar"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMaximumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStoreFileBatchFiles("b", "itweqinnhpanpqxkxwqfi", "in_progress", 22, "asc", "uotopjkuhxuxypqooudmdt", "lunnzgjqyjlrlvsldrkhrjvaqfovp", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMaximumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoreFileBatchFilesAsync("b", "itweqinnhpanpqxkxwqfi", "in_progress", 22, "asc", "uotopjkuhxuxypqooudmdt", "lunnzgjqyjlrlvsldrkhrjvaqfovp", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMaximumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (VectorStoreFile item in client.GetVectorStoreFileBatchFiles("b", "itweqinnhpanpqxkxwqfi"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMaximumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (VectorStoreFile item in client.GetVectorStoreFileBatchFilesAsync("b", "itweqinnhpanpqxkxwqfi"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMinimumSet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (BinaryData item in client.GetVectorStoreFileBatchFiles("gipykvmemjcss", "awzuqhqpzl", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMinimumSet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (BinaryData item in client.GetVectorStoreFileBatchFilesAsync("gipykvmemjcss", "awzuqhqpzl", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("object").ToString());
                Console.WriteLine(result.GetProperty("usage_bytes").ToString());
                Console.WriteLine(result.GetProperty("created_at").ToString());
                Console.WriteLine(result.GetProperty("vector_store_id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("last_error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("chunking_strategy").GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMinimumSet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            foreach (VectorStoreFile item in client.GetVectorStoreFileBatchFiles("gipykvmemjcss", "awzuqhqpzl"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_VectorStoresClient_GetVectorStoreFileBatchFiles_VectorStoreFileBatchesListVectorStoreFileBatchFilesMinimumSet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            VectorStoresClient client = new VectorStoresClient(endpoint, credential);

            await foreach (VectorStoreFile item in client.GetVectorStoreFileBatchFilesAsync("gipykvmemjcss", "awzuqhqpzl"))
            {
            }
        }
    }
}
