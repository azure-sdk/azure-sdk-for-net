// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Agents.Persistent
{
    /// <summary> Model factory for models. </summary>
    public static partial class PersistentAgentsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Persistent.PersistentAgentsVectorStore"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store was created. </param>
        /// <param name="name"> The name of the vector store. </param>
        /// <param name="usageBytes"> The total number of bytes used by the files in the vector store. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <param name="status"> The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use. </param>
        /// <param name="expiresAfter"> Details on when this vector store expires. </param>
        /// <param name="expiresAt"> The Unix timestamp (in seconds) for when the vector store will expire. </param>
        /// <param name="lastActiveAt"> The Unix timestamp (in seconds) for when the vector store was last active. </param>
        /// <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        /// <returns> A new <see cref="Persistent.PersistentAgentsVectorStore"/> instance for mocking. </returns>
        public static PersistentAgentsVectorStore PersistentAgentsVectorStore(string id = null, PersistentAgentsVectorStoreObject @object = default, DateTimeOffset createdAt = default, string name = null, int usageBytes = default, VectorStoreFileCount fileCounts = null, VectorStoreStatus status = default, VectorStoreExpirationPolicy expiresAfter = null, DateTimeOffset? expiresAt = null, DateTimeOffset? lastActiveAt = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new PersistentAgentsVectorStore(
                id,
                @object,
                createdAt,
                name,
                usageBytes,
                fileCounts,
                status,
                expiresAfter,
                expiresAt,
                lastActiveAt,
                metadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileCount"/>. </summary>
        /// <param name="inProgress"> The number of files that are currently being processed. </param>
        /// <param name="completed"> The number of files that have been successfully processed. </param>
        /// <param name="failed"> The number of files that have failed to process. </param>
        /// <param name="cancelled"> The number of files that were cancelled. </param>
        /// <param name="total"> The total number of files. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileCount"/> instance for mocking. </returns>
        public static VectorStoreFileCount VectorStoreFileCount(int inProgress = default, int completed = default, int failed = default, int cancelled = default, int total = default)
        {
            return new VectorStoreFileCount(
                inProgress,
                completed,
                failed,
                cancelled,
                total,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreStaticChunkingStrategyRequest"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreStaticChunkingStrategyRequest"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyRequest VectorStoreStaticChunkingStrategyRequest(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyRequest(VectorStoreChunkingStrategyRequestType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFile"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file`. </param>
        /// <param name="usageBytes">
        /// The total vector store usage in bytes. Note that this may be different from the original file
        /// size.
        /// </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <param name="chunkingStrategy">
        /// The strategy used to chunk the file.
        /// Please note <see cref="VectorStoreChunkingStrategyResponse"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VectorStoreAutoChunkingStrategyResponse"/> and <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFile"/> instance for mocking. </returns>
        public static VectorStoreFile VectorStoreFile(string id = null, VectorStoreFileObject @object = default, int usageBytes = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileStatus status = default, VectorStoreFileError lastError = null, VectorStoreChunkingStrategyResponse chunkingStrategy = null)
        {
            return new VectorStoreFile(
                id,
                @object,
                usageBytes,
                createdAt,
                vectorStoreId,
                status,
                lastError,
                chunkingStrategy,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileError"/>. </summary>
        /// <param name="code"> One of `server_error` or `rate_limit_exceeded`. </param>
        /// <param name="message"> A human-readable description of the error. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileError"/> instance for mocking. </returns>
        public static VectorStoreFileError VectorStoreFileError(VectorStoreFileErrorCode code = default, string message = null)
        {
            return new VectorStoreFileError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/>. </summary>
        /// <param name="static"> The options for the static chunking strategy. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreStaticChunkingStrategyResponse"/> instance for mocking. </returns>
        public static VectorStoreStaticChunkingStrategyResponse VectorStoreStaticChunkingStrategyResponse(VectorStoreStaticChunkingStrategyOptions @static = null)
        {
            return new VectorStoreStaticChunkingStrategyResponse(VectorStoreChunkingStrategyResponseType.Static, serializedAdditionalRawData: null, @static);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreFileBatch"/>. </summary>
        /// <param name="id"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file_batch`. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store files batch was created. </param>
        /// <param name="vectorStoreId"> The ID of the vector store that the file is attached to. </param>
        /// <param name="status"> The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`. </param>
        /// <param name="fileCounts"> Files count grouped by status processed or being processed by this vector store. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreFileBatch"/> instance for mocking. </returns>
        public static VectorStoreFileBatch VectorStoreFileBatch(string id = null, VectorStoreFileBatchObject @object = default, DateTimeOffset createdAt = default, string vectorStoreId = null, VectorStoreFileBatchStatus status = default, VectorStoreFileCount fileCounts = null)
        {
            return new VectorStoreFileBatch(
                id,
                @object,
                createdAt,
                vectorStoreId,
                status,
                fileCounts,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.FileSearchRankingOptions"/>. </summary>
        /// <param name="ranker"> File search ranker. </param>
        /// <param name="scoreThreshold"> Ranker search threshold. </param>
        /// <returns> A new <see cref="Persistent.FileSearchRankingOptions"/> instance for mocking. </returns>
        public static FileSearchRankingOptions FileSearchRankingOptions(string ranker = null, float scoreThreshold = default)
        {
            return new FileSearchRankingOptions(ranker, scoreThreshold, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.ToolResources"/>. </summary>
        /// <param name="codeInterpreter"> Resources to be used by the `code_interpreter` tool consisting of file IDs. </param>
        /// <param name="fileSearch"> Resources to be used by the `file_search` tool consisting of vector store IDs. </param>
        /// <param name="azureAISearch"> Resources to be used by the `azure_ai_search` tool consisting of index IDs and names. </param>
        /// <returns> A new <see cref="Persistent.ToolResources"/> instance for mocking. </returns>
        public static ToolResources ToolResources(CodeInterpreterToolResource codeInterpreter = null, FileSearchToolResource fileSearch = null, AzureAISearchResource azureAISearch = null)
        {
            return new ToolResources(codeInterpreter, fileSearch, azureAISearch, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.CodeInterpreterToolResource"/>. </summary>
        /// <param name="fileIds">
        /// A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files
        /// associated with the tool.
        /// </param>
        /// <param name="dataSources"> The data sources to be used. This option is mutually exclusive with the `fileIds` property. </param>
        /// <returns> A new <see cref="Persistent.CodeInterpreterToolResource"/> instance for mocking. </returns>
        public static CodeInterpreterToolResource CodeInterpreterToolResource(IEnumerable<string> fileIds = null, IEnumerable<VectorStoreDataSource> dataSources = null)
        {
            fileIds ??= new List<string>();
            dataSources ??= new List<VectorStoreDataSource>();

            return new CodeInterpreterToolResource(fileIds?.ToList(), dataSources?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.FileSearchToolResource"/>. </summary>
        /// <param name="vectorStoreIds">
        /// The ID of the vector store attached to this agent. There can be a maximum of 1 vector
        /// store attached to the agent.
        /// </param>
        /// <param name="vectorStores">
        /// The list of vector store configuration objects from Azure.
        /// This list is limited to one element.
        /// The only element of this list contains the list of azure asset IDs used by the search tool.
        /// </param>
        /// <returns> A new <see cref="Persistent.FileSearchToolResource"/> instance for mocking. </returns>
        public static FileSearchToolResource FileSearchToolResource(IEnumerable<string> vectorStoreIds = null, IEnumerable<VectorStoreConfigurations> vectorStores = null)
        {
            vectorStoreIds ??= new List<string>();
            vectorStores ??= new List<VectorStoreConfigurations>();

            return new FileSearchToolResource(vectorStoreIds?.ToList(), vectorStores?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.VectorStoreConfigurations"/>. </summary>
        /// <param name="storeName"> Name. </param>
        /// <param name="storeConfiguration"> Configurations. </param>
        /// <returns> A new <see cref="Persistent.VectorStoreConfigurations"/> instance for mocking. </returns>
        public static VectorStoreConfigurations VectorStoreConfigurations(string storeName = null, VectorStoreConfiguration storeConfiguration = null)
        {
            return new VectorStoreConfigurations(storeName, storeConfiguration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.AzureAISearchResource"/>. </summary>
        /// <param name="indexList">
        /// The indices attached to this agent. There can be a maximum of 1 index
        /// resource attached to the agent.
        /// </param>
        /// <returns> A new <see cref="Persistent.AzureAISearchResource"/> instance for mocking. </returns>
        public static AzureAISearchResource AzureAISearchResource(IEnumerable<AISearchIndexResource> indexList = null)
        {
            indexList ??= new List<AISearchIndexResource>();

            return new AzureAISearchResource(indexList?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.AISearchIndexResource"/>. </summary>
        /// <param name="indexConnectionId"> An index connection id in an IndexResource attached to this agent. </param>
        /// <param name="indexName"> The name of an index in an IndexResource attached to this agent. </param>
        /// <param name="queryType"> Type of query in an AIIndexResource attached to this agent. </param>
        /// <param name="topK"> Number of documents to retrieve from search and present to the model. </param>
        /// <param name="filter"> filter string for search resource. </param>
        /// <param name="indexAssetId"> Index asset id for search resource. </param>
        /// <returns> A new <see cref="Persistent.AISearchIndexResource"/> instance for mocking. </returns>
        public static AISearchIndexResource AISearchIndexResource(string indexConnectionId = null, string indexName = null, AzureAISearchQueryType? queryType = null, int? topK = null, string filter = null, string indexAssetId = null)
        {
            return new AISearchIndexResource(
                indexConnectionId,
                indexName,
                queryType,
                topK,
                filter,
                indexAssetId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepFileSearchToolCallResults"/>. </summary>
        /// <param name="rankingOptions"> Ranking options for file search. </param>
        /// <param name="results"> The array of a file search results. </param>
        /// <returns> A new <see cref="Persistent.RunStepFileSearchToolCallResults"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResults RunStepFileSearchToolCallResults(FileSearchRankingOptions rankingOptions = null, IEnumerable<RunStepFileSearchToolCallResult> results = null)
        {
            results ??= new List<RunStepFileSearchToolCallResult>();

            return new RunStepFileSearchToolCallResults(rankingOptions, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepFileSearchToolCallResult"/>. </summary>
        /// <param name="fileId"> The ID of the file that result was found in. </param>
        /// <param name="fileName"> The name of the file that result was found in. </param>
        /// <param name="score"> The score of the result. All values must be a floating point number between 0 and 1. </param>
        /// <param name="content"> The content of the result that was found. The content is only included if requested via the include query parameter. </param>
        /// <returns> A new <see cref="Persistent.RunStepFileSearchToolCallResult"/> instance for mocking. </returns>
        public static RunStepFileSearchToolCallResult RunStepFileSearchToolCallResult(string fileId = null, string fileName = null, float score = default, IEnumerable<FileSearchToolCallContent> content = null)
        {
            content ??= new List<FileSearchToolCallContent>();

            return new RunStepFileSearchToolCallResult(fileId, fileName, score, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.FileSearchToolCallContent"/>. </summary>
        /// <param name="type"> The type of the content. </param>
        /// <param name="text"> The text content of the file. </param>
        /// <returns> A new <see cref="Persistent.FileSearchToolCallContent"/> instance for mocking. </returns>
        public static FileSearchToolCallContent FileSearchToolCallContent(FileSearchToolCallContentType type = default, string text = null)
        {
            return new FileSearchToolCallContent(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <returns> A new <see cref="Persistent.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null)
        {
            return new UnknownMessageTextAnnotation(type, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextUriCitationAnnotation"/>. </summary>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="uriCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageTextUriCitationAnnotation"/> instance for mocking. </returns>
        public static MessageTextUriCitationAnnotation MessageTextUriCitationAnnotation(string text = null, MessageTextUriCitationDetails uriCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageTextUriCitationAnnotation(
                "url_citation",
                text,
                serializedAdditionalRawData: null,
                uriCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageTextUriCitationDetails"/>. </summary>
        /// <param name="uri"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Persistent.MessageTextUriCitationDetails"/> instance for mocking. </returns>
        public static MessageTextUriCitationDetails MessageTextUriCitationDetails(string uri = null, string title = null)
        {
            return new MessageTextUriCitationDetails(uri, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the message, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.message.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the Message. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaChunk"/> instance for mocking. </returns>
        public static MessageDeltaChunk MessageDeltaChunk(string id = null, MessageDeltaChunkObject @object = default, MessageDelta delta = null)
        {
            return new MessageDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDelta"/>. </summary>
        /// <param name="role"> The entity that produced the message. </param>
        /// <param name="content">
        /// The content of the message as an array of text and/or images.
        /// Please note <see cref="Persistent.MessageDeltaContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.MessageDeltaImageFileContent"/> and <see cref="Persistent.MessageDeltaTextContent"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.MessageDelta"/> instance for mocking. </returns>
        public static MessageDelta MessageDelta(MessageRole role = default, IEnumerable<MessageDeltaContent> content = null)
        {
            content ??= new List<MessageDeltaContent>();

            return new MessageDelta(role, content?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="type"> The type of content for this content part. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaContent"/> instance for mocking. </returns>
        public static MessageDeltaContent MessageDeltaContent(int index = default, string type = null)
        {
            return new UnknownMessageDeltaContent(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaImageFileContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="imageFile"> The image_file data. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaImageFileContent"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContent MessageDeltaImageFileContent(int index = default, MessageDeltaImageFileContentObject imageFile = null)
        {
            return new MessageDeltaImageFileContent(index, "image_file", serializedAdditionalRawData: null, imageFile);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaImageFileContentObject"/>. </summary>
        /// <param name="fileId"> The file ID of the image in the message content. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaImageFileContentObject"/> instance for mocking. </returns>
        public static MessageDeltaImageFileContentObject MessageDeltaImageFileContentObject(string fileId = null)
        {
            return new MessageDeltaImageFileContentObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextContent"/>. </summary>
        /// <param name="index"> The index of the content part of the message. </param>
        /// <param name="text"> The text content details. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextContent"/> instance for mocking. </returns>
        public static MessageDeltaTextContent MessageDeltaTextContent(int index = default, MessageDeltaTextContentObject text = null)
        {
            return new MessageDeltaTextContent(index, "text", serializedAdditionalRawData: null, text);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextContentObject"/>. </summary>
        /// <param name="value"> The data that makes up the text. </param>
        /// <param name="annotations">
        /// Annotations for the text.
        /// Please note <see cref="Persistent.MessageDeltaTextAnnotation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/>, <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/> and <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextContentObject"/> instance for mocking. </returns>
        public static MessageDeltaTextContentObject MessageDeltaTextContentObject(string value = null, IEnumerable<MessageDeltaTextAnnotation> annotations = null)
        {
            annotations ??= new List<MessageDeltaTextAnnotation>();

            return new MessageDeltaTextContentObject(value, annotations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="type"> The type of the text content annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextAnnotation MessageDeltaTextAnnotation(int index = default, string type = null)
        {
            return new UnknownMessageDeltaTextAnnotation(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="uriCitation"> The details of the URL citation. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextUriCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextUriCitationAnnotation MessageDeltaTextUriCitationAnnotation(int index = default, MessageDeltaTextUriCitationDetails uriCitation = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextUriCitationAnnotation(
                index,
                "url_citation",
                serializedAdditionalRawData: null,
                uriCitation,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextUriCitationDetails"/>. </summary>
        /// <param name="uri"> The URL associated with this citation. </param>
        /// <param name="title"> The title of the URL. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextUriCitationDetails"/> instance for mocking. </returns>
        public static MessageDeltaTextUriCitationDetails MessageDeltaTextUriCitationDetails(string uri = null, string title = null)
        {
            return new MessageDeltaTextUriCitationDetails(uri, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="fileCitation"> The file citation information. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFileCitationAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotation MessageDeltaTextFileCitationAnnotation(int index = default, MessageDeltaTextFileCitationAnnotationObject fileCitation = null, string text = null, int? startIndex = null, int? endIndex = null)
        {
            return new MessageDeltaTextFileCitationAnnotation(
                index,
                "file_citation",
                serializedAdditionalRawData: null,
                fileCitation,
                text,
                startIndex,
                endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFileCitationAnnotationObject"/>. </summary>
        /// <param name="fileId"> The ID of the specific file the citation is from. </param>
        /// <param name="quote"> The specific quote in the cited file. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFileCitationAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFileCitationAnnotationObject MessageDeltaTextFileCitationAnnotationObject(string fileId = null, string quote = null)
        {
            return new MessageDeltaTextFileCitationAnnotationObject(fileId, quote, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/>. </summary>
        /// <param name="index"> The index of the annotation within a text content part. </param>
        /// <param name="filePath"> The file path information. </param>
        /// <param name="startIndex"> The start index of this annotation in the content text. </param>
        /// <param name="endIndex"> The end index of this annotation in the content text. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFilePathAnnotation"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotation MessageDeltaTextFilePathAnnotation(int index = default, MessageDeltaTextFilePathAnnotationObject filePath = null, int? startIndex = null, int? endIndex = null, string text = null)
        {
            return new MessageDeltaTextFilePathAnnotation(
                index,
                "file_path",
                serializedAdditionalRawData: null,
                filePath,
                startIndex,
                endIndex,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.MessageDeltaTextFilePathAnnotationObject"/>. </summary>
        /// <param name="fileId"> The file ID for the annotation. </param>
        /// <returns> A new <see cref="Persistent.MessageDeltaTextFilePathAnnotationObject"/> instance for mocking. </returns>
        public static MessageDeltaTextFilePathAnnotationObject MessageDeltaTextFilePathAnnotationObject(string fileId = null)
        {
            return new MessageDeltaTextFilePathAnnotationObject(fileId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaChunk"/>. </summary>
        /// <param name="id"> The identifier of the run step, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `thread.run.step.delta`. </param>
        /// <param name="delta"> The delta containing the fields that have changed on the run step. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaChunk"/> instance for mocking. </returns>
        public static RunStepDeltaChunk RunStepDeltaChunk(string id = null, RunStepDeltaChunkObject @object = default, RunStepDelta delta = null)
        {
            return new RunStepDeltaChunk(id, @object, delta, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDelta"/>. </summary>
        /// <param name="stepDetails">
        /// The details of the run step.
        /// Please note <see cref="RunStepDeltaDetail"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaMessageCreation"/> and <see cref="Persistent.RunStepDeltaToolCallObject"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDelta"/> instance for mocking. </returns>
        public static RunStepDelta RunStepDelta(RunStepDeltaDetail stepDetails = null)
        {
            return new RunStepDelta(stepDetails, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMessageCreation"/>. </summary>
        /// <param name="messageCreation"> The message creation data. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMessageCreation"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreation RunStepDeltaMessageCreation(RunStepDeltaMessageCreationObject messageCreation = null)
        {
            return new RunStepDeltaMessageCreation("message_creation", serializedAdditionalRawData: null, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaMessageCreationObject"/>. </summary>
        /// <param name="messageId"> The ID of the newly-created message. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaMessageCreationObject"/> instance for mocking. </returns>
        public static RunStepDeltaMessageCreationObject RunStepDeltaMessageCreationObject(string messageId = null)
        {
            return new RunStepDeltaMessageCreationObject(messageId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaToolCallObject"/>. </summary>
        /// <param name="toolCalls">
        /// The collection of tool calls for the tool call detail item.
        /// Please note <see cref="Persistent.RunStepDeltaToolCall"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/>, <see cref="Persistent.RunStepDeltaFileSearchToolCall"/> and <see cref="Persistent.RunStepDeltaFunctionToolCall"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaToolCallObject"/> instance for mocking. </returns>
        public static RunStepDeltaToolCallObject RunStepDeltaToolCallObject(IEnumerable<RunStepDeltaToolCall> toolCalls = null)
        {
            toolCalls ??= new List<RunStepDeltaToolCall>();

            return new RunStepDeltaToolCallObject("tool_calls", serializedAdditionalRawData: null, toolCalls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="type"> The type of the tool call detail item in a streaming run step's details. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaToolCall RunStepDeltaToolCall(int index = default, string id = null, string type = null)
        {
            return new UnknownRunStepDeltaToolCall(index, id, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFunctionToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="function"> The function data for the tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFunctionToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFunctionToolCall RunStepDeltaFunctionToolCall(int index = default, string id = null, RunStepDeltaFunction function = null)
        {
            return new RunStepDeltaFunctionToolCall(index, id, "function", serializedAdditionalRawData: null, function);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFunction"/>. </summary>
        /// <param name="name"> The name of the function. </param>
        /// <param name="arguments"> The arguments passed to the function as input. </param>
        /// <param name="output"> The output of the function, null if outputs have not yet been submitted. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFunction"/> instance for mocking. </returns>
        public static RunStepDeltaFunction RunStepDeltaFunction(string name = null, string arguments = null, string output = null)
        {
            return new RunStepDeltaFunction(name, arguments, output, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaFileSearchToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="fileSearch"> Reserved for future use. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaFileSearchToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaFileSearchToolCall RunStepDeltaFileSearchToolCall(int index = default, string id = null, RunStepFileSearchToolCallResults fileSearch = null)
        {
            return new RunStepDeltaFileSearchToolCall(index, id, "file_search", serializedAdditionalRawData: null, fileSearch);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/>. </summary>
        /// <param name="index"> The index of the tool call detail in the run step's tool_calls array. </param>
        /// <param name="id"> The ID of the tool call, used when submitting outputs to the run. </param>
        /// <param name="codeInterpreter"> The Code Interpreter data for the tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterToolCall"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterToolCall RunStepDeltaCodeInterpreterToolCall(int index = default, string id = null, RunStepDeltaCodeInterpreterDetailItemObject codeInterpreter = null)
        {
            return new RunStepDeltaCodeInterpreterToolCall(index, id, "code_interpreter", serializedAdditionalRawData: null, codeInterpreter);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterDetailItemObject"/>. </summary>
        /// <param name="input"> The input into the Code Interpreter tool call. </param>
        /// <param name="outputs">
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// Please note <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/> and <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/>.
        /// </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterDetailItemObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterDetailItemObject RunStepDeltaCodeInterpreterDetailItemObject(string input = null, IEnumerable<RunStepDeltaCodeInterpreterOutput> outputs = null)
        {
            outputs ??= new List<RunStepDeltaCodeInterpreterOutput>();

            return new RunStepDeltaCodeInterpreterDetailItemObject(input, outputs?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="type"> The type of the streaming run step tool call's Code Interpreter output. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterOutput RunStepDeltaCodeInterpreterOutput(int index = default, string type = null)
        {
            return new UnknownRunStepDeltaCodeInterpreterOutput(index, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="logs"> The text output from the Code Interpreter tool call. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterLogOutput RunStepDeltaCodeInterpreterLogOutput(int index = default, string logs = null)
        {
            return new RunStepDeltaCodeInterpreterLogOutput(index, "logs", serializedAdditionalRawData: null, logs);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/>. </summary>
        /// <param name="index"> The index of the output in the streaming run step tool call's Code Interpreter outputs array. </param>
        /// <param name="image"> The image data for the Code Interpreter tool call output. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutput RunStepDeltaCodeInterpreterImageOutput(int index = default, RunStepDeltaCodeInterpreterImageOutputObject image = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutput(index, "image", serializedAdditionalRawData: null, image);
        }

        /// <summary> Initializes a new instance of <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutputObject"/>. </summary>
        /// <param name="fileId"> The file ID for the image. </param>
        /// <returns> A new <see cref="Persistent.RunStepDeltaCodeInterpreterImageOutputObject"/> instance for mocking. </returns>
        public static RunStepDeltaCodeInterpreterImageOutputObject RunStepDeltaCodeInterpreterImageOutputObject(string fileId = null)
        {
            return new RunStepDeltaCodeInterpreterImageOutputObject(fileId, serializedAdditionalRawData: null);
        }
    }
}
