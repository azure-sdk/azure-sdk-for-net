// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IscsiPathsOperations.
    /// </summary>
    public static partial class IscsiPathsOperationsExtensions
    {
            /// <summary>
            /// List IscsiPath resources by PrivateCloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IPage<IscsiPath> ListByPrivateCloud(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.ListByPrivateCloudAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List IscsiPath resources by PrivateCloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IscsiPath>> ListByPrivateCloudAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPrivateCloudWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IscsiPath Get(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.GetAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiPath> GetAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static IscsiPath CreateOrUpdate(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, IscsiPath resource)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, privateCloudName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiPath> CreateOrUpdateAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, IscsiPath resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateCloudName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IscsiPathsDeleteHeaders Delete(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.DeleteAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiPathsDeleteHeaders> DeleteAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static IscsiPath BeginCreateOrUpdate(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, IscsiPath resource)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, privateCloudName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiPath> BeginCreateOrUpdateAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, IscsiPath resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateCloudName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            public static IscsiPathsDeleteHeaders BeginDelete(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, privateCloudName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a IscsiPath
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateCloudName'>
            /// Name of the private cloud
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IscsiPathsDeleteHeaders> BeginDeleteAsync(this IIscsiPathsOperations operations, string resourceGroupName, string privateCloudName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, privateCloudName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List IscsiPath resources by PrivateCloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IscsiPath> ListByPrivateCloudNext(this IIscsiPathsOperations operations, string nextPageLink)
            {
                return operations.ListByPrivateCloudNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List IscsiPath resources by PrivateCloud
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IscsiPath>> ListByPrivateCloudNextAsync(this IIscsiPathsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPrivateCloudNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
