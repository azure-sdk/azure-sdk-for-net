// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NSX DHCP Relay
    /// </summary>
    [Newtonsoft.Json.JsonObject("RELAY")]
    public partial class WorkloadNetworkDhcpRelayUpdate : WorkloadNetworkDhcpEntityUpdate
    {
        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkDhcpRelayUpdate
        /// class.
        /// </summary>
        public WorkloadNetworkDhcpRelayUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkloadNetworkDhcpRelayUpdate
        /// class.
        /// </summary>
        /// <param name="displayName">Display name of the DHCP entity.</param>
        /// <param name="revision">NSX revision number.</param>
        /// <param name="serverAddresses">DHCP Relay Addresses. Max 3.</param>
        public WorkloadNetworkDhcpRelayUpdate(string displayName = default(string), long? revision = default(long?), IList<string> serverAddresses = default(IList<string>))
            : base(displayName, revision)
        {
            ServerAddresses = serverAddresses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets DHCP Relay Addresses. Max 3.
        /// </summary>
        [JsonProperty(PropertyName = "serverAddresses")]
        public IList<string> ServerAddresses { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ServerAddresses != null)
            {
                if (ServerAddresses.Count > 3)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "ServerAddresses", 3);
                }
                if (ServerAddresses.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "ServerAddresses", 1);
                }
            }
        }
    }
}
