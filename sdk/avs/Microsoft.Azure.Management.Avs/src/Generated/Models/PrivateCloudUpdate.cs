// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An update to a private cloud resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PrivateCloudUpdate
    {
        /// <summary>
        /// Initializes a new instance of the PrivateCloudUpdate class.
        /// </summary>
        public PrivateCloudUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrivateCloudUpdate class.
        /// </summary>
        /// <param name="tags">Resource tags.</param>
        /// <param name="sku">The SKU (Stock Keeping Unit) assigned to this
        /// resource.</param>
        /// <param name="identity">The managed service identities assigned to
        /// this resource.</param>
        /// <param name="managementCluster">The default cluster used for
        /// management</param>
        /// <param name="internet">Connectivity to internet is enabled or
        /// disabled. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="identitySources">vCenter Single Sign On Identity
        /// Sources</param>
        /// <param name="availability">Properties describing how the cloud is
        /// distributed across availability zones</param>
        /// <param name="encryption">Customer managed key encryption, can be
        /// enabled or disabled</param>
        /// <param name="extendedNetworkBlocks">Array of additional networks
        /// noncontiguous with networkBlock. Networks must be
        /// unique and non-overlapping across VNet in your subscription,
        /// on-premise, and
        /// this privateCloud networkBlock attribute. Make sure the CIDR format
        /// conforms to
        /// (A.B.C.D/X).</param>
        /// <param name="dnsZoneType">The type of DNS zone to use. Possible
        /// values include: 'Public', 'Private'</param>
        public PrivateCloudUpdate(IDictionary<string, string> tags = default(IDictionary<string, string>), Sku sku = default(Sku), SystemAssignedServiceIdentity identity = default(SystemAssignedServiceIdentity), ManagementCluster managementCluster = default(ManagementCluster), string internet = default(string), IList<IdentitySource> identitySources = default(IList<IdentitySource>), AvailabilityProperties availability = default(AvailabilityProperties), Encryption encryption = default(Encryption), IList<string> extendedNetworkBlocks = default(IList<string>), string dnsZoneType = default(string))
        {
            Tags = tags;
            Sku = sku;
            Identity = identity;
            ManagementCluster = managementCluster;
            Internet = internet;
            IdentitySources = identitySources;
            Availability = availability;
            Encryption = encryption;
            ExtendedNetworkBlocks = extendedNetworkBlocks;
            DnsZoneType = dnsZoneType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the SKU (Stock Keeping Unit) assigned to this
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets the managed service identities assigned to this
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public SystemAssignedServiceIdentity Identity { get; set; }

        /// <summary>
        /// Gets or sets the default cluster used for management
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementCluster")]
        public ManagementCluster ManagementCluster { get; set; }

        /// <summary>
        /// Gets or sets connectivity to internet is enabled or disabled.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.internet")]
        public string Internet { get; set; }

        /// <summary>
        /// Gets or sets vCenter Single Sign On Identity Sources
        /// </summary>
        [JsonProperty(PropertyName = "properties.identitySources")]
        public IList<IdentitySource> IdentitySources { get; set; }

        /// <summary>
        /// Gets or sets properties describing how the cloud is distributed
        /// across availability zones
        /// </summary>
        [JsonProperty(PropertyName = "properties.availability")]
        public AvailabilityProperties Availability { get; set; }

        /// <summary>
        /// Gets or sets customer managed key encryption, can be enabled or
        /// disabled
        /// </summary>
        [JsonProperty(PropertyName = "properties.encryption")]
        public Encryption Encryption { get; set; }

        /// <summary>
        /// Gets or sets array of additional networks noncontiguous with
        /// networkBlock. Networks must be
        /// unique and non-overlapping across VNet in your subscription,
        /// on-premise, and
        /// this privateCloud networkBlock attribute. Make sure the CIDR format
        /// conforms to
        /// (A.B.C.D/X).
        /// </summary>
        [JsonProperty(PropertyName = "properties.extendedNetworkBlocks")]
        public IList<string> ExtendedNetworkBlocks { get; set; }

        /// <summary>
        /// Gets or sets the type of DNS zone to use. Possible values include:
        /// 'Public', 'Private'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsZoneType")]
        public string DnsZoneType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
