// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A datastore resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Datastore : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Datastore class.
        /// </summary>
        public Datastore()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Datastore class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="provisioningState">The state of the datastore
        /// provisioning. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'Cancelled', 'Pending', 'Creating', 'Updating',
        /// 'Deleting'</param>
        /// <param name="netAppVolume">An Azure NetApp Files volume</param>
        /// <param name="diskPoolVolume">An iSCSI volume</param>
        /// <param name="elasticSanVolume">An Elastic SAN volume</param>
        /// <param name="status">The operational status of the datastore.
        /// Possible values include: 'Unknown', 'Accessible', 'Inaccessible',
        /// 'Attached', 'Detached', 'LostCommunication', 'DeadOrError'</param>
        public Datastore(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), NetAppVolume netAppVolume = default(NetAppVolume), DiskPoolVolume diskPoolVolume = default(DiskPoolVolume), ElasticSanVolume elasticSanVolume = default(ElasticSanVolume), string status = default(string))
            : base(id, name, type, systemData)
        {
            ProvisioningState = provisioningState;
            NetAppVolume = netAppVolume;
            DiskPoolVolume = diskPoolVolume;
            ElasticSanVolume = elasticSanVolume;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the state of the datastore provisioning. Possible values
        /// include: 'Succeeded', 'Failed', 'Canceled', 'Cancelled', 'Pending',
        /// 'Creating', 'Updating', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets an Azure NetApp Files volume
        /// </summary>
        [JsonProperty(PropertyName = "properties.netAppVolume")]
        public NetAppVolume NetAppVolume { get; set; }

        /// <summary>
        /// Gets or sets an iSCSI volume
        /// </summary>
        [JsonProperty(PropertyName = "properties.diskPoolVolume")]
        public DiskPoolVolume DiskPoolVolume { get; set; }

        /// <summary>
        /// Gets or sets an Elastic SAN volume
        /// </summary>
        [JsonProperty(PropertyName = "properties.elasticSanVolume")]
        public ElasticSanVolume ElasticSanVolume { get; set; }

        /// <summary>
        /// Gets the operational status of the datastore. Possible values
        /// include: 'Unknown', 'Accessible', 'Inaccessible', 'Attached',
        /// 'Detached', 'LostCommunication', 'DeadOrError'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NetAppVolume != null)
            {
                NetAppVolume.Validate();
            }
            if (DiskPoolVolume != null)
            {
                DiskPoolVolume.Validate();
            }
            if (ElasticSanVolume != null)
            {
                ElasticSanVolume.Validate();
            }
        }
    }
}
