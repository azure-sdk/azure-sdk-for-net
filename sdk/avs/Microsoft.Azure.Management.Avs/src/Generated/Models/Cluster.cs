// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Avs.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A cluster resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Cluster : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>
        public Cluster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>
        /// <param name="sku">The SKU (Stock Keeping Unit) assigned to this
        /// resource.</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="clusterSize">The cluster size</param>
        /// <param name="provisioningState">The state of the cluster
        /// provisioning. Possible values include: 'Succeeded', 'Failed',
        /// 'Canceled', 'Cancelled', 'Deleting', 'Updating'</param>
        /// <param name="clusterId">The identity</param>
        /// <param name="hosts">The hosts</param>
        /// <param name="vsanDatastoreName">Name of the vsan datastore
        /// associated with the cluster</param>
        public Cluster(Sku sku, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), int? clusterSize = default(int?), string provisioningState = default(string), int? clusterId = default(int?), IList<string> hosts = default(IList<string>), string vsanDatastoreName = default(string))
            : base(id, name, type, systemData)
        {
            ClusterSize = clusterSize;
            ProvisioningState = provisioningState;
            ClusterId = clusterId;
            Hosts = hosts;
            VsanDatastoreName = vsanDatastoreName;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the cluster size
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterSize")]
        public int? ClusterSize { get; set; }

        /// <summary>
        /// Gets the state of the cluster provisioning. Possible values
        /// include: 'Succeeded', 'Failed', 'Canceled', 'Cancelled',
        /// 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the identity
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterId")]
        public int? ClusterId { get; private set; }

        /// <summary>
        /// Gets or sets the hosts
        /// </summary>
        [JsonProperty(PropertyName = "properties.hosts")]
        public IList<string> Hosts { get; set; }

        /// <summary>
        /// Gets or sets name of the vsan datastore associated with the cluster
        /// </summary>
        [JsonProperty(PropertyName = "properties.vsanDatastoreName")]
        public string VsanDatastoreName { get; set; }

        /// <summary>
        /// Gets or sets the SKU (Stock Keeping Unit) assigned to this
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
