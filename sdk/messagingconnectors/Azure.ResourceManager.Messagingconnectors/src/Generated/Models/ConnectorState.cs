// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Messagingconnectors.Models
{
    /// <summary> Business State of Connector. </summary>
    public readonly partial struct ConnectorState : IEquatable<ConnectorState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectorState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectorState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string CreatingValue = "Creating";
        private const string InitializingValue = "Initializing";
        private const string RunningValue = "Running";
        private const string UpdatingValue = "Updating";
        private const string DegradedValue = "Degraded";
        private const string StoppedValue = "Stopped";
        private const string PausedValue = "Paused";
        private const string DeletingValue = "Deleting";
        private const string FailedValue = "Failed";

        /// <summary> Unknown State. </summary>
        public static ConnectorState Unknown { get; } = new ConnectorState(UnknownValue);
        /// <summary> Creating State. </summary>
        public static ConnectorState Creating { get; } = new ConnectorState(CreatingValue);
        /// <summary> Initializing State. </summary>
        public static ConnectorState Initializing { get; } = new ConnectorState(InitializingValue);
        /// <summary> Running State. </summary>
        public static ConnectorState Running { get; } = new ConnectorState(RunningValue);
        /// <summary> Updating State. </summary>
        public static ConnectorState Updating { get; } = new ConnectorState(UpdatingValue);
        /// <summary> Degraded State. </summary>
        public static ConnectorState Degraded { get; } = new ConnectorState(DegradedValue);
        /// <summary> Stopped State. </summary>
        public static ConnectorState Stopped { get; } = new ConnectorState(StoppedValue);
        /// <summary> Paused State. </summary>
        public static ConnectorState Paused { get; } = new ConnectorState(PausedValue);
        /// <summary> Deleting State. </summary>
        public static ConnectorState Deleting { get; } = new ConnectorState(DeletingValue);
        /// <summary> Failed State. </summary>
        public static ConnectorState Failed { get; } = new ConnectorState(FailedValue);
        /// <summary> Determines if two <see cref="ConnectorState"/> values are the same. </summary>
        public static bool operator ==(ConnectorState left, ConnectorState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectorState"/> values are not the same. </summary>
        public static bool operator !=(ConnectorState left, ConnectorState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConnectorState"/>. </summary>
        public static implicit operator ConnectorState(string value) => new ConnectorState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectorState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectorState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
