// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Messagingconnectors.Models
{
    /// <summary> Enum of the type of Converter. </summary>
    public readonly partial struct ConverterType : IEquatable<ConverterType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConverterType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConverterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string ByteArrayConverterValue = "ByteArrayConverter";
        private const string StringConverterValue = "StringConverter";
        private const string JsonConverterValue = "JsonConverter";
        private const string AvroConverterValue = "AvroConverter";
        private const string CsvConverterValue = "CsvConverter";

        /// <summary> Unknown converter. </summary>
        public static ConverterType Unknown { get; } = new ConverterType(UnknownValue);
        /// <summary> This represents a converter for byte arrays format. </summary>
        public static ConverterType ByteArrayConverter { get; } = new ConverterType(ByteArrayConverterValue);
        /// <summary> This represents a converter for string format. </summary>
        public static ConverterType StringConverter { get; } = new ConverterType(StringConverterValue);
        /// <summary> This represents a converter for json format. </summary>
        public static ConverterType JsonConverter { get; } = new ConverterType(JsonConverterValue);
        /// <summary> This represents a converter for Avro format. </summary>
        public static ConverterType AvroConverter { get; } = new ConverterType(AvroConverterValue);
        /// <summary> This represents a converter for csv format. </summary>
        public static ConverterType CsvConverter { get; } = new ConverterType(CsvConverterValue);
        /// <summary> Determines if two <see cref="ConverterType"/> values are the same. </summary>
        public static bool operator ==(ConverterType left, ConverterType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConverterType"/> values are not the same. </summary>
        public static bool operator !=(ConverterType left, ConverterType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConverterType"/>. </summary>
        public static implicit operator ConverterType(string value) => new ConverterType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConverterType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConverterType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
