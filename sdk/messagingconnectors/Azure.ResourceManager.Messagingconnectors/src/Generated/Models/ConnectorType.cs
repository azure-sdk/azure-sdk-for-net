// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Messagingconnectors.Models
{
    /// <summary> Enum of the type of Connector. </summary>
    internal readonly partial struct ConnectorType : IEquatable<ConnectorType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectorType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string GooglePubSubSourceValue = "GooglePubSubSource";
        private const string KinesisSourceValue = "KinesisSource";
        private const string PostgreSqlSourceValue = "PostgreSqlSource";
        private const string SqlServerSourceValue = "SqlServerSource";
        private const string CosmosDbSourceValue = "CosmosDbSource";
        private const string BitCoinSourceValue = "BitCoinSource";
        private const string KafkaSourceValue = "KafkaSource";
        private const string ConfluentSourceValue = "ConfluentSource";

        /// <summary> Unknown source connector. </summary>
        public static ConnectorType Unknown { get; } = new ConnectorType(UnknownValue);
        /// <summary> Google pub sub source connector. </summary>
        public static ConnectorType GooglePubSubSource { get; } = new ConnectorType(GooglePubSubSourceValue);
        /// <summary> Amazon kinesis source connector. </summary>
        public static ConnectorType KinesisSource { get; } = new ConnectorType(KinesisSourceValue);
        /// <summary> Postgre sql source connector. </summary>
        public static ConnectorType PostgreSqlSource { get; } = new ConnectorType(PostgreSqlSourceValue);
        /// <summary> Sql server source connector. </summary>
        public static ConnectorType SqlServerSource { get; } = new ConnectorType(SqlServerSourceValue);
        /// <summary> Cosmos db source connector. </summary>
        public static ConnectorType CosmosDbSource { get; } = new ConnectorType(CosmosDbSourceValue);
        /// <summary> BitCoin source connector. </summary>
        public static ConnectorType BitCoinSource { get; } = new ConnectorType(BitCoinSourceValue);
        /// <summary> Kafka source connector. </summary>
        public static ConnectorType KafkaSource { get; } = new ConnectorType(KafkaSourceValue);
        /// <summary> confluent source connector. </summary>
        public static ConnectorType ConfluentSource { get; } = new ConnectorType(ConfluentSourceValue);
        /// <summary> Determines if two <see cref="ConnectorType"/> values are the same. </summary>
        public static bool operator ==(ConnectorType left, ConnectorType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectorType"/> values are not the same. </summary>
        public static bool operator !=(ConnectorType left, ConnectorType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConnectorType"/>. </summary>
        public static implicit operator ConnectorType(string value) => new ConnectorType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectorType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectorType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
