// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Messagingconnectors.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Messagingconnectors
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Messagingconnectors. </summary>
    public static partial class MessagingconnectorsExtensions
    {
        private static MockableMessagingconnectorsArmClient GetMockableMessagingconnectorsArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableMessagingconnectorsArmClient(client0));
        }

        private static MockableMessagingconnectorsResourceGroupResource GetMockableMessagingconnectorsResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableMessagingconnectorsResourceGroupResource(client, resource.Id));
        }

        private static MockableMessagingconnectorsSubscriptionResource GetMockableMessagingconnectorsSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableMessagingconnectorsSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConnectorInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConnectorInstanceResource.CreateResourceIdentifier" /> to create a <see cref="ConnectorInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsArmClient.GetConnectorInstanceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ConnectorInstanceResource"/> object. </returns>
        public static ConnectorInstanceResource GetConnectorInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            if (client == null)
            {
                throw new ArgumentNullException(nameof(client));
            }

            return GetMockableMessagingconnectorsArmClient(client).GetConnectorInstanceResource(id);
        }

        /// <summary>
        /// Gets a collection of ConnectorInstanceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsResourceGroupResource.GetConnectorInstances()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of ConnectorInstanceResources and their operations over a ConnectorInstanceResource. </returns>
        public static ConnectorInstanceCollection GetConnectorInstances(this ResourceGroupResource resourceGroupResource)
        {
            if (resourceGroupResource == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupResource));
            }

            return GetMockableMessagingconnectorsResourceGroupResource(resourceGroupResource).GetConnectorInstances();
        }

        /// <summary>
        /// Gets an Connector instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-20-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsResourceGroupResource.GetConnectorInstanceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the Connector resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ConnectorInstanceResource>> GetConnectorInstanceAsync(this ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken = default)
        {
            if (resourceGroupResource == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupResource));
            }

            return await GetMockableMessagingconnectorsResourceGroupResource(resourceGroupResource).GetConnectorInstanceAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an Connector instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MessagingConnectors/connectors/{name}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-20-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsResourceGroupResource.GetConnectorInstance(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="name"> Name of the Connector resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<ConnectorInstanceResource> GetConnectorInstance(this ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken = default)
        {
            if (resourceGroupResource == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupResource));
            }

            return GetMockableMessagingconnectorsResourceGroupResource(resourceGroupResource).GetConnectorInstance(name, cancellationToken);
        }

        /// <summary>
        /// List Connector By Subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MessagingConnectors/connectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectorOperations_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-20-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsSubscriptionResource.GetConnectorInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="ConnectorInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ConnectorInstanceResource> GetConnectorInstancesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            if (subscriptionResource == null)
            {
                throw new ArgumentNullException(nameof(subscriptionResource));
            }

            return GetMockableMessagingconnectorsSubscriptionResource(subscriptionResource).GetConnectorInstancesAsync(cancellationToken);
        }

        /// <summary>
        /// List Connector By Subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MessagingConnectors/connectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectorOperations_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-01-20-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConnectorInstanceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMessagingconnectorsSubscriptionResource.GetConnectorInstances(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="ConnectorInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ConnectorInstanceResource> GetConnectorInstances(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            if (subscriptionResource == null)
            {
                throw new ArgumentNullException(nameof(subscriptionResource));
            }

            return GetMockableMessagingconnectorsSubscriptionResource(subscriptionResource).GetConnectorInstances(cancellationToken);
        }
    }
}
