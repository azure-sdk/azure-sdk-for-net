// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Messagingconnectors;
using Azure.ResourceManager.Messagingconnectors.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Messagingconnectors.Samples
{
    public partial class Sample_ConnectorInstanceResource
    {
        // BitCoinSourceConnector ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetConnectorInstances_BitCoinSourceConnectorListBySubscription()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_ListBySubscription.json
            // this example is just showing the usage of "ConnectorOperations_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (ConnectorInstanceResource item in subscriptionResource.GetConnectorInstancesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BitCoinSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_BitCoinSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "bitCoin1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfluentSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ConfluentSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "confluentSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CosmosDbSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CosmosDbSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "cosmosDbSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GooglePubSubSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GooglePubSubSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "googlePubSubSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KinesisSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_KinesisSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "kinesisSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PostgreSqlSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_PostgreSqlSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "postgreSqlSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstanceResource result = await connectorInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BitCoinSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_BitCoinSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "bitCoin1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfluentSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ConfluentSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "confluentSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
["tag3"] = "value3",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CosmosDbSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CosmosDbSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "cosmosDbSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
["tag3"] = "value3",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GooglePubSubSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_GooglePubSubSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "googlePubSubSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
["tag3"] = "value3",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KinesisSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_KinesisSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "kinesisSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
["tag3"] = "value3",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PostgreSqlSourceConnector UpdateTags
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PostgreSqlSourceConnectorUpdateTags()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_UpdateTags.json
            // this example is just showing the usage of "ConnectorOperations_UpdateTags" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "postgreSqlSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            ConnectorInstancePatch patch = new ConnectorInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
["tag3"] = "value3",
},
            };
            ConnectorInstanceResource result = await connectorInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BitCoinSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_BitCoinSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "bitCoin1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // ConfluentSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ConfluentSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "confluentSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // CosmosDbSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CosmosDbSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "cosmosDbSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // GooglePubSubSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_GooglePubSubSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "googlePubSubSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // KinesisSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_KinesisSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "kinesisSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // PostgreSqlSourceConnector Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_PostgreSqlSourceConnectorDelete()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Delete.json
            // this example is just showing the usage of "ConnectorOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "postgreSqlSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            await connectorInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // BitCoinSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_BitCoinSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "bitCoin1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // ConfluentSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_ConfluentSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "confluentSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // CosmosDbSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_CosmosDbSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "cosmosDbSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // GooglePubSubSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_GooglePubSubSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "googlePubSubSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // KinesisSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_KinesisSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "kinesisSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // PostgreSqlSourceConnector Pause
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_PostgreSqlSourceConnectorPause()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Pause.json
            // this example is just showing the usage of "ConnectorOperations_Pause" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "postgreSqlSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.PauseAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // BitCoinSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_BitCoinSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "bitCoin1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // ConfluentSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_ConfluentSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "confluentSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // CosmosDbSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_CosmosDbSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "cosmosDbSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // GooglePubSubSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_GooglePubSubSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "googlePubSubSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // KinesisSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_KinesisSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "kinesisSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }

        // PostgreSqlSourceConnector Resume
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_PostgreSqlSourceConnectorResume()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Resume.json
            // this example is just showing the usage of "ConnectorOperations_Resume" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ConnectorInstanceResource created on azure
            // for more information of creating ConnectorInstanceResource, please refer to the document of ConnectorInstanceResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            string name = "postgreSqlSourceConnector1";
            ResourceIdentifier connectorInstanceResourceId = ConnectorInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            ConnectorInstanceResource connectorInstance = client.GetConnectorInstanceResource(connectorInstanceResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            await connectorInstance.ResumeAsync(body);

            Console.WriteLine($"Succeeded");
        }
    }
}
