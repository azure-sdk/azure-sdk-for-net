// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Messagingconnectors;
using Azure.ResourceManager.Messagingconnectors.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Messagingconnectors.Samples
{
    public partial class Sample_ConnectorInstanceCollection
    {
        // BitCoinSourceConnector ListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BitCoinSourceConnectorListByResourceGroup()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_ListByResourceGroup.json
            // this example is just showing the usage of "ConnectorOperations_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation and iterate over the result
            await foreach (ConnectorInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BitCoinSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_BitCoinSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "bitCoin1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // BitCoinSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_BitCoinSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "bitCoin1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // BitCoinSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_BitCoinSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "bitCoin1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // ConfluentSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ConfluentSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "confluentSourceConnector1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfluentSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_ConfluentSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "confluentSourceConnector1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ConfluentSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_ConfluentSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "confluentSourceConnector1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // CosmosDbSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CosmosDbSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "cosmosDbSourceConnector1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CosmosDbSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_CosmosDbSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "cosmosDbSourceConnector1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // CosmosDbSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_CosmosDbSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "cosmosDbSourceConnector1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // GooglePubSubSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GooglePubSubSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "googlePubSubSourceConnector1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GooglePubSubSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GooglePubSubSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "googlePubSubSourceConnector1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GooglePubSubSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GooglePubSubSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "googlePubSubSourceConnector1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // KinesisSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_KinesisSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "kinesisSourceConnector1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KinesisSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_KinesisSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "kinesisSourceConnector1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // KinesisSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_KinesisSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "kinesisSourceConnector1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // PostgreSqlSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_PostgreSqlSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "postgreSqlSourceConnector1";
            ConnectorInstanceResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PostgreSqlSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_PostgreSqlSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "postgreSqlSourceConnector1";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        // PostgreSqlSourceConnector Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_PostgreSqlSourceConnectorGet()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_Get.json
            // this example is just showing the usage of "ConnectorOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "postgreSqlSourceConnector1";
            NullableResponse<ConnectorInstanceResource> response = await collection.GetIfExistsAsync(name);
            ConnectorInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ConnectorInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // BitCoinSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_BitCoinSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/BitCoinSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "bitCoin1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("West US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.ByteArrayConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfluentSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ConfluentSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/ConfluentSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "confluentSourceConnector1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("East US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.JsonConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CosmosDbSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CosmosDbSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/CosmosDbSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "cosmosDbSourceConnector1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("East US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.JsonConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GooglePubSubSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_GooglePubSubSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/GooglePubSubSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "googlePubSubSourceConnector1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("East US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.JsonConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KinesisSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_KinesisSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/KinesisSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "kinesisSourceConnector1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("East US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.JsonConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PostgreSqlSourceConnector CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PostgreSqlSourceConnectorCreateOrUpdate()
        {
            // Generated from example definition: specification/messagingconnectors/resource-manager/Microsoft.MessagingConnectors/preview/2024-01-20-preview/examples/PostgreSqlSourceConnector_CreateOrUpdate.json
            // this example is just showing the usage of "ConnectorOperations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee";
            string resourceGroupName = "abcd";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ConnectorInstanceResource
            ConnectorInstanceCollection collection = resourceGroupResource.GetConnectorInstances();

            // invoke the operation
            string name = "postgreSqlSourceConnector1";
            ConnectorInstanceData data = new ConnectorInstanceData(new AzureLocation("East US"))
            {
                MaxTasks = 1,
                ValueConverter = ConverterType.JsonConverter,
                EventHubConfig = new EventHubConfig("ns", "eh", "connectionString1"),
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2",
},
            };
            ArmOperation<ConnectorInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, name, data);
            ConnectorInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConnectorInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
