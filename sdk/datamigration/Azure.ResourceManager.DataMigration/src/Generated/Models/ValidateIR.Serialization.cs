// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class ValidateIR : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(SourceDatabaseName))
            {
                writer.WritePropertyName("sourceDatabaseName");
                writer.WriteStringValue(SourceDatabaseName);
            }
            if (Optional.IsDefined(SourceSqlConnection))
            {
                writer.WritePropertyName("sourceSqlConnection");
                writer.WriteObjectValue(SourceSqlConnection);
            }
            if (Optional.IsDefined(TargetDatabaseName))
            {
                writer.WritePropertyName("targetDatabaseName");
                writer.WriteStringValue(TargetDatabaseName);
            }
            if (Optional.IsDefined(TargetSqlConnection))
            {
                writer.WritePropertyName("targetSqlConnection");
                writer.WriteObjectValue(TargetSqlConnection);
            }
            if (Optional.IsDefined(BackupConfiguration))
            {
                writer.WritePropertyName("backupConfiguration");
                writer.WriteObjectValue(BackupConfiguration);
            }
            if (Optional.IsDefined(Succeeded))
            {
                writer.WritePropertyName("succeeded");
                writer.WriteBooleanValue(Succeeded.Value);
            }
            if (Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors");
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ValidateIR DeserializeValidateIR(JsonElement element)
        {
            Optional<ValidateIRKind> kind = default;
            Optional<string> sourceDatabaseName = default;
            Optional<SqlConnectionInformation> sourceSqlConnection = default;
            Optional<string> targetDatabaseName = default;
            Optional<SqlConnectionInformation> targetSqlConnection = default;
            Optional<BackupConfiguration> backupConfiguration = default;
            Optional<bool> succeeded = default;
            Optional<IList<TestConnectivityData>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kind = new ValidateIRKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceDatabaseName"))
                {
                    sourceDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceSqlConnection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sourceSqlConnection = SqlConnectionInformation.DeserializeSqlConnectionInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("targetDatabaseName"))
                {
                    targetDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetSqlConnection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    targetSqlConnection = SqlConnectionInformation.DeserializeSqlConnectionInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("backupConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backupConfiguration = BackupConfiguration.DeserializeBackupConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("succeeded"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    succeeded = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TestConnectivityData> array = new List<TestConnectivityData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TestConnectivityData.DeserializeTestConnectivityData(item));
                    }
                    errors = array;
                    continue;
                }
            }
            return new ValidateIR(Optional.ToNullable(kind), sourceDatabaseName.Value, sourceSqlConnection.Value, targetDatabaseName.Value, targetSqlConnection.Value, backupConfiguration.Value, Optional.ToNullable(succeeded), Optional.ToList(errors));
        }
    }
}
