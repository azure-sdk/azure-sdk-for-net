// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataMigration.Models
{
    public partial class MigrateMySqlAzureDBForMySqlOfflineTaskInput : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("sourceConnectionInfo"u8);
            writer.WriteObjectValue(SourceConnectionInfo);
            writer.WritePropertyName("targetConnectionInfo"u8);
            writer.WriteObjectValue(TargetConnectionInfo);
            writer.WritePropertyName("selectedDatabases"u8);
            writer.WriteStartArray();
            foreach (var item in SelectedDatabases)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(MakeSourceServerReadOnly))
            {
                writer.WritePropertyName("makeSourceServerReadOnly"u8);
                writer.WriteBooleanValue(MakeSourceServerReadOnly.Value);
            }
            if (Optional.IsDefined(StartedOn))
            {
                writer.WritePropertyName("startedOn"u8);
                writer.WriteStringValue(StartedOn.Value, "O");
            }
            if (Optional.IsDefined(SourceServerResourceId))
            {
                writer.WritePropertyName("sourceServerResourceId"u8);
                writer.WriteStringValue(SourceServerResourceId);
            }
            if (Optional.IsDefined(TargetServerResourceId))
            {
                writer.WritePropertyName("targetServerResourceId"u8);
                writer.WriteStringValue(TargetServerResourceId);
            }
            if (Optional.IsDefined(OptionalAgentSettings))
            {
                writer.WritePropertyName("optionalAgentSettings"u8);
                writer.WriteObjectValue(OptionalAgentSettings);
            }
            if (Optional.IsDefined(MigrateAllViews))
            {
                writer.WritePropertyName("migrateAllViews"u8);
                writer.WriteBooleanValue(MigrateAllViews.Value);
            }
            if (Optional.IsDefined(MigrateAllTriggers))
            {
                writer.WritePropertyName("migrateAllTriggers"u8);
                writer.WriteBooleanValue(MigrateAllTriggers.Value);
            }
            if (Optional.IsDefined(MigrateAllEvents))
            {
                writer.WritePropertyName("migrateAllEvents"u8);
                writer.WriteBooleanValue(MigrateAllEvents.Value);
            }
            if (Optional.IsDefined(MigrateAllRoutines))
            {
                writer.WritePropertyName("migrateAllRoutines"u8);
                writer.WriteBooleanValue(MigrateAllRoutines.Value);
            }
            if (Optional.IsDefined(MigrateAllTablesSchema))
            {
                writer.WritePropertyName("migrateAllTablesSchema"u8);
                writer.WriteBooleanValue(MigrateAllTablesSchema.Value);
            }
            if (Optional.IsDefined(MigrateUserSystemTables))
            {
                writer.WritePropertyName("migrateUserSystemTables"u8);
                writer.WriteBooleanValue(MigrateUserSystemTables.Value);
            }
            if (Optional.IsDefined(EncryptedKeyForSecureFields))
            {
                writer.WritePropertyName("encryptedKeyForSecureFields"u8);
                writer.WriteStringValue(EncryptedKeyForSecureFields);
            }
            writer.WriteEndObject();
        }

        internal static MigrateMySqlAzureDBForMySqlOfflineTaskInput DeserializeMigrateMySqlAzureDBForMySqlOfflineTaskInput(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MySqlConnectionInfo sourceConnectionInfo = default;
            MySqlConnectionInfo targetConnectionInfo = default;
            IList<MigrateMySqlAzureDBForMySqlOfflineDatabaseInput> selectedDatabases = default;
            Optional<bool> makeSourceServerReadOnly = default;
            Optional<DateTimeOffset> startedOn = default;
            Optional<string> sourceServerResourceId = default;
            Optional<string> targetServerResourceId = default;
            Optional<MigrateMySqlAzureDBForMySqlOfflineTaskInputOptionalAgentSettings> optionalAgentSettings = default;
            Optional<bool> migrateAllViews = default;
            Optional<bool> migrateAllTriggers = default;
            Optional<bool> migrateAllEvents = default;
            Optional<bool> migrateAllRoutines = default;
            Optional<bool> migrateAllTablesSchema = default;
            Optional<bool> migrateUserSystemTables = default;
            Optional<string> encryptedKeyForSecureFields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourceConnectionInfo"u8))
                {
                    sourceConnectionInfo = MySqlConnectionInfo.DeserializeMySqlConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("targetConnectionInfo"u8))
                {
                    targetConnectionInfo = MySqlConnectionInfo.DeserializeMySqlConnectionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("selectedDatabases"u8))
                {
                    List<MigrateMySqlAzureDBForMySqlOfflineDatabaseInput> array = new List<MigrateMySqlAzureDBForMySqlOfflineDatabaseInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MigrateMySqlAzureDBForMySqlOfflineDatabaseInput.DeserializeMigrateMySqlAzureDBForMySqlOfflineDatabaseInput(item));
                    }
                    selectedDatabases = array;
                    continue;
                }
                if (property.NameEquals("makeSourceServerReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    makeSourceServerReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("startedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sourceServerResourceId"u8))
                {
                    sourceServerResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetServerResourceId"u8))
                {
                    targetServerResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalAgentSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionalAgentSettings = MigrateMySqlAzureDBForMySqlOfflineTaskInputOptionalAgentSettings.DeserializeMigrateMySqlAzureDBForMySqlOfflineTaskInputOptionalAgentSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("migrateAllViews"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateAllViews = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("migrateAllTriggers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateAllTriggers = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("migrateAllEvents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateAllEvents = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("migrateAllRoutines"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateAllRoutines = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("migrateAllTablesSchema"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateAllTablesSchema = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("migrateUserSystemTables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrateUserSystemTables = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("encryptedKeyForSecureFields"u8))
                {
                    encryptedKeyForSecureFields = property.Value.GetString();
                    continue;
                }
            }
            return new MigrateMySqlAzureDBForMySqlOfflineTaskInput(sourceConnectionInfo, targetConnectionInfo, selectedDatabases, Optional.ToNullable(makeSourceServerReadOnly), Optional.ToNullable(startedOn), sourceServerResourceId.Value, targetServerResourceId.Value, optionalAgentSettings.Value, Optional.ToNullable(migrateAllViews), Optional.ToNullable(migrateAllTriggers), Optional.ToNullable(migrateAllEvents), Optional.ToNullable(migrateAllRoutines), Optional.ToNullable(migrateAllTablesSchema), Optional.ToNullable(migrateUserSystemTables), encryptedKeyForSecureFields.Value);
        }
    }
}
