// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.LoadTesting.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Samples
{
    public partial class Samples_TestProfileRunClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_CreateOrUpdateTestProfileRun_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrUpdateTestProfileRun("<testProfileRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_CreateOrUpdateTestProfileRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateTestProfileRunAsync("<testProfileRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_CreateOrUpdateTestProfileRun_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                description = "<description>",
                testProfileId = "<testProfileId>",
            });
            Response response = client.CreateOrUpdateTestProfileRun("<testProfileRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_CreateOrUpdateTestProfileRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                description = "<description>",
                testProfileId = "<testProfileId>",
            });
            Response response = await client.CreateOrUpdateTestProfileRunAsync("<testProfileRunId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_DeleteTestProfileRun_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.DeleteTestProfileRun("<testProfileRunId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_DeleteTestProfileRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.DeleteTestProfileRunAsync("<testProfileRunId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_DeleteTestProfileRun_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.DeleteTestProfileRun("<testProfileRunId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_DeleteTestProfileRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.DeleteTestProfileRunAsync("<testProfileRunId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.StopTestProfileRun("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.StopTestProfileRunAsync("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.StopTestProfileRun("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.StopTestProfileRunAsync("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.StopTestProfileRun("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.StopTestProfileRunAsync("<testProfileRunId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceId").ToString());
            Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
            Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.StopTestProfileRun("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.StopTestProfileRunAsync("<testProfileRunId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestProfileRuns(null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestProfileRunsAsync(null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (TestProfileRun item in client.GetTestProfileRuns())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (TestProfileRun item in client.GetTestProfileRunsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestProfileRuns(1234, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), "<testProfileRunIds>", "<testProfileIds>", "<statuses>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("testProfileId").ToString());
                Console.WriteLine(result.GetProperty("targetResourceId").ToString());
                Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("endDateTime").ToString());
                Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestProfileRunsAsync(1234, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), "<testProfileRunIds>", "<testProfileIds>", "<statuses>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("testProfileId").ToString());
                Console.WriteLine(result.GetProperty("targetResourceId").ToString());
                Console.WriteLine(result.GetProperty("targetResourceConfigurations").GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("errorDetails")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("endDateTime").ToString());
                Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("configurationId").ToString());
                Console.WriteLine(result.GetProperty("testRunDetails").GetProperty("<key>").GetProperty("properties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("recommendations")[0].GetProperty("configurations")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (TestProfileRun item in client.GetTestProfileRuns(maxpagesize: 1234, minStartDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), maxStartDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), minEndDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), maxEndDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), createdDateStartTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), createdDateEndTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), testProfileRunIds: "<testProfileRunIds>", testProfileIds: "<testProfileIds>", statuses: "<statuses>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (TestProfileRun item in client.GetTestProfileRunsAsync(maxpagesize: 1234, minStartDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), maxStartDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), minEndDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), maxEndDateTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), createdDateStartTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), createdDateEndTime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), testProfileRunIds: "<testProfileRunIds>", testProfileIds: "<testProfileIds>", statuses: "<statuses>"))
            {
            }
        }
    }
}
