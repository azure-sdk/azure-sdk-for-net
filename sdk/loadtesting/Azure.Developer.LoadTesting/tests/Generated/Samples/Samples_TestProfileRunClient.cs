// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.LoadTesting.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Samples
{
    public partial class Samples_TestProfileRunClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_CreateOrUpdateTestProfileRun_CreateUpdateAndStartATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_TestProfile_Run1",
                testProfileId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
            });
            Response response = client.CreateOrUpdateTestProfileRun("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_CreateOrUpdateTestProfileRun_CreateUpdateAndStartATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Performance_TestProfile_Run1",
                testProfileId = "12345678-1234-1234-1234-123456789012",
                description = "sample description",
            });
            Response response = await client.CreateOrUpdateTestProfileRunAsync("12316678-1234-1234-1234-122451189012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_DeleteTestProfileRun_DeletesATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.DeleteTestProfileRun("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_DeleteTestProfileRun_DeletesATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.DeleteTestProfileRunAsync("12316678-1234-1234-1234-122451189012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunAfterTheRunHasExecuted_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.GetTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRun_GetATestProfileRunWhileTheRunIsExecuting_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.GetTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_StopATestProfileRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = client.StopTestProfileRun("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_StopATestProfileRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response response = await client.StopTestProfileRunAsync("12316678-1234-1234-1234-122451189012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRunOperations_StopTestProfileRun_StopATestProfileRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = client.StopTestProfileRun("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRunOperations_StopTestProfileRun_StopATestProfileRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            Response<TestProfileRun> response = await client.StopTestProfileRunAsync("12316678-1234-1234-1234-122451189012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestProfileRuns(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), null, null, null, "12345678-1234-1234-1234-123456789012", "ACCEPTED", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestProfileRunsAsync(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), null, null, null, "12345678-1234-1234-1234-123456789012", "ACCEPTED", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileRunId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            foreach (TestProfileRun item in client.GetTestProfileRuns())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfileRun_GetTestProfileRuns_GetAllTestProfileRunsForTheSpecifiedFilters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileRunClient client = new TestProfileRunClient(endpoint, credential);

            await foreach (TestProfileRun item in client.GetTestProfileRunsAsync())
            {
            }
        }
    }
}
