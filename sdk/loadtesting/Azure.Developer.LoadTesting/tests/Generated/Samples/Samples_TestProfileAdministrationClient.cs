// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Developer.LoadTesting.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.LoadTesting.Samples
{
    public partial class Samples_TestProfileAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_CreateOrUpdateTestProfile_CreateOrUpdateATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_TestProfile",
                testId = "12346-abcd-6789",
                targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
                targetResourceConfigurations = new
                {
                    kind = "FunctionsFlexConsumption",
                    configurations = new
                    {
                        config1 = new
                        {
                            instanceMemoryMB = 2048L,
                            httpConcurrency = 16L,
                        },
                        config2 = new
                        {
                            instanceMemoryMB = 4096L,
                            httpConcurrency = 16L,
                        },
                    },
                },
            });
            Response response = client.CreateOrUpdateTestProfile("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_CreateOrUpdateTestProfile_CreateOrUpdateATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                description = "sample description",
                displayName = "Performance_TestProfile",
                testId = "12346-abcd-6789",
                targetResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/samplerg/providers/Microsoft.Web/sites/myfunctionapp",
                targetResourceConfigurations = new
                {
                    kind = "FunctionsFlexConsumption",
                    configurations = new
                    {
                        config1 = new
                        {
                            instanceMemoryMB = 2048L,
                            httpConcurrency = 16L,
                        },
                        config2 = new
                        {
                            instanceMemoryMB = 4096L,
                            httpConcurrency = 16L,
                        },
                    },
                },
            });
            Response response = await client.CreateOrUpdateTestProfileAsync("12345678-1234-1234-1234-123456789012", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_DeleteTestProfile_DeleteATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response response = client.DeleteTestProfile("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_DeleteTestProfile_DeleteATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response response = await client.DeleteTestProfileAsync("12345678-1234-1234-1234-123456789012");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfile_GetATestProfile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response response = client.GetTestProfile("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfile_GetATestProfile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testProfileId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfile_GetATestProfile_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response<TestProfile> response = client.GetTestProfile("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfile_GetATestProfile_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            Response<TestProfile> response = await client.GetTestProfileAsync("12345678-1234-1234-1234-123456789012");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfiles_GetAllTestProfilesForTheSpecifiedFilters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            foreach (BinaryData item in client.GetTestProfiles(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), "12345678-1234-1234-1234-123456789012", "12346-abcd-6789", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfiles_GetAllTestProfilesForTheSpecifiedFilters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTestProfilesAsync(null, DateTimeOffset.Parse("2024-05-01T16:00:46.072Z"), DateTimeOffset.Parse("2024-05-01T16:50:46.072Z"), "12345678-1234-1234-1234-123456789012", "12346-abcd-6789", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testProfileId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestProfile_GetTestProfiles_GetAllTestProfilesForTheSpecifiedFilters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            foreach (TestProfile item in client.GetTestProfiles())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestProfile_GetTestProfiles_GetAllTestProfilesForTheSpecifiedFilters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestProfileAdministrationClient client = new TestProfileAdministrationClient(endpoint, credential);

            await foreach (TestProfile item in client.GetTestProfilesAsync())
            {
            }
        }
    }
}
