// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Developer.LoadTesting.Models
{
    public partial class Test : IUtf8JsonSerializable, IJsonModel<Test>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Test>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<Test>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Test>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Test)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(PassFailCriteria))
            {
                writer.WritePropertyName("passFailCriteria"u8);
                writer.WriteObjectValue(PassFailCriteria);
            }
            if (Optional.IsDefined(AutoStopCriteria))
            {
                writer.WritePropertyName("autoStopCriteria"u8);
                writer.WriteObjectValue(AutoStopCriteria);
            }
            if (Optional.IsCollectionDefined(Secrets))
            {
                writer.WritePropertyName("secrets"u8);
                writer.WriteStartObject();
                foreach (var item in Secrets)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteObjectValue(Certificate);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables"u8);
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(LoadTestConfiguration))
            {
                writer.WritePropertyName("loadTestConfiguration"u8);
                writer.WriteObjectValue(LoadTestConfiguration);
            }
            if (Optional.IsDefined(BaselineTestRunId))
            {
                writer.WritePropertyName("baselineTestRunId"u8);
                writer.WriteStringValue(BaselineTestRunId);
            }
            if (options.Format != "W" && Optional.IsDefined(InputArtifacts))
            {
                writer.WritePropertyName("inputArtifacts"u8);
                writer.WriteObjectValue(InputArtifacts);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("testId"u8);
                writer.WriteStringValue(TestId);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(PublicIPDisabled))
            {
                writer.WritePropertyName("publicIPDisabled"u8);
                writer.WriteBooleanValue(PublicIPDisabled.Value);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityType))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityType"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityType);
            }
            if (Optional.IsDefined(KeyvaultReferenceIdentityId))
            {
                writer.WritePropertyName("keyvaultReferenceIdentityId"u8);
                writer.WriteStringValue(KeyvaultReferenceIdentityId);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedDateTime))
            {
                writer.WritePropertyName("createdDateTime"u8);
                writer.WriteStringValue(CreatedDateTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedBy))
            {
                writer.WritePropertyName("createdBy"u8);
                writer.WriteStringValue(CreatedBy);
            }
            if (options.Format != "W" && Optional.IsDefined(LastModifiedDateTime))
            {
                writer.WritePropertyName("lastModifiedDateTime"u8);
                writer.WriteStringValue(LastModifiedDateTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastModifiedBy))
            {
                writer.WritePropertyName("lastModifiedBy"u8);
                writer.WriteStringValue(LastModifiedBy);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        Test IJsonModel<Test>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Test>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Test)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTest(document.RootElement, options);
        }

        internal static Test DeserializeTest(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<PassFailCriteria> passFailCriteria = default;
            Optional<AutoStopCriteria> autoStopCriteria = default;
            Optional<IReadOnlyDictionary<string, Secret>> secrets = default;
            Optional<CertificateMetadata> certificate = default;
            Optional<IReadOnlyDictionary<string, string>> environmentVariables = default;
            Optional<LoadTestConfiguration> loadTestConfiguration = default;
            Optional<string> baselineTestRunId = default;
            Optional<TestInputArtifacts> inputArtifacts = default;
            string testId = default;
            Optional<string> description = default;
            Optional<string> displayName = default;
            Optional<string> subnetId = default;
            Optional<TestKind> kind = default;
            Optional<bool> publicIPDisabled = default;
            Optional<string> keyvaultReferenceIdentityType = default;
            Optional<string> keyvaultReferenceIdentityId = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<string> createdBy = default;
            Optional<DateTimeOffset> lastModifiedDateTime = default;
            Optional<string> lastModifiedBy = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("passFailCriteria"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    passFailCriteria = PassFailCriteria.DeserializePassFailCriteria(property.Value, options);
                    continue;
                }
                if (property.NameEquals("autoStopCriteria"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoStopCriteria = AutoStopCriteria.DeserializeAutoStopCriteria(property.Value, options);
                    continue;
                }
                if (property.NameEquals("secrets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, Secret> dictionary = new Dictionary<string, Secret>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, Secret.DeserializeSecret(property0.Value, options));
                    }
                    secrets = dictionary;
                    continue;
                }
                if (property.NameEquals("certificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificate = CertificateMetadata.DeserializeCertificateMetadata(property.Value, options);
                    continue;
                }
                if (property.NameEquals("environmentVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    environmentVariables = dictionary;
                    continue;
                }
                if (property.NameEquals("loadTestConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadTestConfiguration = LoadTestConfiguration.DeserializeLoadTestConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("baselineTestRunId"u8))
                {
                    baselineTestRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputArtifacts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputArtifacts = TestInputArtifacts.DeserializeTestInputArtifacts(property.Value, options);
                    continue;
                }
                if (property.NameEquals("testId"u8))
                {
                    testId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetId"u8))
                {
                    subnetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new TestKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("publicIPDisabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicIPDisabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("keyvaultReferenceIdentityType"u8))
                {
                    keyvaultReferenceIdentityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyvaultReferenceIdentityId"u8))
                {
                    keyvaultReferenceIdentityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("createdBy"u8))
                {
                    createdBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModifiedDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedBy"u8))
                {
                    lastModifiedBy = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new Test(passFailCriteria.Value, autoStopCriteria.Value, Optional.ToDictionary(secrets), certificate.Value, Optional.ToDictionary(environmentVariables), loadTestConfiguration.Value, baselineTestRunId.Value, inputArtifacts.Value, testId, description.Value, displayName.Value, subnetId.Value, Optional.ToNullable(kind), Optional.ToNullable(publicIPDisabled), keyvaultReferenceIdentityType.Value, keyvaultReferenceIdentityId.Value, Optional.ToNullable(createdDateTime), createdBy.Value, Optional.ToNullable(lastModifiedDateTime), lastModifiedBy.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<Test>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Test>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Test)} does not support '{options.Format}' format.");
            }
        }

        Test IPersistableModel<Test>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Test>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTest(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Test)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<Test>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Test FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTest(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
