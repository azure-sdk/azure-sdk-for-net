// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.LoadTesting.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.LoadTesting.Samples
{
    public partial class Sample_LoadTestResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetALoadTestResource()
        {
            // Generated from example definition: 2024-12-01-preview/LoadTests_Get.json
            // this example is just showing the usage of "LoadTestResource_GetLoadtest" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LoadTestResource created on azure
            // for more information of creating LoadTestResource, please refer to the document of LoadTestResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "dummyrg";
            string loadTestName = "myLoadTest";
            ResourceIdentifier loadTestResourceId = LoadTestResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, loadTestName);
            LoadTestResource loadTestResource = client.GetLoadTestResource(loadTestResourceId);

            // invoke the operation
            LoadTestResource result = await loadTestResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            LoadTestResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteALoadTestResource()
        {
            // Generated from example definition: 2024-12-01-preview/LoadTests_Delete.json
            // this example is just showing the usage of "LoadTestResource_DeleteLoadtest" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LoadTestResource created on azure
            // for more information of creating LoadTestResource, please refer to the document of LoadTestResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "dummyrg";
            string loadTestName = "myLoadTest";
            ResourceIdentifier loadTestResourceId = LoadTestResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, loadTestName);
            LoadTestResource loadTestResource = client.GetLoadTestResource(loadTestResourceId);

            // invoke the operation
            await loadTestResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateALoadTestResource()
        {
            // Generated from example definition: 2024-12-01-preview/LoadTests_Update.json
            // this example is just showing the usage of "LoadTestResource_UpdateLoadtest" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LoadTestResource created on azure
            // for more information of creating LoadTestResource, please refer to the document of LoadTestResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "dummyrg";
            string loadTestName = "myLoadTest";
            ResourceIdentifier loadTestResourceId = LoadTestResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, loadTestName);
            LoadTestResource loadTestResource = client.GetLoadTestResource(loadTestResourceId);

            // invoke the operation
            LoadTestResourcePatch patch = new LoadTestResourcePatch
            {
                Identity = new ManagedServiceIdentity("SystemAssigned,UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/dummyrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["Team"] = "Dev Exp",
["Division"] = "LT"
},
                Properties = new LoadTestResourceUpdateProperties
                {
                    Description = "This is new load test resource",
                    Encryption = new Models.EncryptionProperties
                    {
                        Identity = new EncryptionPropertiesIdentity
                        {
                            Type = Models.Type.SystemAssigned,
                            ResourceId = null,
                        },
                        KeyUri = "https://dummy.vault.azure.net/keys/dummykey1",
                    },
                },
            };
            await loadTestResource.UpdateAsync(WaitUntil.Completed, patch);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task OutboundNetworkDependenciesEndpoints_ListsTheEndpointsThatAgentsMayCallAsPartOfLoadTesting()
        {
            // Generated from example definition: 2024-12-01-preview/LoadTests_ListOutboundNetworkDependenciesEndpoints.json
            // this example is just showing the usage of "LoadTests_OutboundNetworkDependenciesEndpoints" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this LoadTestResource created on azure
            // for more information of creating LoadTestResource, please refer to the document of LoadTestResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "default-azureloadtest-japaneast";
            string loadTestName = "sampleloadtest";
            ResourceIdentifier loadTestResourceId = LoadTestResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, loadTestName);
            LoadTestResource loadTestResource = client.GetLoadTestResource(loadTestResourceId);

            // invoke the operation and iterate over the result
            await foreach (OutboundEnvironmentEndpoint item in loadTestResource.OutboundNetworkDependenciesEndpointsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}
