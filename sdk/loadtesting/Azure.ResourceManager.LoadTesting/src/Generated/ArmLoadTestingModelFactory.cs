// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.LoadTesting.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmLoadTestingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="LoadTesting.LoadTestResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="LoadTesting.LoadTestResourceData"/> instance for mocking. </returns>
        public static LoadTestResourceData LoadTestResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LoadTestProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LoadTestResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LoadTestProperties"/>. </summary>
        /// <param name="description"> Description of the resource. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="dataPlaneUri"> Resource data plane URI. </param>
        /// <param name="encryption"> CMK Encryption property. </param>
        /// <returns> A new <see cref="Models.LoadTestProperties"/> instance for mocking. </returns>
        public static LoadTestProperties LoadTestProperties(string description = null, ResourceState? provisioningState = null, string dataPlaneUri = null, EncryptionProperties encryption = null)
        {
            return new LoadTestProperties(description, provisioningState, dataPlaneUri, encryption, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OutboundEnvironmentEndpoint"/>. </summary>
        /// <param name="category"> The type of service that Azure Load Testing connects to. </param>
        /// <param name="endpoints"> The endpoints for this service to which the Batch service makes outbound calls. </param>
        /// <returns> A new <see cref="Models.OutboundEnvironmentEndpoint"/> instance for mocking. </returns>
        public static OutboundEnvironmentEndpoint OutboundEnvironmentEndpoint(string category = null, IEnumerable<EndpointDependency> endpoints = null)
        {
            endpoints ??= new List<EndpointDependency>();

            return new OutboundEnvironmentEndpoint(category, endpoints?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EndpointDependency"/>. </summary>
        /// <param name="domainName"> The domain name of the dependency. Domain names may be fully qualified or may contain a * wildcard. </param>
        /// <param name="description"> Human-readable supplemental information about the dependency and when it is applicable. </param>
        /// <param name="endpointDetails"> The list of connection details for this endpoint. </param>
        /// <returns> A new <see cref="Models.EndpointDependency"/> instance for mocking. </returns>
        public static EndpointDependency EndpointDependency(string domainName = null, string description = null, IEnumerable<EndpointDetail> endpointDetails = null)
        {
            endpointDetails ??= new List<EndpointDetail>();

            return new EndpointDependency(domainName, description, endpointDetails?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EndpointDetail"/>. </summary>
        /// <param name="port"> The port an endpoint is connected to. </param>
        /// <returns> A new <see cref="Models.EndpointDetail"/> instance for mocking. </returns>
        public static EndpointDetail EndpointDetail(int? port = null)
        {
            return new EndpointDetail(port, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="LoadTesting.QuotaResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="LoadTesting.QuotaResourceData"/> instance for mocking. </returns>
        public static QuotaResourceData QuotaResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaResourceProperties properties = null)
        {
            return new QuotaResourceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.QuotaResourceProperties"/>. </summary>
        /// <param name="limit"> Current quota limit of the quota bucket. </param>
        /// <param name="usage"> Current quota usage of the quota bucket. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <returns> A new <see cref="Models.QuotaResourceProperties"/> instance for mocking. </returns>
        public static QuotaResourceProperties QuotaResourceProperties(int? limit = null, int? usage = null, ResourceState? provisioningState = null)
        {
            return new QuotaResourceProperties(limit, usage, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckQuotaAvailabilityResponse"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isAvailable"> True/False indicating whether the quota request be granted based on availability. </param>
        /// <param name="availabilityStatus"> Message indicating additional details to add to quota support request. </param>
        /// <returns> A new <see cref="Models.CheckQuotaAvailabilityResponse"/> instance for mocking. </returns>
        public static CheckQuotaAvailabilityResponse CheckQuotaAvailabilityResponse(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isAvailable = null, string availabilityStatus = null)
        {
            return new CheckQuotaAvailabilityResponse(
                id,
                name,
                resourceType,
                systemData,
                isAvailable,
                availabilityStatus,
                serializedAdditionalRawData: null);
        }
    }
}
