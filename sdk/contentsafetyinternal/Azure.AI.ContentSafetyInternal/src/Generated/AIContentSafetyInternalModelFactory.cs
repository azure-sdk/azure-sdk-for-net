// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIContentSafetyInternalModelFactory
    {
        /// <summary> Initializes a new instance of FeatureList. </summary>
        /// <param name="value"> List of whitelist features. </param>
        /// <returns> A new <see cref="ContentSafetyInternal.FeatureList"/> instance for mocking. </returns>
        public static FeatureList FeatureList(IEnumerable<Feature> value = null)
        {
            value ??= new List<Feature>();

            return new FeatureList(value?.ToList());
        }

        /// <summary> Initializes a new instance of Feature. </summary>
        /// <param name="featureName"> Feature Name. </param>
        /// <param name="properties"> The properties of the feature. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="featureName"/> or <paramref name="properties"/> is null. </exception>
        /// <returns> A new <see cref="ContentSafetyInternal.Feature"/> instance for mocking. </returns>
        public static Feature Feature(string featureName = null, ContentSafetyInternal.object properties = (ContentSafetyInternal.object)null)
{
if (featureName == null)
{
throw new ArgumentNullException(nameof(featureName));
}
if (properties == null)
{
throw new ArgumentNullException(nameof(properties));
}

return new Azure.AI.ContentSafetyInternal.Feature(featureName, properties);
}

/// <summary> Initializes a new instance of CountPerTimestamp. </summary>
/// <param name="dateTime"> The date time. </param>
/// <param name="count"> The count of the API request. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.CountPerTimestamp"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.CountPerTimestamp CountPerTimestamp(DateTimeOffset dateTime = default, int count = default)
{
    return new Azure.AI.ContentSafetyInternal.CountPerTimestamp(dateTime, count);
}

/// <summary> Initializes a new instance of LatencyPerTimestamp. </summary>
/// <param name="dateTime"> The date time. </param>
/// <param name="latency"> The aggregated latency of the API in milliseconds. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.LatencyPerTimestamp"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.LatencyPerTimestamp LatencyPerTimestamp(DateTimeOffset dateTime = default, int latency = default)
{
    return new Azure.AI.ContentSafetyInternal.LatencyPerTimestamp(dateTime, latency);
}

/// <summary> Initializes a new instance of RequestCountsPerTimestamp. </summary>
/// <param name="dateTime"> The date time. </param>
/// <param name="count"> The count of the request. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.RequestCountsPerTimestamp"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.RequestCountsPerTimestamp RequestCountsPerTimestamp(DateTimeOffset dateTime = default, IEnumerable<Azure.AI.ContentSafetyInternal.Severity> count = (IEnumerable<Azure.AI.ContentSafetyInternal.Severity>)null)
{
    count ??= new List<Azure.AI.ContentSafetyInternal.Severity>();

    return new Azure.AI.ContentSafetyInternal.RequestCountsPerTimestamp(dateTime, count?.ToList());
}

/// <summary> Initializes a new instance of Severity. </summary>
/// <param name="severity"> The severity the API returned. </param>
/// <param name="severityCount"> The count of the severity. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.Severity"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.Severity Severity(Azure.AI.ContentSafetyInternal.SeverityEnum severity = default, int severityCount = default)
{
    return new Azure.AI.ContentSafetyInternal.Severity(severity, severityCount);
}

/// <summary> Initializes a new instance of TermList. </summary>
/// <param name="value"> List of terms. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.TermList"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.TermList TermList(IEnumerable<Azure.AI.ContentSafetyInternal.TopTermCount> value = (IEnumerable<Azure.AI.ContentSafetyInternal.TopTermCount>)null)
{
    value ??= new List<Azure.AI.ContentSafetyInternal.TopTermCount>();

    return new Azure.AI.ContentSafetyInternal.TermList(value?.ToList());
}

/// <summary> Initializes a new instance of TopTermCount. </summary>
/// <param name="term"> The term content. </param>
/// <param name="count"> The API call count of the term. </param>
/// <exception cref="global::System.ArgumentNullException"> <paramref name="term"/> is null. </exception>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.TopTermCount"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.TopTermCount TopTermCount(string term = (string)null, int count = default)
{
    if (term == null)
    {
        throw new ArgumentNullException(nameof(term));
    }

    return new Azure.AI.ContentSafetyInternal.TopTermCount(term, count);
}

/// <summary> Initializes a new instance of BlockListHitCallsPerTimestamp. </summary>
/// <param name="dateTime"> The date time. </param>
/// <param name="count"> The call count of the hit API. </param>
/// <returns> A new <see cref="Azure.AI.ContentSafetyInternal.BlockListHitCallsPerTimestamp"/> instance for mocking. </returns>
public static Azure.AI.ContentSafetyInternal.BlockListHitCallsPerTimestamp BlockListHitCallsPerTimestamp(DateTimeOffset dateTime = default, int count = default)
{
    return new Azure.AI.ContentSafetyInternal.BlockListHitCallsPerTimestamp(dateTime, count);
}
}
}
