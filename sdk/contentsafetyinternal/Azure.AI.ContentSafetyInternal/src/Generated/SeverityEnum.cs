// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Severity level. The higher the value, the more risk it is. </summary>
    public readonly partial struct SeverityEnum : IEquatable<SeverityEnum>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="SeverityEnum"/>. </summary>
        public SeverityEnum(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int TwoValue = 2;
        private const int FourValue = 4;
        private const int SixValue = 6;

        /// <summary> 0. </summary>
        public static SeverityEnum Zero { get; } = new SeverityEnum(ZeroValue);
        /// <summary> 2. </summary>
        public static SeverityEnum Two { get; } = new SeverityEnum(TwoValue);
        /// <summary> 4. </summary>
        public static SeverityEnum Four { get; } = new SeverityEnum(FourValue);
        /// <summary> 6. </summary>
        public static SeverityEnum Six { get; } = new SeverityEnum(SixValue);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="SeverityEnum"/> values are the same. </summary>
        public static bool operator ==(SeverityEnum left, SeverityEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SeverityEnum"/> values are not the same. </summary>
        public static bool operator !=(SeverityEnum left, SeverityEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SeverityEnum"/>. </summary>
        public static implicit operator SeverityEnum(int value) => new SeverityEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SeverityEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SeverityEnum other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
