// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Content safety API version. </summary>
    public readonly partial struct ContentSafetyVersion : IEquatable<ContentSafetyVersion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContentSafetyVersion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContentSafetyVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string _20230430PreviewValue = "2023-04-30-preview";
        private const string _20230530PreviewValue = "2023-05-30-preview";
        private const string _20231001Value = "2023-10-01";

        /// <summary> 2023-04-30-preview. </summary>
        public static ContentSafetyVersion _20230430Preview { get; } = new ContentSafetyVersion(_20230430PreviewValue);
        /// <summary> 2023-05-30-preview. </summary>
        public static ContentSafetyVersion _20230530Preview { get; } = new ContentSafetyVersion(_20230530PreviewValue);
        /// <summary> 2023-10-01. </summary>
        public static ContentSafetyVersion _20231001 { get; } = new ContentSafetyVersion(_20231001Value);
        /// <summary> Determines if two <see cref="ContentSafetyVersion"/> values are the same. </summary>
        public static bool operator ==(ContentSafetyVersion left, ContentSafetyVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContentSafetyVersion"/> values are not the same. </summary>
        public static bool operator !=(ContentSafetyVersion left, ContentSafetyVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContentSafetyVersion"/>. </summary>
        public static implicit operator ContentSafetyVersion(string value) => new ContentSafetyVersion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContentSafetyVersion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContentSafetyVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
