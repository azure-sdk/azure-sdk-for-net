// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Category type. </summary>
    public readonly partial struct CategoryEnum : IEquatable<CategoryEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CategoryEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CategoryEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HateValue = "Hate";
        private const string SexualValue = "Sexual";
        private const string ViolenceValue = "Violence";
        private const string SelfHarmValue = "SelfHarm";

        /// <summary> Hate. </summary>
        public static CategoryEnum Hate { get; } = new CategoryEnum(HateValue);
        /// <summary> Sexual. </summary>
        public static CategoryEnum Sexual { get; } = new CategoryEnum(SexualValue);
        /// <summary> Violence. </summary>
        public static CategoryEnum Violence { get; } = new CategoryEnum(ViolenceValue);
        /// <summary> SelfHarm. </summary>
        public static CategoryEnum SelfHarm { get; } = new CategoryEnum(SelfHarmValue);
        /// <summary> Determines if two <see cref="CategoryEnum"/> values are the same. </summary>
        public static bool operator ==(CategoryEnum left, CategoryEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CategoryEnum"/> values are not the same. </summary>
        public static bool operator !=(CategoryEnum left, CategoryEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CategoryEnum"/>. </summary>
        public static implicit operator CategoryEnum(string value) => new CategoryEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CategoryEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CategoryEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
