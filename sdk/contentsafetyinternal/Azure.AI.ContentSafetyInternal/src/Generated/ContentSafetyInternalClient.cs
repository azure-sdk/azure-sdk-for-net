// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.ContentSafetyInternal
{
    // Data plane generated client.
    /// <summary> The ContentSafetyInternal service client. </summary>
    public partial class ContentSafetyInternalClient
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContentSafetyInternalClient for mocking. </summary>
        protected ContentSafetyInternalClient()
        {
        }

        /// <summary> Initializes a new instance of ContentSafetyInternalClient. </summary>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentSafetyInternalClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new ContentSafetyInternalClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContentSafetyInternalClient. </summary>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ContentSafetyInternalClient(Uri endpoint, AzureKeyCredential credential, ContentSafetyInternalClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new ContentSafetyInternalClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> List Whitelist Features. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get whitelist features. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTermsAsync(CancellationToken)']/*" />
        public virtual async Task<Response<FeatureList>> GetBlocklistTopTermsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetBlocklistTopTermsAsync(context).ConfigureAwait(false);
            return Response.FromValue(FeatureList.FromResponse(response), response);
        }

        /// <summary> List Whitelist Features. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get whitelist features. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTerms(CancellationToken)']/*" />
        public virtual Response<FeatureList> GetBlocklistTopTerms(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetBlocklistTopTerms(context);
            return Response.FromValue(FeatureList.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] List Whitelist Features.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistTopTermsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTermsAsync(RequestContext)']/*" />
        public virtual async Task<Response> GetBlocklistTopTermsAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("ContentSafetyInternalClient.GetBlocklistTopTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlocklistTopTermsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List Whitelist Features.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistTopTerms(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTerms(RequestContext)']/*" />
        public virtual Response GetBlocklistTopTerms(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("ContentSafetyInternalClient.GetBlocklistTopTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlocklistTopTermsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List Top Terms Hit In Blocklist At Different Timestamps. </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List top terms hit in blocklist at different timestamps. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTermsAsync(int,DateTimeOffset,DateTimeOffset,ContentSafetyVersion,CancellationToken)']/*" />
        public virtual async Task<Response<TermList>> GetBlocklistTopTermsAsync(int top, DateTimeOffset start, DateTimeOffset end, ContentSafetyVersion contentSafetyVersion, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetBlocklistTopTermsAsync(top, start, end, contentSafetyVersion.ToString(), context).ConfigureAwait(false);
            return Response.FromValue(TermList.FromResponse(response), response);
        }

        /// <summary> List Top Terms Hit In Blocklist At Different Timestamps. </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List top terms hit in blocklist at different timestamps. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTerms(int,DateTimeOffset,DateTimeOffset,ContentSafetyVersion,CancellationToken)']/*" />
        public virtual Response<TermList> GetBlocklistTopTerms(int top, DateTimeOffset start, DateTimeOffset end, ContentSafetyVersion contentSafetyVersion, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetBlocklistTopTerms(top, start, end, contentSafetyVersion.ToString(), context);
            return Response.FromValue(TermList.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] List Top Terms Hit In Blocklist At Different Timestamps.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistTopTermsAsync(int,DateTimeOffset,DateTimeOffset,ContentSafetyVersion,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentSafetyVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTermsAsync(int,DateTimeOffset,DateTimeOffset,string,RequestContext)']/*" />
        public virtual async Task<Response> GetBlocklistTopTermsAsync(int top, DateTimeOffset start, DateTimeOffset end, string contentSafetyVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));

            using var scope = ClientDiagnostics.CreateScope("ContentSafetyInternalClient.GetBlocklistTopTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlocklistTopTermsRequest(top, start, end, contentSafetyVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] List Top Terms Hit In Blocklist At Different Timestamps.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistTopTerms(int,DateTimeOffset,DateTimeOffset,ContentSafetyVersion,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentSafetyVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistTopTerms(int,DateTimeOffset,DateTimeOffset,string,RequestContext)']/*" />
        public virtual Response GetBlocklistTopTerms(int top, DateTimeOffset start, DateTimeOffset end, string contentSafetyVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));

            using var scope = ClientDiagnostics.CreateScope("ContentSafetyInternalClient.GetBlocklistTopTerms");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBlocklistTopTermsRequest(top, start, end, contentSafetyVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List API Request Counts At Different Timestamps Given A Time Range. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request counts at different timestamps given a time range. Default maxpagesize is 1000. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,int?,int?,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<CountPerTimestamp> GetRequestCountsAsync(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentSafetyOperation contentSafetyOperation, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CountPerTimestamp.DeserializeCountPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCounts", "value", "nextLink", context);
        }

        /// <summary> List API Request Counts At Different Timestamps Given A Time Range. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request counts at different timestamps given a time range. Default maxpagesize is 1000. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCounts(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,int?,int?,int?,CancellationToken)']/*" />
        public virtual Pageable<CountPerTimestamp> GetRequestCounts(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentSafetyOperation contentSafetyOperation, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CountPerTimestamp.DeserializeCountPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCounts", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Counts At Different Timestamps Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestCountsAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. Allowed values: "AnalyzeText" | "AnalyzeImage" | "AnalyzeImageWithText". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/> or <paramref name="contentSafetyOperation"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsAsync(DateTimeOffset,DateTimeOffset,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRequestCountsAsync(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(contentSafetyOperation, nameof(contentSafetyOperation));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsRequest(start, end, granularity, contentSafetyVersion, contentSafetyOperation, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, contentSafetyOperation, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCounts", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Counts At Different Timestamps Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestCounts(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. Allowed values: "AnalyzeText" | "AnalyzeImage" | "AnalyzeImageWithText". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/> or <paramref name="contentSafetyOperation"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCounts(DateTimeOffset,DateTimeOffset,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRequestCounts(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(contentSafetyOperation, nameof(contentSafetyOperation));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsRequest(start, end, granularity, contentSafetyVersion, contentSafetyOperation, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, contentSafetyOperation, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCounts", "value", "nextLink", context);
        }

        /// <summary> List API Request Latencies At Different Timestamps Given A Time Range. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. </param>
        /// <param name="aggregation"> Aggregation method of the latency, the value could be 'Percentile99', 'Percentile95', 'Average'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request latencies at different timestamps given a time range. Default maxpagesize is 1000. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestLatenciesAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,Aggregation,int?,int?,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<LatencyPerTimestamp> GetRequestLatenciesAsync(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentSafetyOperation contentSafetyOperation, Aggregation aggregation, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestLatenciesRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), aggregation.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestLatenciesNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), aggregation.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, LatencyPerTimestamp.DeserializeLatencyPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestLatencies", "value", "nextLink", context);
        }

        /// <summary> List API Request Latencies At Different Timestamps Given A Time Range. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. </param>
        /// <param name="aggregation"> Aggregation method of the latency, the value could be 'Percentile99', 'Percentile95', 'Average'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request latencies at different timestamps given a time range. Default maxpagesize is 1000. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestLatencies(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,Aggregation,int?,int?,int?,CancellationToken)']/*" />
        public virtual Pageable<LatencyPerTimestamp> GetRequestLatencies(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentSafetyOperation contentSafetyOperation, Aggregation aggregation, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestLatenciesRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), aggregation.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestLatenciesNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), contentSafetyOperation.ToString(), aggregation.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, LatencyPerTimestamp.DeserializeLatencyPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestLatencies", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Latencies At Different Timestamps Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestLatenciesAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,Aggregation,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. Allowed values: "AnalyzeText" | "AnalyzeImage" | "AnalyzeImageWithText". </param>
        /// <param name="aggregation"> Aggregation method of the latency, the value could be 'Percentile99', 'Percentile95', 'Average'. Allowed values: "P99" | "P95" | "Avg". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/>, <paramref name="contentSafetyOperation"/> or <paramref name="aggregation"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestLatenciesAsync(DateTimeOffset,DateTimeOffset,string,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRequestLatenciesAsync(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, string aggregation, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(contentSafetyOperation, nameof(contentSafetyOperation));
            Argument.AssertNotNull(aggregation, nameof(aggregation));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestLatenciesRequest(start, end, granularity, contentSafetyVersion, contentSafetyOperation, aggregation, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestLatenciesNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, contentSafetyOperation, aggregation, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestLatencies", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Latencies At Different Timestamps Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestLatencies(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentSafetyOperation,Aggregation,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="contentSafetyOperation"> Content safety operation, the value could be 'AnalyzeText', 'AnalyzeImage'. Allowed values: "AnalyzeText" | "AnalyzeImage" | "AnalyzeImageWithText". </param>
        /// <param name="aggregation"> Aggregation method of the latency, the value could be 'Percentile99', 'Percentile95', 'Average'. Allowed values: "P99" | "P95" | "Avg". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/>, <paramref name="contentSafetyOperation"/> or <paramref name="aggregation"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestLatencies(DateTimeOffset,DateTimeOffset,string,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRequestLatencies(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, string aggregation, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(contentSafetyOperation, nameof(contentSafetyOperation));
            Argument.AssertNotNull(aggregation, nameof(aggregation));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestLatenciesRequest(start, end, granularity, contentSafetyVersion, contentSafetyOperation, aggregation, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestLatenciesNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, contentSafetyOperation, aggregation, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestLatencies", "value", "nextLink", context);
        }

        /// <summary> List API Request Count At Different Timestamps Of A Specific Category Given A Time Range. </summary>
        /// <param name="category"> The category of the API. The value could be Hate, Sexual, Violence, Self-Harm. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="modality"> Modality type, the value could be 'Text', 'Image'. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request count at different timestamps of a specific category given a time range. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsByCategoryAndSeverityAsync(CategoryEnum,DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentModality,int?,int?,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<RequestCountsPerTimestamp> GetRequestCountsByCategoryAndSeverityAsync(CategoryEnum category, DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentModality modality, int? maxCount = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsByCategoryAndSeverityRequest(category.ToString(), start, end, granularity.ToString(), contentSafetyVersion.ToString(), modality.ToString(), maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsByCategoryAndSeverityNextPageRequest(nextLink, category.ToString(), start, end, granularity.ToString(), contentSafetyVersion.ToString(), modality.ToString(), maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, RequestCountsPerTimestamp.DeserializeRequestCountsPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCountsByCategoryAndSeverity", "value", "nextLink", context);
        }

        /// <summary> List API Request Count At Different Timestamps Of A Specific Category Given A Time Range. </summary>
        /// <param name="category"> The category of the API. The value could be Hate, Sexual, Violence, Self-Harm. </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="modality"> Modality type, the value could be 'Text', 'Image'. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List API request count at different timestamps of a specific category given a time range. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsByCategoryAndSeverity(CategoryEnum,DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentModality,int?,int?,int?,CancellationToken)']/*" />
        public virtual Pageable<RequestCountsPerTimestamp> GetRequestCountsByCategoryAndSeverity(CategoryEnum category, DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, ContentModality modality, int? maxCount = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsByCategoryAndSeverityRequest(category.ToString(), start, end, granularity.ToString(), contentSafetyVersion.ToString(), modality.ToString(), maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsByCategoryAndSeverityNextPageRequest(nextLink, category.ToString(), start, end, granularity.ToString(), contentSafetyVersion.ToString(), modality.ToString(), maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, RequestCountsPerTimestamp.DeserializeRequestCountsPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCountsByCategoryAndSeverity", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Count At Different Timestamps Of A Specific Category Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestCountsByCategoryAndSeverityAsync(CategoryEnum,DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentModality,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="category"> The category of the API. The value could be Hate, Sexual, Violence, Self-Harm. Allowed values: "Hate" | "Sexual" | "Violence" | "SelfHarm". </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="modality"> Modality type, the value could be 'Text', 'Image'. Allowed values: "Text" | "Image" | "ImageWithText". </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="category"/>, <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/> or <paramref name="modality"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="category"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsByCategoryAndSeverityAsync(string,DateTimeOffset,DateTimeOffset,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetRequestCountsByCategoryAndSeverityAsync(string category, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string modality, int? maxCount = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(category, nameof(category));
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(modality, nameof(modality));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsByCategoryAndSeverityRequest(category, start, end, granularity, contentSafetyVersion, modality, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsByCategoryAndSeverityNextPageRequest(nextLink, category, start, end, granularity, contentSafetyVersion, modality, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCountsByCategoryAndSeverity", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List API Request Count At Different Timestamps Of A Specific Category Given A Time Range.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRequestCountsByCategoryAndSeverity(CategoryEnum,DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,ContentModality,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="category"> The category of the API. The value could be Hate, Sexual, Violence, Self-Harm. Allowed values: "Hate" | "Sexual" | "Violence" | "SelfHarm". </param>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="modality"> Modality type, the value could be 'Text', 'Image'. Allowed values: "Text" | "Image" | "ImageWithText". </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="category"/>, <paramref name="granularity"/>, <paramref name="contentSafetyVersion"/> or <paramref name="modality"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="category"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetRequestCountsByCategoryAndSeverity(string,DateTimeOffset,DateTimeOffset,string,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetRequestCountsByCategoryAndSeverity(string category, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string modality, int? maxCount = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(category, nameof(category));
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));
            Argument.AssertNotNull(modality, nameof(modality));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetRequestCountsByCategoryAndSeverityRequest(category, start, end, granularity, contentSafetyVersion, modality, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetRequestCountsByCategoryAndSeverityNextPageRequest(nextLink, category, start, end, granularity, contentSafetyVersion, modality, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetRequestCountsByCategoryAndSeverity", "value", "nextLink", context);
        }

        /// <summary> Show Blocklist Hit Request Count At Different Timestamps. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Show blocklist hit request count at different timestamps. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistHitCallsAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,int?,int?,int?,CancellationToken)']/*" />
        public virtual AsyncPageable<BlockListHitCallsPerTimestamp> GetBlocklistHitCallsAsync(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetBlocklistHitCallsRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetBlocklistHitCallsNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BlockListHitCallsPerTimestamp.DeserializeBlockListHitCallsPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetBlocklistHitCalls", "value", "nextLink", context);
        }

        /// <summary> Show Blocklist Hit Request Count At Different Timestamps. </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Show blocklist hit request count at different timestamps. </remarks>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistHitCalls(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,int?,int?,int?,CancellationToken)']/*" />
        public virtual Pageable<BlockListHitCallsPerTimestamp> GetBlocklistHitCalls(DateTimeOffset start, DateTimeOffset end, Granularity granularity, ContentSafetyVersion contentSafetyVersion, int? skip = null, int? maxCount = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetBlocklistHitCallsRequest(start, end, granularity.ToString(), contentSafetyVersion.ToString(), skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetBlocklistHitCallsNextPageRequest(nextLink, start, end, granularity.ToString(), contentSafetyVersion.ToString(), skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BlockListHitCallsPerTimestamp.DeserializeBlockListHitCallsPerTimestamp, ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetBlocklistHitCalls", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Show Blocklist Hit Request Count At Different Timestamps.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistHitCallsAsync(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/> or <paramref name="contentSafetyVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistHitCallsAsync(DateTimeOffset,DateTimeOffset,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetBlocklistHitCallsAsync(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetBlocklistHitCallsRequest(start, end, granularity, contentSafetyVersion, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetBlocklistHitCallsNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetBlocklistHitCalls", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Show Blocklist Hit Request Count At Different Timestamps.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBlocklistHitCalls(DateTimeOffset,DateTimeOffset,Granularity,ContentSafetyVersion,int?,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> Start date time inclusive. </param>
        /// <param name="end"> End date time inclusive. </param>
        /// <param name="granularity"> Granularity, the value could be 'Hourly', 'Daily'. Allowed values: "Hourly" | "Daily". </param>
        /// <param name="contentSafetyVersion"> API version of the call, the value could be '2023-04-30-preview'. Allowed values: "2023-04-30-preview" | "2023-05-30-preview" | "2023-10-01". </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="granularity"/> or <paramref name="contentSafetyVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ContentSafetyInternalClient.xml" path="doc/members/member[@name='GetBlocklistHitCalls(DateTimeOffset,DateTimeOffset,string,string,int?,int?,int?,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetBlocklistHitCalls(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, int? skip = null, int? maxCount = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(granularity, nameof(granularity));
            Argument.AssertNotNull(contentSafetyVersion, nameof(contentSafetyVersion));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetBlocklistHitCallsRequest(start, end, granularity, contentSafetyVersion, skip, maxCount, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetBlocklistHitCallsNextPageRequest(nextLink, start, end, granularity, contentSafetyVersion, skip, maxCount, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ContentSafetyInternalClient.GetBlocklistHitCalls", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetBlocklistTopTermsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/whitelist/features", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestCountsRequest(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/metrics/requestCounts", false);
            uri.AppendQuery("start", start, "O", true);
            uri.AppendQuery("end", end, "O", true);
            uri.AppendQuery("granularity", granularity, true);
            uri.AppendQuery("contentSafetyVersion", contentSafetyVersion, true);
            uri.AppendQuery("contentSafetyOperation", contentSafetyOperation, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestLatenciesRequest(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, string aggregation, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/metrics/requestLatencies", false);
            uri.AppendQuery("start", start, "O", true);
            uri.AppendQuery("end", end, "O", true);
            uri.AppendQuery("granularity", granularity, true);
            uri.AppendQuery("contentSafetyVersion", contentSafetyVersion, true);
            uri.AppendQuery("contentSafetyOperation", contentSafetyOperation, true);
            uri.AppendQuery("aggregation", aggregation, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestCountsByCategoryAndSeverityRequest(string category, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string modality, int? maxCount, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/metrics/categories/", false);
            uri.AppendPath(category, true);
            uri.AppendPath("/requestCounts", false);
            uri.AppendQuery("start", start, "O", true);
            uri.AppendQuery("end", end, "O", true);
            uri.AppendQuery("granularity", granularity, true);
            uri.AppendQuery("contentSafetyVersion", contentSafetyVersion, true);
            uri.AppendQuery("modality", modality, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBlocklistTopTermsRequest(int top, DateTimeOffset start, DateTimeOffset end, string contentSafetyVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/metrics/blocklistTopTerms", false);
            uri.AppendQuery("top", top, true);
            uri.AppendQuery("start", start, "O", true);
            uri.AppendQuery("end", end, "O", true);
            uri.AppendQuery("contentSafetyVersion", contentSafetyVersion, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBlocklistHitCallsRequest(DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendPath("/metrics/blocklistHitCalls", false);
            uri.AppendQuery("start", start, "O", true);
            uri.AppendQuery("end", end, "O", true);
            uri.AppendQuery("granularity", granularity, true);
            uri.AppendQuery("contentSafetyVersion", contentSafetyVersion, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestCountsNextPageRequest(string nextLink, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestLatenciesNextPageRequest(string nextLink, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string contentSafetyOperation, string aggregation, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRequestCountsByCategoryAndSeverityNextPageRequest(string nextLink, string category, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, string modality, int? maxCount, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBlocklistHitCallsNextPageRequest(string nextLink, DateTimeOffset start, DateTimeOffset end, string granularity, string contentSafetyVersion, int? skip, int? maxCount, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/contentsafety/internal", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
