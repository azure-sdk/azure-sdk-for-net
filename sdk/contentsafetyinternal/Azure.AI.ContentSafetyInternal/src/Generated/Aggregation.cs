// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Aggregation methods for latency. </summary>
    public readonly partial struct Aggregation : IEquatable<Aggregation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Aggregation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Aggregation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string P99Value = "P99";
        private const string P95Value = "P95";
        private const string AvgValue = "Avg";

        /// <summary> P99. </summary>
        public static Aggregation P99 { get; } = new Aggregation(P99Value);
        /// <summary> P95. </summary>
        public static Aggregation P95 { get; } = new Aggregation(P95Value);
        /// <summary> Avg. </summary>
        public static Aggregation Avg { get; } = new Aggregation(AvgValue);
        /// <summary> Determines if two <see cref="Aggregation"/> values are the same. </summary>
        public static bool operator ==(Aggregation left, Aggregation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Aggregation"/> values are not the same. </summary>
        public static bool operator !=(Aggregation left, Aggregation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Aggregation"/>. </summary>
        public static implicit operator Aggregation(string value) => new Aggregation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Aggregation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Aggregation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
