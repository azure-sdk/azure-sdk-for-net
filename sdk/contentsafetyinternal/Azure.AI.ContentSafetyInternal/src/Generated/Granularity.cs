// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.ContentSafetyInternal
{
    /// <summary> Time granularity. </summary>
    public readonly partial struct Granularity : IEquatable<Granularity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Granularity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Granularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HourlyValue = "Hourly";
        private const string DailyValue = "Daily";

        /// <summary> Hourly. </summary>
        public static Granularity Hourly { get; } = new Granularity(HourlyValue);
        /// <summary> Daily. </summary>
        public static Granularity Daily { get; } = new Granularity(DailyValue);
        /// <summary> Determines if two <see cref="Granularity"/> values are the same. </summary>
        public static bool operator ==(Granularity left, Granularity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Granularity"/> values are not the same. </summary>
        public static bool operator !=(Granularity left, Granularity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Granularity"/>. </summary>
        public static implicit operator Granularity(string value) => new Granularity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Granularity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Granularity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
