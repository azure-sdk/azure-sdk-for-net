// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.ContentSafetyInternal.Samples
{
    public class Samples_ContentSafetyInternalClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistTopTerms()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = client.GetBlocklistTopTerms(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("featureName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistTopTerms_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = client.GetBlocklistTopTerms(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("featureName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = await client.GetBlocklistTopTermsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("featureName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = await client.GetBlocklistTopTermsAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("featureName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            var result = await client.GetBlocklistTopTermsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistTopTerms()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = client.GetBlocklistTopTerms(1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<contentSafetyVersion>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("term").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistTopTerms_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = client.GetBlocklistTopTerms(1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<contentSafetyVersion>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("term").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = await client.GetBlocklistTopTermsAsync(1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<contentSafetyVersion>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("term").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            Response response = await client.GetBlocklistTopTermsAsync(1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<contentSafetyVersion>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("term").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistTopTerms_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            var result = await client.GetBlocklistTopTermsAsync(1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestCounts()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestCounts(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestCounts_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestCounts(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCounts_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCounts_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCounts_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, null, null, null, 1234, 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestLatencies()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestLatencies(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", "<aggregation>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("latency").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestLatencies_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestLatencies(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", "<aggregation>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("latency").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestLatencies_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestLatenciesAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", "<aggregation>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("latency").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestLatencies_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestLatenciesAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<contentSafetyOperation>", "<aggregation>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("latency").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestLatencies_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestLatenciesAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, null, null, null, null, 1234, 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestCountsByCategoryAndSeverity()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestCountsByCategoryAndSeverity("<category>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<modality>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severityCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRequestCountsByCategoryAndSeverity_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetRequestCountsByCategoryAndSeverity("<category>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<modality>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severityCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCountsByCategoryAndSeverity_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsByCategoryAndSeverityAsync("<category>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<modality>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severityCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCountsByCategoryAndSeverity_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsByCategoryAndSeverityAsync("<category>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", "<modality>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severity").ToString());
                Console.WriteLine(result.GetProperty("count")[0].GetProperty("severityCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRequestCountsByCategoryAndSeverity_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetRequestCountsByCategoryAndSeverityAsync(null, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, null, null, null, 1234, 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistHitCalls()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetBlocklistHitCalls(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBlocklistHitCalls_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            foreach (var item in client.GetBlocklistHitCalls(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistHitCalls_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetBlocklistHitCallsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistHitCalls_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetBlocklistHitCallsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<granularity>", "<contentSafetyVersion>", 1234, 1234, 1234))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("dateTime").ToString());
                Console.WriteLine(result.GetProperty("count").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBlocklistHitCalls_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ContentSafetyInternalClient(endpoint, credential);

            await foreach (var item in client.GetBlocklistHitCallsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, null, null, 1234, 1234, 1234))
            {
            }
        }
    }
}
