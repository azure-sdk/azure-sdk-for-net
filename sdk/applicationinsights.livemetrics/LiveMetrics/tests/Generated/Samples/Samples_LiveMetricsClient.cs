// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace LiveMetrics.Samples
{
    public partial class Samples_LiveMetricsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_IsSubscribed_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.IsSubscribed("<ikey>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_IsSubscribed_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.IsSubscribedAsync("<ikey>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_IsSubscribed_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = client.IsSubscribed("<ikey>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_IsSubscribed_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = await client.IsSubscribedAsync("<ikey>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_IsSubscribed_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Version = "<Version>",
                InvariantVersion = 1234,
                Instance = "<Instance>",
                RoleName = "<RoleName>",
                MachineName = "<MachineName>",
                StreamId = "<StreamId>",
                Timestamp = "2022-05-10T18:57:31.2311892Z",
                TransmissionTime = "2022-05-10T18:57:31.2311892Z",
                IsWebApp = true,
                PerformanceCollectionSupported = true,
                Metrics = new object[]
            {
new
{
Name = "<Name>",
Value = 123.45,
Weight = 1234,
}
            },
                Documents = new object[]
            {
new
{
DocumentType = "Request",
Name = "<Name>",
Url = "http://localhost:3000",
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = new object[]
{
"<DocumentStreamIds>"
},
Properties = new object[]
{
new
{
key = "<key>",
value = "<value>",
}
},
}
            },
                TopCpuProcesses = new object[]
            {
new
{
ProcessName = "<ProcessName>",
CpuPercentage = 1234,
}
            },
                CollectionConfigurationErrors = new object[]
            {
new
{
CollectionConfigurationErrorType = "Unknown",
Message = "<Message>",
FullException = "<FullException>",
Data = new object[]
{
null
},
}
            },
            });
            Response response = client.IsSubscribed("<ikey>", content, transmissionTime: 1234L, machineName: "<machineName>", instanceName: "<instanceName>", streamId: "<streamId>", roleName: "<roleName>", invariantVersion: "<invariantVersion>", configurationEtag: new ETag("<configurationEtag>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("InitialQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("MaxQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("QuotaAccrualRatePerSec").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_IsSubscribed_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                Version = "<Version>",
                InvariantVersion = 1234,
                Instance = "<Instance>",
                RoleName = "<RoleName>",
                MachineName = "<MachineName>",
                StreamId = "<StreamId>",
                Timestamp = "2022-05-10T18:57:31.2311892Z",
                TransmissionTime = "2022-05-10T18:57:31.2311892Z",
                IsWebApp = true,
                PerformanceCollectionSupported = true,
                Metrics = new object[]
            {
new
{
Name = "<Name>",
Value = 123.45,
Weight = 1234,
}
            },
                Documents = new object[]
            {
new
{
DocumentType = "Request",
Name = "<Name>",
Url = "http://localhost:3000",
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = new object[]
{
"<DocumentStreamIds>"
},
Properties = new object[]
{
new
{
key = "<key>",
value = "<value>",
}
},
}
            },
                TopCpuProcesses = new object[]
            {
new
{
ProcessName = "<ProcessName>",
CpuPercentage = 1234,
}
            },
                CollectionConfigurationErrors = new object[]
            {
new
{
CollectionConfigurationErrorType = "Unknown",
Message = "<Message>",
FullException = "<FullException>",
Data = new object[]
{
null
},
}
            },
            });
            Response response = await client.IsSubscribedAsync("<ikey>", content, transmissionTime: 1234L, machineName: "<machineName>", instanceName: "<instanceName>", streamId: "<streamId>", roleName: "<roleName>", invariantVersion: "<invariantVersion>", configurationEtag: new ETag("<configurationEtag>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("InitialQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("MaxQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("QuotaAccrualRatePerSec").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_IsSubscribed_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            MonitoringDataPoint monitoringDataPoint = new MonitoringDataPoint(
                "<Version>",
                1234,
                "<Instance>",
                "<RoleName>",
                "<MachineName>",
                "<StreamId>",
                true,
                true)
            {
                Timestamp = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                TransmissionTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                Metrics = { new MetricPoint("<Name>", 123.45, 1234) },
                Documents = {new Request
{
Name = "<Name>",
Url = new Uri("http://localhost:3000"),
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = {"<DocumentStreamIds>"},
Properties = {new KeyValuePairStringString("<key>", "<value>")},
}},
                TopCpuProcesses = { new ProcessCpuData("<ProcessName>", 1234) },
                CollectionConfigurationErrors = {new CollectionConfigurationError(CollectionConfigurationErrorType.Unknown, "<Message>", "<FullException>", new KeyValuePairStringString[]
{
default
})},
            };
            Response<CollectionConfigurationInfo> response = client.IsSubscribed("<ikey>", monitoringDataPoint: monitoringDataPoint, transmissionTime: 1234L, machineName: "<machineName>", instanceName: "<instanceName>", streamId: "<streamId>", roleName: "<roleName>", invariantVersion: "<invariantVersion>", configurationEtag: new ETag("<configurationEtag>"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_IsSubscribed_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            MonitoringDataPoint monitoringDataPoint = new MonitoringDataPoint(
                "<Version>",
                1234,
                "<Instance>",
                "<RoleName>",
                "<MachineName>",
                "<StreamId>",
                true,
                true)
            {
                Timestamp = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                TransmissionTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                Metrics = { new MetricPoint("<Name>", 123.45, 1234) },
                Documents = {new Request
{
Name = "<Name>",
Url = new Uri("http://localhost:3000"),
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = {"<DocumentStreamIds>"},
Properties = {new KeyValuePairStringString("<key>", "<value>")},
}},
                TopCpuProcesses = { new ProcessCpuData("<ProcessName>", 1234) },
                CollectionConfigurationErrors = {new CollectionConfigurationError(CollectionConfigurationErrorType.Unknown, "<Message>", "<FullException>", new KeyValuePairStringString[]
{
default
})},
            };
            Response<CollectionConfigurationInfo> response = await client.IsSubscribedAsync("<ikey>", monitoringDataPoint: monitoringDataPoint, transmissionTime: 1234L, machineName: "<machineName>", instanceName: "<instanceName>", streamId: "<streamId>", roleName: "<roleName>", invariantVersion: "<invariantVersion>", configurationEtag: new ETag("<configurationEtag>"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_Publish_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.Publish("<ikey>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_Publish_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.PublishAsync("<ikey>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_Publish_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = client.Publish("<ikey>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_Publish_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = await client.PublishAsync("<ikey>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_Publish_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
Version = "<Version>",
InvariantVersion = 1234,
Instance = "<Instance>",
RoleName = "<RoleName>",
MachineName = "<MachineName>",
StreamId = "<StreamId>",
Timestamp = "2022-05-10T18:57:31.2311892Z",
TransmissionTime = "2022-05-10T18:57:31.2311892Z",
IsWebApp = true,
PerformanceCollectionSupported = true,
Metrics = new object[]
{
new
{
Name = "<Name>",
Value = 123.45,
Weight = 1234,
}
},
Documents = new object[]
{
new
{
DocumentType = "Request",
Name = "<Name>",
Url = "http://localhost:3000",
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = new object[]
{
"<DocumentStreamIds>"
},
Properties = new object[]
{
new
{
key = "<key>",
value = "<value>",
}
},
}
},
TopCpuProcesses = new object[]
{
new
{
ProcessName = "<ProcessName>",
CpuPercentage = 1234,
}
},
CollectionConfigurationErrors = new object[]
{
new
{
CollectionConfigurationErrorType = "Unknown",
Message = "<Message>",
FullException = "<FullException>",
Data = new object[]
{
null
},
}
},
}
            });
            Response response = client.Publish("<ikey>", content, configurationEtag: new ETag("<configurationEtag>"), transmissionTime: 1234L);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("InitialQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("MaxQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("QuotaAccrualRatePerSec").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_Publish_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
Version = "<Version>",
InvariantVersion = 1234,
Instance = "<Instance>",
RoleName = "<RoleName>",
MachineName = "<MachineName>",
StreamId = "<StreamId>",
Timestamp = "2022-05-10T18:57:31.2311892Z",
TransmissionTime = "2022-05-10T18:57:31.2311892Z",
IsWebApp = true,
PerformanceCollectionSupported = true,
Metrics = new object[]
{
new
{
Name = "<Name>",
Value = 123.45,
Weight = 1234,
}
},
Documents = new object[]
{
new
{
DocumentType = "Request",
Name = "<Name>",
Url = "http://localhost:3000",
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = new object[]
{
"<DocumentStreamIds>"
},
Properties = new object[]
{
new
{
key = "<key>",
value = "<value>",
}
},
}
},
TopCpuProcesses = new object[]
{
new
{
ProcessName = "<ProcessName>",
CpuPercentage = 1234,
}
},
CollectionConfigurationErrors = new object[]
{
new
{
CollectionConfigurationErrorType = "Unknown",
Message = "<Message>",
FullException = "<FullException>",
Data = new object[]
{
null
},
}
},
}
            });
            Response response = await client.PublishAsync("<ikey>", content, configurationEtag: new ETag("<configurationEtag>"), transmissionTime: 1234L);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ETag").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("FilterGroups")[0].GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Projection").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("Aggregation").ToString());
            Console.WriteLine(result.GetProperty("Metrics")[0].GetProperty("BackEndAggregation").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("TelemetryType").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("FieldName").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Predicate").ToString());
            Console.WriteLine(result.GetProperty("DocumentStreams")[0].GetProperty("DocumentFilterGroups")[0].GetProperty("Filters").GetProperty("Filters")[0].GetProperty("Comparand").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("InitialQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("MaxQuota").ToString());
            Console.WriteLine(result.GetProperty("QuotaInfo").GetProperty("QuotaAccrualRatePerSec").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiveMetrics_Publish_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = client.Publish("<ikey>", monitoringDataPoints: new MonitoringDataPoint[]
            {
new MonitoringDataPoint(
    "<Version>",
    1234,
    "<Instance>",
    "<RoleName>",
    "<MachineName>",
    "<StreamId>",
    true,
    true)
{
Timestamp = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
TransmissionTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
Metrics = {new MetricPoint("<Name>", 123.45, 1234)},
Documents = {new Request
{
Name = "<Name>",
Url = new Uri("http://localhost:3000"),
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = {"<DocumentStreamIds>"},
Properties = {new KeyValuePairStringString("<key>", "<value>")},
}},
TopCpuProcesses = {new ProcessCpuData("<ProcessName>", 1234)},
CollectionConfigurationErrors = {new CollectionConfigurationError(CollectionConfigurationErrorType.Unknown, "<Message>", "<FullException>", new KeyValuePairStringString[]
{
default
})},
}
            }, configurationEtag: new ETag("<configurationEtag>"), transmissionTime: 1234L);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiveMetrics_Publish_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            LiveMetricsClient client = new LiveMetricsClient(endpoint, credential);

            Response<CollectionConfigurationInfo> response = await client.PublishAsync("<ikey>", monitoringDataPoints: new MonitoringDataPoint[]
            {
new MonitoringDataPoint(
    "<Version>",
    1234,
    "<Instance>",
    "<RoleName>",
    "<MachineName>",
    "<StreamId>",
    true,
    true)
{
Timestamp = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
TransmissionTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
Metrics = {new MetricPoint("<Name>", 123.45, 1234)},
Documents = {new Request
{
Name = "<Name>",
Url = new Uri("http://localhost:3000"),
ResponseCode = "<ResponseCode>",
Duration = "<Duration>",
DocumentStreamIds = {"<DocumentStreamIds>"},
Properties = {new KeyValuePairStringString("<key>", "<value>")},
}},
TopCpuProcesses = {new ProcessCpuData("<ProcessName>", 1234)},
CollectionConfigurationErrors = {new CollectionConfigurationError(CollectionConfigurationErrorType.Unknown, "<Message>", "<FullException>", new KeyValuePairStringString[]
{
default
})},
}
            }, configurationEtag: new ETag("<configurationEtag>"), transmissionTime: 1234L);
        }
    }
}
