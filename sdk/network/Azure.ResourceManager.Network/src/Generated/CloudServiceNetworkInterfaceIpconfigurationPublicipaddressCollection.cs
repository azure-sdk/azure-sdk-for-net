// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing a collection of <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource" /> and their operations.
    /// Each <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource" /> in the collection will belong to the same instance of <see cref="CloudServiceNetworkInterfaceResource" />.
    /// To get a <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection" /> instance call the GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddresses method from an instance of <see cref="CloudServiceNetworkInterfaceResource" />.
    /// </summary>
    public partial class CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection : ArmCollection, IEnumerable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>, IAsyncEnumerable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>
    {
        private readonly ClientDiagnostics _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics;
        private readonly PublicIPAddressesRestOperations _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient;
        private readonly string _ipConfigurationName;

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection"/> class for mocking. </summary>
        protected CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="ipConfigurationName"> The IP configuration name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ipConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        internal CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection(ArmClient client, ResourceIdentifier id, string ipConfigurationName) : base(client, id)
        {
            _ipConfigurationName = ipConfigurationName;
            _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource.ResourceType, out string cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesApiVersion);
            _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient = new PublicIPAddressesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != CloudServiceNetworkInterfaceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, CloudServiceNetworkInterfaceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get the specified public IP address in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public virtual async Task<Response<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>> GetAsync(string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicIPAddressName, nameof(publicIPAddressName));

            using var scope = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.Get");
            scope.Start();
            try
            {
                var response = await _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.GetCloudServiceRoleInstancePublicIPAddressAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName, publicIPAddressName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the specified public IP address in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public virtual Response<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> Get(string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicIPAddressName, nameof(publicIPAddressName));

            using var scope = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.Get");
            scope.Start();
            try
            {
                var response = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.GetCloudServiceRoleInstancePublicIPAddress(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName, publicIPAddressName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about all public IP addresses in a role instance IP configuration in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_ListCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.CreateListCloudServiceRoleInstancePublicIPAddressRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.CreateListCloudServiceRoleInstancePublicIPAddressNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource(Client, PublicIPAddressData.DeserializePublicIPAddressData(e)), _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics, Pipeline, "CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets information about all public IP addresses in a role instance IP configuration in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_ListCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.CreateListCloudServiceRoleInstancePublicIPAddressRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.CreateListCloudServiceRoleInstancePublicIPAddressNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource(Client, PublicIPAddressData.DeserializePublicIPAddressData(e)), _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics, Pipeline, "CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicIPAddressName, nameof(publicIPAddressName));

            using var scope = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.Exists");
            scope.Start();
            try
            {
                var response = await _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.GetCloudServiceRoleInstancePublicIPAddressAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName, publicIPAddressName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicIPAddressName"/> is null. </exception>
        public virtual Response<bool> Exists(string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicIPAddressName, nameof(publicIPAddressName));

            using var scope = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection.Exists");
            scope.Start();
            try
            {
                var response = _cloudServiceNetworkInterfaceIpconfigurationPublicipaddressPublicIPAddressesRestClient.GetCloudServiceRoleInstancePublicIPAddress(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, _ipConfigurationName, publicIPAddressName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> IEnumerable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> IAsyncEnumerable<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
