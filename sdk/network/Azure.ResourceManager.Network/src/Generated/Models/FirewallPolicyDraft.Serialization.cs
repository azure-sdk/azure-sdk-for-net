// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Network.Models
{
    public partial class FirewallPolicyDraft : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ThreatIntelMode))
            {
                writer.WritePropertyName("threatIntelMode"u8);
                writer.WriteStringValue(ThreatIntelMode.Value.ToString());
            }
            if (Optional.IsDefined(ThreatIntelWhitelist))
            {
                writer.WritePropertyName("threatIntelWhitelist"u8);
                writer.WriteObjectValue(ThreatIntelWhitelist);
            }
            if (Optional.IsDefined(Insights))
            {
                writer.WritePropertyName("insights"u8);
                writer.WriteObjectValue(Insights);
            }
            if (Optional.IsDefined(Snat))
            {
                writer.WritePropertyName("snat"u8);
                writer.WriteObjectValue(Snat);
            }
            if (Optional.IsDefined(Sql))
            {
                writer.WritePropertyName("sql"u8);
                writer.WriteObjectValue(Sql);
            }
            if (Optional.IsDefined(DnsSettings))
            {
                writer.WritePropertyName("dnsSettings"u8);
                writer.WriteObjectValue(DnsSettings);
            }
            if (Optional.IsDefined(ExplicitProxy))
            {
                writer.WritePropertyName("explicitProxy"u8);
                writer.WriteObjectValue(ExplicitProxy);
            }
            if (Optional.IsDefined(IntrusionDetection))
            {
                writer.WritePropertyName("intrusionDetection"u8);
                writer.WriteObjectValue(IntrusionDetection);
            }
            writer.WriteEndObject();
        }

        internal static FirewallPolicyDraft DeserializeFirewallPolicyDraft(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AzureFirewallThreatIntelMode> threatIntelMode = default;
            Optional<FirewallPolicyThreatIntelWhitelist> threatIntelWhitelist = default;
            Optional<FirewallPolicyInsights> insights = default;
            Optional<FirewallPolicySnat> snat = default;
            Optional<FirewallPolicySQL> sql = default;
            Optional<DnsSettings> dnsSettings = default;
            Optional<FirewallPolicyExplicitProxy> explicitProxy = default;
            Optional<FirewallPolicyIntrusionDetection> intrusionDetection = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("threatIntelMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    threatIntelMode = new AzureFirewallThreatIntelMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("threatIntelWhitelist"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    threatIntelWhitelist = FirewallPolicyThreatIntelWhitelist.DeserializeFirewallPolicyThreatIntelWhitelist(property.Value);
                    continue;
                }
                if (property.NameEquals("insights"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    insights = FirewallPolicyInsights.DeserializeFirewallPolicyInsights(property.Value);
                    continue;
                }
                if (property.NameEquals("snat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    snat = FirewallPolicySnat.DeserializeFirewallPolicySnat(property.Value);
                    continue;
                }
                if (property.NameEquals("sql"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sql = FirewallPolicySQL.DeserializeFirewallPolicySQL(property.Value);
                    continue;
                }
                if (property.NameEquals("dnsSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dnsSettings = DnsSettings.DeserializeDnsSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("explicitProxy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    explicitProxy = FirewallPolicyExplicitProxy.DeserializeFirewallPolicyExplicitProxy(property.Value);
                    continue;
                }
                if (property.NameEquals("intrusionDetection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intrusionDetection = FirewallPolicyIntrusionDetection.DeserializeFirewallPolicyIntrusionDetection(property.Value);
                    continue;
                }
            }
            return new FirewallPolicyDraft(Optional.ToNullable(threatIntelMode), threatIntelWhitelist.Value, insights.Value, snat.Value, sql.Value, dnsSettings.Value, explicitProxy.Value, intrusionDetection.Value);
        }
    }
}
