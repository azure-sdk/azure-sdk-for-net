// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A Class representing a CloudServiceNetworkInterface along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="CloudServiceNetworkInterfaceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetCloudServiceNetworkInterfaceResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetCloudServiceNetworkInterface method.
    /// </summary>
    public partial class CloudServiceNetworkInterfaceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="CloudServiceNetworkInterfaceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string cloudServiceName, string roleInstanceName, string networkInterfaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics;
        private readonly NetworkInterfacesRestOperations _cloudServiceNetworkInterfaceNetworkInterfacesRestClient;
        private readonly NetworkInterfaceData _data;

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceResource"/> class for mocking. </summary>
        protected CloudServiceNetworkInterfaceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "CloudServiceNetworkInterfaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal CloudServiceNetworkInterfaceResource(ArmClient client, NetworkInterfaceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal CloudServiceNetworkInterfaceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string cloudServiceNetworkInterfaceNetworkInterfacesApiVersion);
            _cloudServiceNetworkInterfaceNetworkInterfacesRestClient = new NetworkInterfacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, cloudServiceNetworkInterfaceNetworkInterfacesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Network/cloudServiceNetworkInterfaces";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual NetworkInterfaceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResources in the CloudServiceNetworkInterface. </summary>
        /// <param name="ipConfigurationName"> The IP configuration name. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> is null. </exception>
        /// <returns> An object representing collection of CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResources and their operations over a CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource. </returns>
        public virtual CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddresses(string ipConfigurationName)
        {
            Argument.AssertNotNullOrEmpty(ipConfigurationName, nameof(ipConfigurationName));

            return new CloudServiceNetworkInterfaceIpconfigurationPublicipaddressCollection(Client, Id, ipConfigurationName);
        }

        /// <summary>
        /// Get the specified public IP address in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ipConfigurationName"> The IP configuration name. </param>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipConfigurationName"/> or <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> or <paramref name="publicIPAddressName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource>> GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddressAsync(string ipConfigurationName, string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            return await GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddresses(ipConfigurationName).GetAsync(publicIPAddressName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the specified public IP address in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicIPAddresses_GetCloudServiceRoleInstancePublicIPAddress</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="ipConfigurationName"> The IP configuration name. </param>
        /// <param name="publicIPAddressName"> The name of the public IP Address. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ipConfigurationName"/> or <paramref name="publicIPAddressName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ipConfigurationName"/> or <paramref name="publicIPAddressName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CloudServiceNetworkInterfaceIpconfigurationPublicipaddressResource> GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddress(string ipConfigurationName, string publicIPAddressName, CancellationToken cancellationToken = default)
        {
            return GetCloudServiceNetworkInterfaceIpconfigurationPublicipaddresses(ipConfigurationName).Get(publicIPAddressName, cancellationToken);
        }

        /// <summary>
        /// Get the specified network interface in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CloudServiceNetworkInterfaceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceResource.Get");
            scope.Start();
            try
            {
                var response = await _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterfaceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the specified network interface in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CloudServiceNetworkInterfaceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceResource.Get");
            scope.Start();
            try
            {
                var response = _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterface(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
