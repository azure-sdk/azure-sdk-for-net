// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Network
{
    /// <summary>
    /// A class representing a collection of <see cref="CloudServiceNetworkInterfaceResource" /> and their operations.
    /// Each <see cref="CloudServiceNetworkInterfaceResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="CloudServiceNetworkInterfaceCollection" /> instance call the GetCloudServiceNetworkInterfaces method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class CloudServiceNetworkInterfaceCollection : ArmCollection, IEnumerable<CloudServiceNetworkInterfaceResource>, IAsyncEnumerable<CloudServiceNetworkInterfaceResource>
    {
        private readonly ClientDiagnostics _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics;
        private readonly NetworkInterfacesRestOperations _cloudServiceNetworkInterfaceNetworkInterfacesRestClient;
        private readonly string _cloudServiceName;
        private readonly string _roleInstanceName;

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceCollection"/> class for mocking. </summary>
        protected CloudServiceNetworkInterfaceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CloudServiceNetworkInterfaceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="cloudServiceName"> The name of the cloud service. </param>
        /// <param name="roleInstanceName"> The name of role instance. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudServiceName"/> or <paramref name="roleInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cloudServiceName"/> or <paramref name="roleInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal CloudServiceNetworkInterfaceCollection(ArmClient client, ResourceIdentifier id, string cloudServiceName, string roleInstanceName) : base(client, id)
        {
            _cloudServiceName = cloudServiceName;
            _roleInstanceName = roleInstanceName;
            _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Network", CloudServiceNetworkInterfaceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CloudServiceNetworkInterfaceResource.ResourceType, out string cloudServiceNetworkInterfaceNetworkInterfacesApiVersion);
            _cloudServiceNetworkInterfaceNetworkInterfacesRestClient = new NetworkInterfacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, cloudServiceNetworkInterfaceNetworkInterfacesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get the specified network interface in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public virtual async Task<Response<CloudServiceNetworkInterfaceResource>> GetAsync(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceCollection.Get");
            scope.Start();
            try
            {
                var response = await _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterfaceAsync(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName, networkInterfaceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the specified network interface in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public virtual Response<CloudServiceNetworkInterfaceResource> Get(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceCollection.Get");
            scope.Start();
            try
            {
                var response = _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterface(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName, networkInterfaceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CloudServiceNetworkInterfaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about all network interfaces in a role instance in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_ListCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CloudServiceNetworkInterfaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudServiceNetworkInterfaceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.CreateListCloudServiceRoleInstanceNetworkInterfaceRequest(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.CreateListCloudServiceRoleInstanceNetworkInterfaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CloudServiceNetworkInterfaceResource(Client, NetworkInterfaceData.DeserializeNetworkInterfaceData(e)), _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics, Pipeline, "CloudServiceNetworkInterfaceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets information about all network interfaces in a role instance in a cloud service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_ListCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudServiceNetworkInterfaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudServiceNetworkInterfaceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.CreateListCloudServiceRoleInstanceNetworkInterfaceRequest(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.CreateListCloudServiceRoleInstanceNetworkInterfaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CloudServiceNetworkInterfaceResource(Client, NetworkInterfaceData.DeserializeNetworkInterfaceData(e)), _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics, Pipeline, "CloudServiceNetworkInterfaceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterfaceAsync(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName, networkInterfaceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/cloudServices/{cloudServiceName}/roleInstances/{roleInstanceName}/providers/Microsoft.Network/cloudServiceNetworkInterfaces/{networkInterfaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkInterfaces_GetCloudServiceRoleInstanceNetworkInterface</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkInterfaceName"> The name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        public virtual Response<bool> Exists(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            using var scope = _cloudServiceNetworkInterfaceNetworkInterfacesClientDiagnostics.CreateScope("CloudServiceNetworkInterfaceCollection.Exists");
            scope.Start();
            try
            {
                var response = _cloudServiceNetworkInterfaceNetworkInterfacesRestClient.GetCloudServiceRoleInstanceNetworkInterface(Id.SubscriptionId, Id.ResourceGroupName, _cloudServiceName, _roleInstanceName, networkInterfaceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<CloudServiceNetworkInterfaceResource> IEnumerable<CloudServiceNetworkInterfaceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CloudServiceNetworkInterfaceResource> IAsyncEnumerable<CloudServiceNetworkInterfaceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
