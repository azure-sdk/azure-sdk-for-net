// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FirewallPolicyRuleCollectionGroupDraftsOperations.
    /// </summary>
    public static partial class FirewallPolicyRuleCollectionGroupDraftsOperationsExtensions
    {
            /// <summary>
            /// Delete Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            public static void Delete(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName)
            {
                operations.DeleteAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or Update Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update
            /// FirewallPolicyRuleCollectionGroup operation.
            /// </param>
            public static FirewallPolicyRuleCollectionGroupDraft CreateOrUpdate(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName, FirewallPolicyRuleCollectionGroupDraft parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update
            /// FirewallPolicyRuleCollectionGroup operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FirewallPolicyRuleCollectionGroupDraft> CreateOrUpdateAsync(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName, FirewallPolicyRuleCollectionGroupDraft parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            public static FirewallPolicyRuleCollectionGroupDraft Get(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName)
            {
                return operations.GetAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Rule Collection Group Draft.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='firewallPolicyName'>
            /// The name of the Firewall Policy.
            /// </param>
            /// <param name='ruleCollectionGroupName'>
            /// The name of the FirewallPolicyRuleCollectionGroup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FirewallPolicyRuleCollectionGroupDraft> GetAsync(this IFirewallPolicyRuleCollectionGroupDraftsOperations operations, string resourceGroupName, string firewallPolicyName, string ruleCollectionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, ruleCollectionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
