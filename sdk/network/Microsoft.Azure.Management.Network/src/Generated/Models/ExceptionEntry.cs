// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Adds exception to allow a request when the condition is satisfied.
    /// </summary>
    public partial class ExceptionEntry
    {
        /// <summary>
        /// Initializes a new instance of the ExceptionEntry class.
        /// </summary>
        public ExceptionEntry()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExceptionEntry class.
        /// </summary>
        /// <param name="matchVariable">The variable on which we evaluate the
        /// exception condition. Possible values include: 'RequestURI',
        /// 'RemoteAddr', 'RequestHeader'</param>
        /// <param name="valueMatchOperator">Operates on the allowed values for
        /// the matchVariable. Possible values include: 'Equals', 'Contains',
        /// 'StartsWith', 'EndsWith', 'IPMatch'</param>
        /// <param name="values">Allowed values for the matchVariable</param>
        /// <param name="selectorMatchOperator">When the matchVariable points
        /// to a key-value pair (e.g, RequestHeader), this operates on the
        /// selector. Possible values include: 'Equals', 'Contains',
        /// 'StartsWith', 'EndsWith'</param>
        /// <param name="selector">When the matchVariable points to a key-value
        /// pair (e.g, RequestHeader), this identifies the key.</param>
        /// <param name="exceptionManagedRuleSets">The managed rule sets that
        /// are associated with the exception.</param>
        public ExceptionEntry(string matchVariable, string valueMatchOperator, IList<string> values = default(IList<string>), string selectorMatchOperator = default(string), string selector = default(string), IList<ExclusionManagedRuleSet> exceptionManagedRuleSets = default(IList<ExclusionManagedRuleSet>))
        {
            MatchVariable = matchVariable;
            Values = values;
            ValueMatchOperator = valueMatchOperator;
            SelectorMatchOperator = selectorMatchOperator;
            Selector = selector;
            ExceptionManagedRuleSets = exceptionManagedRuleSets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the variable on which we evaluate the exception
        /// condition. Possible values include: 'RequestURI', 'RemoteAddr',
        /// 'RequestHeader'
        /// </summary>
        [JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable { get; set; }

        /// <summary>
        /// Gets or sets allowed values for the matchVariable
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<string> Values { get; set; }

        /// <summary>
        /// Gets or sets operates on the allowed values for the matchVariable.
        /// Possible values include: 'Equals', 'Contains', 'StartsWith',
        /// 'EndsWith', 'IPMatch'
        /// </summary>
        [JsonProperty(PropertyName = "valueMatchOperator")]
        public string ValueMatchOperator { get; set; }

        /// <summary>
        /// Gets or sets when the matchVariable points to a key-value pair
        /// (e.g, RequestHeader), this operates on the selector. Possible
        /// values include: 'Equals', 'Contains', 'StartsWith', 'EndsWith'
        /// </summary>
        [JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator { get; set; }

        /// <summary>
        /// Gets or sets when the matchVariable points to a key-value pair
        /// (e.g, RequestHeader), this identifies the key.
        /// </summary>
        [JsonProperty(PropertyName = "selector")]
        public string Selector { get; set; }

        /// <summary>
        /// Gets or sets the managed rule sets that are associated with the
        /// exception.
        /// </summary>
        [JsonProperty(PropertyName = "exceptionManagedRuleSets")]
        public IList<ExclusionManagedRuleSet> ExceptionManagedRuleSets { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MatchVariable == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (ValueMatchOperator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValueMatchOperator");
            }
            if (ExceptionManagedRuleSets != null)
            {
                foreach (var element in ExceptionManagedRuleSets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
