// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// FirewallPolicy Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FirewallPolicyDraft : Resource
    {
        /// <summary>
        /// Initializes a new instance of the FirewallPolicyDraft class.
        /// </summary>
        public FirewallPolicyDraft()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FirewallPolicyDraft class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="basePolicy">The parent firewall policy from which
        /// rules are inherited.</param>
        /// <param name="threatIntelMode">The operation mode for Threat
        /// Intelligence. Possible values include: 'Alert', 'Deny',
        /// 'Off'</param>
        /// <param name="threatIntelWhitelist">ThreatIntel Whitelist for
        /// Firewall Policy.</param>
        /// <param name="insights">Insights on Firewall Policy.</param>
        /// <param name="snat">The private IP addresses/IP ranges to which
        /// traffic will not be SNAT.</param>
        /// <param name="sql">SQL Settings definition.</param>
        /// <param name="dnsSettings">DNS Proxy Settings definition.</param>
        /// <param name="explicitProxy">Explicit Proxy Settings
        /// definition.</param>
        /// <param name="intrusionDetection">The configuration for Intrusion
        /// detection.</param>
        public FirewallPolicyDraft(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), SubResource basePolicy = default(SubResource), string threatIntelMode = default(string), FirewallPolicyThreatIntelWhitelist threatIntelWhitelist = default(FirewallPolicyThreatIntelWhitelist), FirewallPolicyInsights insights = default(FirewallPolicyInsights), FirewallPolicySNAT snat = default(FirewallPolicySNAT), FirewallPolicySQL sql = default(FirewallPolicySQL), DnsSettings dnsSettings = default(DnsSettings), ExplicitProxy explicitProxy = default(ExplicitProxy), FirewallPolicyIntrusionDetection intrusionDetection = default(FirewallPolicyIntrusionDetection))
            : base(id, name, type, location, tags)
        {
            BasePolicy = basePolicy;
            ThreatIntelMode = threatIntelMode;
            ThreatIntelWhitelist = threatIntelWhitelist;
            Insights = insights;
            Snat = snat;
            Sql = sql;
            DnsSettings = dnsSettings;
            ExplicitProxy = explicitProxy;
            IntrusionDetection = intrusionDetection;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the parent firewall policy from which rules are
        /// inherited.
        /// </summary>
        [JsonProperty(PropertyName = "properties.basePolicy")]
        public SubResource BasePolicy { get; set; }

        /// <summary>
        /// Gets or sets the operation mode for Threat Intelligence. Possible
        /// values include: 'Alert', 'Deny', 'Off'
        /// </summary>
        [JsonProperty(PropertyName = "properties.threatIntelMode")]
        public string ThreatIntelMode { get; set; }

        /// <summary>
        /// Gets or sets threatIntel Whitelist for Firewall Policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.threatIntelWhitelist")]
        public FirewallPolicyThreatIntelWhitelist ThreatIntelWhitelist { get; set; }

        /// <summary>
        /// Gets or sets insights on Firewall Policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.insights")]
        public FirewallPolicyInsights Insights { get; set; }

        /// <summary>
        /// Gets or sets the private IP addresses/IP ranges to which traffic
        /// will not be SNAT.
        /// </summary>
        [JsonProperty(PropertyName = "properties.snat")]
        public FirewallPolicySNAT Snat { get; set; }

        /// <summary>
        /// Gets or sets SQL Settings definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sql")]
        public FirewallPolicySQL Sql { get; set; }

        /// <summary>
        /// Gets or sets DNS Proxy Settings definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsSettings")]
        public DnsSettings DnsSettings { get; set; }

        /// <summary>
        /// Gets or sets explicit Proxy Settings definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.explicitProxy")]
        public ExplicitProxy ExplicitProxy { get; set; }

        /// <summary>
        /// Gets or sets the configuration for Intrusion detection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.intrusionDetection")]
        public FirewallPolicyIntrusionDetection IntrusionDetection { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExplicitProxy != null)
            {
                ExplicitProxy.Validate();
            }
        }
    }
}
