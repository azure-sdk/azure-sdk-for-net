// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AzureFirewallAutoScaleSettings
    {
        /// <summary>
        /// Initializes a new instance of the AzureFirewallAutoScaleSettings
        /// class.
        /// </summary>
        public AzureFirewallAutoScaleSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFirewallAutoScaleSettings
        /// class.
        /// </summary>
        /// <param name="minimumInstances">The minimum number of instances for
        /// autoscale.</param>
        /// <param name="maximumInstances">The maximum number of instances for
        /// autoscale.</param>
        public AzureFirewallAutoScaleSettings(int? minimumInstances = default(int?), int? maximumInstances = default(int?))
        {
            MinimumInstances = minimumInstances;
            MaximumInstances = maximumInstances;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the minimum number of instances for autoscale.
        /// </summary>
        [JsonProperty(PropertyName = "minimumInstances")]
        public int? MinimumInstances { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of instances for autoscale.
        /// </summary>
        [JsonProperty(PropertyName = "maximumInstances")]
        public int? MaximumInstances { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MinimumInstances < 2)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MinimumInstances", 2);
            }
            if (MinimumInstances % 2 != 0)
            {
                throw new ValidationException(ValidationRules.MultipleOf, "MinimumInstances", 2);
            }
            if (MaximumInstances >= 50)
            {
                throw new ValidationException(ValidationRules.ExclusiveMaximum, "MaximumInstances", 50);
            }
            if (MaximumInstances < 2)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaximumInstances", 2);
            }
            if (MaximumInstances % 2 != 0)
            {
                throw new ValidationException(ValidationRules.MultipleOf, "MaximumInstances", 2);
            }
        }
    }
}
