// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VpnLinkConnectionsOperations.
    /// </summary>
    public static partial class VpnLinkConnectionsOperationsExtensions
    {
            /// <summary>
            /// Resets the VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static void ResetConnection(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                operations.ResetConnectionAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetConnectionAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetConnectionWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all shared keys of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static IPage<ConnectionSharedKeyResult> GetAllSharedKeys(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                return operations.GetAllSharedKeysAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all shared keys of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionSharedKeyResult>> GetAllSharedKeysAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSharedKeysWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the shared key of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static ConnectionSharedKeyResult GetDefaultSharedKey(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                return operations.GetDefaultSharedKeyAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the shared key of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSharedKeyResult> GetDefaultSharedKeyAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDefaultSharedKeyWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets or auto generates the shared key based on the user input. If users
            /// give a shared key value, it does the set operation. If key length is given,
            /// the operation creates a random key of the pre-defined length.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnGateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='connectionSharedKeyParameters'>
            /// Parameters supplied to set or auto generate the shared key for the vpn link
            /// connection.
            /// </param>
            public static ConnectionSharedKeyResult SetOrInitDefaultSharedKey(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, ConnectionSharedKeyResult connectionSharedKeyParameters)
            {
                return operations.SetOrInitDefaultSharedKeyAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, connectionSharedKeyParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets or auto generates the shared key based on the user input. If users
            /// give a shared key value, it does the set operation. If key length is given,
            /// the operation creates a random key of the pre-defined length.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnGateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='connectionSharedKeyParameters'>
            /// Parameters supplied to set or auto generate the shared key for the vpn link
            /// connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSharedKeyResult> SetOrInitDefaultSharedKeyAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, ConnectionSharedKeyResult connectionSharedKeyParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetOrInitDefaultSharedKeyWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, connectionSharedKeyParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the value of the shared key of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static ConnectionSharedKeyResult ListDefaultSharedKey(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                return operations.ListDefaultSharedKeyAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the value of the shared key of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSharedKeyResult> ListDefaultSharedKeyAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDefaultSharedKeyWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists IKE Security Associations for Vpn Site Link Connection in the
            /// specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static string GetIkeSas(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                return operations.GetIkeSasAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists IKE Security Associations for Vpn Site Link Connection in the
            /// specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetIkeSasAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIkeSasWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all vpn site link connections for a particular virtual wan vpn
            /// gateway vpn connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the vpn gateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            public static IPage<VpnSiteLinkConnection> ListByVpnConnection(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName)
            {
                return operations.ListByVpnConnectionAsync(resourceGroupName, gatewayName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all vpn site link connections for a particular virtual wan vpn
            /// gateway vpn connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the vpn gateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VpnSiteLinkConnection>> ListByVpnConnectionAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVpnConnectionWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static void BeginResetConnection(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                operations.BeginResetConnectionAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginResetConnectionAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginResetConnectionWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets or auto generates the shared key based on the user input. If users
            /// give a shared key value, it does the set operation. If key length is given,
            /// the operation creates a random key of the pre-defined length.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnGateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='connectionSharedKeyParameters'>
            /// Parameters supplied to set or auto generate the shared key for the vpn link
            /// connection.
            /// </param>
            public static ConnectionSharedKeyResult BeginSetOrInitDefaultSharedKey(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, ConnectionSharedKeyResult connectionSharedKeyParameters)
            {
                return operations.BeginSetOrInitDefaultSharedKeyAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, connectionSharedKeyParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets or auto generates the shared key based on the user input. If users
            /// give a shared key value, it does the set operation. If key length is given,
            /// the operation creates a random key of the pre-defined length.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VpnGateway.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='connectionSharedKeyParameters'>
            /// Parameters supplied to set or auto generate the shared key for the vpn link
            /// connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSharedKeyResult> BeginSetOrInitDefaultSharedKeyAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, ConnectionSharedKeyResult connectionSharedKeyParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSetOrInitDefaultSharedKeyWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, connectionSharedKeyParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists IKE Security Associations for Vpn Site Link Connection in the
            /// specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            public static string BeginGetIkeSas(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName)
            {
                return operations.BeginGetIkeSasAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists IKE Security Associations for Vpn Site Link Connection in the
            /// specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the vpn connection.
            /// </param>
            /// <param name='linkConnectionName'>
            /// The name of the vpn link connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> BeginGetIkeSasAsync(this IVpnLinkConnectionsOperations operations, string resourceGroupName, string gatewayName, string connectionName, string linkConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginGetIkeSasWithHttpMessagesAsync(resourceGroupName, gatewayName, connectionName, linkConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all shared keys of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectionSharedKeyResult> GetAllSharedKeysNext(this IVpnLinkConnectionsOperations operations, string nextPageLink)
            {
                return operations.GetAllSharedKeysNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all shared keys of VpnLink connection specified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionSharedKeyResult>> GetAllSharedKeysNextAsync(this IVpnLinkConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSharedKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all vpn site link connections for a particular virtual wan vpn
            /// gateway vpn connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VpnSiteLinkConnection> ListByVpnConnectionNext(this IVpnLinkConnectionsOperations operations, string nextPageLink)
            {
                return operations.ListByVpnConnectionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all vpn site link connections for a particular virtual wan vpn
            /// gateway vpn connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VpnSiteLinkConnection>> ListByVpnConnectionNextAsync(this IVpnLinkConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVpnConnectionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
