// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the principal that can access the path, it's AND logic. </summary>
    public partial class FilterDefinition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FilterDefinition"/>. </summary>
        public FilterDefinition()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FilterDefinition"/>. </summary>
        /// <param name="userName"> Specifies the user name that can access the resource. </param>
        /// <param name="userId"> Specifies the user id that can access the resource. </param>
        /// <param name="userGroupName"> Specifies the user group name that can access the resource. </param>
        /// <param name="userGroupId"> Specifies the user group id that can access the resource. </param>
        /// <param name="runAsElevated"> Specifies whether only run as elevated process that can access the resource. </param>
        /// <param name="processName"> Specifies the process name that can access the resource. </param>
        /// <param name="commandLine"> Specifies the process path that can access the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FilterDefinition(string userName, string userId, string userGroupName, string userGroupId, string runAsElevated, string processName, string commandLine, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UserName = userName;
            UserId = userId;
            UserGroupName = userGroupName;
            UserGroupId = userGroupId;
            RunAsElevated = runAsElevated;
            ProcessName = processName;
            CommandLine = commandLine;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies the user name that can access the resource. </summary>
        public string UserName { get; set; }
        /// <summary> Specifies the user id that can access the resource. </summary>
        public string UserId { get; set; }
        /// <summary> Specifies the user group name that can access the resource. </summary>
        public string UserGroupName { get; set; }
        /// <summary> Specifies the user group id that can access the resource. </summary>
        public string UserGroupId { get; set; }
        /// <summary> Specifies whether only run as elevated process that can access the resource. </summary>
        public string RunAsElevated { get; set; }
        /// <summary> Specifies the process name that can access the resource. </summary>
        public string ProcessName { get; set; }
        /// <summary> Specifies the process path that can access the resource. </summary>
        public string CommandLine { get; set; }
    }
}
