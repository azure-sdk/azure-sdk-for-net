// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN. </summary>
    public readonly partial struct PublicIPAddressDnsSettingsDomainNameLabelScope : IEquatable<PublicIPAddressDnsSettingsDomainNameLabelScope>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PublicIPAddressDnsSettingsDomainNameLabelScope"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PublicIPAddressDnsSettingsDomainNameLabelScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TenantReuseValue = "TenantReuse";
        private const string SubscriptionReuseValue = "SubscriptionReuse";
        private const string ResourceGroupReuseValue = "ResourceGroupReuse";
        private const string NoReuseValue = "NoReuse";

        /// <summary> TenantReuse. </summary>
        public static PublicIPAddressDnsSettingsDomainNameLabelScope TenantReuse { get; } = new PublicIPAddressDnsSettingsDomainNameLabelScope(TenantReuseValue);
        /// <summary> SubscriptionReuse. </summary>
        public static PublicIPAddressDnsSettingsDomainNameLabelScope SubscriptionReuse { get; } = new PublicIPAddressDnsSettingsDomainNameLabelScope(SubscriptionReuseValue);
        /// <summary> ResourceGroupReuse. </summary>
        public static PublicIPAddressDnsSettingsDomainNameLabelScope ResourceGroupReuse { get; } = new PublicIPAddressDnsSettingsDomainNameLabelScope(ResourceGroupReuseValue);
        /// <summary> NoReuse. </summary>
        public static PublicIPAddressDnsSettingsDomainNameLabelScope NoReuse { get; } = new PublicIPAddressDnsSettingsDomainNameLabelScope(NoReuseValue);
        /// <summary> Determines if two <see cref="PublicIPAddressDnsSettingsDomainNameLabelScope"/> values are the same. </summary>
        public static bool operator ==(PublicIPAddressDnsSettingsDomainNameLabelScope left, PublicIPAddressDnsSettingsDomainNameLabelScope right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PublicIPAddressDnsSettingsDomainNameLabelScope"/> values are not the same. </summary>
        public static bool operator !=(PublicIPAddressDnsSettingsDomainNameLabelScope left, PublicIPAddressDnsSettingsDomainNameLabelScope right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PublicIPAddressDnsSettingsDomainNameLabelScope"/>. </summary>
        public static implicit operator PublicIPAddressDnsSettingsDomainNameLabelScope(string value) => new PublicIPAddressDnsSettingsDomainNameLabelScope(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PublicIPAddressDnsSettingsDomainNameLabelScope other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PublicIPAddressDnsSettingsDomainNameLabelScope other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
