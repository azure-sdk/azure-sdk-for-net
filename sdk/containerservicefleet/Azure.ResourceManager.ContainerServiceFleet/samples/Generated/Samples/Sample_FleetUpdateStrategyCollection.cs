// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.ContainerServiceFleet.Samples
{
    public partial class Sample_FleetUpdateStrategyCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateAFleetUpdateStrategyGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-01/FleetUpdateStrategies_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetUpdateStrategy_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgfleets";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "fleet1";
            FleetUpdateStrategyData data = new FleetUpdateStrategyData();
            string ifMatch = "bttptpmhheves";
            string ifNoneMatch = "tlx";
            ArmOperation<FleetUpdateStrategyResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, updateStrategyName, data, ifMatch: ifMatch, ifNoneMatch: ifNoneMatch);
            FleetUpdateStrategyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetUpdateStrategyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateAFleetUpdateStrategy()
        {
            // Generated from example definition: 2025-03-01/UpdateStrategies_CreateOrUpdate.json
            // this example is just showing the usage of "FleetUpdateStrategy_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "strartegy1";
            FleetUpdateStrategyData data = new FleetUpdateStrategyData();
            ArmOperation<FleetUpdateStrategyResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, updateStrategyName, data);
            FleetUpdateStrategyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetUpdateStrategyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAFleetUpdateStrategyResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-01/FleetUpdateStrategies_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgfleets";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "fleet1";
            FleetUpdateStrategyResource result = await collection.GetAsync(updateStrategyName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetUpdateStrategyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAFleetUpdateStrategyResource()
        {
            // Generated from example definition: 2025-03-01/UpdateStrategies_Get.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "strategy1";
            FleetUpdateStrategyResource result = await collection.GetAsync(updateStrategyName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetUpdateStrategyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListTheFleetUpdateStrategyResourcesByFleetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-01/FleetUpdateStrategies_ListByFleet_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetUpdateStrategy_ListByFleet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgfleets";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation and iterate over the result
            await foreach (FleetUpdateStrategyResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetUpdateStrategyData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListTheFleetUpdateStrategyResourcesByFleet()
        {
            // Generated from example definition: 2025-03-01/UpdateStrategies_ListByFleet.json
            // this example is just showing the usage of "FleetUpdateStrategy_ListByFleet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation and iterate over the result
            await foreach (FleetUpdateStrategyResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetUpdateStrategyData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetAFleetUpdateStrategyResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-01/FleetUpdateStrategies_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgfleets";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "fleet1";
            bool result = await collection.ExistsAsync(updateStrategyName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetAFleetUpdateStrategyResource()
        {
            // Generated from example definition: 2025-03-01/UpdateStrategies_Get.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "strategy1";
            bool result = await collection.ExistsAsync(updateStrategyName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetAFleetUpdateStrategyResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-01/FleetUpdateStrategies_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgfleets";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "fleet1";
            NullableResponse<FleetUpdateStrategyResource> response = await collection.GetIfExistsAsync(updateStrategyName);
            FleetUpdateStrategyResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetUpdateStrategyData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetAFleetUpdateStrategyResource()
        {
            // Generated from example definition: 2025-03-01/UpdateStrategies_Get.json
            // this example is just showing the usage of "FleetUpdateStrategy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetUpdateStrategyResource
            FleetUpdateStrategyCollection collection = fleet.GetFleetUpdateStrategies();

            // invoke the operation
            string updateStrategyName = "strategy1";
            NullableResponse<FleetUpdateStrategyResource> response = await collection.GetIfExistsAsync(updateStrategyName);
            FleetUpdateStrategyResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetUpdateStrategyData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
