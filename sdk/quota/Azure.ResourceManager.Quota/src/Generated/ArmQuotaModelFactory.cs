// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Quota;

namespace Azure.ResourceManager.Quota.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmQuotaModelFactory
    {
        /// <summary> Initializes a new instance of GroupQuotasEntityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties and filters for ShareQuota. The request parameter is optional, if there are no filters specified. </param>
        /// <returns> A new <see cref="Quota.GroupQuotasEntityData"/> instance for mocking. </returns>
        public static GroupQuotasEntityData GroupQuotasEntityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GroupQuotasEntityBase properties = null)
        {
            return new GroupQuotasEntityData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of GroupQuotasEntityBase. </summary>
        /// <param name="displayName"> Display name of the GroupQuota entity. </param>
        /// <param name="additionalAttributes"> Additional attributes to allow subscription, which can be added to the subscriptionIds. </param>
        /// <param name="provisioningState"> Provisioning state of the operation. </param>
        /// <returns> A new <see cref="Models.GroupQuotasEntityBase"/> instance for mocking. </returns>
        public static GroupQuotasEntityBase GroupQuotasEntityBase(string displayName = null, AdditionalAttributes additionalAttributes = null, RequestState? provisioningState = null)
        {
            return new GroupQuotasEntityBase(displayName, additionalAttributes, provisioningState);
        }

        /// <summary> Initializes a new instance of GroupQuotaSubscriptionIdData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Quota.GroupQuotaSubscriptionIdData"/> instance for mocking. </returns>
        public static GroupQuotaSubscriptionIdData GroupQuotaSubscriptionIdData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GroupQuotaSubscriptionIdProperties properties = null)
        {
            return new GroupQuotaSubscriptionIdData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of GroupQuotaSubscriptionIdProperties. </summary>
        /// <param name="subscriptionId"> An Azure subscriptionId. </param>
        /// <param name="provisioningState"> Status of this subscriptionId being associated with the GroupQuotasEntity. </param>
        /// <returns> A new <see cref="Models.GroupQuotaSubscriptionIdProperties"/> instance for mocking. </returns>
        public static GroupQuotaSubscriptionIdProperties GroupQuotaSubscriptionIdProperties(string subscriptionId = null, RequestState? provisioningState = null)
        {
            return new GroupQuotaSubscriptionIdProperties(subscriptionId, provisioningState);
        }

        /// <summary> Initializes a new instance of GroupQuotaLimitData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Group Quota properties for the specified resource. </param>
        /// <returns> A new <see cref="Quota.GroupQuotaLimitData"/> instance for mocking. </returns>
        public static GroupQuotaLimitData GroupQuotaLimitData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GroupQuotaDetails properties = null)
        {
            return new GroupQuotaLimitData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of GroupQuotaDetails. </summary>
        /// <param name="limit"> The current Group Quota Limit at the parentId level. </param>
        /// <param name="comment"> Any comment related to quota request. </param>
        /// <param name="name"> Name of the resource provided by the resource Provider. This property is already included in the request URI, so it is a readonly property returned in the response. </param>
        /// <param name="unit"> The usages units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="availableLimit"> The available Group Quota Limit at the MG level. This Group quota can be assigned to subscription(s). </param>
        /// <param name="assignedToSubscriptions"> Assigned Group Quota to subscriptions. </param>
        /// <param name="provisioningState"> Request status. </param>
        /// <returns> A new <see cref="Models.GroupQuotaDetails"/> instance for mocking. </returns>
        public static GroupQuotaDetails GroupQuotaDetails(long? limit = null, string comment = null, GroupQuotaDetailsName name = null, string unit = null, long? availableLimit = null, IEnumerable<AssignedToSubscription> assignedToSubscriptions = null, RequestState? provisioningState = null)
        {
            assignedToSubscriptions ??= new List<AssignedToSubscription>();

            return new GroupQuotaDetails(limit, comment, name, unit, availableLimit, assignedToSubscriptions?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of GroupQuotaDetailsName. </summary>
        /// <param name="value"> Resource name. </param>
        /// <param name="localizedValue"> Resource display name. </param>
        /// <returns> A new <see cref="Models.GroupQuotaDetailsName"/> instance for mocking. </returns>
        public static GroupQuotaDetailsName GroupQuotaDetailsName(string value = null, string localizedValue = null)
        {
            return new GroupQuotaDetailsName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of AssignedToSubscription. </summary>
        /// <param name="subscriptionId"> An Azure subscriptionId. </param>
        /// <param name="quotaAllocated"> The amount of quota allocated to this subscriptionId from the GroupQuotasEntity. </param>
        /// <returns> A new <see cref="Models.AssignedToSubscription"/> instance for mocking. </returns>
        public static AssignedToSubscription AssignedToSubscription(string subscriptionId = null, long? quotaAllocated = null)
        {
            return new AssignedToSubscription(subscriptionId, quotaAllocated);
        }

        /// <summary> Initializes a new instance of SubmittedResourceRequestStatus. </summary>
        /// <param name="requestedResource"> Requested Resource. </param>
        /// <param name="status"> Request status. </param>
        /// <returns> A new <see cref="Models.SubmittedResourceRequestStatus"/> instance for mocking. </returns>
        public static SubmittedResourceRequestStatus SubmittedResourceRequestStatus(ResourceBaseRequest requestedResource = null, RequestState? status = null)
        {
            return new SubmittedResourceRequestStatus(requestedResource, status);
        }

        /// <summary> Initializes a new instance of ResourceBaseRequest. </summary>
        /// <param name="resourceName"> The resource name, such as SKU name. </param>
        /// <param name="limits"> Quota requested for the resource. </param>
        /// <param name="unit"> Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond. Based on - https://armwiki.azurewebsites.net/api_contracts/UsagesAPIContract.html?q=usages . Different RPs may have different units, Count, type as int64 should work for most of the integer values. </param>
        /// <returns> A new <see cref="Models.ResourceBaseRequest"/> instance for mocking. </returns>
        public static ResourceBaseRequest ResourceBaseRequest(string resourceName = null, long? limits = null, string unit = null)
        {
            return new ResourceBaseRequest(resourceName, limits, unit);
        }

        /// <summary> Initializes a new instance of SubscriptionQuotaAllocationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Quota properties for the specified resource. </param>
        /// <returns> A new <see cref="Quota.SubscriptionQuotaAllocationData"/> instance for mocking. </returns>
        public static SubscriptionQuotaAllocationData SubscriptionQuotaAllocationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SubscriptionQuotaDetails properties = null)
        {
            return new SubscriptionQuotaAllocationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of SubscriptionQuotaDetails. </summary>
        /// <param name="limit"> The total quota limit for the subscription. </param>
        /// <param name="nonShareableQuota"> The non shareable quota for the subscription. </param>
        /// <param name="provisioningState"> Request status. </param>
        /// <param name="quotaSources"> Assigned Group Quota to subscriptions. </param>
        /// <returns> A new <see cref="Models.SubscriptionQuotaDetails"/> instance for mocking. </returns>
        public static SubscriptionQuotaDetails SubscriptionQuotaDetails(long? limit = null, long? nonShareableQuota = null, RequestState? provisioningState = null, IEnumerable<SubscriptionGroupQuotaAssignment> quotaSources = null)
        {
            quotaSources ??= new List<SubscriptionGroupQuotaAssignment>();

            return new SubscriptionQuotaDetails(limit, nonShareableQuota, provisioningState, quotaSources?.ToList());
        }

        /// <summary> Initializes a new instance of SubscriptionQuotaAllocationRequest. </summary>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.SubscriptionQuotaAllocationRequest"/> instance for mocking. </returns>
        public static SubscriptionQuotaAllocationRequest SubscriptionQuotaAllocationRequest(SubscriptionQuotaAllocationRequestProperties properties = null)
        {
            return new SubscriptionQuotaAllocationRequest(properties);
        }

        /// <summary> Initializes a new instance of SubscriptionQuotaAllocationRequestProperties. </summary>
        /// <param name="provisioningState"> Request status. </param>
        /// <param name="limit"> The new quota limit for the subscription. The incremental quota will be assigned from pre-approved groupQuota. </param>
        /// <returns> A new <see cref="Models.SubscriptionQuotaAllocationRequestProperties"/> instance for mocking. </returns>
        public static SubscriptionQuotaAllocationRequestProperties SubscriptionQuotaAllocationRequestProperties(RequestState? provisioningState = null, long? limit = null)
        {
            return new SubscriptionQuotaAllocationRequestProperties(provisioningState, limit);
        }

        /// <summary> Initializes a new instance of CurrentUsagesBaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Usage properties for the specified resource. </param>
        /// <returns> A new <see cref="Quota.CurrentUsagesBaseData"/> instance for mocking. </returns>
        public static CurrentUsagesBaseData CurrentUsagesBaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaUsagesProperties properties = null)
        {
            return new CurrentUsagesBaseData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of QuotaUsagesProperties. </summary>
        /// <param name="usages"> The quota limit properties for this resource. </param>
        /// <param name="unit"> The units for the quota usage, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="name"> Resource name provided by the resource provider. Use this property name when requesting quota. </param>
        /// <param name="resourceTypeName"> The name of the resource type. Optional field. </param>
        /// <param name="quotaPeriod">
        /// The time period for the summary of the quota usage values. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because it is not relevant for all resources such as compute.
        /// </param>
        /// <param name="isQuotaApplicable"> States if quota can be requested for this resource. </param>
        /// <param name="properties"> Additional properties for the specific resource provider. </param>
        /// <returns> A new <see cref="Models.QuotaUsagesProperties"/> instance for mocking. </returns>
        public static QuotaUsagesProperties QuotaUsagesProperties(QuotaUsagesObject usages = null, string unit = null, QuotaRequestResourceName name = null, string resourceTypeName = null, TimeSpan? quotaPeriod = null, bool? isQuotaApplicable = null, BinaryData properties = null)
        {
            return new QuotaUsagesProperties(usages, unit, name, resourceTypeName, quotaPeriod, isQuotaApplicable, properties);
        }

        /// <summary> Initializes a new instance of QuotaUsagesObject. </summary>
        /// <param name="value"> The usages value. </param>
        /// <param name="usagesType"> The quota or usages limit types. </param>
        /// <returns> A new <see cref="Models.QuotaUsagesObject"/> instance for mocking. </returns>
        public static QuotaUsagesObject QuotaUsagesObject(int value = default, QuotaUsagesType? usagesType = null)
        {
            return new QuotaUsagesObject(value, usagesType);
        }

        /// <summary> Initializes a new instance of QuotaRequestResourceName. </summary>
        /// <param name="value"> Resource name. </param>
        /// <param name="localizedValue"> Resource display name. </param>
        /// <returns> A new <see cref="Models.QuotaRequestResourceName"/> instance for mocking. </returns>
        public static QuotaRequestResourceName QuotaRequestResourceName(string value = null, string localizedValue = null)
        {
            return new QuotaRequestResourceName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of ServiceErrorDetail. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <returns> A new <see cref="Models.ServiceErrorDetail"/> instance for mocking. </returns>
        public static ServiceErrorDetail ServiceErrorDetail(string code = null, string message = null)
        {
            return new ServiceErrorDetail(code, message);
        }

        /// <summary> Initializes a new instance of CurrentQuotaLimitBaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Quota properties for the specified resource, based on the API called, Quotas or Usages. </param>
        /// <returns> A new <see cref="Quota.CurrentQuotaLimitBaseData"/> instance for mocking. </returns>
        public static CurrentQuotaLimitBaseData CurrentQuotaLimitBaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaProperties properties = null)
        {
            return new CurrentQuotaLimitBaseData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of QuotaProperties. </summary>
        /// <param name="limit">
        /// Resource quota limit properties.
        /// Please note <see cref="QuotaLimitJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="QuotaLimitObject"/>.
        /// </param>
        /// <param name="unit"> The quota units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="name"> Resource name provided by the resource provider. Use this property name when requesting quota. </param>
        /// <param name="resourceTypeName"> The name of the resource type. Optional field. </param>
        /// <param name="quotaPeriod">
        /// The time period over which the quota usage values are summarized. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because, for some resources like compute, the period is irrelevant.
        /// </param>
        /// <param name="isQuotaApplicable"> States if quota can be requested for this resource. </param>
        /// <param name="properties"> Additional properties for the specific resource provider. </param>
        /// <returns> A new <see cref="Models.QuotaProperties"/> instance for mocking. </returns>
        public static QuotaProperties QuotaProperties(QuotaLimitJsonObject limit = null, string unit = null, QuotaRequestResourceName name = null, string resourceTypeName = null, TimeSpan? quotaPeriod = null, bool? isQuotaApplicable = null, BinaryData properties = null)
        {
            return new QuotaProperties(limit, unit, name, resourceTypeName, quotaPeriod, isQuotaApplicable, properties);
        }

        /// <summary> Initializes a new instance of QuotaRequestDetailData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The quota request status. </param>
        /// <param name="message"> User-friendly status message. </param>
        /// <param name="error"> Error details of the quota request. </param>
        /// <param name="requestSubmitOn"> The quota request submission time. The date conforms to the following format specified by the ISO 8601 standard: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="value"> Quota request details. </param>
        /// <returns> A new <see cref="Quota.QuotaRequestDetailData"/> instance for mocking. </returns>
        public static QuotaRequestDetailData QuotaRequestDetailData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaRequestState? provisioningState = null, string message = null, ServiceErrorDetail error = null, DateTimeOffset? requestSubmitOn = null, IEnumerable<QuotaSubRequestDetail> value = null)
        {
            value ??= new List<QuotaSubRequestDetail>();

            return new QuotaRequestDetailData(id, name, resourceType, systemData, provisioningState, message, error, requestSubmitOn, value?.ToList());
        }

        /// <summary> Initializes a new instance of QuotaSubRequestDetail. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceTypeName"> Resource type for which the quota properties were requested. </param>
        /// <param name="unit"> Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="provisioningState"> The quota request status. </param>
        /// <param name="message"> User-friendly status message. </param>
        /// <param name="subRequestId"> Quota request ID. </param>
        /// <param name="limit">
        /// Resource quota limit properties.
        /// Please note <see cref="QuotaLimitJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="QuotaLimitObject"/>.
        /// </param>
        /// <returns> A new <see cref="Models.QuotaSubRequestDetail"/> instance for mocking. </returns>
        public static QuotaSubRequestDetail QuotaSubRequestDetail(QuotaRequestResourceName name = null, string resourceTypeName = null, string unit = null, QuotaRequestState? provisioningState = null, string message = null, Guid? subRequestId = null, QuotaLimitJsonObject limit = null)
        {
            return new QuotaSubRequestDetail(name, resourceTypeName, unit, provisioningState, message, subRequestId, limit);
        }

        /// <summary> Initializes a new instance of QuotaOperationResult. </summary>
        /// <param name="name"></param>
        /// <param name="display"></param>
        /// <param name="origin"></param>
        /// <returns> A new <see cref="Models.QuotaOperationResult"/> instance for mocking. </returns>
        public static QuotaOperationResult QuotaOperationResult(string name = null, QuotaOperationDisplay display = null, string origin = null)
        {
            return new QuotaOperationResult(name, display, origin);
        }

        /// <summary> Initializes a new instance of QuotaOperationDisplay. </summary>
        /// <param name="provider"> Provider name. </param>
        /// <param name="resource"> Resource name. </param>
        /// <param name="operation"> Operation name. </param>
        /// <param name="description"> Operation description. </param>
        /// <returns> A new <see cref="Models.QuotaOperationDisplay"/> instance for mocking. </returns>
        public static QuotaOperationDisplay QuotaOperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new QuotaOperationDisplay(provider, resource, operation, description);
        }
    }
}
