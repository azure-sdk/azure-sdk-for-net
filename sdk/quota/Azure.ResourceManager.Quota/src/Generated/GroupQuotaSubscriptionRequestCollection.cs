// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Quota
{
    /// <summary>
    /// A class representing a collection of <see cref="GroupQuotaSubscriptionRequestResource" /> and their operations.
    /// Each <see cref="GroupQuotaSubscriptionRequestResource" /> in the collection will belong to the same instance of <see cref="GroupQuotasEntityResource" />.
    /// To get a <see cref="GroupQuotaSubscriptionRequestCollection" /> instance call the GetGroupQuotaSubscriptionRequests method from an instance of <see cref="GroupQuotasEntityResource" />.
    /// </summary>
    public partial class GroupQuotaSubscriptionRequestCollection : ArmCollection, IEnumerable<GroupQuotaSubscriptionRequestResource>, IAsyncEnumerable<GroupQuotaSubscriptionRequestResource>
    {
        private readonly ClientDiagnostics _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics;
        private readonly SubscriptionRequestsRestOperations _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient;

        /// <summary> Initializes a new instance of the <see cref="GroupQuotaSubscriptionRequestCollection"/> class for mocking. </summary>
        protected GroupQuotaSubscriptionRequestCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GroupQuotaSubscriptionRequestCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal GroupQuotaSubscriptionRequestCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Quota", GroupQuotaSubscriptionRequestResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(GroupQuotaSubscriptionRequestResource.ResourceType, out string groupQuotaSubscriptionRequestSubscriptionRequestsApiVersion);
            _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient = new SubscriptionRequestsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, groupQuotaSubscriptionRequestSubscriptionRequestsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GroupQuotasEntityResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GroupQuotasEntityResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get API to check the status of a subscriptionIds request by requestId.  Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate status. This API provides the finals status with the request details and status.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/> is null. </exception>
        public virtual async Task<Response<GroupQuotaSubscriptionRequestResource>> GetAsync(string requestId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(requestId, nameof(requestId));

            using var scope = _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics.CreateScope("GroupQuotaSubscriptionRequestCollection.Get");
            scope.Start();
            try
            {
                var response = await _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.GetAsync(Id.Parent.Name, Id.Name, requestId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotaSubscriptionRequestResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get API to check the status of a subscriptionIds request by requestId.  Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate status. This API provides the finals status with the request details and status.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/> is null. </exception>
        public virtual Response<GroupQuotaSubscriptionRequestResource> Get(string requestId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(requestId, nameof(requestId));

            using var scope = _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics.CreateScope("GroupQuotaSubscriptionRequestCollection.Get");
            scope.Start();
            try
            {
                var response = _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.Get(Id.Parent.Name, Id.Name, requestId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotaSubscriptionRequestResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1 year.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GroupQuotaSubscriptionRequestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GroupQuotaSubscriptionRequestResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.CreateListRequest(Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new GroupQuotaSubscriptionRequestResource(Client, GroupQuotaSubscriptionIdData.DeserializeGroupQuotaSubscriptionIdData(e)), _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics, Pipeline, "GroupQuotaSubscriptionRequestCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1 year.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GroupQuotaSubscriptionRequestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GroupQuotaSubscriptionRequestResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.CreateListRequest(Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new GroupQuotaSubscriptionRequestResource(Client, GroupQuotaSubscriptionIdData.DeserializeGroupQuotaSubscriptionIdData(e)), _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics, Pipeline, "GroupQuotaSubscriptionRequestCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string requestId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(requestId, nameof(requestId));

            using var scope = _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics.CreateScope("GroupQuotaSubscriptionRequestCollection.Exists");
            scope.Start();
            try
            {
                var response = await _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.GetAsync(Id.Parent.Name, Id.Name, requestId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptionRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SubscriptionRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestId"/> is null. </exception>
        public virtual Response<bool> Exists(string requestId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(requestId, nameof(requestId));

            using var scope = _groupQuotaSubscriptionRequestSubscriptionRequestsClientDiagnostics.CreateScope("GroupQuotaSubscriptionRequestCollection.Exists");
            scope.Start();
            try
            {
                var response = _groupQuotaSubscriptionRequestSubscriptionRequestsRestClient.Get(Id.Parent.Name, Id.Name, requestId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<GroupQuotaSubscriptionRequestResource> IEnumerable<GroupQuotaSubscriptionRequestResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<GroupQuotaSubscriptionRequestResource> IAsyncEnumerable<GroupQuotaSubscriptionRequestResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
