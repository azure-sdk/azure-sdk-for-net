// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Quota
{
    /// <summary>
    /// A class representing a collection of <see cref="GroupQuotasEnforcementResponseResource"/> and their operations.
    /// Each <see cref="GroupQuotasEnforcementResponseResource"/> in the collection will belong to the same instance of <see cref="GroupQuotasEntityResource"/>.
    /// To get a <see cref="GroupQuotasEnforcementResponseCollection"/> instance call the GetGroupQuotasEnforcementResponses method from an instance of <see cref="GroupQuotasEntityResource"/>.
    /// </summary>
    public partial class GroupQuotasEnforcementResponseCollection : ArmCollection, IEnumerable<GroupQuotasEnforcementResponseResource>, IAsyncEnumerable<GroupQuotasEnforcementResponseResource>
    {
        private readonly ClientDiagnostics _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics;
        private readonly GroupQuotaEnforcementRestOperations _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient;
        private readonly string _resourceProviderName;

        /// <summary> Initializes a new instance of the <see cref="GroupQuotasEnforcementResponseCollection"/> class for mocking. </summary>
        protected GroupQuotasEnforcementResponseCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GroupQuotasEnforcementResponseCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceProviderName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceProviderName"/> is an empty string, and was expected to be non-empty. </exception>
        internal GroupQuotasEnforcementResponseCollection(ArmClient client, ResourceIdentifier id, string resourceProviderName) : base(client, id)
        {
            _resourceProviderName = resourceProviderName;
            _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Quota", GroupQuotasEnforcementResponseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(GroupQuotasEnforcementResponseResource.ResourceType, out string groupQuotasEnforcementResponseGroupQuotaEnforcementApiVersion);
            _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient = new GroupQuotaEnforcementRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, groupQuotasEnforcementResponseGroupQuotaEnforcementApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GroupQuotasEntityResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GroupQuotasEntityResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The subscriptions cannot request quota at subscription level. The subscriptions share the GroupQuota assigned to the GroupQuota. If the GroupQuota is used, then submit a groupQuotaLimit request for the specific resource - provider/location/resource. Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota Enforcement - 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example - GroupQuotaSubscriptions_Delete)
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<GroupQuotasEnforcementResponseResource>> CreateOrUpdateAsync(WaitUntil waitUntil, AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateOrUpdateAsync(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken).ConfigureAwait(false);
                var operation = new QuotaArmOperation<GroupQuotasEnforcementResponseResource>(new GroupQuotasEnforcementResponseOperationSource(Client), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateCreateOrUpdateRequest(Id.Parent.Name, Id.Name, _resourceProviderName, location).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The subscriptions cannot request quota at subscription level. The subscriptions share the GroupQuota assigned to the GroupQuota. If the GroupQuota is used, then submit a groupQuotaLimit request for the specific resource - provider/location/resource. Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota Enforcement - 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example - GroupQuotaSubscriptions_Delete)
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<GroupQuotasEnforcementResponseResource> CreateOrUpdate(WaitUntil waitUntil, AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateOrUpdate(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken);
                var operation = new QuotaArmOperation<GroupQuotasEnforcementResponseResource>(new GroupQuotasEnforcementResponseOperationSource(Client), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateCreateOrUpdateRequest(Id.Parent.Name, Id.Name, _resourceProviderName, location).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the GroupQuotas enforcement status for the ResourceProvider/location. The locations, where GroupQuota enforcement is not enabled will return Not Found.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GroupQuotasEnforcementResponseResource>> GetAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.Get");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.GetAsync(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the GroupQuotas enforcement status for the ResourceProvider/location. The locations, where GroupQuota enforcement is not enabled will return Not Found.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GroupQuotasEnforcementResponseResource> Get(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.Get");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.Get(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns only the list of the Azure regions where the GroupQuotas enforcement is enabled. The locations not included in GroupQuota Enforcement will not be listed, the regions in failed status with listed as status Failed.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GroupQuotasEnforcementResponseResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GroupQuotasEnforcementResponseResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateListRequest(Id.Parent.Name, Id.Name, _resourceProviderName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateListNextPageRequest(nextLink, Id.Parent.Name, Id.Name, _resourceProviderName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new GroupQuotasEnforcementResponseResource(Client, GroupQuotasEnforcementResponseData.DeserializeGroupQuotasEnforcementResponseData(e)), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, "GroupQuotasEnforcementResponseCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Returns only the list of the Azure regions where the GroupQuotas enforcement is enabled. The locations not included in GroupQuota Enforcement will not be listed, the regions in failed status with listed as status Failed.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GroupQuotasEnforcementResponseResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GroupQuotasEnforcementResponseResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateListRequest(Id.Parent.Name, Id.Name, _resourceProviderName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateListNextPageRequest(nextLink, Id.Parent.Name, Id.Name, _resourceProviderName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new GroupQuotasEnforcementResponseResource(Client, GroupQuotasEnforcementResponseData.DeserializeGroupQuotasEnforcementResponseData(e)), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, "GroupQuotasEnforcementResponseCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.GetAsync(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.Get(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<GroupQuotasEnforcementResponseResource>> GetIfExistsAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.GetAsync(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<GroupQuotasEnforcementResponseResource>(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<GroupQuotasEnforcementResponseResource> GetIfExists(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.Get(Id.Parent.Name, Id.Name, _resourceProviderName, location, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<GroupQuotasEnforcementResponseResource>(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<GroupQuotasEnforcementResponseResource> IEnumerable<GroupQuotasEnforcementResponseResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<GroupQuotasEnforcementResponseResource> IAsyncEnumerable<GroupQuotasEnforcementResponseResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
