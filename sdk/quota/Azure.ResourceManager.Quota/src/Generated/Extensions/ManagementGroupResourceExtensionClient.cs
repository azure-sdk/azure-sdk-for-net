// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Quota.Models;

namespace Azure.ResourceManager.Quota
{
    /// <summary> A class to add extension methods to ManagementGroupResource. </summary>
    internal partial class ManagementGroupResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _groupQuotaLimitsRequestsClientDiagnostics;
        private GroupQuotaLimitsRequestsRestOperations _groupQuotaLimitsRequestsRestClient;
        private ClientDiagnostics _groupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics;
        private GroupQuotaSubscriptionQuotaAllocationRequestsRestOperations _groupQuotaSubscriptionQuotaAllocationRequestsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupResourceExtensionClient"/> class for mocking. </summary>
        protected ManagementGroupResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagementGroupResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ManagementGroupResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics GroupQuotaLimitsRequestsClientDiagnostics => _groupQuotaLimitsRequestsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Quota", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private GroupQuotaLimitsRequestsRestOperations GroupQuotaLimitsRequestsRestClient => _groupQuotaLimitsRequestsRestClient ??= new GroupQuotaLimitsRequestsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics GroupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics => _groupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Quota", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private GroupQuotaSubscriptionQuotaAllocationRequestsRestOperations GroupQuotaSubscriptionQuotaAllocationRequestsRestClient => _groupQuotaSubscriptionQuotaAllocationRequestsRestClient ??= new GroupQuotaSubscriptionQuotaAllocationRequestsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of GroupQuotasEntityResources in the ManagementGroupResource. </summary>
        /// <returns> An object representing collection of GroupQuotasEntityResources and their operations over a GroupQuotasEntityResource. </returns>
        public virtual GroupQuotasEntityCollection GetGroupQuotasEntities()
        {
            return GetCachedClient(Client => new GroupQuotasEntityCollection(Client, Id));
        }

        /// <summary> Gets a collection of GroupQuotaLimitResources in the ManagementGroupResource. </summary>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <returns> An object representing collection of GroupQuotaLimitResources and their operations over a GroupQuotaLimitResource. </returns>
        public virtual GroupQuotaLimitCollection GetGroupQuotaLimits(string resourceProviderScope, string groupQuotaName)
        {
            return new GroupQuotaLimitCollection(Client, Id, resourceProviderScope, groupQuotaName);
        }

        /// <summary> Gets a collection of SubscriptionQuotaAllocationResources in the ManagementGroupResource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <returns> An object representing collection of SubscriptionQuotaAllocationResources and their operations over a SubscriptionQuotaAllocationResource. </returns>
        public virtual SubscriptionQuotaAllocationCollection GetSubscriptionQuotaAllocations(string subscriptionId, string resourceProviderScope, string groupQuotaName)
        {
            return new SubscriptionQuotaAllocationCollection(Client, Id, subscriptionId, resourceProviderScope, groupQuotaName);
        }

        /// <summary>
        /// List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained for 1 year.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaLimitsRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubmittedResourceRequestStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubmittedResourceRequestStatus> GetGroupQuotaLimitsRequestsAsync(string resourceProviderScope, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => GroupQuotaLimitsRequestsRestClient.CreateListRequest(Id.Name, resourceProviderScope, groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => GroupQuotaLimitsRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Name, resourceProviderScope, groupQuotaName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SubmittedResourceRequestStatus.DeserializeSubmittedResourceRequestStatus, GroupQuotaLimitsRequestsClientDiagnostics, Pipeline, "ManagementGroupResourceExtensionClient.GetGroupQuotaLimitsRequests", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained for 1 year.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaLimitsRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubmittedResourceRequestStatus" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubmittedResourceRequestStatus> GetGroupQuotaLimitsRequests(string resourceProviderScope, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => GroupQuotaLimitsRequestsRestClient.CreateListRequest(Id.Name, resourceProviderScope, groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => GroupQuotaLimitsRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Name, resourceProviderScope, groupQuotaName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SubmittedResourceRequestStatus.DeserializeSubmittedResourceRequestStatus, GroupQuotaLimitsRequestsClientDiagnostics, Pipeline, "ManagementGroupResourceExtensionClient.GetGroupQuotaLimitsRequests", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get API to check the status of a GroupQuota request by requestId.  Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate status. This API provides the finals status with the request details and status.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaLimitsRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubmittedResourceRequestStatus>> GetGroupQuotaLimitsRequestAsync(string resourceProviderScope, string groupQuotaName, string requestId, CancellationToken cancellationToken = default)
        {
            using var scope = GroupQuotaLimitsRequestsClientDiagnostics.CreateScope("ManagementGroupResourceExtensionClient.GetGroupQuotaLimitsRequest");
            scope.Start();
            try
            {
                var response = await GroupQuotaLimitsRequestsRestClient.GetAsync(Id.Name, resourceProviderScope, groupQuotaName, requestId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get API to check the status of a GroupQuota request by requestId.  Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate status. This API provides the finals status with the request details and status.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaLimitsRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="requestId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubmittedResourceRequestStatus> GetGroupQuotaLimitsRequest(string resourceProviderScope, string groupQuotaName, string requestId, CancellationToken cancellationToken = default)
        {
            using var scope = GroupQuotaLimitsRequestsClientDiagnostics.CreateScope("ManagementGroupResourceExtensionClient.GetGroupQuotaLimitsRequest");
            scope.Start();
            try
            {
                var response = GroupQuotaLimitsRequestsRestClient.Get(Id.Name, resourceProviderScope, groupQuotaName, requestId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the quota allocation request status for the subscriptionId by allocationId.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocationRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="allocationId"> Resource allocation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubscriptionQuotaAllocationRequest>> GetGroupQuotaSubscriptionQuotaAllocationRequestAsync(string subscriptionId, string resourceProviderScope, string groupQuotaName, string allocationId, CancellationToken cancellationToken = default)
        {
            using var scope = GroupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics.CreateScope("ManagementGroupResourceExtensionClient.GetGroupQuotaSubscriptionQuotaAllocationRequest");
            scope.Start();
            try
            {
                var response = await GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.GetAsync(Id.Name, subscriptionId, resourceProviderScope, groupQuotaName, allocationId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the quota allocation request status for the subscriptionId by allocationId.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests/{allocationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocationRequests_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="allocationId"> Resource allocation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionQuotaAllocationRequest> GetGroupQuotaSubscriptionQuotaAllocationRequest(string subscriptionId, string resourceProviderScope, string groupQuotaName, string allocationId, CancellationToken cancellationToken = default)
        {
            using var scope = GroupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics.CreateScope("ManagementGroupResourceExtensionClient.GetGroupQuotaSubscriptionQuotaAllocationRequest");
            scope.Start();
            try
            {
                var response = GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.Get(Id.Name, subscriptionId, resourceProviderScope, groupQuotaName, allocationId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the allocation requests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocationRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubscriptionQuotaAllocationRequest" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubscriptionQuotaAllocationRequest> GetGroupQuotaSubscriptionQuotaAllocationRequestsAsync(string subscriptionId, string resourceProviderScope, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.CreateListRequest(Id.Name, subscriptionId, resourceProviderScope, groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Name, subscriptionId, resourceProviderScope, groupQuotaName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SubscriptionQuotaAllocationRequest.DeserializeSubscriptionQuotaAllocationRequest, GroupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics, Pipeline, "ManagementGroupResourceExtensionClient.GetGroupQuotaSubscriptionQuotaAllocationRequests", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the allocation requests.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocationRequests</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocationRequests_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubscriptionQuotaAllocationRequest" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubscriptionQuotaAllocationRequest> GetGroupQuotaSubscriptionQuotaAllocationRequests(string subscriptionId, string resourceProviderScope, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.CreateListRequest(Id.Name, subscriptionId, resourceProviderScope, groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => GroupQuotaSubscriptionQuotaAllocationRequestsRestClient.CreateListNextPageRequest(nextLink, Id.Name, subscriptionId, resourceProviderScope, groupQuotaName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SubscriptionQuotaAllocationRequest.DeserializeSubscriptionQuotaAllocationRequest, GroupQuotaSubscriptionQuotaAllocationRequestsClientDiagnostics, Pipeline, "ManagementGroupResourceExtensionClient.GetGroupQuotaSubscriptionQuotaAllocationRequests", "value", "nextLink", cancellationToken);
        }
    }
}
