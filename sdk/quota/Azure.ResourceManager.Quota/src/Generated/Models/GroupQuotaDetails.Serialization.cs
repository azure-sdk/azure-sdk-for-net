// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Quota.Models
{
    public partial class GroupQuotaDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Limit))
            {
                writer.WritePropertyName("limit"u8);
                writer.WriteNumberValue(Limit.Value);
            }
            if (Optional.IsDefined(Comment))
            {
                writer.WritePropertyName("comment"u8);
                writer.WriteStringValue(Comment);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteObjectValue(Name);
            }
            writer.WriteEndObject();
        }

        internal static GroupQuotaDetails DeserializeGroupQuotaDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> limit = default;
            Optional<string> comment = default;
            Optional<GroupQuotaDetailsName> name = default;
            Optional<string> unit = default;
            Optional<long> availableLimit = default;
            Optional<IReadOnlyList<AssignedToSubscription>> assignedToSubscriptions = default;
            Optional<RequestState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("limit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    limit = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("comment"u8))
                {
                    comment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = GroupQuotaDetailsName.DeserializeGroupQuotaDetailsName(property.Value);
                    continue;
                }
                if (property.NameEquals("unit"u8))
                {
                    unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("availableLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableLimit = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("assignedToSubscriptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssignedToSubscription> array = new List<AssignedToSubscription>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssignedToSubscription.DeserializeAssignedToSubscription(item));
                    }
                    assignedToSubscriptions = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new RequestState(property.Value.GetString());
                    continue;
                }
            }
            return new GroupQuotaDetails(Optional.ToNullable(limit), comment.Value, name.Value, unit.Value, Optional.ToNullable(availableLimit), Optional.ToList(assignedToSubscriptions), Optional.ToNullable(provisioningState));
        }
    }
}
