// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Quota
{
    /// <summary>
    /// A Class representing a GroupQuotasEnforcementResponse along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="GroupQuotasEnforcementResponseResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetGroupQuotasEnforcementResponseResource method.
    /// Otherwise you can get one from its parent resource <see cref="GroupQuotasEntityResource"/> using the GetGroupQuotasEnforcementResponse method.
    /// </summary>
    public partial class GroupQuotasEnforcementResponseResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="GroupQuotasEnforcementResponseResource"/> instance. </summary>
        /// <param name="managementGroupId"> The managementGroupId. </param>
        /// <param name="groupQuotaName"> The groupQuotaName. </param>
        /// <param name="resourceProviderName"> The resourceProviderName. </param>
        /// <param name="location"> The location. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string managementGroupId, string groupQuotaName, string resourceProviderName, AzureLocation location)
        {
            var resourceId = $"/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics;
        private readonly GroupQuotaEnforcementRestOperations _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient;
        private readonly GroupQuotasEnforcementResponseData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Quota/groupQuotas/resourceProviders/groupQuotaEnforcements";

        /// <summary> Initializes a new instance of the <see cref="GroupQuotasEnforcementResponseResource"/> class for mocking. </summary>
        protected GroupQuotasEnforcementResponseResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GroupQuotasEnforcementResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal GroupQuotasEnforcementResponseResource(ArmClient client, GroupQuotasEnforcementResponseData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="GroupQuotasEnforcementResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal GroupQuotasEnforcementResponseResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Quota", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string groupQuotasEnforcementResponseGroupQuotaEnforcementApiVersion);
            _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient = new GroupQuotaEnforcementRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, groupQuotasEnforcementResponseGroupQuotaEnforcementApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual GroupQuotasEnforcementResponseData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the GroupQuotas enforcement status for the ResourceProvider/location. The locations, where GroupQuota enforcement is not enabled will return Not Found.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GroupQuotasEnforcementResponseResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseResource.Get");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.GetAsync(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name), cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the GroupQuotas enforcement status for the ResourceProvider/location. The locations, where GroupQuota enforcement is not enabled will return Not Found.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GroupQuotasEnforcementResponseResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseResource.Get");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.Get(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name), cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GroupQuotasEnforcementResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The subscriptions cannot request quota at subscription level. The subscriptions share the GroupQuota assigned to the GroupQuota. If the GroupQuota is used, then submit a groupQuotaLimit request for the specific resource - provider/location/resource. If the Enforcement is in progress for that resourceProvider/location, then Conflict will be returned.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<GroupQuotasEnforcementResponseResource>> UpdateAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseResource.Update");
            scope.Start();
            try
            {
                var response = await _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.UpdateAsync(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name), cancellationToken).ConfigureAwait(false);
                var operation = new QuotaArmOperation<GroupQuotasEnforcementResponseResource>(new GroupQuotasEnforcementResponseOperationSource(Client), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateUpdateRequest(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name)).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The subscriptions cannot request quota at subscription level. The subscriptions share the GroupQuota assigned to the GroupQuota. If the GroupQuota is used, then submit a groupQuotaLimit request for the specific resource - provider/location/resource. If the Enforcement is in progress for that resourceProvider/location, then Conflict will be returned.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaEnforcements/{location}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaEnforcement_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GroupQuotasEnforcementResponseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<GroupQuotasEnforcementResponseResource> Update(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics.CreateScope("GroupQuotasEnforcementResponseResource.Update");
            scope.Start();
            try
            {
                var response = _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.Update(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name), cancellationToken);
                var operation = new QuotaArmOperation<GroupQuotasEnforcementResponseResource>(new GroupQuotasEnforcementResponseOperationSource(Client), _groupQuotasEnforcementResponseGroupQuotaEnforcementClientDiagnostics, Pipeline, _groupQuotasEnforcementResponseGroupQuotaEnforcementRestClient.CreateUpdateRequest(Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, new AzureLocation(Id.Name)).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
