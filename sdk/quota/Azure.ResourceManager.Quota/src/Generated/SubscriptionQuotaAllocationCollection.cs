// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ManagementGroups;

namespace Azure.ResourceManager.Quota
{
    /// <summary>
    /// A class representing a collection of <see cref="SubscriptionQuotaAllocationResource" /> and their operations.
    /// Each <see cref="SubscriptionQuotaAllocationResource" /> in the collection will belong to the same instance of <see cref="ManagementGroupResource" />.
    /// To get a <see cref="SubscriptionQuotaAllocationCollection" /> instance call the GetSubscriptionQuotaAllocations method from an instance of <see cref="ManagementGroupResource" />.
    /// </summary>
    public partial class SubscriptionQuotaAllocationCollection : ArmCollection, IEnumerable<SubscriptionQuotaAllocationResource>, IAsyncEnumerable<SubscriptionQuotaAllocationResource>
    {
        private readonly ClientDiagnostics _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics;
        private readonly GroupQuotaSubscriptionQuotaAllocationRestOperations _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient;
        private readonly string _subscriptionId;
        private readonly string _resourceProviderScope;
        private readonly string _groupQuotaName;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionQuotaAllocationCollection"/> class for mocking. </summary>
        protected SubscriptionQuotaAllocationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionQuotaAllocationCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceProviderScope"> Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceProviderScope"/> or <paramref name="groupQuotaName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceProviderScope"/> or <paramref name="groupQuotaName"/> is an empty string, and was expected to be non-empty. </exception>
        internal SubscriptionQuotaAllocationCollection(ArmClient client, ResourceIdentifier id, string subscriptionId, string resourceProviderScope, string groupQuotaName) : base(client, id)
        {
            _subscriptionId = subscriptionId;
            _resourceProviderScope = resourceProviderScope;
            _groupQuotaName = groupQuotaName;
            _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Quota", SubscriptionQuotaAllocationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SubscriptionQuotaAllocationResource.ResourceType, out string subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationApiVersion);
            _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient = new GroupQuotaSubscriptionQuotaAllocationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagementGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagementGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="data"> Quota requests payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SubscriptionQuotaAllocationResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string resourceName, SubscriptionQuotaAllocationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateOrUpdateAsync(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new QuotaArmOperation<SubscriptionQuotaAllocationResource>(new SubscriptionQuotaAllocationOperationSource(Client), _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics, Pipeline, _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateCreateOrUpdateRequest(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="data"> Quota requests payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SubscriptionQuotaAllocationResource> CreateOrUpdate(WaitUntil waitUntil, string resourceName, SubscriptionQuotaAllocationData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateOrUpdate(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, data, cancellationToken);
                var operation = new QuotaArmOperation<SubscriptionQuotaAllocationResource>(new SubscriptionQuotaAllocationOperationSource(Client), _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics, Pipeline, _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateCreateOrUpdateRequest(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<Response<SubscriptionQuotaAllocationResource>> GetAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.Get");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.GetAsync(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaAllocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual Response<SubscriptionQuotaAllocationResource> Get(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.Get");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.Get(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaAllocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubscriptionQuotaAllocationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubscriptionQuotaAllocationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateListRequest(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateListNextPageRequest(nextLink, Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SubscriptionQuotaAllocationResource(Client, SubscriptionQuotaAllocationData.DeserializeSubscriptionQuotaAllocationData(e)), _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics, Pipeline, "SubscriptionQuotaAllocationCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubscriptionQuotaAllocationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubscriptionQuotaAllocationResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateListRequest(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.CreateListNextPageRequest(nextLink, Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SubscriptionQuotaAllocationResource(Client, SubscriptionQuotaAllocationData.DeserializeSubscriptionQuotaAllocationData(e)), _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics, Pipeline, "SubscriptionQuotaAllocationCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.Exists");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.GetAsync(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.Exists");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.Get(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<SubscriptionQuotaAllocationResource>> GetIfExistsAsync(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.GetAsync(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<SubscriptionQuotaAllocationResource>(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaAllocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{resourceProviderScope}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/quotaAllocations/{resourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupQuotaSubscriptionQuotaAllocation_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        public virtual NullableResponse<SubscriptionQuotaAllocationResource> GetIfExists(string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            using var scope = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationClientDiagnostics.CreateScope("SubscriptionQuotaAllocationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _subscriptionQuotaAllocationGroupQuotaSubscriptionQuotaAllocationRestClient.Get(Id.Name, _subscriptionId, _resourceProviderScope, _groupQuotaName, resourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<SubscriptionQuotaAllocationResource>(response.GetRawResponse());
                return Response.FromValue(new SubscriptionQuotaAllocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SubscriptionQuotaAllocationResource> IEnumerable<SubscriptionQuotaAllocationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SubscriptionQuotaAllocationResource> IAsyncEnumerable<SubscriptionQuotaAllocationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
