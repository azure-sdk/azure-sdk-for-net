// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Peering.Models
{
    /// <summary> The Enum11. </summary>
    public readonly partial struct Enum11 : IEquatable<Enum11>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Enum11"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum11(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string IdleValue = "Idle";
        private const string ConnectValue = "Connect";
        private const string ActiveValue = "Active";
        private const string OpenSentValue = "OpenSent";
        private const string OpenConfirmValue = "OpenConfirm";
        private const string OpenReceivedValue = "OpenReceived";
        private const string EstablishedValue = "Established";
        private const string PendingAddValue = "PendingAdd";
        private const string PendingUpdateValue = "PendingUpdate";
        private const string PendingRemoveValue = "PendingRemove";

        /// <summary> None. </summary>
        public static Enum11 None { get; } = new Enum11(NoneValue);
        /// <summary> Idle. </summary>
        public static Enum11 Idle { get; } = new Enum11(IdleValue);
        /// <summary> Connect. </summary>
        public static Enum11 Connect { get; } = new Enum11(ConnectValue);
        /// <summary> Active. </summary>
        public static Enum11 Active { get; } = new Enum11(ActiveValue);
        /// <summary> OpenSent. </summary>
        public static Enum11 OpenSent { get; } = new Enum11(OpenSentValue);
        /// <summary> OpenConfirm. </summary>
        public static Enum11 OpenConfirm { get; } = new Enum11(OpenConfirmValue);
        /// <summary> OpenReceived. </summary>
        public static Enum11 OpenReceived { get; } = new Enum11(OpenReceivedValue);
        /// <summary> Established. </summary>
        public static Enum11 Established { get; } = new Enum11(EstablishedValue);
        /// <summary> PendingAdd. </summary>
        public static Enum11 PendingAdd { get; } = new Enum11(PendingAddValue);
        /// <summary> PendingUpdate. </summary>
        public static Enum11 PendingUpdate { get; } = new Enum11(PendingUpdateValue);
        /// <summary> PendingRemove. </summary>
        public static Enum11 PendingRemove { get; } = new Enum11(PendingRemoveValue);
        /// <summary> Determines if two <see cref="Enum11"/> values are the same. </summary>
        public static bool operator ==(Enum11 left, Enum11 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum11"/> values are not the same. </summary>
        public static bool operator !=(Enum11 left, Enum11 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Enum11"/>. </summary>
        public static implicit operator Enum11(string value) => new Enum11(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum11 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum11 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
