// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Peering.Models
{
    /// <summary> The previous connection provisioning state, used to resume provisioning after connection has been blocked. </summary>
    public readonly partial struct PreviousConnectionProvisioningState : IEquatable<PreviousConnectionProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PreviousConnectionProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PreviousConnectionProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string InterconnectionPendingApprovalValue = "InterconnectionPendingApproval";
        private const string DeviceStateValidationValue = "DeviceStateValidation";
        private const string RocPendingApprovalValue = "RocPendingApproval";
        private const string AllocatePortsValue = "AllocatePorts";
        private const string PortExhaustionValue = "PortExhaustion";
        private const string CheckInterfacesValue = "CheckInterfaces";
        private const string EnableInterfacesValue = "EnableInterfaces";
        private const string PhysicalConnectionSetupValue = "PhysicalConnectionSetup";
        private const string AwaitPairUpgradeValue = "AwaitPairUpgrade";
        private const string LightCheckValue = "LightCheck";
        private const string TestPingValue = "TestPing";
        private const string PingTestDoneValue = "PingTestDone";
        private const string AwaitPeerIPsValue = "AwaitPeerIps";
        private const string ValidateFltFirewallValue = "ValidateFltFirewall";
        private const string LagSetupValue = "LagSetup";
        private const string AwaitLagCompletionValue = "AwaitLagCompletion";
        private const string UpdateAddressesOnDeviceValue = "UpdateAddressesOnDevice";
        private const string FetchPrefixLimitFromPeeringDbValue = "FetchPrefixLimitFromPeeringDb";
        private const string BgpSessionConfigurationValue = "BgpSessionConfiguration";
        private const string NpmBgpSessionConfigurationValue = "NpmBgpSessionConfiguration";
        private const string Md5AuthKeyConfigurationValue = "Md5AuthKeyConfiguration";
        private const string FetchSessionStateValue = "FetchSessionState";
        private const string RemoveNomonitValue = "RemoveNomonit";
        private const string UpdateApipaPrefixInSiteproValue = "UpdateApipaPrefixInSitepro";
        private const string ProvisioningCompletedValue = "ProvisioningCompleted";
        private const string PendingMigrationValue = "PendingMigration";
        private const string MigrationRequestPortAllocationRequestedValue = "MigrationRequestPortAllocationRequested";
        private const string MigrationConfigValidationValue = "MigrationConfigValidation";
        private const string PendingGlobalPolicyUpdateValue = "PendingGlobalPolicyUpdate";
        private const string MigrationSpecificConfigDriftValue = "MigrationSpecificConfigDrift";
        private const string MigrationNpmErrorValue = "MigrationNpmError";
        private const string PendingWorkWindowValue = "PendingWorkWindow";
        private const string ExternalBlockerValue = "ExternalBlocker";
        private const string StaticMacConfigurationValue = "StaticMacConfiguration";
        private const string UndoMigrationGraphCleanupValue = "UndoMigrationGraphCleanup";
        private const string MigrationWorkWindowValue = "MigrationWorkWindow";
        private const string PendingMigrationCompletionValue = "PendingMigrationCompletion";
        private const string MigrationCompletionRequestedValue = "MigrationCompletionRequested";
        private const string DirectPeeringTypeUpdateApprovedValue = "DirectPeeringTypeUpdateApproved";
        private const string DirectPeeringTypeUpdateRejectedValue = "DirectPeeringTypeUpdateRejected";
        private const string DirectPeeringTypeUpdateIfDescriptionValue = "DirectPeeringTypeUpdateIfDescription";
        private const string DirectPeeringTypeUpdatePrefixPrecheckValue = "DirectPeeringTypeUpdatePrefixPrecheck";
        private const string DirectPeeringTypeUpdateApplyDenyAllValue = "DirectPeeringTypeUpdateApplyDenyAll";
        private const string DirectPeeringTypeUpdateDeleteSessionValue = "DirectPeeringTypeUpdateDeleteSession";
        private const string DirectPeeringTypeUpdateLagAclValue = "DirectPeeringTypeUpdateLagAcl";
        private const string DirectPeeringTypeUpdateBgpConfigValue = "DirectPeeringTypeUpdateBgpConfig";
        private const string DirectPeeringTypeUpdateFetchSessionStateValue = "DirectPeeringTypeUpdateFetchSessionState";
        private const string DirectPeeringTypeUpdateDeleteDenyAllValue = "DirectPeeringTypeUpdateDeleteDenyAll";
        private const string DirectPeeringTypeUpdatePrefixPostCheckValue = "DirectPeeringTypeUpdatePrefixPostCheck";
        private const string DecomRocPendingApprovalValue = "DecomRocPendingApproval";
        private const string DecomAddDenyAllValue = "DecomAddDenyAll";
        private const string DecomValidatePrefixValue = "DecomValidatePrefix";
        private const string DecomValidateTrafficValue = "DecomValidateTraffic";
        private const string DecomShutInterfacesValue = "DecomShutInterfaces";
        private const string DecomShutdownBgpValue = "DecomShutdownBgp";
        private const string DecomCablingValue = "DecomCabling";
        private const string DecomRemoveBgpConfigValue = "DecomRemoveBgpConfig";
        private const string DecomRemoveInterfaceConfigValue = "DecomRemoveInterfaceConfig";
        private const string DecomGraphCleanupValue = "DecomGraphCleanup";
        private const string DecomCompletedValue = "DecomCompleted";
        private const string DirectPeeringTypeUpdateMd5AuthKeyConfigurationValue = "DirectPeeringTypeUpdateMd5AuthKeyConfiguration";
        private const string BfdConfigurationValue = "BfdConfiguration";
        private const string DirectPeeringTypeUpdateBfdConfigValue = "DirectPeeringTypeUpdateBfdConfig";
        private const string DirectPeeringTypeUpdateMd5AuthKeyReadValue = "DirectPeeringTypeUpdateMd5AuthKeyRead";
        private const string PrefixListConfigurationValue = "PrefixListConfiguration";
        private const string WorkWindowCompletedValue = "WorkWindowCompleted";
        private const string FacilityMapValidationValue = "FacilityMapValidation";
        private const string DirectPeeringTypeUpdateReadMaxPrefixLimitValue = "DirectPeeringTypeUpdateReadMaxPrefixLimit";
        private const string DirectPeeringTypeUpdateUpdatePortWithNewIPValue = "DirectPeeringTypeUpdateUpdatePortWithNewIP";
        private const string DirectPeeringTypeUpdateConfigureLagWithNewIPValue = "DirectPeeringTypeUpdateConfigureLagWithNewIP";
        private const string DirectPeeringTypeUpdateCleanupOldIPsfromLAGValue = "DirectPeeringTypeUpdateCleanupOldIPsfromLAG";
        private const string MapsToMapsVoiceUpdateIfDescriptionValue = "MapsToMapsVoiceUpdateIfDescription";
        private const string MapsToMapsVoicePrefixPrecheckValue = "MapsToMapsVoicePrefixPrecheck";
        private const string MapsToMapsVoiceUpdateLAGAclValue = "MapsToMapsVoiceUpdateLAGAcl";
        private const string MapsToMapsVoiceConfigureBFDValue = "MapsToMapsVoiceConfigureBFD";
        private const string MapsToMapsVoiceFetchSessionStateValue = "MapsToMapsVoiceFetchSessionState";
        private const string MapsToMapsVoicePrefixPostCheckValue = "MapsToMapsVoicePrefixPostCheck";
        private const string BgpGroupChangeRocPendingApprovalValue = "BgpGroupChangeRocPendingApproval";
        private const string BgpGroupChangeWorkWindowValue = "BgpGroupChangeWorkWindow";
        private const string IPChangeWorkWindowValue = "IPChangeWorkWindow";
        private const string PendingASNChangeApplyDenyALLValue = "PendingASNChangeApplyDenyALL";
        private const string PendingASNChangeUpdateNeighborConfigValue = "PendingASNChangeUpdateNeighborConfig";
        private const string PendingASNChangeRemoveDenyALLValue = "PendingASNChangeRemoveDenyALL";
        private const string PendingASNChangeUpdateInterfaceDescriptionValue = "PendingASNChangeUpdateInterfaceDescription";
        private const string UpdateGraphForASNChangeValue = "UpdateGraphForASNChange";
        private const string UpdatePeeringForASNChangeValue = "UpdatePeeringForASNChange";
        private const string AddDenyAllRocPendingApprovalValue = "AddDenyAllRocPendingApproval";
        private const string AwaitApplyDenyAllValue = "AwaitApplyDenyAll";
        private const string IPChangeValidationValue = "IPChangeValidation";
        private const string IPChangeCleanupValue = "IPChangeCleanup";
        private const string ForcedIPChangeCleanupValue = "ForcedIpChangeCleanup";
        private const string ForcedIPChangeCleanupWithActiveSessionsValue = "ForcedIpChangeCleanupWithActiveSessions";
        private const string IPChangeInitiateValue = "IPChangeInitiate";
        private const string IPChangeLagValue = "IPChangeLag";
        private const string IPChangeBgpUpdateValue = "IPChangeBgpUpdate";
        private const string IPChangeMd5ConfigurationValue = "IPChangeMd5Configuration";
        private const string IPChangeApplyDenyAllValue = "IPChangeApplyDenyAll";
        private const string IPChangeRemoveDenyAllValue = "IPChangeRemoveDenyAll";
        private const string IPChangeValidateSessionsValue = "IPChangeValidateSessions";
        private const string ACLConfigurationValue = "ACLConfiguration";
        private const string PendingSpecialWorkItemValue = "PendingSpecialWorkItem";

        /// <summary> None. </summary>
        public static PreviousConnectionProvisioningState None { get; } = new PreviousConnectionProvisioningState(NoneValue);
        /// <summary> InterconnectionPendingApproval. </summary>
        public static PreviousConnectionProvisioningState InterconnectionPendingApproval { get; } = new PreviousConnectionProvisioningState(InterconnectionPendingApprovalValue);
        /// <summary> DeviceStateValidation. </summary>
        public static PreviousConnectionProvisioningState DeviceStateValidation { get; } = new PreviousConnectionProvisioningState(DeviceStateValidationValue);
        /// <summary> RocPendingApproval. </summary>
        public static PreviousConnectionProvisioningState RocPendingApproval { get; } = new PreviousConnectionProvisioningState(RocPendingApprovalValue);
        /// <summary> AllocatePorts. </summary>
        public static PreviousConnectionProvisioningState AllocatePorts { get; } = new PreviousConnectionProvisioningState(AllocatePortsValue);
        /// <summary> PortExhaustion. </summary>
        public static PreviousConnectionProvisioningState PortExhaustion { get; } = new PreviousConnectionProvisioningState(PortExhaustionValue);
        /// <summary> CheckInterfaces. </summary>
        public static PreviousConnectionProvisioningState CheckInterfaces { get; } = new PreviousConnectionProvisioningState(CheckInterfacesValue);
        /// <summary> EnableInterfaces. </summary>
        public static PreviousConnectionProvisioningState EnableInterfaces { get; } = new PreviousConnectionProvisioningState(EnableInterfacesValue);
        /// <summary> PhysicalConnectionSetup. </summary>
        public static PreviousConnectionProvisioningState PhysicalConnectionSetup { get; } = new PreviousConnectionProvisioningState(PhysicalConnectionSetupValue);
        /// <summary> AwaitPairUpgrade. </summary>
        public static PreviousConnectionProvisioningState AwaitPairUpgrade { get; } = new PreviousConnectionProvisioningState(AwaitPairUpgradeValue);
        /// <summary> LightCheck. </summary>
        public static PreviousConnectionProvisioningState LightCheck { get; } = new PreviousConnectionProvisioningState(LightCheckValue);
        /// <summary> TestPing. </summary>
        public static PreviousConnectionProvisioningState TestPing { get; } = new PreviousConnectionProvisioningState(TestPingValue);
        /// <summary> PingTestDone. </summary>
        public static PreviousConnectionProvisioningState PingTestDone { get; } = new PreviousConnectionProvisioningState(PingTestDoneValue);
        /// <summary> AwaitPeerIps. </summary>
        public static PreviousConnectionProvisioningState AwaitPeerIPs { get; } = new PreviousConnectionProvisioningState(AwaitPeerIPsValue);
        /// <summary> ValidateFltFirewall. </summary>
        public static PreviousConnectionProvisioningState ValidateFltFirewall { get; } = new PreviousConnectionProvisioningState(ValidateFltFirewallValue);
        /// <summary> LagSetup. </summary>
        public static PreviousConnectionProvisioningState LagSetup { get; } = new PreviousConnectionProvisioningState(LagSetupValue);
        /// <summary> AwaitLagCompletion. </summary>
        public static PreviousConnectionProvisioningState AwaitLagCompletion { get; } = new PreviousConnectionProvisioningState(AwaitLagCompletionValue);
        /// <summary> UpdateAddressesOnDevice. </summary>
        public static PreviousConnectionProvisioningState UpdateAddressesOnDevice { get; } = new PreviousConnectionProvisioningState(UpdateAddressesOnDeviceValue);
        /// <summary> FetchPrefixLimitFromPeeringDb. </summary>
        public static PreviousConnectionProvisioningState FetchPrefixLimitFromPeeringDb { get; } = new PreviousConnectionProvisioningState(FetchPrefixLimitFromPeeringDbValue);
        /// <summary> BgpSessionConfiguration. </summary>
        public static PreviousConnectionProvisioningState BgpSessionConfiguration { get; } = new PreviousConnectionProvisioningState(BgpSessionConfigurationValue);
        /// <summary> NpmBgpSessionConfiguration. </summary>
        public static PreviousConnectionProvisioningState NpmBgpSessionConfiguration { get; } = new PreviousConnectionProvisioningState(NpmBgpSessionConfigurationValue);
        /// <summary> Md5AuthKeyConfiguration. </summary>
        public static PreviousConnectionProvisioningState Md5AuthKeyConfiguration { get; } = new PreviousConnectionProvisioningState(Md5AuthKeyConfigurationValue);
        /// <summary> FetchSessionState. </summary>
        public static PreviousConnectionProvisioningState FetchSessionState { get; } = new PreviousConnectionProvisioningState(FetchSessionStateValue);
        /// <summary> RemoveNomonit. </summary>
        public static PreviousConnectionProvisioningState RemoveNomonit { get; } = new PreviousConnectionProvisioningState(RemoveNomonitValue);
        /// <summary> UpdateApipaPrefixInSitepro. </summary>
        public static PreviousConnectionProvisioningState UpdateApipaPrefixInSitepro { get; } = new PreviousConnectionProvisioningState(UpdateApipaPrefixInSiteproValue);
        /// <summary> ProvisioningCompleted. </summary>
        public static PreviousConnectionProvisioningState ProvisioningCompleted { get; } = new PreviousConnectionProvisioningState(ProvisioningCompletedValue);
        /// <summary> PendingMigration. </summary>
        public static PreviousConnectionProvisioningState PendingMigration { get; } = new PreviousConnectionProvisioningState(PendingMigrationValue);
        /// <summary> MigrationRequestPortAllocationRequested. </summary>
        public static PreviousConnectionProvisioningState MigrationRequestPortAllocationRequested { get; } = new PreviousConnectionProvisioningState(MigrationRequestPortAllocationRequestedValue);
        /// <summary> MigrationConfigValidation. </summary>
        public static PreviousConnectionProvisioningState MigrationConfigValidation { get; } = new PreviousConnectionProvisioningState(MigrationConfigValidationValue);
        /// <summary> PendingGlobalPolicyUpdate. </summary>
        public static PreviousConnectionProvisioningState PendingGlobalPolicyUpdate { get; } = new PreviousConnectionProvisioningState(PendingGlobalPolicyUpdateValue);
        /// <summary> MigrationSpecificConfigDrift. </summary>
        public static PreviousConnectionProvisioningState MigrationSpecificConfigDrift { get; } = new PreviousConnectionProvisioningState(MigrationSpecificConfigDriftValue);
        /// <summary> MigrationNpmError. </summary>
        public static PreviousConnectionProvisioningState MigrationNpmError { get; } = new PreviousConnectionProvisioningState(MigrationNpmErrorValue);
        /// <summary> PendingWorkWindow. </summary>
        public static PreviousConnectionProvisioningState PendingWorkWindow { get; } = new PreviousConnectionProvisioningState(PendingWorkWindowValue);
        /// <summary> ExternalBlocker. </summary>
        public static PreviousConnectionProvisioningState ExternalBlocker { get; } = new PreviousConnectionProvisioningState(ExternalBlockerValue);
        /// <summary> StaticMacConfiguration. </summary>
        public static PreviousConnectionProvisioningState StaticMacConfiguration { get; } = new PreviousConnectionProvisioningState(StaticMacConfigurationValue);
        /// <summary> UndoMigrationGraphCleanup. </summary>
        public static PreviousConnectionProvisioningState UndoMigrationGraphCleanup { get; } = new PreviousConnectionProvisioningState(UndoMigrationGraphCleanupValue);
        /// <summary> MigrationWorkWindow. </summary>
        public static PreviousConnectionProvisioningState MigrationWorkWindow { get; } = new PreviousConnectionProvisioningState(MigrationWorkWindowValue);
        /// <summary> PendingMigrationCompletion. </summary>
        public static PreviousConnectionProvisioningState PendingMigrationCompletion { get; } = new PreviousConnectionProvisioningState(PendingMigrationCompletionValue);
        /// <summary> MigrationCompletionRequested. </summary>
        public static PreviousConnectionProvisioningState MigrationCompletionRequested { get; } = new PreviousConnectionProvisioningState(MigrationCompletionRequestedValue);
        /// <summary> DirectPeeringTypeUpdateApproved. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateApproved { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateApprovedValue);
        /// <summary> DirectPeeringTypeUpdateRejected. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateRejected { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateRejectedValue);
        /// <summary> DirectPeeringTypeUpdateIfDescription. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateIfDescription { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateIfDescriptionValue);
        /// <summary> DirectPeeringTypeUpdatePrefixPrecheck. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdatePrefixPrecheck { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdatePrefixPrecheckValue);
        /// <summary> DirectPeeringTypeUpdateApplyDenyAll. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateApplyDenyAll { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateApplyDenyAllValue);
        /// <summary> DirectPeeringTypeUpdateDeleteSession. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateDeleteSession { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateDeleteSessionValue);
        /// <summary> DirectPeeringTypeUpdateLagAcl. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateLagAcl { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateLagAclValue);
        /// <summary> DirectPeeringTypeUpdateBgpConfig. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateBgpConfig { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateBgpConfigValue);
        /// <summary> DirectPeeringTypeUpdateFetchSessionState. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateFetchSessionState { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateFetchSessionStateValue);
        /// <summary> DirectPeeringTypeUpdateDeleteDenyAll. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateDeleteDenyAll { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateDeleteDenyAllValue);
        /// <summary> DirectPeeringTypeUpdatePrefixPostCheck. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdatePrefixPostCheck { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdatePrefixPostCheckValue);
        /// <summary> DecomRocPendingApproval. </summary>
        public static PreviousConnectionProvisioningState DecomRocPendingApproval { get; } = new PreviousConnectionProvisioningState(DecomRocPendingApprovalValue);
        /// <summary> DecomAddDenyAll. </summary>
        public static PreviousConnectionProvisioningState DecomAddDenyAll { get; } = new PreviousConnectionProvisioningState(DecomAddDenyAllValue);
        /// <summary> DecomValidatePrefix. </summary>
        public static PreviousConnectionProvisioningState DecomValidatePrefix { get; } = new PreviousConnectionProvisioningState(DecomValidatePrefixValue);
        /// <summary> DecomValidateTraffic. </summary>
        public static PreviousConnectionProvisioningState DecomValidateTraffic { get; } = new PreviousConnectionProvisioningState(DecomValidateTrafficValue);
        /// <summary> DecomShutInterfaces. </summary>
        public static PreviousConnectionProvisioningState DecomShutInterfaces { get; } = new PreviousConnectionProvisioningState(DecomShutInterfacesValue);
        /// <summary> DecomShutdownBgp. </summary>
        public static PreviousConnectionProvisioningState DecomShutdownBgp { get; } = new PreviousConnectionProvisioningState(DecomShutdownBgpValue);
        /// <summary> DecomCabling. </summary>
        public static PreviousConnectionProvisioningState DecomCabling { get; } = new PreviousConnectionProvisioningState(DecomCablingValue);
        /// <summary> DecomRemoveBgpConfig. </summary>
        public static PreviousConnectionProvisioningState DecomRemoveBgpConfig { get; } = new PreviousConnectionProvisioningState(DecomRemoveBgpConfigValue);
        /// <summary> DecomRemoveInterfaceConfig. </summary>
        public static PreviousConnectionProvisioningState DecomRemoveInterfaceConfig { get; } = new PreviousConnectionProvisioningState(DecomRemoveInterfaceConfigValue);
        /// <summary> DecomGraphCleanup. </summary>
        public static PreviousConnectionProvisioningState DecomGraphCleanup { get; } = new PreviousConnectionProvisioningState(DecomGraphCleanupValue);
        /// <summary> DecomCompleted. </summary>
        public static PreviousConnectionProvisioningState DecomCompleted { get; } = new PreviousConnectionProvisioningState(DecomCompletedValue);
        /// <summary> DirectPeeringTypeUpdateMd5AuthKeyConfiguration. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateMd5AuthKeyConfiguration { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateMd5AuthKeyConfigurationValue);
        /// <summary> BfdConfiguration. </summary>
        public static PreviousConnectionProvisioningState BfdConfiguration { get; } = new PreviousConnectionProvisioningState(BfdConfigurationValue);
        /// <summary> DirectPeeringTypeUpdateBfdConfig. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateBfdConfig { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateBfdConfigValue);
        /// <summary> DirectPeeringTypeUpdateMd5AuthKeyRead. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateMd5AuthKeyRead { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateMd5AuthKeyReadValue);
        /// <summary> PrefixListConfiguration. </summary>
        public static PreviousConnectionProvisioningState PrefixListConfiguration { get; } = new PreviousConnectionProvisioningState(PrefixListConfigurationValue);
        /// <summary> WorkWindowCompleted. </summary>
        public static PreviousConnectionProvisioningState WorkWindowCompleted { get; } = new PreviousConnectionProvisioningState(WorkWindowCompletedValue);
        /// <summary> FacilityMapValidation. </summary>
        public static PreviousConnectionProvisioningState FacilityMapValidation { get; } = new PreviousConnectionProvisioningState(FacilityMapValidationValue);
        /// <summary> DirectPeeringTypeUpdateReadMaxPrefixLimit. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateReadMaxPrefixLimit { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateReadMaxPrefixLimitValue);
        /// <summary> DirectPeeringTypeUpdateUpdatePortWithNewIP. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateUpdatePortWithNewIP { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateUpdatePortWithNewIPValue);
        /// <summary> DirectPeeringTypeUpdateConfigureLagWithNewIP. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateConfigureLagWithNewIP { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateConfigureLagWithNewIPValue);
        /// <summary> DirectPeeringTypeUpdateCleanupOldIPsfromLAG. </summary>
        public static PreviousConnectionProvisioningState DirectPeeringTypeUpdateCleanupOldIPsfromLAG { get; } = new PreviousConnectionProvisioningState(DirectPeeringTypeUpdateCleanupOldIPsfromLAGValue);
        /// <summary> MapsToMapsVoiceUpdateIfDescription. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoiceUpdateIfDescription { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoiceUpdateIfDescriptionValue);
        /// <summary> MapsToMapsVoicePrefixPrecheck. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoicePrefixPrecheck { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoicePrefixPrecheckValue);
        /// <summary> MapsToMapsVoiceUpdateLAGAcl. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoiceUpdateLAGAcl { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoiceUpdateLAGAclValue);
        /// <summary> MapsToMapsVoiceConfigureBFD. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoiceConfigureBFD { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoiceConfigureBFDValue);
        /// <summary> MapsToMapsVoiceFetchSessionState. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoiceFetchSessionState { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoiceFetchSessionStateValue);
        /// <summary> MapsToMapsVoicePrefixPostCheck. </summary>
        public static PreviousConnectionProvisioningState MapsToMapsVoicePrefixPostCheck { get; } = new PreviousConnectionProvisioningState(MapsToMapsVoicePrefixPostCheckValue);
        /// <summary> BgpGroupChangeRocPendingApproval. </summary>
        public static PreviousConnectionProvisioningState BgpGroupChangeRocPendingApproval { get; } = new PreviousConnectionProvisioningState(BgpGroupChangeRocPendingApprovalValue);
        /// <summary> BgpGroupChangeWorkWindow. </summary>
        public static PreviousConnectionProvisioningState BgpGroupChangeWorkWindow { get; } = new PreviousConnectionProvisioningState(BgpGroupChangeWorkWindowValue);
        /// <summary> IPChangeWorkWindow. </summary>
        public static PreviousConnectionProvisioningState IPChangeWorkWindow { get; } = new PreviousConnectionProvisioningState(IPChangeWorkWindowValue);
        /// <summary> PendingASNChangeApplyDenyALL. </summary>
        public static PreviousConnectionProvisioningState PendingASNChangeApplyDenyALL { get; } = new PreviousConnectionProvisioningState(PendingASNChangeApplyDenyALLValue);
        /// <summary> PendingASNChangeUpdateNeighborConfig. </summary>
        public static PreviousConnectionProvisioningState PendingASNChangeUpdateNeighborConfig { get; } = new PreviousConnectionProvisioningState(PendingASNChangeUpdateNeighborConfigValue);
        /// <summary> PendingASNChangeRemoveDenyALL. </summary>
        public static PreviousConnectionProvisioningState PendingASNChangeRemoveDenyALL { get; } = new PreviousConnectionProvisioningState(PendingASNChangeRemoveDenyALLValue);
        /// <summary> PendingASNChangeUpdateInterfaceDescription. </summary>
        public static PreviousConnectionProvisioningState PendingASNChangeUpdateInterfaceDescription { get; } = new PreviousConnectionProvisioningState(PendingASNChangeUpdateInterfaceDescriptionValue);
        /// <summary> UpdateGraphForASNChange. </summary>
        public static PreviousConnectionProvisioningState UpdateGraphForASNChange { get; } = new PreviousConnectionProvisioningState(UpdateGraphForASNChangeValue);
        /// <summary> UpdatePeeringForASNChange. </summary>
        public static PreviousConnectionProvisioningState UpdatePeeringForASNChange { get; } = new PreviousConnectionProvisioningState(UpdatePeeringForASNChangeValue);
        /// <summary> AddDenyAllRocPendingApproval. </summary>
        public static PreviousConnectionProvisioningState AddDenyAllRocPendingApproval { get; } = new PreviousConnectionProvisioningState(AddDenyAllRocPendingApprovalValue);
        /// <summary> AwaitApplyDenyAll. </summary>
        public static PreviousConnectionProvisioningState AwaitApplyDenyAll { get; } = new PreviousConnectionProvisioningState(AwaitApplyDenyAllValue);
        /// <summary> IPChangeValidation. </summary>
        public static PreviousConnectionProvisioningState IPChangeValidation { get; } = new PreviousConnectionProvisioningState(IPChangeValidationValue);
        /// <summary> IPChangeCleanup. </summary>
        public static PreviousConnectionProvisioningState IPChangeCleanup { get; } = new PreviousConnectionProvisioningState(IPChangeCleanupValue);
        /// <summary> ForcedIpChangeCleanup. </summary>
        public static PreviousConnectionProvisioningState ForcedIPChangeCleanup { get; } = new PreviousConnectionProvisioningState(ForcedIPChangeCleanupValue);
        /// <summary> ForcedIpChangeCleanupWithActiveSessions. </summary>
        public static PreviousConnectionProvisioningState ForcedIPChangeCleanupWithActiveSessions { get; } = new PreviousConnectionProvisioningState(ForcedIPChangeCleanupWithActiveSessionsValue);
        /// <summary> IPChangeInitiate. </summary>
        public static PreviousConnectionProvisioningState IPChangeInitiate { get; } = new PreviousConnectionProvisioningState(IPChangeInitiateValue);
        /// <summary> IPChangeLag. </summary>
        public static PreviousConnectionProvisioningState IPChangeLag { get; } = new PreviousConnectionProvisioningState(IPChangeLagValue);
        /// <summary> IPChangeBgpUpdate. </summary>
        public static PreviousConnectionProvisioningState IPChangeBgpUpdate { get; } = new PreviousConnectionProvisioningState(IPChangeBgpUpdateValue);
        /// <summary> IPChangeMd5Configuration. </summary>
        public static PreviousConnectionProvisioningState IPChangeMd5Configuration { get; } = new PreviousConnectionProvisioningState(IPChangeMd5ConfigurationValue);
        /// <summary> IPChangeApplyDenyAll. </summary>
        public static PreviousConnectionProvisioningState IPChangeApplyDenyAll { get; } = new PreviousConnectionProvisioningState(IPChangeApplyDenyAllValue);
        /// <summary> IPChangeRemoveDenyAll. </summary>
        public static PreviousConnectionProvisioningState IPChangeRemoveDenyAll { get; } = new PreviousConnectionProvisioningState(IPChangeRemoveDenyAllValue);
        /// <summary> IPChangeValidateSessions. </summary>
        public static PreviousConnectionProvisioningState IPChangeValidateSessions { get; } = new PreviousConnectionProvisioningState(IPChangeValidateSessionsValue);
        /// <summary> ACLConfiguration. </summary>
        public static PreviousConnectionProvisioningState ACLConfiguration { get; } = new PreviousConnectionProvisioningState(ACLConfigurationValue);
        /// <summary> PendingSpecialWorkItem. </summary>
        public static PreviousConnectionProvisioningState PendingSpecialWorkItem { get; } = new PreviousConnectionProvisioningState(PendingSpecialWorkItemValue);
        /// <summary> Determines if two <see cref="PreviousConnectionProvisioningState"/> values are the same. </summary>
        public static bool operator ==(PreviousConnectionProvisioningState left, PreviousConnectionProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PreviousConnectionProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(PreviousConnectionProvisioningState left, PreviousConnectionProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PreviousConnectionProvisioningState"/>. </summary>
        public static implicit operator PreviousConnectionProvisioningState(string value) => new PreviousConnectionProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PreviousConnectionProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PreviousConnectionProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
