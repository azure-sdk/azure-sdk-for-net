// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Peering.Models
{
    /// <summary> The properties that define an exchange connection. </summary>
    public partial class PeeringExchangeConnection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PeeringExchangeConnection"/>. </summary>
        public PeeringExchangeConnection()
        {
            MigrationWorkWindowBgpSessionSameDevice = new ChangeTrackingDictionary<string, Enum13>();
        }

        /// <summary> Initializes a new instance of <see cref="PeeringExchangeConnection"/>. </summary>
        /// <param name="peeringDBFacilityId"> The PeeringDB.com ID of the facility at which the connection has to be set up. </param>
        /// <param name="connectionState"> The state of the connection. </param>
        /// <param name="bgpSession"> The BGP session associated with the connection. </param>
        /// <param name="migrationWorkWindowBgpSessionSameDevice"> The old V4 BGP session associated with the connection during migration on the same device. Will be used for Work-Window validation. </param>
        /// <param name="lastFailureTimeUtc"> Gets or sets the time corresponding to when the connection was last set to ProvisioningFailed. </param>
        /// <param name="connectionIdentifier"> The unique identifier (GUID) for the connection. </param>
        /// <param name="errorMessage"> The error message related to the connection state, if any. </param>
        /// <param name="previousConnectionProvisioningState"> The previous connection provisioning state, used to resume provisioning after connection has been blocked. </param>
        /// <param name="migrationWorkWindowTracker"> Gets or sets the migration work window tracker. Format = "DateTime String Format|WorkWindowInitiator Email ID". </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PeeringExchangeConnection(int? peeringDBFacilityId, PeeringConnectionState? connectionState, PeeringBgpSession bgpSession, IDictionary<string, Enum13> migrationWorkWindowBgpSessionSameDevice, DateTimeOffset? lastFailureTimeUtc, Guid? connectionIdentifier, string errorMessage, PreviousConnectionProvisioningState? previousConnectionProvisioningState, string migrationWorkWindowTracker, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PeeringDBFacilityId = peeringDBFacilityId;
            ConnectionState = connectionState;
            BgpSession = bgpSession;
            MigrationWorkWindowBgpSessionSameDevice = migrationWorkWindowBgpSessionSameDevice;
            LastFailureTimeUtc = lastFailureTimeUtc;
            ConnectionIdentifier = connectionIdentifier;
            ErrorMessage = errorMessage;
            PreviousConnectionProvisioningState = previousConnectionProvisioningState;
            MigrationWorkWindowTracker = migrationWorkWindowTracker;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The PeeringDB.com ID of the facility at which the connection has to be set up. </summary>
        public int? PeeringDBFacilityId { get; set; }
        /// <summary> The state of the connection. </summary>
        public PeeringConnectionState? ConnectionState { get; }
        /// <summary> The BGP session associated with the connection. </summary>
        public PeeringBgpSession BgpSession { get; set; }
        /// <summary> The old V4 BGP session associated with the connection during migration on the same device. Will be used for Work-Window validation. </summary>
        public IDictionary<string, Enum13> MigrationWorkWindowBgpSessionSameDevice { get; }
        /// <summary> Gets or sets the time corresponding to when the connection was last set to ProvisioningFailed. </summary>
        public DateTimeOffset? LastFailureTimeUtc { get; set; }
        /// <summary> The unique identifier (GUID) for the connection. </summary>
        public Guid? ConnectionIdentifier { get; set; }
        /// <summary> The error message related to the connection state, if any. </summary>
        public string ErrorMessage { get; }
        /// <summary> The previous connection provisioning state, used to resume provisioning after connection has been blocked. </summary>
        public PreviousConnectionProvisioningState? PreviousConnectionProvisioningState { get; set; }
        /// <summary> Gets or sets the migration work window tracker. Format = "DateTime String Format|WorkWindowInitiator Email ID". </summary>
        public string MigrationWorkWindowTracker { get; set; }
    }
}
