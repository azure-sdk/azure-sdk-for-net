// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform.Samples
{
    public partial class Sample_DevToolPortalResource
    {
        // DevToolPortals_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DevToolPortalsGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/DevToolPortals_Get.json
            // this example is just showing the usage of "DevToolPortals_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DevToolPortalResource created on azure
            // for more information of creating DevToolPortalResource, please refer to the document of DevToolPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string devToolPortalName = "default";
            ResourceIdentifier devToolPortalResourceId = DevToolPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, devToolPortalName);
            DevToolPortalResource devToolPortalResource = client.GetDevToolPortalResource(devToolPortalResourceId);

            // invoke the operation
            DevToolPortalResource result = await devToolPortalResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DevToolPortalResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DevToolPortals_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DevToolPortalsCreateOrUpdate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/DevToolPortals_CreateOrUpdate.json
            // this example is just showing the usage of "DevToolPortals_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DevToolPortalResource created on azure
            // for more information of creating DevToolPortalResource, please refer to the document of DevToolPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string devToolPortalName = "default";
            ResourceIdentifier devToolPortalResourceId = DevToolPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, devToolPortalName);
            DevToolPortalResource devToolPortalResource = client.GetDevToolPortalResource(devToolPortalResourceId);

            // invoke the operation
            DevToolPortalResourceData data = new DevToolPortalResourceData()
            {
                Properties = new DevToolPortalProperties()
                {
                    Public = true,
                    SsoProperties = new DevToolPortalSsoProperties()
                    {
                        Scopes =
{
"openid"
},
                        ClientId = "00000000-0000-0000-0000-000000000000",
                        ClientSecret = "xxxxx",
                        MetadataUri = new Uri("https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/v2.0/.well-known/openid-configuration"),
                    },
                    Features = new DevToolPortalFeatureSettings()
                    {
                        ApplicationAccelerator = new DevToolPortalFeatureDetail()
                        {
                            State = DevToolPortalFeatureState.Enabled,
                        },
                        ApplicationLiveView = new DevToolPortalFeatureDetail()
                        {
                            State = DevToolPortalFeatureState.Enabled,
                        },
                    },
                },
            };
            ArmOperation<DevToolPortalResource> lro = await devToolPortalResource.UpdateAsync(WaitUntil.Completed, data);
            DevToolPortalResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DevToolPortalResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DevToolPortals_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DevToolPortalsDelete()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/DevToolPortal_Delete.json
            // this example is just showing the usage of "DevToolPortals_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DevToolPortalResource created on azure
            // for more information of creating DevToolPortalResource, please refer to the document of DevToolPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string devToolPortalName = "default";
            ResourceIdentifier devToolPortalResourceId = DevToolPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, devToolPortalName);
            DevToolPortalResource devToolPortalResource = client.GetDevToolPortalResource(devToolPortalResourceId);

            // invoke the operation
            await devToolPortalResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
