// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform.Samples
{
    public partial class Sample_CustomizedAcceleratorResource
    {
        // CustomizedAccelerators_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CustomizedAcceleratorsGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/CustomizedAccelerators_Get.json
            // this example is just showing the usage of "CustomizedAccelerators_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomizedAcceleratorResource created on azure
            // for more information of creating CustomizedAcceleratorResource, please refer to the document of CustomizedAcceleratorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string applicationAcceleratorName = "default";
            string customizedAcceleratorName = "acc-name";
            ResourceIdentifier customizedAcceleratorResourceId = CustomizedAcceleratorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
            CustomizedAcceleratorResource customizedAcceleratorResource = client.GetCustomizedAcceleratorResource(customizedAcceleratorResourceId);

            // invoke the operation
            CustomizedAcceleratorResource result = await customizedAcceleratorResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CustomizedAcceleratorResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CustomizedAccelerators_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CustomizedAcceleratorsCreateOrUpdate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/CustomizedAccelerators_CreateOrUpdate.json
            // this example is just showing the usage of "CustomizedAccelerators_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomizedAcceleratorResource created on azure
            // for more information of creating CustomizedAcceleratorResource, please refer to the document of CustomizedAcceleratorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string applicationAcceleratorName = "default";
            string customizedAcceleratorName = "acc-name";
            ResourceIdentifier customizedAcceleratorResourceId = CustomizedAcceleratorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
            CustomizedAcceleratorResource customizedAcceleratorResource = client.GetCustomizedAcceleratorResource(customizedAcceleratorResourceId);

            // invoke the operation
            CustomizedAcceleratorResourceData data = new CustomizedAcceleratorResourceData()
            {
                Properties = new CustomizedAcceleratorProperties(new AcceleratorGitRepository(new Uri("git-url"), new AcceleratorSshSetting()
                {
                    HostKey = "git-auth-hostkey",
                    HostKeyAlgorithm = "git-auth-algorithm",
                    PrivateKey = "git-auth-privatekey",
                })
                {
                    IntervalInSeconds = 70,
                    Branch = "git-branch",
                    Commit = "12345",
                    GitTag = "git-tag",
                })
                {
                    DisplayName = "acc-name",
                    Description = "acc-desc",
                    IconUri = new Uri("acc-icon"),
                    AcceleratorTags =
{
"tag-a","tag-b"
},
                },
                Sku = new AppPlatformSku()
                {
                    Name = "E0",
                    Tier = "Enterprise",
                    Capacity = 2,
                },
            };
            ArmOperation<CustomizedAcceleratorResource> lro = await customizedAcceleratorResource.UpdateAsync(WaitUntil.Completed, data);
            CustomizedAcceleratorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CustomizedAcceleratorResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CustomizedAccelerators_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CustomizedAcceleratorsDelete()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/CustomizedAccelerators_Delete.json
            // this example is just showing the usage of "CustomizedAccelerators_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomizedAcceleratorResource created on azure
            // for more information of creating CustomizedAcceleratorResource, please refer to the document of CustomizedAcceleratorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string applicationAcceleratorName = "default";
            string customizedAcceleratorName = "acc-name";
            ResourceIdentifier customizedAcceleratorResourceId = CustomizedAcceleratorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
            CustomizedAcceleratorResource customizedAcceleratorResource = client.GetCustomizedAcceleratorResource(customizedAcceleratorResourceId);

            // invoke the operation
            await customizedAcceleratorResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // CustomizedAccelerators_Validate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Validate_CustomizedAcceleratorsValidate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2023-12-01/examples/CustomizedAccelerators_Validate.json
            // this example is just showing the usage of "CustomizedAccelerators_Validate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CustomizedAcceleratorResource created on azure
            // for more information of creating CustomizedAcceleratorResource, please refer to the document of CustomizedAcceleratorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string applicationAcceleratorName = "default";
            string customizedAcceleratorName = "acc-name";
            ResourceIdentifier customizedAcceleratorResourceId = CustomizedAcceleratorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName);
            CustomizedAcceleratorResource customizedAcceleratorResource = client.GetCustomizedAcceleratorResource(customizedAcceleratorResourceId);

            // invoke the operation
            CustomizedAcceleratorProperties properties = new CustomizedAcceleratorProperties(new AcceleratorGitRepository(new Uri("git-url"), new AcceleratorSshSetting()
            {
                HostKey = "git-auth-hostkey",
                HostKeyAlgorithm = "git-auth-algorithm",
                PrivateKey = "git-auth-privatekey",
            })
            {
                IntervalInSeconds = 70,
                Branch = "git-branch",
                Commit = "12345",
                GitTag = "git-tag",
            })
            {
                DisplayName = "acc-name",
                Description = "acc-desc",
                IconUri = new Uri("acc-icon"),
                AcceleratorTags =
{
"tag-a","tag-b"
},
            };
            ArmOperation<CustomizedAcceleratorValidateResult> lro = await customizedAcceleratorResource.ValidateAsync(WaitUntil.Completed, properties);
            CustomizedAcceleratorValidateResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
