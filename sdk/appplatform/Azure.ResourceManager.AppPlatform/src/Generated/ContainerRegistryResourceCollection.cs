// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.AppPlatform
{
    /// <summary>
    /// A class representing a collection of <see cref="ContainerRegistryResource" /> and their operations.
    /// Each <see cref="ContainerRegistryResource" /> in the collection will belong to the same instance of <see cref="AppPlatformServiceResource" />.
    /// To get a <see cref="ContainerRegistryResourceCollection" /> instance call the GetContainerRegistryResources method from an instance of <see cref="AppPlatformServiceResource" />.
    /// </summary>
    public partial class ContainerRegistryResourceCollection : ArmCollection, IEnumerable<ContainerRegistryResource>, IAsyncEnumerable<ContainerRegistryResource>
    {
        private readonly ClientDiagnostics _containerRegistryResourceContainerRegistriesClientDiagnostics;
        private readonly ContainerRegistriesRestOperations _containerRegistryResourceContainerRegistriesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ContainerRegistryResourceCollection"/> class for mocking. </summary>
        protected ContainerRegistryResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ContainerRegistryResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ContainerRegistryResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _containerRegistryResourceContainerRegistriesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppPlatform", ContainerRegistryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ContainerRegistryResource.ResourceType, out string containerRegistryResourceContainerRegistriesApiVersion);
            _containerRegistryResourceContainerRegistriesRestClient = new ContainerRegistriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, containerRegistryResourceContainerRegistriesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != AppPlatformServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, AppPlatformServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update container registry resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="data"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ContainerRegistryResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string containerRegistryName, ContainerRegistryResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _containerRegistryResourceContainerRegistriesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, data, cancellationToken).ConfigureAwait(false);
                var operation = new AppPlatformArmOperation<ContainerRegistryResource>(new ContainerRegistryResourceOperationSource(Client), _containerRegistryResourceContainerRegistriesClientDiagnostics, Pipeline, _containerRegistryResourceContainerRegistriesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update container registry resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="data"> Parameters for the create or update operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ContainerRegistryResource> CreateOrUpdate(WaitUntil waitUntil, string containerRegistryName, ContainerRegistryResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _containerRegistryResourceContainerRegistriesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, data, cancellationToken);
                var operation = new AppPlatformArmOperation<ContainerRegistryResource>(new ContainerRegistryResourceOperationSource(Client), _containerRegistryResourceContainerRegistriesClientDiagnostics, Pipeline, _containerRegistryResourceContainerRegistriesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the container registries resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> is null. </exception>
        public virtual async Task<Response<ContainerRegistryResource>> GetAsync(string containerRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _containerRegistryResourceContainerRegistriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContainerRegistryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the container registries resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> is null. </exception>
        public virtual Response<ContainerRegistryResource> Get(string containerRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _containerRegistryResourceContainerRegistriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContainerRegistryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List container registries resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerRegistryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerRegistryResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _containerRegistryResourceContainerRegistriesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _containerRegistryResourceContainerRegistriesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ContainerRegistryResource(Client, ContainerRegistryResourceData.DeserializeContainerRegistryResourceData(e)), _containerRegistryResourceContainerRegistriesClientDiagnostics, Pipeline, "ContainerRegistryResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List container registries resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerRegistryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerRegistryResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _containerRegistryResourceContainerRegistriesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _containerRegistryResourceContainerRegistriesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ContainerRegistryResource(Client, ContainerRegistryResourceData.DeserializeContainerRegistryResourceData(e)), _containerRegistryResourceContainerRegistriesClientDiagnostics, Pipeline, "ContainerRegistryResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string containerRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _containerRegistryResourceContainerRegistriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ContainerRegistries_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="containerRegistryName"> The name of the container registry. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="containerRegistryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="containerRegistryName"/> is null. </exception>
        public virtual Response<bool> Exists(string containerRegistryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerRegistryName, nameof(containerRegistryName));

            using var scope = _containerRegistryResourceContainerRegistriesClientDiagnostics.CreateScope("ContainerRegistryResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _containerRegistryResourceContainerRegistriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, containerRegistryName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ContainerRegistryResource> IEnumerable<ContainerRegistryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ContainerRegistryResource> IAsyncEnumerable<ContainerRegistryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
