// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppPlatform.Models
{
    public partial class AcceleratorGitRepository : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Uri.AbsoluteUri);
            if (Optional.IsDefined(IntervalInSeconds))
            {
                writer.WritePropertyName("intervalInSeconds"u8);
                writer.WriteNumberValue(IntervalInSeconds.Value);
            }
            if (Optional.IsDefined(Branch))
            {
                writer.WritePropertyName("branch"u8);
                writer.WriteStringValue(Branch);
            }
            if (Optional.IsDefined(Commit))
            {
                writer.WritePropertyName("commit"u8);
                writer.WriteStringValue(Commit);
            }
            if (Optional.IsDefined(GitTag))
            {
                writer.WritePropertyName("gitTag"u8);
                writer.WriteStringValue(GitTag);
            }
            writer.WritePropertyName("authSetting"u8);
            writer.WriteObjectValue(AuthSetting);
            writer.WriteEndObject();
        }

        internal static AcceleratorGitRepository DeserializeAcceleratorGitRepository(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri uri = default;
            Optional<int> intervalInSeconds = default;
            Optional<string> branch = default;
            Optional<string> commit = default;
            Optional<string> gitTag = default;
            AcceleratorAuthSetting authSetting = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    uri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("intervalInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("branch"u8))
                {
                    branch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commit"u8))
                {
                    commit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gitTag"u8))
                {
                    gitTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authSetting"u8))
                {
                    authSetting = AcceleratorAuthSetting.DeserializeAcceleratorAuthSetting(property.Value);
                    continue;
                }
            }
            return new AcceleratorGitRepository(uri, Optional.ToNullable(intervalInSeconds), branch.Value, commit.Value, gitTag.Value, authSetting);
        }
    }
}
