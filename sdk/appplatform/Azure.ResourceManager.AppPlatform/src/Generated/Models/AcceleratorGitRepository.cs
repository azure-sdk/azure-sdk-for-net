// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> The AcceleratorGitRepository. </summary>
    public partial class AcceleratorGitRepository
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AcceleratorGitRepository"/>. </summary>
        /// <param name="uri"> Git repository URL for the accelerator. </param>
        /// <param name="authSetting">
        /// Properties of the auth setting payload.
        /// Please note <see cref="AcceleratorAuthSetting"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AcceleratorBasicAuthSetting"/>, <see cref="AcceleratorPublicSetting"/> and <see cref="AcceleratorSshSetting"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> or <paramref name="authSetting"/> is null. </exception>
        public AcceleratorGitRepository(Uri uri, AcceleratorAuthSetting authSetting)
        {
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }
            if (authSetting == null)
            {
                throw new ArgumentNullException(nameof(authSetting));
            }

            Uri = uri;
            AuthSetting = authSetting;
        }

        /// <summary> Initializes a new instance of <see cref="AcceleratorGitRepository"/>. </summary>
        /// <param name="uri"> Git repository URL for the accelerator. </param>
        /// <param name="intervalInSeconds"> Interval for checking for updates to Git or image repository. </param>
        /// <param name="branch"> Git repository branch to be used. </param>
        /// <param name="commit"> Git repository commit to be used. </param>
        /// <param name="gitTag"> Git repository tag to be used. </param>
        /// <param name="authSetting">
        /// Properties of the auth setting payload.
        /// Please note <see cref="AcceleratorAuthSetting"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AcceleratorBasicAuthSetting"/>, <see cref="AcceleratorPublicSetting"/> and <see cref="AcceleratorSshSetting"/>.
        /// </param>
        /// <param name="subPath"> Folder path inside the git repository to consider as the root of the accelerator or fragment. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AcceleratorGitRepository(Uri uri, int? intervalInSeconds, string branch, string commit, string gitTag, AcceleratorAuthSetting authSetting, string subPath, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Uri = uri;
            IntervalInSeconds = intervalInSeconds;
            Branch = branch;
            Commit = commit;
            GitTag = gitTag;
            AuthSetting = authSetting;
            SubPath = subPath;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AcceleratorGitRepository"/> for deserialization. </summary>
        internal AcceleratorGitRepository()
        {
        }

        /// <summary> Git repository URL for the accelerator. </summary>
        public Uri Uri { get; set; }
        /// <summary> Interval for checking for updates to Git or image repository. </summary>
        public int? IntervalInSeconds { get; set; }
        /// <summary> Git repository branch to be used. </summary>
        public string Branch { get; set; }
        /// <summary> Git repository commit to be used. </summary>
        public string Commit { get; set; }
        /// <summary> Git repository tag to be used. </summary>
        public string GitTag { get; set; }
        /// <summary>
        /// Properties of the auth setting payload.
        /// Please note <see cref="AcceleratorAuthSetting"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AcceleratorBasicAuthSetting"/>, <see cref="AcceleratorPublicSetting"/> and <see cref="AcceleratorSshSetting"/>.
        /// </summary>
        public AcceleratorAuthSetting AuthSetting { get; set; }
        /// <summary> Folder path inside the git repository to consider as the root of the accelerator or fragment. </summary>
        public string SubPath { get; set; }
    }
}
