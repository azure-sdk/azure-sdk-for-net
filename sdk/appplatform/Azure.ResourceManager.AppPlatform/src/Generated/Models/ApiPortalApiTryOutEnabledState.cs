// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> Indicates whether the API try-out feature is enabled or disabled. When enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users cannot try out the API. </summary>
    public readonly partial struct ApiPortalApiTryOutEnabledState : IEquatable<ApiPortalApiTryOutEnabledState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApiPortalApiTryOutEnabledState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApiPortalApiTryOutEnabledState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> Enabled. </summary>
        public static ApiPortalApiTryOutEnabledState Enabled { get; } = new ApiPortalApiTryOutEnabledState(EnabledValue);
        /// <summary> Disabled. </summary>
        public static ApiPortalApiTryOutEnabledState Disabled { get; } = new ApiPortalApiTryOutEnabledState(DisabledValue);
        /// <summary> Determines if two <see cref="ApiPortalApiTryOutEnabledState"/> values are the same. </summary>
        public static bool operator ==(ApiPortalApiTryOutEnabledState left, ApiPortalApiTryOutEnabledState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApiPortalApiTryOutEnabledState"/> values are not the same. </summary>
        public static bool operator !=(ApiPortalApiTryOutEnabledState left, ApiPortalApiTryOutEnabledState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApiPortalApiTryOutEnabledState"/>. </summary>
        public static implicit operator ApiPortalApiTryOutEnabledState(string value) => new ApiPortalApiTryOutEnabledState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApiPortalApiTryOutEnabledState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApiPortalApiTryOutEnabledState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
