// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    public partial class MultivariateDiagnosticDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ModelState))
            {
                writer.WritePropertyName("modelState"u8);
                writer.WriteObjectValue(ModelState);
            }
            if (Optional.IsCollectionDefined(VariableStates))
            {
                writer.WritePropertyName("variableStates"u8);
                writer.WriteStartArray();
                foreach (var item in VariableStates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MultivariateDiagnosticDetails DeserializeMultivariateDiagnosticDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<MultivariateModelState> modelState = default;
            Optional<IList<MultivariateVariableState>> variableStates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("modelState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    modelState = MultivariateModelState.DeserializeMultivariateModelState(property.Value);
                    continue;
                }
                if (property.NameEquals("variableStates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MultivariateVariableState> array = new List<MultivariateVariableState>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MultivariateVariableState.DeserializeMultivariateVariableState(item));
                    }
                    variableStates = array;
                    continue;
                }
            }
            return new MultivariateDiagnosticDetails(modelState.Value, Optional.ToList(variableStates));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MultivariateDiagnosticDetails FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMultivariateDiagnosticDetails(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
