// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_FaceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_DetectFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.DetectFromUrl(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_DetectFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.DetectFromUrlAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_DetectFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = client.DetectFromUrl(new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_DetectFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectFromUrlAsync(new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_DetectFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.DetectFromUrl(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_DetectFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.DetectFromUrlAsync(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_DetectFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = client.DetectFromUrl(new Uri("http://localhost:3000"), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_DetectFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectFromUrlAsync(new Uri("http://localhost:3000"), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Detect_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Detect(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Detect_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.DetectAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Detect_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = client.Detect(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Detect_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Detect_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Detect(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Detect_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.DetectAsync(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
            Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
            Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Detect_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = client.Detect(BinaryData.FromObjectAsJson(new object()), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Detect_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectAsync(BinaryData.FromObjectAsJson(new object()), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = client.FindSimilar(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = await client.FindSimilarAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar("<faceId>", new string[] { "<faceIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync("<faceId>", new string[] { "<faceIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = client.FindSimilar(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = await client.FindSimilarAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilar_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar("<faceId>", new string[] { "<faceIds>" }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilar_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync("<faceId>", new string[] { "<faceIds>" }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_FindSimilarFromLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_IdentifyFromDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "<faceId1>",
                faceId2 = "<faceId2>",
            });
            Response response = client.VerifyFaceToFace(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "<faceId1>",
                faceId2 = "<faceId2>",
            });
            Response response = await client.VerifyFaceToFaceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFaceToFace("<faceId1>", "<faceId2>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync("<faceId1>", "<faceId2>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "<faceId1>",
                faceId2 = "<faceId2>",
            });
            Response response = client.VerifyFaceToFace(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId1 = "<faceId1>",
                faceId2 = "<faceId2>",
            });
            Response response = await client.VerifyFaceToFaceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFaceToFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFaceToFace("<faceId1>", "<faceId2>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFaceToFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync("<faceId1>", "<faceId2>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_VerifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = client.Group(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = await client.GroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = client.Group(new string[] { "<faceIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = await client.GroupAsync(new string[] { "<faceIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = client.Group(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
            });
            Response response = await client.GroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
            Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceClient_Group_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = client.Group(new string[] { "<faceIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceClient_Group_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceClient client = new FaceClient(endpoint, credential);

            Response<FaceGroupingResult> response = await client.GroupAsync(new string[] { "<faceIds>" });
        }
    }
}
