// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_FaceAdministrationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateFaceList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateFaceListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            FaceList resource = new FaceList("<name>");
            Response response = client.CreateFaceList("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            FaceList resource = new FaceList("<name>");
            Response response = await client.CreateFaceListAsync("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.CreateFaceList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateFaceListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            FaceList resource = new FaceList("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = client.CreateFaceList("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            FaceList resource = new FaceList("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = await client.CreateFaceListAsync("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_DeleteFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteFaceList("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_DeleteFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteFaceListAsync("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_DeleteFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteFaceList("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_DeleteFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteFaceListAsync("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetFaceList("<faceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetFaceListAsync("<faceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceList> response = client.GetFaceList("<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceList> response = await client.GetFaceListAsync("<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetFaceList("<faceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetFaceListAsync("<faceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceList> response = client.GetFaceList("<faceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceList> response = await client.GetFaceListAsync("<faceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_UpdateFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateFaceList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_UpdateFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateFaceListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_UpdateFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateFaceList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_UpdateFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceLists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetFaceLists(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceLists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetFaceListsAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceLists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceLists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceLists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetFaceLists(true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceLists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetFaceListsAsync(true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetFaceLists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<FaceListItem>> response = client.GetFaceLists(returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetFaceLists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<FaceListItem>> response = await client.GetFaceListsAsync(returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceListFaceFromUrl("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddFaceListFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceListFaceFromUrl("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddFaceListFaceFromUrl("<faceListId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddFaceListFaceFromUrlAsync("<faceListId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceListFace("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceListFaceAsync("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddFaceListFace("<faceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddFaceListFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceListFace("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceListFaceAsync("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceListFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddFaceListFace("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceListFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddFaceListFaceAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_DeleteFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteFaceListFace("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_DeleteFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteFaceListFaceAsync("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_DeleteFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteFaceListFace("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_DeleteFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteFaceListFaceAsync("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateLargeFaceList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargeFaceList resource = new LargeFaceList("<name>");
            Response response = client.CreateLargeFaceList("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargeFaceList resource = new LargeFaceList("<name>");
            Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.CreateLargeFaceList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargeFaceList resource = new LargeFaceList("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = client.CreateLargeFaceList("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargeFaceList resource = new LargeFaceList("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = await client.CreateLargeFaceListAsync("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_DeleteLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargeFaceList("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_DeleteLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargeFaceListAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_DeleteLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargeFaceList("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_DeleteLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargeFaceListAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceList("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceList("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListAsync("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceList> response = client.GetLargeFaceList("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceList> response = await client.GetLargeFaceListAsync("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_UpdateLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateLargeFaceList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_UpdateLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateLargeFaceListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_UpdateLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateLargeFaceList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_UpdateLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateLargeFaceListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceLists(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceLists("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLargeFaceLists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLargeFaceLists(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLargeFaceLists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetLargeFaceListsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetLargeFaceListTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargeFaceListTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetLargeFaceListTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargeFaceListFaceFromUrl("<largeFaceListId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargeFaceListFaceFromUrlAsync("<largeFaceListId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddLargeFaceListFace("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargeFaceListFace("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddLargeFaceListFace("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddLargeFaceListFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargeFaceListFace("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddLargeFaceListFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargeFaceListFaceAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteLargeFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteLargeFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteLargeFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteLargeFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceListFace> response = client.GetLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceListFace> response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceListFace> response = client.GetLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargeFaceListFace> response = await client.GetLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateLargeFaceListFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateLargeFaceListFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateLargeFaceListFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateLargeFaceListFace("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateLargeFaceListFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateLargeFaceListFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListFaces("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetLargeFaceListFaces("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargeFaceListFaces("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetLargeFaceListFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetLargeFaceListFaces("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetLargeFaceListFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetLargeFaceListFacesAsync("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreatePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePersonGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreatePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreatePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            PersonGroup resource = new PersonGroup("<name>");
            Response response = client.CreatePersonGroup("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreatePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            PersonGroup resource = new PersonGroup("<name>");
            Response response = await client.CreatePersonGroupAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreatePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.CreatePersonGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreatePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreatePersonGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreatePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            PersonGroup resource = new PersonGroup("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = client.CreatePersonGroup("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreatePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            PersonGroup resource = new PersonGroup("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = await client.CreatePersonGroupAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_DeletePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroup("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_DeletePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_DeletePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroup("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_DeletePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroup("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupAsync("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroup("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupAsync("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroup> response = client.GetPersonGroup("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroup> response = await client.GetPersonGroupAsync("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_UpdatePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePersonGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_UpdatePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_UpdatePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePersonGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_UpdatePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetPersonGroupTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetPersonGroupTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetPersonGroupTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetPersonGroupTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePersonGroupPerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonGroupPersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePersonGroupPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response<CreatePersonResult> response = client.CreatePersonGroupPerson("<personGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePersonGroupPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response<CreatePersonResult> response = await client.CreatePersonGroupPersonAsync("<personGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreatePersonGroupPerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreatePersonGroupPersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePersonGroupPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response<CreatePersonResult> response = client.CreatePersonGroupPerson("<personGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePersonGroupPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response<CreatePersonResult> response = await client.CreatePersonGroupPersonAsync("<personGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroupPerson("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupPersonAsync("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroupPerson("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupPersonAsync("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPerson("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonAsync("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPerson> response = client.GetPersonGroupPerson("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPerson> response = await client.GetPersonGroupPersonAsync("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPerson("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonAsync("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPerson> response = client.GetPersonGroupPerson("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPerson> response = await client.GetPersonGroupPersonAsync("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePersonGroupPerson("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonGroupPersonAsync("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePersonGroupPerson("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonGroupPersonAsync("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPersons("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonsAsync("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersonGroupPersons("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonGroupPersonsAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPersons("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonsAsync("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersonGroupPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersonGroupPersons("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersonGroupPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonGroupPersonsAsync("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", "<personId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", "<personId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddPersonGroupPersonFaceFromUrl("<personGroupId>", "<personId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceFromUrlAsync("<personGroupId>", "<personId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddPersonGroupPersonFace("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddPersonGroupPersonFace("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddPersonGroupPersonFace("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddPersonGroupPersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddPersonGroupPersonFace("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddPersonGroupPersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeletePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeletePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeletePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeletePersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeletePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeletePersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetPersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetPersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetPersonGroupPersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPersonFace> response = client.GetPersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetPersonGroupPersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPersonFace> response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetPersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetPersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetPersonGroupPersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPersonFace> response = client.GetPersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetPersonGroupPersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonGroupPersonFace> response = await client.GetPersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdatePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdatePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdatePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdatePersonGroupPersonFace("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdatePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonGroupPersonFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateLargePersonGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargePersonGroup resource = new LargePersonGroup("<name>");
            Response response = client.CreateLargePersonGroup("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargePersonGroup resource = new LargePersonGroup("<name>");
            Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = client.CreateLargePersonGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargePersonGroup resource = new LargePersonGroup("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = client.CreateLargePersonGroup("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            LargePersonGroup resource = new LargePersonGroup("<name>")
            {
                UserData = "<userData>",
                RecognitionModel = FaceRecognitionModel.Recognition01,
            };
            Response response = await client.CreateLargePersonGroupAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_DeleteLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroup("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_DeleteLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_DeleteLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroup("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_DeleteLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroup("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroup("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroup> response = client.GetLargePersonGroup("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_UpdateLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateLargePersonGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_UpdateLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateLargePersonGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_UpdateLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateLargePersonGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_UpdateLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateLargePersonGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetLargePersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = client.GetLargePersonGroupTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetLargePersonGroupTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<FaceCollectionTrainingStatus> response = await client.GetLargePersonGroupTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response<CreatePersonResult> response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>");
            Response<CreatePersonResult> response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response<CreatePersonResult> response = client.CreateLargePersonGroupPerson("<largePersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreateLargePersonGroupPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            UserDefinedFields userDefinedFields = new UserDefinedFields("<name>")
            {
                UserData = "<userData>",
            };
            Response<CreatePersonResult> response = await client.CreateLargePersonGroupPersonAsync("<largePersonGroupId>", userDefinedFields);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeleteLargePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroupPerson("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeleteLargePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeleteLargePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroupPerson("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeleteLargePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPerson("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPerson> response = client.GetLargePersonGroupPerson("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPerson> response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPerson("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPerson> response = client.GetLargePersonGroupPerson("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPerson> response = await client.GetLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdateLargePersonGroupPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateLargePersonGroupPerson("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdateLargePersonGroupPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdateLargePersonGroupPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateLargePersonGroupPerson("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdateLargePersonGroupPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateLargePersonGroupPersonAsync("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPersons("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetLargePersonGroupPersons("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPersons("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetLargePersonGroupPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetLargePersonGroupPersons("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetLargePersonGroupPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetLargePersonGroupPersonsAsync("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", "<personId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", "<personId>", new Uri("http://localhost:3000"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargePersonGroupPersonFaceFromUrl("<largePersonGroupId>", "<personId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceFromUrlAsync("<largePersonGroupId>", "<personId>", new Uri("http://localhost:3000"), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = client.AddLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddLargePersonGroupPersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<AddFaceResult> response = await client.AddLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: FaceDetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteLargePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteLargePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteLargePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.DeleteLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteLargePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.DeleteLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPersonFace> response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPersonFace> response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPersonFace> response = client.GetLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetLargePersonGroupPersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<LargePersonGroupPersonFace> response = await client.GetLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateLargePersonGroupPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateLargePersonGroupPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateLargePersonGroupPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateLargePersonGroupPersonFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateLargePersonGroupPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateLargePersonGroupPersonFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPerson("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonAsync("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryPerson> response = client.GetPerson("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPerson("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonAsync("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryPerson> response = client.GetPerson("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePerson("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonAsync("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersons(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersons("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPersons(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPersonsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroupReferences("<personId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupReferencesAsync("<personId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroupReferences("<personId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupReferencesAsync("<personId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListGroupReferenceResult> response = client.GetDynamicPersonGroupReferences("<personId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupReferences_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListGroupReferenceResult> response = await client.GetDynamicPersonGroupReferencesAsync("<personId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonFace("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonFaceAsync("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryFace> response = client.GetPersonFace("<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryFace> response = await client.GetPersonFaceAsync("<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonFace("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonFaceAsync("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryFace> response = client.GetPersonFace("<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<PersonDirectoryFace> response = await client.GetPersonFaceAsync("<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdatePersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePersonFace("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdatePersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePersonFaceAsync("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdatePersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdatePersonFace("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdatePersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonFaceAsync("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonFaces("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonFacesAsync("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListFaceResult> response = client.GetPersonFaces("<personId>", FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListFaceResult> response = await client.GetPersonFacesAsync("<personId>", FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetPersonFaces("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetPersonFacesAsync("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetPersonFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListFaceResult> response = client.GetPersonFaces("<personId>", FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetPersonFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListFaceResult> response = await client.GetPersonFacesAsync("<personId>", FaceRecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<DynamicPersonGroup> response = client.GetDynamicPersonGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<DynamicPersonGroup> response = await client.GetDynamicPersonGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroups(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroups("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetDynamicPersonGroups(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetDynamicPersonGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetDynamicPersonGroupsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListPersonResult> response = client.GetDynamicPersonGroupPersons("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_GetDynamicPersonGroupPersons_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Response<ListPersonResult> response = await client.GetDynamicPersonGroupPersonsAsync("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainLargeFaceList(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainLargeFaceListAsync(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainLargeFaceList(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainLargeFaceListAsync(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainPersonGroup(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainPersonGroupAsync(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainPersonGroup(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainPersonGroupAsync(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainLargePersonGroup(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainLargePersonGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceAdministrationClient_TrainLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.TrainLargePersonGroup(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceAdministrationClient_TrainLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.TrainLargePersonGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePerson(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePerson(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeletePersonFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePersonFace(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeletePersonFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeletePersonFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePersonFace(WaitUntil.Completed, "<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeletePersonFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, "<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeletePersonFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePersonFace(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeletePersonFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeletePersonFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeletePersonFace(WaitUntil.Completed, "<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeletePersonFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeletePersonFaceAsync(WaitUntil.Completed, "<personId>", FaceRecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = client.DeleteDynamicPersonGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceAdministrationClient client = new FaceAdministrationClient(endpoint, credential);

            Operation operation = await client.DeleteDynamicPersonGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }
    }
}
