// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.Face
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionFaceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Face.FaceDetectionResult"/>. </summary>
        /// <param name="faceId"> Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call. To return this, it requires 'returnFaceId' parameter to be true. </param>
        /// <param name="recognitionModel"> The 'recognitionModel' associated with this faceId. This is only returned when 'returnRecognitionModel' is explicitly set as true. </param>
        /// <param name="faceRectangle"> A rectangle area for the face location on image. </param>
        /// <param name="faceLandmarks"> An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires 'returnFaceLandmarks' parameter to be true. </param>
        /// <param name="faceAttributes"> Face attributes for detected face. </param>
        /// <returns> A new <see cref="Face.FaceDetectionResult"/> instance for mocking. </returns>
        public static FaceDetectionResult FaceDetectionResult(string faceId = null, FaceRecognitionModel? recognitionModel = null, FaceRectangle faceRectangle = null, FaceLandmarks faceLandmarks = null, FaceAttributes faceAttributes = null)
        {
            return new FaceDetectionResult(
                faceId,
                recognitionModel,
                faceRectangle,
                faceLandmarks,
                faceAttributes,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceRectangle"/>. </summary>
        /// <param name="top"> The distance from the top edge if the image to the top edge of the rectangle, in pixels. </param>
        /// <param name="left"> The distance from the left edge if the image to the left edge of the rectangle, in pixels. </param>
        /// <param name="width"> The width of the rectangle, in pixels. </param>
        /// <param name="height"> The height of the rectangle, in pixels. </param>
        /// <returns> A new <see cref="Face.FaceRectangle"/> instance for mocking. </returns>
        public static FaceRectangle FaceRectangle(int top = default, int left = default, int width = default, int height = default)
        {
            return new FaceRectangle(top, left, width, height, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceLandmarks"/>. </summary>
        /// <param name="pupilLeft"> The coordinates of the left eye pupil. </param>
        /// <param name="pupilRight"> The coordinates of the right eye pupil. </param>
        /// <param name="noseTip"> The coordinates of the nose tip. </param>
        /// <param name="mouthLeft"> The coordinates of the mouth left. </param>
        /// <param name="mouthRight"> The coordinates of the mouth right. </param>
        /// <param name="eyebrowLeftOuter"> The coordinates of the left eyebrow outer. </param>
        /// <param name="eyebrowLeftInner"> The coordinates of the left eyebrow inner. </param>
        /// <param name="eyeLeftOuter"> The coordinates of the left eye outer. </param>
        /// <param name="eyeLeftTop"> The coordinates of the left eye top. </param>
        /// <param name="eyeLeftBottom"> The coordinates of the left eye bottom. </param>
        /// <param name="eyeLeftInner"> The coordinates of the left eye inner. </param>
        /// <param name="eyebrowRightInner"> The coordinates of the right eyebrow inner. </param>
        /// <param name="eyebrowRightOuter"> The coordinates of the right eyebrow outer. </param>
        /// <param name="eyeRightInner"> The coordinates of the right eye inner. </param>
        /// <param name="eyeRightTop"> The coordinates of the right eye top. </param>
        /// <param name="eyeRightBottom"> The coordinates of the right eye bottom. </param>
        /// <param name="eyeRightOuter"> The coordinates of the right eye outer. </param>
        /// <param name="noseRootLeft"> The coordinates of the nose root left. </param>
        /// <param name="noseRootRight"> The coordinates of the nose root right. </param>
        /// <param name="noseLeftAlarTop"> The coordinates of the nose left alar top. </param>
        /// <param name="noseRightAlarTop"> The coordinates of the nose right alar top. </param>
        /// <param name="noseLeftAlarOutTip"> The coordinates of the nose left alar out tip. </param>
        /// <param name="noseRightAlarOutTip"> The coordinates of the nose right alar out tip. </param>
        /// <param name="upperLipTop"> The coordinates of the upper lip top. </param>
        /// <param name="upperLipBottom"> The coordinates of the upper lip bottom. </param>
        /// <param name="underLipTop"> The coordinates of the under lip top. </param>
        /// <param name="underLipBottom"> The coordinates of the under lip bottom. </param>
        /// <returns> A new <see cref="Face.FaceLandmarks"/> instance for mocking. </returns>
        public static FaceLandmarks FaceLandmarks(LandmarkCoordinate pupilLeft = null, LandmarkCoordinate pupilRight = null, LandmarkCoordinate noseTip = null, LandmarkCoordinate mouthLeft = null, LandmarkCoordinate mouthRight = null, LandmarkCoordinate eyebrowLeftOuter = null, LandmarkCoordinate eyebrowLeftInner = null, LandmarkCoordinate eyeLeftOuter = null, LandmarkCoordinate eyeLeftTop = null, LandmarkCoordinate eyeLeftBottom = null, LandmarkCoordinate eyeLeftInner = null, LandmarkCoordinate eyebrowRightInner = null, LandmarkCoordinate eyebrowRightOuter = null, LandmarkCoordinate eyeRightInner = null, LandmarkCoordinate eyeRightTop = null, LandmarkCoordinate eyeRightBottom = null, LandmarkCoordinate eyeRightOuter = null, LandmarkCoordinate noseRootLeft = null, LandmarkCoordinate noseRootRight = null, LandmarkCoordinate noseLeftAlarTop = null, LandmarkCoordinate noseRightAlarTop = null, LandmarkCoordinate noseLeftAlarOutTip = null, LandmarkCoordinate noseRightAlarOutTip = null, LandmarkCoordinate upperLipTop = null, LandmarkCoordinate upperLipBottom = null, LandmarkCoordinate underLipTop = null, LandmarkCoordinate underLipBottom = null)
        {
            return new FaceLandmarks(
                pupilLeft,
                pupilRight,
                noseTip,
                mouthLeft,
                mouthRight,
                eyebrowLeftOuter,
                eyebrowLeftInner,
                eyeLeftOuter,
                eyeLeftTop,
                eyeLeftBottom,
                eyeLeftInner,
                eyebrowRightInner,
                eyebrowRightOuter,
                eyeRightInner,
                eyeRightTop,
                eyeRightBottom,
                eyeRightOuter,
                noseRootLeft,
                noseRootRight,
                noseLeftAlarTop,
                noseRightAlarTop,
                noseLeftAlarOutTip,
                noseRightAlarOutTip,
                upperLipTop,
                upperLipBottom,
                underLipTop,
                underLipBottom,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LandmarkCoordinate"/>. </summary>
        /// <param name="x"> The horizontal component, in pixels. </param>
        /// <param name="y"> The vertical component, in pixels. </param>
        /// <returns> A new <see cref="Face.LandmarkCoordinate"/> instance for mocking. </returns>
        public static LandmarkCoordinate LandmarkCoordinate(float x = default, float y = default)
        {
            return new LandmarkCoordinate(x, y, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceAttributes"/>. </summary>
        /// <param name="age"> Age in years. </param>
        /// <param name="smile"> Smile intensity, a number between [0,1]. </param>
        /// <param name="facialHair"> Properties describing facial hair attributes. </param>
        /// <param name="glasses"> Glasses type if any of the face. </param>
        /// <param name="headPose"> 3-D roll/yaw/pitch angles for face direction. </param>
        /// <param name="hair"> Properties describing hair attributes. </param>
        /// <param name="occlusion"> Properties describing occlusions on a given face. </param>
        /// <param name="accessories"> Properties describing any accessories on a given face. </param>
        /// <param name="blur"> Properties describing any presence of blur within the image. </param>
        /// <param name="exposure"> Properties describing exposure level of the image. </param>
        /// <param name="noise"> Properties describing noise level of the image. </param>
        /// <param name="mask"> Properties describing the presence of a mask on a given face. </param>
        /// <param name="qualityForRecognition"> Properties describing the overall image quality regarding whether the image being used in the detection is of sufficient quality to attempt face recognition on. </param>
        /// <returns> A new <see cref="Face.FaceAttributes"/> instance for mocking. </returns>
        public static FaceAttributes FaceAttributes(float? age = null, float? smile = null, FacialHair facialHair = null, GlassesType? glasses = null, HeadPose headPose = null, HairProperties hair = null, OcclusionProperties occlusion = null, IEnumerable<AccessoryItem> accessories = null, BlurProperties blur = null, ExposureProperties exposure = null, NoiseProperties noise = null, MaskProperties mask = null, QualityForRecognition? qualityForRecognition = null)
        {
            accessories ??= new List<AccessoryItem>();

            return new FaceAttributes(
                age,
                smile,
                facialHair,
                glasses,
                headPose,
                hair,
                occlusion,
                accessories?.ToList(),
                blur,
                exposure,
                noise,
                mask,
                qualityForRecognition,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FacialHair"/>. </summary>
        /// <param name="moustache"> A number ranging from 0 to 1 indicating a level of confidence associated with a property. </param>
        /// <param name="beard"> A number ranging from 0 to 1 indicating a level of confidence associated with a property. </param>
        /// <param name="sideburns"> A number ranging from 0 to 1 indicating a level of confidence associated with a property. </param>
        /// <returns> A new <see cref="Face.FacialHair"/> instance for mocking. </returns>
        public static FacialHair FacialHair(float moustache = default, float beard = default, float sideburns = default)
        {
            return new FacialHair(moustache, beard, sideburns, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HeadPose"/>. </summary>
        /// <param name="pitch"> Value of angles. </param>
        /// <param name="roll"> Value of angles. </param>
        /// <param name="yaw"> Value of angles. </param>
        /// <returns> A new <see cref="Face.HeadPose"/> instance for mocking. </returns>
        public static HeadPose HeadPose(float pitch = default, float roll = default, float yaw = default)
        {
            return new HeadPose(pitch, roll, yaw, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HairProperties"/>. </summary>
        /// <param name="bald"> A number describing confidence level of whether the person is bald. </param>
        /// <param name="invisible"> A boolean value describing whether the hair is visible in the image. </param>
        /// <param name="hairColor"> An array of candidate colors and confidence level in the presence of each. </param>
        /// <returns> A new <see cref="Face.HairProperties"/> instance for mocking. </returns>
        public static HairProperties HairProperties(float bald = default, bool invisible = default, IEnumerable<HairColor> hairColor = null)
        {
            hairColor ??= new List<HairColor>();

            return new HairProperties(bald, invisible, hairColor?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.HairColor"/>. </summary>
        /// <param name="color"> Name of the hair color. </param>
        /// <param name="confidence"> Confidence level of the color. Range between [0,1]. </param>
        /// <returns> A new <see cref="Face.HairColor"/> instance for mocking. </returns>
        public static HairColor HairColor(HairColorType color = default, float confidence = default)
        {
            return new HairColor(color, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.OcclusionProperties"/>. </summary>
        /// <param name="foreheadOccluded"> A boolean value indicating whether forehead is occluded. </param>
        /// <param name="eyeOccluded"> A boolean value indicating whether eyes are occluded. </param>
        /// <param name="mouthOccluded"> A boolean value indicating whether the mouth is occluded. </param>
        /// <returns> A new <see cref="Face.OcclusionProperties"/> instance for mocking. </returns>
        public static OcclusionProperties OcclusionProperties(bool foreheadOccluded = default, bool eyeOccluded = default, bool mouthOccluded = default)
        {
            return new OcclusionProperties(foreheadOccluded, eyeOccluded, mouthOccluded, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AccessoryItem"/>. </summary>
        /// <param name="type"> Type of the accessory. </param>
        /// <param name="confidence"> Confidence level of the accessory type. Range between [0,1]. </param>
        /// <returns> A new <see cref="Face.AccessoryItem"/> instance for mocking. </returns>
        public static AccessoryItem AccessoryItem(AccessoryType type = default, float confidence = default)
        {
            return new AccessoryItem(type, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.BlurProperties"/>. </summary>
        /// <param name="blurLevel"> An enum value indicating level of blurriness. </param>
        /// <param name="value"> A number indicating level of blurriness ranging from 0 to 1. </param>
        /// <returns> A new <see cref="Face.BlurProperties"/> instance for mocking. </returns>
        public static BlurProperties BlurProperties(BlurLevel blurLevel = default, float value = default)
        {
            return new BlurProperties(blurLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ExposureProperties"/>. </summary>
        /// <param name="exposureLevel"> An enum value indicating level of exposure. </param>
        /// <param name="value"> A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. </param>
        /// <returns> A new <see cref="Face.ExposureProperties"/> instance for mocking. </returns>
        public static ExposureProperties ExposureProperties(ExposureLevel exposureLevel = default, float value = default)
        {
            return new ExposureProperties(exposureLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.NoiseProperties"/>. </summary>
        /// <param name="noiseLevel"> An enum value indicating level of noise. </param>
        /// <param name="value"> A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level. </param>
        /// <returns> A new <see cref="Face.NoiseProperties"/> instance for mocking. </returns>
        public static NoiseProperties NoiseProperties(NoiseLevel noiseLevel = default, float value = default)
        {
            return new NoiseProperties(noiseLevel, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.MaskProperties"/>. </summary>
        /// <param name="noseAndMouthCovered"> A boolean value indicating whether nose and mouth are covered. </param>
        /// <param name="type"> Type of the mask. </param>
        /// <returns> A new <see cref="Face.MaskProperties"/> instance for mocking. </returns>
        public static MaskProperties MaskProperties(bool noseAndMouthCovered = default, MaskType type = default)
        {
            return new MaskProperties(noseAndMouthCovered, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceFindSimilarResult"/>. </summary>
        /// <param name="confidence"> Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]. </param>
        /// <param name="faceId"> faceId of candidate face when find by faceIds. faceId is created by Face - Detect and will expire 24 hours after the detection call. </param>
        /// <param name="persistedFaceId"> persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire. </param>
        /// <returns> A new <see cref="Face.FaceFindSimilarResult"/> instance for mocking. </returns>
        public static FaceFindSimilarResult FaceFindSimilarResult(float confidence = default, string faceId = null, string persistedFaceId = null)
        {
            return new FaceFindSimilarResult(confidence, faceId, persistedFaceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceIdentificationResult"/>. </summary>
        /// <param name="faceId"> faceId of the query face. </param>
        /// <param name="candidates"> Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </param>
        /// <returns> A new <see cref="Face.FaceIdentificationResult"/> instance for mocking. </returns>
        public static FaceIdentificationResult FaceIdentificationResult(string faceId = null, IEnumerable<FaceIdentificationCandidate> candidates = null)
        {
            candidates ??= new List<FaceIdentificationCandidate>();

            return new FaceIdentificationResult(faceId, candidates?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceIdentificationCandidate"/>. </summary>
        /// <param name="personId"> personId of candidate person. </param>
        /// <param name="confidence"> Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1]. </param>
        /// <returns> A new <see cref="Face.FaceIdentificationCandidate"/> instance for mocking. </returns>
        public static FaceIdentificationCandidate FaceIdentificationCandidate(string personId = null, float confidence = default)
        {
            return new FaceIdentificationCandidate(personId, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceVerificationResult"/>. </summary>
        /// <param name="isIdentical"> True if the two faces belong to the same person or the face belongs to the person, otherwise false. </param>
        /// <param name="confidence"> A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override 'isIdentical' and fine-tune the result on their own data. </param>
        /// <returns> A new <see cref="Face.FaceVerificationResult"/> instance for mocking. </returns>
        public static FaceVerificationResult FaceVerificationResult(bool isIdentical = default, float confidence = default)
        {
            return new FaceVerificationResult(isIdentical, confidence, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceGroupingResult"/>. </summary>
        /// <param name="groups"> A partition of the original faces based on face similarity. Groups are ranked by number of faces. </param>
        /// <param name="messyGroup"> Face ids array of faces that cannot find any similar faces from original faces. </param>
        /// <returns> A new <see cref="Face.FaceGroupingResult"/> instance for mocking. </returns>
        public static FaceGroupingResult FaceGroupingResult(IEnumerable<IList<string>> groups = null, IEnumerable<string> messyGroup = null)
        {
            groups ??= new List<IList<string>>();
            messyGroup ??= new List<string>();

            return new FaceGroupingResult(groups?.ToList(), messyGroup?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceList"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        /// <param name="faceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <param name="persistedFaces"> Face ids of registered faces in the face list. </param>
        /// <returns> A new <see cref="Face.FaceList"/> instance for mocking. </returns>
        public static FaceList FaceList(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string faceListId = null, IEnumerable<FaceListFace> persistedFaces = null)
        {
            persistedFaces ??= new List<FaceListFace>();

            return new FaceList(
                name,
                userData,
                recognitionModel,
                faceListId,
                persistedFaces?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceListFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.FaceListFace"/> instance for mocking. </returns>
        public static FaceListFace FaceListFace(string persistedFaceId = null, string userData = null)
        {
            return new FaceListFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.UserDefinedFields"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <returns> A new <see cref="Face.UserDefinedFields"/> instance for mocking. </returns>
        public static UserDefinedFields UserDefinedFields(string name = null, string userData = null)
        {
            return new UserDefinedFields(name, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceListItem"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        /// <param name="faceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <returns> A new <see cref="Face.FaceListItem"/> instance for mocking. </returns>
        public static FaceListItem FaceListItem(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string faceListId = null)
        {
            return new FaceListItem(name, userData, recognitionModel, faceListId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.AddFaceResult"/>. </summary>
        /// <param name="persistedFaceId"> persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in Face - Detect and will expire in 24 hours after the detection call. </param>
        /// <returns> A new <see cref="Face.AddFaceResult"/> instance for mocking. </returns>
        public static AddFaceResult AddFaceResult(string persistedFaceId = null)
        {
            return new AddFaceResult(persistedFaceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargeFaceList"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        /// <param name="largeFaceListId"> Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. </param>
        /// <returns> A new <see cref="Face.LargeFaceList"/> instance for mocking. </returns>
        public static LargeFaceList LargeFaceList(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string largeFaceListId = null)
        {
            return new LargeFaceList(name, userData, recognitionModel, largeFaceListId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.FaceCollectionTrainingStatus"/>. </summary>
        /// <param name="status"> Training status of the container. </param>
        /// <param name="createdDateTime"> A combined UTC date and time string that describes the created time of the person group, large person group or large face list. </param>
        /// <param name="lastActionDateTime"> A combined UTC date and time string that describes the last modify time of the person group, large person group or large face list, could be null value when the group is not successfully trained. </param>
        /// <param name="lastSuccessfulTrainingDateTime"> A combined UTC date and time string that describes the last successful training time of the person group, large person group or large face list. </param>
        /// <param name="message"> Show failure message when training failed (omitted when training succeed). </param>
        /// <returns> A new <see cref="Face.FaceCollectionTrainingStatus"/> instance for mocking. </returns>
        public static FaceCollectionTrainingStatus FaceCollectionTrainingStatus(OperationState status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastActionDateTime = default, DateTimeOffset lastSuccessfulTrainingDateTime = default, string message = null)
        {
            return new FaceCollectionTrainingStatus(
                status,
                createdDateTime,
                lastActionDateTime,
                lastSuccessfulTrainingDateTime,
                message,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargeFaceListFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.LargeFaceListFace"/> instance for mocking. </returns>
        public static LargeFaceListFace LargeFaceListFace(string persistedFaceId = null, string userData = null)
        {
            return new LargeFaceListFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroup"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need. </param>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <returns> A new <see cref="Face.PersonGroup"/> instance for mocking. </returns>
        public static PersonGroup PersonGroup(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string personGroupId = null)
        {
            return new PersonGroup(name, userData, recognitionModel, personGroupId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.CreatePersonResult"/>. </summary>
        /// <param name="personId"> Person ID of the person. </param>
        /// <returns> A new <see cref="Face.CreatePersonResult"/> instance for mocking. </returns>
        public static CreatePersonResult CreatePersonResult(string personId = null)
        {
            return new CreatePersonResult(personId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroupPerson"/>. </summary>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="persistedFaceIds"> Face ids of registered faces in the person. </param>
        /// <returns> A new <see cref="Face.PersonGroupPerson"/> instance for mocking. </returns>
        public static PersonGroupPerson PersonGroupPerson(string personId = null, string name = null, string userData = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new PersonGroupPerson(personId, name, userData, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonGroupPersonFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.PersonGroupPersonFace"/> instance for mocking. </returns>
        public static PersonGroupPersonFace PersonGroupPersonFace(string persistedFaceId = null, string userData = null)
        {
            return new PersonGroupPersonFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroup"/>. </summary>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="recognitionModel"> Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds. The default value is 'recognition_01', if latest model needed, please explicitly specify the model you need. </param>
        /// <param name="largePersonGroupId"> ID of the container. </param>
        /// <returns> A new <see cref="Face.LargePersonGroup"/> instance for mocking. </returns>
        public static LargePersonGroup LargePersonGroup(string name = null, string userData = null, FaceRecognitionModel? recognitionModel = null, string largePersonGroupId = null)
        {
            return new LargePersonGroup(name, userData, recognitionModel, largePersonGroupId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroupPerson"/>. </summary>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <param name="persistedFaceIds"> Face ids of registered faces in the person. </param>
        /// <returns> A new <see cref="Face.LargePersonGroupPerson"/> instance for mocking. </returns>
        public static LargePersonGroupPerson LargePersonGroupPerson(string personId = null, string name = null, string userData = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new LargePersonGroupPerson(personId, name, userData, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LargePersonGroupPersonFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.LargePersonGroupPersonFace"/> instance for mocking. </returns>
        public static LargePersonGroupPersonFace LargePersonGroupPersonFace(string persistedFaceId = null, string userData = null)
        {
            return new LargePersonGroupPersonFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonDirectoryPerson"/>. </summary>
        /// <param name="personId"> Person ID of the person. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <returns> A new <see cref="Face.PersonDirectoryPerson"/> instance for mocking. </returns>
        public static PersonDirectoryPerson PersonDirectoryPerson(string personId = null, string name = null, string userData = null)
        {
            return new PersonDirectoryPerson(personId, name, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListGroupReferenceResult"/>. </summary>
        /// <param name="dynamicPersonGroupIds"> Array of PersonDirectory DynamicPersonGroup ids. </param>
        /// <returns> A new <see cref="Face.ListGroupReferenceResult"/> instance for mocking. </returns>
        public static ListGroupReferenceResult ListGroupReferenceResult(IEnumerable<string> dynamicPersonGroupIds = null)
        {
            dynamicPersonGroupIds ??= new List<string>();

            return new ListGroupReferenceResult(dynamicPersonGroupIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.PersonDirectoryFace"/>. </summary>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="userData"> User-provided data attached to the face. The length limit is 1K. </param>
        /// <returns> A new <see cref="Face.PersonDirectoryFace"/> instance for mocking. </returns>
        public static PersonDirectoryFace PersonDirectoryFace(string persistedFaceId = null, string userData = null)
        {
            return new PersonDirectoryFace(persistedFaceId, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListFaceResult"/>. </summary>
        /// <param name="personId"> Id of person. </param>
        /// <param name="persistedFaceIds"> Array of persisted face ids. </param>
        /// <returns> A new <see cref="Face.ListFaceResult"/> instance for mocking. </returns>
        public static ListFaceResult ListFaceResult(string personId = null, IEnumerable<string> persistedFaceIds = null)
        {
            persistedFaceIds ??= new List<string>();

            return new ListFaceResult(personId, persistedFaceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.DynamicPersonGroup"/>. </summary>
        /// <param name="dynamicPersonGroupId"> ID of the dynamic person group. </param>
        /// <param name="name"> User defined name, maximum length is 128. </param>
        /// <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        /// <returns> A new <see cref="Face.DynamicPersonGroup"/> instance for mocking. </returns>
        public static DynamicPersonGroup DynamicPersonGroup(string dynamicPersonGroupId = null, string name = null, string userData = null)
        {
            return new DynamicPersonGroup(dynamicPersonGroupId, name, userData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.ListPersonResult"/>. </summary>
        /// <param name="personIds"> Array of PersonDirectory Person ids. </param>
        /// <returns> A new <see cref="Face.ListPersonResult"/> instance for mocking. </returns>
        public static ListPersonResult ListPersonResult(IEnumerable<string> personIds = null)
        {
            personIds ??= new List<string>();

            return new ListPersonResult(personIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionCreationContent"/>. </summary>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="sendResultsToClient"> Whether or not send back the operation response to client. </param>
        /// <param name="deviceCorrelationIdSetInClient"> Whether or not the device correlation id is set by the client. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <returns> A new <see cref="Face.LivenessSessionCreationContent"/> instance for mocking. </returns>
        public static LivenessSessionCreationContent LivenessSessionCreationContent(string livenessOperationMode = null, bool? sendResultsToClient = null, bool? deviceCorrelationIdSetInClient = null, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionCreationContent(
                livenessOperationMode,
                sendResultsToClient,
                deviceCorrelationIdSetInClient,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionCreationResult"/>. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="authToken"> Authorization token for use by the client application. </param>
        /// <returns> A new <see cref="Face.LivenessSessionCreationResult"/> instance for mocking. </returns>
        public static LivenessSessionCreationResult LivenessSessionCreationResult(string sessionId = null, string authToken = null)
        {
            return new LivenessSessionCreationResult(sessionId, authToken, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSession"/>. </summary>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="status"> The session status. </param>
        /// <param name="result"> The last result of session. </param>
        /// <returns> A new <see cref="Face.LivenessSession"/> instance for mocking. </returns>
        public static LivenessSession LivenessSession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessSession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionAuditEntry"/>. </summary>
        /// <param name="id"> ID of this audit entry. </param>
        /// <param name="sessionId"> Session ID of this audit entry. </param>
        /// <param name="requestId"> Request ID in the request header. </param>
        /// <param name="clientRequestId"> Client request ID in the request header. </param>
        /// <param name="receivedDateTime"> The UTC date time of the request. </param>
        /// <param name="request"> The request of this entry. </param>
        /// <param name="response"> The response of this entry. </param>
        /// <param name="digest"> The digest of the request body. </param>
        /// <returns> A new <see cref="Face.LivenessSessionAuditEntry"/> instance for mocking. </returns>
        public static LivenessSessionAuditEntry LivenessSessionAuditEntry(long id = default, string sessionId = null, string requestId = null, string clientRequestId = null, DateTimeOffset receivedDateTime = default, SessionAuditEntryRequestInfo request = null, SessionAuditEntryResponseInfo response = null, string digest = null)
        {
            return new LivenessSessionAuditEntry(
                id,
                sessionId,
                requestId,
                clientRequestId,
                receivedDateTime,
                request,
                response,
                digest,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.SessionAuditEntryRequestInfo"/>. </summary>
        /// <param name="url"> The relative URL of the liveness request. </param>
        /// <param name="method"> The HTTP method of the request. </param>
        /// <param name="contentLength"> The length of the request body in bytes. </param>
        /// <param name="contentType"> The content type of the request. </param>
        /// <param name="userAgent"> The user agent of the request. </param>
        /// <returns> A new <see cref="Face.SessionAuditEntryRequestInfo"/> instance for mocking. </returns>
        public static SessionAuditEntryRequestInfo SessionAuditEntryRequestInfo(string url = null, string method = null, long? contentLength = null, string contentType = null, string userAgent = null)
        {
            return new SessionAuditEntryRequestInfo(
                url,
                method,
                contentLength,
                contentType,
                userAgent,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.SessionAuditEntryResponseInfo"/>. </summary>
        /// <param name="body"> The response body. </param>
        /// <param name="statusCode"> The HTTP status code of the request. </param>
        /// <param name="latencyInMilliseconds"> The latency of the request. </param>
        /// <returns> A new <see cref="Face.SessionAuditEntryResponseInfo"/> instance for mocking. </returns>
        public static SessionAuditEntryResponseInfo SessionAuditEntryResponseInfo(IReadOnlyDictionary<string, BinaryData> body = null, int statusCode = default, long latencyInMilliseconds = default)
        {
            body ??= new Dictionary<string, BinaryData>();

            return new SessionAuditEntryResponseInfo(body, statusCode, latencyInMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionItem"/>. </summary>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <returns> A new <see cref="Face.LivenessSessionItem"/> instance for mocking. </returns>
        public static LivenessSessionItem LivenessSessionItem(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionItem(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessSessionCreationContentForMultipart"/>. </summary>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="sendResultsToClient"> Whether or not send back the operation response to client. </param>
        /// <param name="deviceCorrelationIdSetInClient"> Whether or not the device correlation id is set by the client. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <returns> A new <see cref="Face.LivenessSessionCreationContentForMultipart"/> instance for mocking. </returns>
        public static LivenessSessionCreationContentForMultipart LivenessSessionCreationContentForMultipart(string livenessOperationMode = null, bool? sendResultsToClient = null, bool? deviceCorrelationIdSetInClient = null, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null)
        {
            return new LivenessSessionCreationContentForMultipart(
                livenessOperationMode,
                sendResultsToClient,
                deviceCorrelationIdSetInClient,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Face.LivenessWithVerifySession"/>. </summary>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="status"> The session status. </param>
        /// <param name="result"> The last result of session. </param>
        /// <returns> A new <see cref="Face.LivenessWithVerifySession"/> instance for mocking. </returns>
        public static LivenessWithVerifySession LivenessWithVerifySession(string id = null, DateTimeOffset createdDateTime = default, DateTimeOffset? sessionStartDateTime = null, bool sessionExpired = default, string deviceCorrelationId = null, int? authTokenTimeToLiveInSeconds = null, FaceSessionStatus status = default, LivenessSessionAuditEntry result = null)
        {
            return new LivenessWithVerifySession(
                id,
                createdDateTime,
                sessionStartDateTime,
                sessionExpired,
                deviceCorrelationId,
                authTokenTimeToLiveInSeconds,
                status,
                result,
                serializedAdditionalRawData: null);
        }
    }
}
