<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DetectFromUrlAsync(Uri,bool?,bool?,string,FaceRecognitionModel?,bool?,FaceDetectionModel?,int?,CancellationToken)">
      <example>
This sample shows how to call DetectFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectFromUrlAsync(new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call DetectFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectFromUrlAsync(new Uri("http://localhost:3000"), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
]]></code></example>
    </member>
    <member name="DetectFromUrl(Uri,bool?,bool?,string,FaceRecognitionModel?,bool?,FaceDetectionModel?,int?,CancellationToken)">
      <example>
This sample shows how to call DetectFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = client.DetectFromUrl(new Uri("http://localhost:3000"));
]]></code>
This sample shows how to call DetectFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = client.DetectFromUrl(new Uri("http://localhost:3000"), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
]]></code></example>
    </member>
    <member name="DetectFromUrlAsync(RequestContent,bool?,bool?,string,string,bool?,string,int?,RequestContext)">
      <example>
This sample shows how to call DetectFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.DetectFromUrlAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
]]></code>
This sample shows how to call DetectFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.DetectFromUrlAsync(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
]]></code></example>
    </member>
    <member name="DetectFromUrl(RequestContent,bool?,bool?,string,string,bool?,string,int?,RequestContext)">
      <example>
This sample shows how to call DetectFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.DetectFromUrl(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
]]></code>
This sample shows how to call DetectFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.DetectFromUrl(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
]]></code></example>
    </member>
    <member name="DetectAsync(BinaryData,bool?,bool?,string,FaceRecognitionModel?,bool?,FaceDetectionModel?,int?,CancellationToken)">
      <example>
This sample shows how to call DetectAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectAsync(BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call DetectAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = await client.DetectAsync(BinaryData.FromObjectAsJson(new object()), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
]]></code></example>
    </member>
    <member name="Detect(BinaryData,bool?,bool?,string,FaceRecognitionModel?,bool?,FaceDetectionModel?,int?,CancellationToken)">
      <example>
This sample shows how to call Detect.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = client.Detect(BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call Detect with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceDetectionResult>> response = client.Detect(BinaryData.FromObjectAsJson(new object()), returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: FaceRecognitionModel.Recognition01, returnRecognitionModel: true, detectionModel: FaceDetectionModel.Detection01, faceIdTimeToLive: 1234);
]]></code></example>
    </member>
    <member name="DetectAsync(RequestContent,bool?,bool?,string,string,bool?,string,int?,RequestContext)">
      <example>
This sample shows how to call DetectAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.DetectAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
]]></code>
This sample shows how to call DetectAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.DetectAsync(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
]]></code></example>
    </member>
    <member name="Detect(RequestContent,bool?,bool?,string,string,bool?,string,int?,RequestContext)">
      <example>
This sample shows how to call Detect and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.Detect(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
]]></code>
This sample shows how to call Detect with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.Detect(content, returnFaceId: true, returnFaceLandmarks: true, returnFaceAttributes: "<returnFaceAttributes>", recognitionModel: "recognition_01", returnRecognitionModel: true, detectionModel: "detection_01", faceIdTimeToLive: 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("top").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("left").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("width").ToString());
Console.WriteLine(result[0].GetProperty("faceRectangle").GetProperty("height").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("pupilRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("mouthRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeLeftInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyebrowRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightInner").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("eyeRightOuter").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootLeft").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRootRight").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseLeftAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("noseRightAlarOutTip").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("upperLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipTop").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("x").ToString());
Console.WriteLine(result[0].GetProperty("faceLandmarks").GetProperty("underLipBottom").GetProperty("y").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("age").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("smile").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("moustache").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("beard").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("facialHair").GetProperty("sideburns").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("glasses").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("pitch").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("roll").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("headPose").GetProperty("yaw").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("bald").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("invisible").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("color").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("hair").GetProperty("hairColor")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("foreheadOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("eyeOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("occlusion").GetProperty("mouthOccluded").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("accessories")[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("blurLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("blur").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("exposureLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("exposure").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("noiseLevel").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("noise").GetProperty("value").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("noseAndMouthCovered").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("mask").GetProperty("type").ToString());
Console.WriteLine(result[0].GetProperty("faceAttributes").GetProperty("qualityForRecognition").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarAsync(string,IEnumerable{string},int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync("<faceId>", new string[] { "<faceIds>" });
]]></code>
This sample shows how to call FindSimilarAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync("<faceId>", new string[] { "<faceIds>" }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilar(string,IEnumerable{string},int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilar.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar("<faceId>", new string[] { "<faceIds>" });
]]></code>
This sample shows how to call FindSimilar with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar("<faceId>", new string[] { "<faceIds>" }, maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = await client.FindSimilarAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = await client.FindSimilarAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilar(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilar and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = client.FindSimilar(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilar with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = client.FindSimilar(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromFaceListAsync(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>");
]]></code>
This sample shows how to call FindSimilarFromFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromFaceList(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>");
]]></code>
This sample shows how to call FindSimilarFromFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromFaceListAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    faceListId = "<faceListId>",
});
Response response = await client.FindSimilarFromFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromFaceListAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    faceListId = "<faceListId>",
});
Response response = await client.FindSimilarFromFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromFaceList(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    faceListId = "<faceListId>",
});
Response response = client.FindSimilarFromFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromFaceList with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    faceListId = "<faceListId>",
});
Response response = client.FindSimilarFromFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceListAsync(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>");
]]></code>
This sample shows how to call FindSimilarFromLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceList(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>");
]]></code>
This sample shows how to call FindSimilarFromLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceListAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largeFaceListId = "<largeFaceListId>",
});
Response response = await client.FindSimilarFromLargeFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromLargeFaceListAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    largeFaceListId = "<largeFaceListId>",
});
Response response = await client.FindSimilarFromLargeFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceList(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largeFaceListId = "<largeFaceListId>",
});
Response response = client.FindSimilarFromLargeFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromLargeFaceList with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    largeFaceListId = "<largeFaceListId>",
});
Response response = client.FindSimilarFromLargeFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromPersonGroupAsync(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>");
]]></code>
This sample shows how to call IdentifyFromPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromPersonGroup(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>");
]]></code>
This sample shows how to call IdentifyFromPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromPersonGroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromPersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personGroupId = "<personGroupId>",
});
Response response = await client.IdentifyFromPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromPersonGroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personGroupId = "<personGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = await client.IdentifyFromPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromPersonGroup(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromPersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personGroupId = "<personGroupId>",
});
Response response = client.IdentifyFromPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromPersonGroup with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personGroupId = "<personGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = client.IdentifyFromPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromLargePersonGroupAsync(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>");
]]></code>
This sample shows how to call IdentifyFromLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromLargePersonGroup(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>");
]]></code>
This sample shows how to call IdentifyFromLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromLargePersonGroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    largePersonGroupId = "<largePersonGroupId>",
});
Response response = await client.IdentifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromLargePersonGroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    largePersonGroupId = "<largePersonGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = await client.IdentifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromLargePersonGroup(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    largePersonGroupId = "<largePersonGroupId>",
});
Response response = client.IdentifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromLargePersonGroup with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    largePersonGroupId = "<largePersonGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = client.IdentifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromPersonDirectoryAsync(IEnumerable{string},IEnumerable{string},int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromPersonDirectoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
]]></code>
This sample shows how to call IdentifyFromPersonDirectoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromPersonDirectory(IEnumerable{string},IEnumerable{string},int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromPersonDirectory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
]]></code>
This sample shows how to call IdentifyFromPersonDirectory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromPersonDirectoryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromPersonDirectoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personIds = new object[]
    {
        "<personIds>"
    },
});
Response response = await client.IdentifyFromPersonDirectoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromPersonDirectoryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personIds = new object[]
    {
        "<personIds>"
    },
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = await client.IdentifyFromPersonDirectoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromPersonDirectory(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromPersonDirectory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personIds = new object[]
    {
        "<personIds>"
    },
});
Response response = client.IdentifyFromPersonDirectory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromPersonDirectory with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    personIds = new object[]
    {
        "<personIds>"
    },
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = client.IdentifyFromPersonDirectory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromDynamicPersonGroupAsync(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromDynamicPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
]]></code>
This sample shows how to call IdentifyFromDynamicPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromDynamicPersonGroup(IEnumerable{string},string,int?,float?,CancellationToken)">
      <example>
This sample shows how to call IdentifyFromDynamicPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
]]></code>
This sample shows how to call IdentifyFromDynamicPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
]]></code></example>
    </member>
    <member name="IdentifyFromDynamicPersonGroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromDynamicPersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    dynamicPersonGroupId = "<dynamicPersonGroupId>",
});
Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromDynamicPersonGroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    dynamicPersonGroupId = "<dynamicPersonGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="IdentifyFromDynamicPersonGroup(RequestContent,RequestContext)">
      <example>
This sample shows how to call IdentifyFromDynamicPersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    dynamicPersonGroupId = "<dynamicPersonGroupId>",
});
Response response = client.IdentifyFromDynamicPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call IdentifyFromDynamicPersonGroup with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
    dynamicPersonGroupId = "<dynamicPersonGroupId>",
    maxNumOfCandidatesReturned = 1234,
    confidenceThreshold = 123.45F,
});
Response response = client.IdentifyFromDynamicPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFaceToFaceAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFaceToFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync("<faceId1>", "<faceId2>");
]]></code>
This sample shows how to call VerifyFaceToFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync("<faceId1>", "<faceId2>");
]]></code></example>
    </member>
    <member name="VerifyFaceToFace(string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFaceToFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFaceToFace("<faceId1>", "<faceId2>");
]]></code>
This sample shows how to call VerifyFaceToFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFaceToFace("<faceId1>", "<faceId2>");
]]></code></example>
    </member>
    <member name="VerifyFaceToFaceAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFaceToFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "<faceId1>",
    faceId2 = "<faceId2>",
});
Response response = await client.VerifyFaceToFaceAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFaceToFaceAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "<faceId1>",
    faceId2 = "<faceId2>",
});
Response response = await client.VerifyFaceToFaceAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFaceToFace(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFaceToFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "<faceId1>",
    faceId2 = "<faceId2>",
});
Response response = client.VerifyFaceToFace(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFaceToFace with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "<faceId1>",
    faceId2 = "<faceId2>",
});
Response response = client.VerifyFaceToFace(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromPersonGroupAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromPersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromPersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromPersonGroup(string,string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromPersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromPersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromPersonGroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromPersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personGroupId = "<personGroupId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromPersonGroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personGroupId = "<personGroupId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromPersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromPersonGroup(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromPersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personGroupId = "<personGroupId>",
    personId = "<personId>",
});
Response response = client.VerifyFromPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromPersonGroup with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personGroupId = "<personGroupId>",
    personId = "<personId>",
});
Response response = client.VerifyFromPersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromLargePersonGroupAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromLargePersonGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromLargePersonGroup(string,string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromLargePersonGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromLargePersonGroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largePersonGroupId = "<largePersonGroupId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromLargePersonGroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largePersonGroupId = "<largePersonGroupId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromLargePersonGroup(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largePersonGroupId = "<largePersonGroupId>",
    personId = "<personId>",
});
Response response = client.VerifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromLargePersonGroup with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largePersonGroupId = "<largePersonGroupId>",
    personId = "<personId>",
});
Response response = client.VerifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromPersonDirectoryAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromPersonDirectoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromPersonDirectoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromPersonDirectory(string,string,CancellationToken)">
      <example>
This sample shows how to call VerifyFromPersonDirectory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
]]></code>
This sample shows how to call VerifyFromPersonDirectory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
]]></code></example>
    </member>
    <member name="VerifyFromPersonDirectoryAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromPersonDirectoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromPersonDirectoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromPersonDirectoryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personId = "<personId>",
});
Response response = await client.VerifyFromPersonDirectoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="VerifyFromPersonDirectory(RequestContent,RequestContext)">
      <example>
This sample shows how to call VerifyFromPersonDirectory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personId = "<personId>",
});
Response response = client.VerifyFromPersonDirectory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code>
This sample shows how to call VerifyFromPersonDirectory with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    personId = "<personId>",
});
Response response = client.VerifyFromPersonDirectory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
    </member>
    <member name="GroupAsync(IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call GroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = await client.GroupAsync(new string[] { "<faceIds>" });
]]></code>
This sample shows how to call GroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = await client.GroupAsync(new string[] { "<faceIds>" });
]]></code></example>
    </member>
    <member name="Group(IEnumerable{string},CancellationToken)">
      <example>
This sample shows how to call Group.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = client.Group(new string[] { "<faceIds>" });
]]></code>
This sample shows how to call Group with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = client.Group(new string[] { "<faceIds>" });
]]></code></example>
    </member>
    <member name="GroupAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call GroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = await client.GroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code>
This sample shows how to call GroupAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = await client.GroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code></example>
    </member>
    <member name="Group(RequestContent,RequestContext)">
      <example>
This sample shows how to call Group and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = client.Group(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code>
This sample shows how to call Group with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "<faceIds>"
    },
});
Response response = client.Group(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code></example>
    </member>
  </members>
</doc>