// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_PersonDirectoryPersons
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetPerson("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetPersonAsync("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryPerson> response = client.GetPerson("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetPerson("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetPersonAsync("<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryPerson> response = client.GetPerson("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryPerson> response = await client.GetPersonAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePerson("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonAsync("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPeople_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetPeople(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPeople_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetPeopleAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPeople_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPeople();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPeople_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPeopleAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPeople_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetPeople("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPeople_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetPeopleAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_GetPeople_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = client.GetPeople(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_GetPeople_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<PersonDirectoryPerson>> response = await client.GetPeopleAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_GetGroupReferences_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetGroupReferences("<personId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_GetGroupReferences_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetGroupReferencesAsync("<personId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_GetGroupReferences_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListGroupReferenceResult> response = client.GetGroupReferences("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_GetGroupReferences_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListGroupReferenceResult> response = await client.GetGroupReferencesAsync("<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_GetGroupReferences_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetGroupReferences("<personId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_GetGroupReferences_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetGroupReferencesAsync("<personId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_GetGroupReferences_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListGroupReferenceResult> response = client.GetGroupReferences("<personId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_GetGroupReferences_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListGroupReferenceResult> response = await client.GetGroupReferencesAsync("<personId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetFace("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetFaceAsync("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryFace> response = client.GetFace("<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryFace> response = await client.GetFaceAsync("<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetFace("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetFaceAsync("<personId>", "recognition_01", "<persistedFaceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryFace> response = client.GetFace("<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<PersonDirectoryFace> response = await client.GetFaceAsync("<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<personId>", "recognition_01", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetFaces("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetFacesAsync("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListFaceResult> response = client.GetFaces("<personId>", RecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListFaceResult> response = await client.GetFacesAsync("<personId>", RecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = client.GetFaces("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response response = await client.GetFacesAsync("<personId>", "recognition_01");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_GetFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListFaceResult> response = client.GetFaces("<personId>", RecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_GetFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<ListFaceResult> response = await client.GetFacesAsync("<personId>", RecognitionModel.Recognition01);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personIds = new object[]
            {
"<personIds>"
            },
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromPersonDirectory(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_IdentifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromPersonDirectoryAsync(new string[] { "<faceIds>" }, new string[] { "<personIds>" }, maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_VerifyFromPersonDirectory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_VerifyFromPersonDirectory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_VerifyFromPersonDirectory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<VerifyResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_VerifyFromPersonDirectory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<VerifyResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_VerifyFromPersonDirectory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonDirectory(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_VerifyFromPersonDirectory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonDirectoryAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPersons_VerifyFromPersonDirectory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<VerifyResult> response = client.VerifyFromPersonDirectory("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPersons_VerifyFromPersonDirectory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Response<VerifyResult> response = await client.VerifyFromPersonDirectoryAsync("<faceId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            PersonDirectoryPerson resource = new PersonDirectoryPerson("<name>");
            Operation<CreatePersonResult> operation = client.CreatePerson(WaitUntil.Completed, resource);
            CreatePersonResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            PersonDirectoryPerson resource = new PersonDirectoryPerson("<name>");
            Operation<CreatePersonResult> operation = await client.CreatePersonAsync(WaitUntil.Completed, resource);
            CreatePersonResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Operation<BinaryData> operation = client.CreatePerson(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Operation<BinaryData> operation = await client.CreatePersonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            PersonDirectoryPerson resource = new PersonDirectoryPerson("<name>")
            {
                UserData = "<userData>",
            };
            Operation<CreatePersonResult> operation = client.CreatePerson(WaitUntil.Completed, resource);
            CreatePersonResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            PersonDirectoryPerson resource = new PersonDirectoryPerson("<name>")
            {
                UserData = "<userData>",
            };
            Operation<CreatePersonResult> operation = await client.CreatePersonAsync(WaitUntil.Completed, resource);
            CreatePersonResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeletePerson(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeletePerson(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeletePersonAsync(WaitUntil.Completed, "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = client.AddFaceFromUrl(WaitUntil.Completed, "<personId>", "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, "<personId>", "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            AddFaceFromUrlContent body = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Operation<AddFaceResult> operation = client.AddFaceFromUrl(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, body);
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            AddFaceFromUrlContent body = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Operation<AddFaceResult> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, body);
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = client.AddFaceFromUrl(WaitUntil.Completed, "<personId>", "recognition_01", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Operation<BinaryData> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, "<personId>", "recognition_01", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            AddFaceFromUrlContent body = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Operation<AddFaceResult> operation = client.AddFaceFromUrl(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, body, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            AddFaceFromUrlContent body = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Operation<AddFaceResult> operation = await client.AddFaceFromUrlAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, body, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromStream_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.AddFaceFromStream(WaitUntil.Completed, "<personId>", "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromStream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.AddFaceFromStreamAsync(WaitUntil.Completed, "<personId>", "recognition_01", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromStream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation<AddFaceResult> operation = client.AddFaceFromStream(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromStream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation<AddFaceResult> operation = await client.AddFaceFromStreamAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()));
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.AddFaceFromStream(WaitUntil.Completed, "<personId>", "recognition_01", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.AddFaceFromStreamAsync(WaitUntil.Completed, "<personId>", "recognition_01", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_AddFaceFromStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation<AddFaceResult> operation = client.AddFaceFromStream(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_AddFaceFromStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation<AddFaceResult> operation = await client.AddFaceFromStreamAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
            AddFaceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, "<personId>", "recognition_01", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryFace_DeleteFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = client.DeleteFace(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryFace_DeleteFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryPersons client = new FaceClient(endpoint, credential).GetPersonDirectoryPersonsClient();

            Operation operation = await client.DeleteFaceAsync(WaitUntil.Completed, "<personId>", RecognitionModel.Recognition01, "<persistedFaceId>");
        }
    }
}
