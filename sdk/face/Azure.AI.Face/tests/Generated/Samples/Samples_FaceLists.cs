// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_FaceLists
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            FaceList resource = new FaceList("<name>");
            Response response = client.CreateList("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            FaceList resource = new FaceList("<name>");
            Response response = await client.CreateListAsync("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_CreateList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            FaceList resource = new FaceList("<name>")
            {
                UserData = "<userData>",
            };
            Response response = client.CreateList("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_CreateList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            FaceList resource = new FaceList("<name>")
            {
                UserData = "<userData>",
            };
            Response response = await client.CreateListAsync("<faceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_DeleteList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.DeleteList("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_DeleteList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.DeleteListAsync("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_DeleteList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.DeleteList("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_DeleteList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.DeleteListAsync("<faceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.GetList("<faceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.GetListAsync("<faceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<FaceList> response = client.GetList("<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<FaceList> response = await client.GetListAsync("<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.GetList("<faceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.GetListAsync("<faceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("faceListId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<FaceList> response = client.GetList("<faceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<FaceList> response = await client.GetListAsync("<faceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_UpdateList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_UpdateList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_UpdateList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateList("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_UpdateList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateListAsync("<faceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<faceListId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<faceListId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<faceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<faceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromStream_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromStream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<faceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromStream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<faceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromStream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<faceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_AddFaceFromStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_AddFaceFromStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<faceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.DeleteFace("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.DeleteFaceAsync("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceListFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.DeleteFace("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceListFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.DeleteFaceAsync("<faceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetLists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.GetLists(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetLists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.GetListsAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetLists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FaceList>> response = client.GetLists();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetLists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FaceList>> response = await client.GetListsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetLists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = client.GetLists(true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetLists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response response = await client.GetListsAsync(true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("faceListId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaces")[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaces")[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceList_GetLists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FaceList>> response = client.GetLists(returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceList_GetLists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FaceList>> response = await client.GetListsAsync(returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceLists_FindSimilarFromFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceLists_FindSimilarFromFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceLists_FindSimilarFromFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceLists_FindSimilarFromFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceLists_FindSimilarFromFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = client.FindSimilarFromFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceLists_FindSimilarFromFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                faceListId = "<faceListId>",
            });
            Response response = await client.FindSimilarFromFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FaceLists_FindSimilarFromFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromFaceList("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FaceLists_FindSimilarFromFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            FaceLists client = new FaceClient(endpoint, credential).GetFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromFaceListAsync("<faceId>", "<faceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }
    }
}
