// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_LargeFaceLists
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            LargeFaceList resource = new LargeFaceList("<name>");
            Response response = client.CreateList("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            LargeFaceList resource = new LargeFaceList("<name>");
            Response response = await client.CreateListAsync("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_CreateList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            LargeFaceList resource = new LargeFaceList("<name>")
            {
                UserData = "<userData>",
            };
            Response response = client.CreateList("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_CreateList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            LargeFaceList resource = new LargeFaceList("<name>")
            {
                UserData = "<userData>",
            };
            Response response = await client.CreateListAsync("<largeFaceListId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_DeleteList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.DeleteList("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_DeleteList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.DeleteListAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_DeleteList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.DeleteList("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_DeleteList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.DeleteListAsync("<largeFaceListId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetList("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetListAsync("<largeFaceListId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceList> response = client.GetList("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceList> response = await client.GetListAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetList("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetListAsync("<largeFaceListId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceList> response = client.GetList("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceList> response = await client.GetListAsync("<largeFaceListId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_UpdateList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_UpdateList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_UpdateList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateList("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_UpdateList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateListAsync("<largeFaceListId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<largeFaceListId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largeFaceListId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<largeFaceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largeFaceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromStream_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromStream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<largeFaceListId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromStream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromStream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_AddFaceFromStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_AddFaceFromStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.DeleteFace("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.DeleteFaceAsync("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.DeleteFace("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.DeleteFaceAsync("<largeFaceListId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLists_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetLists(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLists_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetListsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLists_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLists();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLists_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetListsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLists_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetLists("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLists_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetListsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceList_GetLists_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceList>> response = client.GetLists(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceList_GetLists_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceList>> response = await client.GetListsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetTrainingStatus("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetFace("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetFace("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetFaces("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetFacesAsync("<largeFaceListId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = client.GetFaces("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response response = await client.GetFacesAsync("<largeFaceListId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceListFace_GetFaces_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceListFace_GetFaces_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_FindSimilarFromLargeFaceList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_FindSimilarFromLargeFaceList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_FindSimilarFromLargeFaceList_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_FindSimilarFromLargeFaceList_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_FindSimilarFromLargeFaceList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = client.FindSimilarFromLargeFaceList(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_FindSimilarFromLargeFaceList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                maxNumOfCandidatesReturned = 1234,
                mode = "matchPerson",
                largeFaceListId = "<largeFaceListId>",
            });
            Response response = await client.FindSimilarFromLargeFaceListAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_FindSimilarFromLargeFaceList_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_FindSimilarFromLargeFaceList_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_TrainList_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Operation operation = client.TrainList(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_TrainList_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Operation operation = await client.TrainListAsync(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargeFaceLists_TrainList_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Operation operation = client.TrainList(WaitUntil.Completed, "<largeFaceListId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargeFaceLists_TrainList_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

            Operation operation = await client.TrainListAsync(WaitUntil.Completed, "<largeFaceListId>");
        }
    }
}
