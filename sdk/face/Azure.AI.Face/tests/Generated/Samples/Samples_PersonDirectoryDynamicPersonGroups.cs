// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_PersonDirectoryDynamicPersonGroups
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<DynamicPersonGroup> response = client.GetGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<DynamicPersonGroup> response = await client.GetGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroup("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupAsync("<dynamicPersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<DynamicPersonGroup> response = client.GetGroup("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<DynamicPersonGroup> response = await client.GetGroupAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroups(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupsAsync(null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroups("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupsAsync("<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_GetGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = client.GetGroups(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_GetGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<DynamicPersonGroup>> response = await client.GetGroupsAsync(start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroupPeople("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupPeopleAsync("<dynamicPersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<ListPersonResult> response = client.GetGroupPeople("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<ListPersonResult> response = await client.GetGroupPeopleAsync("<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = client.GetGroupPeople("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response response = await client.GetGroupPeopleAsync("<dynamicPersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<ListPersonResult> response = client.GetGroupPeople("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_GetGroupPeople_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<ListPersonResult> response = await client.GetGroupPeopleAsync("<dynamicPersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromDynamicPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                dynamicPersonGroupId = "<dynamicPersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromDynamicPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromDynamicPersonGroup(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonDirectoryDynamicPersonGroups_IdentifyFromDynamicPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromDynamicPersonGroupAsync(new string[] { "<faceIds>" }, "<dynamicPersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = client.CreateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.CreateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            DynamicPersonGroup resource = new DynamicPersonGroup("<name>");
            Operation<DynamicPersonGroup> operation = client.CreateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", resource);
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            DynamicPersonGroup resource = new DynamicPersonGroup("<name>");
            Operation<DynamicPersonGroup> operation = await client.CreateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", resource);
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"<addPersonIds>"
            },
            });
            Operation<BinaryData> operation = client.CreateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"<addPersonIds>"
            },
            });
            Operation<BinaryData> operation = await client.CreateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("dynamicPersonGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("addPersonIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_CreateGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            DynamicPersonGroup resource = new DynamicPersonGroup("<name>")
            {
                UserData = "<userData>",
                AddPersonIds = { "<addPersonIds>" },
            };
            Operation<DynamicPersonGroup> operation = client.CreateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", resource);
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_CreateGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            DynamicPersonGroup resource = new DynamicPersonGroup("<name>")
            {
                UserData = "<userData>",
                AddPersonIds = { "<addPersonIds>" },
            };
            Operation<DynamicPersonGroup> operation = await client.CreateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", resource);
            DynamicPersonGroup responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Operation operation = client.DeleteGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Operation operation = await client.DeleteGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_DeleteGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Operation operation = client.DeleteGroup(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_DeleteGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            Operation operation = await client.DeleteGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_UpdateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = client.UpdateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_UpdateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.UpdateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DynamicPersonGroup_UpdateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"<addPersonIds>"
            },
                removePersonIds = new object[]
            {
"<removePersonIds>"
            },
            });
            Operation<BinaryData> operation = client.UpdateGroup(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DynamicPersonGroup_UpdateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonDirectoryDynamicPersonGroups client = new FaceClient(endpoint, credential).GetPersonDirectoryDynamicPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
                addPersonIds = new object[]
            {
"<addPersonIds>"
            },
                removePersonIds = new object[]
            {
"<removePersonIds>"
            },
            });
            Operation<BinaryData> operation = await client.UpdateGroupAsync(WaitUntil.Completed, "<dynamicPersonGroupId>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }
    }
}
