// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_PersonGroups
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreateGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroup resource = new PersonGroup("<name>");
            Response response = client.CreateGroup("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreateGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroup resource = new PersonGroup("<name>");
            Response response = await client.CreateGroupAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_CreateGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroup resource = new PersonGroup("<name>")
            {
                UserData = "<userData>",
            };
            Response response = client.CreateGroup("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_CreateGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroup resource = new PersonGroup("<name>")
            {
                UserData = "<userData>",
            };
            Response response = await client.CreateGroupAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_DeleteGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeleteGroup("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_DeleteGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeleteGroupAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_DeleteGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeleteGroup("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_DeleteGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeleteGroupAsync("<personGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetGroup("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetGroupAsync("<personGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroup> response = client.GetGroup("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroup> response = await client.GetGroupAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetGroup("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetGroupAsync("<personGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroup> response = client.GetGroup("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroup> response = await client.GetGroupAsync("<personGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_UpdateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_UpdateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_UpdateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateGroup("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_UpdateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateGroupAsync("<personGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroup>> response = client.GetGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroup>> response = await client.GetGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroup>> response = client.GetGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroup>> response = await client.GetGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroupPerson resource = new PersonGroupPerson("<name>");
            Response<PersonGroupPerson> response = client.CreatePerson("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroupPerson resource = new PersonGroupPerson("<name>");
            Response<PersonGroupPerson> response = await client.CreatePersonAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreatePerson("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreatePersonAsync("<personGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroupPerson resource = new PersonGroupPerson("<name>")
            {
                UserData = "<userData>",
            };
            Response<PersonGroupPerson> response = client.CreatePerson("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            PersonGroupPerson resource = new PersonGroupPerson("<name>")
            {
                UserData = "<userData>",
            };
            Response<PersonGroupPerson> response = await client.CreatePersonAsync("<personGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeletePerson("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeletePersonAsync("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeletePerson("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeletePersonAsync("<personGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetPerson("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetPersonAsync("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPerson> response = client.GetPerson("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPerson> response = await client.GetPersonAsync("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetPerson("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetPersonAsync("<personGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPerson> response = client.GetPerson("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPerson> response = await client.GetPersonAsync("<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePerson("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonAsync("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<personGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPeople_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetPeople("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPeople_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetPeopleAsync("<personGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPeople_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPeople("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPeople_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPeopleAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPeople_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetPeople("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPeople_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetPeopleAsync("<personGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPeople_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPeople("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPeople_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPeopleAsync("<personGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<personGroupId>", "<personId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<personGroupId>", "<personId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<personGroupId>", "<personId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<personGroupId>", "<personId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromStream_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromStream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<personGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromStream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromStream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<personGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_AddFaceFromStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_AddFaceFromStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<personGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeleteFace("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeleteFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.DeleteFace("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.DeleteFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetFace("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPersonFace> response = client.GetFace("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPersonFace> response = await client.GetFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetFace("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPersonFace> response = client.GetFace("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<PersonGroupPersonFace> response = await client.GetFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<personGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_IdentifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_IdentifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_IdentifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_IdentifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_IdentifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_IdentifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                personGroupId = "<personGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_IdentifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromPersonGroup(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_IdentifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromPersonGroupAsync(new string[] { "<faceIds>" }, "<personGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_VerifyFromPersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_VerifyFromPersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_VerifyFromPersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<VerifyResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_VerifyFromPersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<VerifyResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_VerifyFromPersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromPersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_VerifyFromPersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                personGroupId = "<personGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromPersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_VerifyFromPersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<VerifyResult> response = client.VerifyFromPersonGroup("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_VerifyFromPersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<VerifyResult> response = await client.VerifyFromPersonGroupAsync("<faceId>", "<personGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = client.GetTrainingStatus("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response response = await client.GetTrainingStatusAsync("<personGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_TrainGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Operation operation = client.TrainGroup(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_TrainGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Operation operation = await client.TrainGroupAsync(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroups_TrainGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Operation operation = client.TrainGroup(WaitUntil.Completed, "<personGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroups_TrainGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroups client = new FaceClient(endpoint, credential).GetPersonGroupsClient();

            Operation operation = await client.TrainGroupAsync(WaitUntil.Completed, "<personGroupId>");
        }
    }
}
