// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Face;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Face.Samples
{
    public partial class Samples_LargePersonGroups
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroup resource = new LargePersonGroup("<name>");
            Response response = client.CreateGroup("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroup resource = new LargePersonGroup("<name>");
            Response response = await client.CreateGroupAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreateGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreateGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_CreateGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroup resource = new LargePersonGroup("<name>")
            {
                UserData = "<userData>",
            };
            Response response = client.CreateGroup("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_CreateGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroup resource = new LargePersonGroup("<name>")
            {
                UserData = "<userData>",
            };
            Response response = await client.CreateGroupAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_DeleteGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeleteGroup("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_DeleteGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeleteGroupAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_DeleteGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeleteGroup("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_DeleteGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeleteGroupAsync("<largePersonGroupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetGroup("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetGroupAsync("<largePersonGroupId>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroup> response = client.GetGroup("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroup> response = await client.GetGroupAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetGroup("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetGroupAsync("<largePersonGroupId>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("recognitionModel").ToString());
            Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroup> response = client.GetGroup("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroup> response = await client.GetGroupAsync("<largePersonGroupId>", returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_UpdateGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdateGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_UpdateGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdateGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_UpdateGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdateGroup("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_UpdateGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdateGroupAsync("<largePersonGroupId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetGroups(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetGroupsAsync(null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetGroups("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetGroupsAsync("<start>", 1234, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
            Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroup_GetGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroup>> response = client.GetGroups(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroup_GetGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroup>> response = await client.GetGroupsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreatePerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreatePersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroupPerson resource = new LargePersonGroupPerson("<name>");
            Response<LargePersonGroupPerson> response = client.CreatePerson("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroupPerson resource = new LargePersonGroupPerson("<name>");
            Response<LargePersonGroupPerson> response = await client.CreatePersonAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.CreatePerson("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.CreatePersonAsync("<largePersonGroupId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_CreatePerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroupPerson resource = new LargePersonGroupPerson("<name>")
            {
                UserData = "<userData>",
            };
            Response<LargePersonGroupPerson> response = client.CreatePerson("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_CreatePerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            LargePersonGroupPerson resource = new LargePersonGroupPerson("<name>")
            {
                UserData = "<userData>",
            };
            Response<LargePersonGroupPerson> response = await client.CreatePersonAsync("<largePersonGroupId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeletePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeletePerson("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeletePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeletePersonAsync("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_DeletePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeletePerson("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_DeletePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeletePersonAsync("<largePersonGroupId>", "<personId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetPerson("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetPersonAsync("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPerson> response = client.GetPerson("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPerson> response = await client.GetPersonAsync("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetPerson("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetPersonAsync("<largePersonGroupId>", "<personId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
            Console.WriteLine(result.GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPerson_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPerson> response = client.GetPerson("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPerson_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPerson> response = await client.GetPersonAsync("<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdatePerson_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UpdatePerson("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdatePerson_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UpdatePersonAsync("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_UpdatePerson_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = client.UpdatePerson("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_UpdatePerson_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                userData = "<userData>",
            });
            Response response = await client.UpdatePersonAsync("<largePersonGroupId>", "<personId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPeople_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetPeople("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPeople_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetPeopleAsync("<largePersonGroupId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPeople_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetPeople("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPeople_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPeopleAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPeople_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetPeople("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPeople_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetPeopleAsync("<largePersonGroupId>", "<start>", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("userData").ToString());
            Console.WriteLine(result[0].GetProperty("persistedFaceIds")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPerson_GetPeople_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetPeople("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPerson_GetPeople_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPeopleAsync("<largePersonGroupId>", start: "<start>", top: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromUrl_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<largePersonGroupId>", "<personId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromUrl_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largePersonGroupId>", "<personId>", addFaceFromUrlContent);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AddFaceFromUrl("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AddFaceFromUrlAsync("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = client.AddFaceFromUrl("<largePersonGroupId>", "<personId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
            Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largePersonGroupId>", "<personId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromStream_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromStream_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<largePersonGroupId>", "<personId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromStream_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromStream_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFaceFromStream("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFaceFromStreamAsync("<largePersonGroupId>", "<personId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_AddFaceFromStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<AddFaceResult> response = client.AddFaceFromStream("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_AddFaceFromStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largePersonGroupId>", "<personId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeleteFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeleteFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_DeleteFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.DeleteFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_DeleteFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.DeleteFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPersonFace> response = client.GetFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
            Console.WriteLine(result.GetProperty("userData").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_GetFace_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPersonFace> response = client.GetFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_GetFace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateFace_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateFace_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroupPersonFace_UpdateFace_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = client.UpdateFace("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroupPersonFace_UpdateFace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "<userData>",
            });
            Response response = await client.UpdateFaceAsync("<largePersonGroupId>", "<personId>", "<persistedFaceId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_IdentifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_IdentifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_IdentifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_IdentifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_IdentifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = client.IdentifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_IdentifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceIds = new object[]
            {
"<faceIds>"
            },
                largePersonGroupId = "<largePersonGroupId>",
                maxNumOfCandidatesReturned = 1234,
                confidenceThreshold = 123.45F,
            });
            Response response = await client.IdentifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("faceId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_IdentifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = client.IdentifyFromLargePersonGroup(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_IdentifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<IReadOnlyList<IdentifyResult>> response = await client.IdentifyFromLargePersonGroupAsync(new string[] { "<faceIds>" }, "<largePersonGroupId>", maxNumOfCandidatesReturned: 1234, confidenceThreshold: 123.45F);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_VerifyFromLargePersonGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_VerifyFromLargePersonGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_VerifyFromLargePersonGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<VerifyResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_VerifyFromLargePersonGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<VerifyResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_VerifyFromLargePersonGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = client.VerifyFromLargePersonGroup(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_VerifyFromLargePersonGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            using RequestContent content = RequestContent.Create(new
            {
                faceId = "<faceId>",
                largePersonGroupId = "<largePersonGroupId>",
                personId = "<personId>",
            });
            Response response = await client.VerifyFromLargePersonGroupAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isIdentical").ToString());
            Console.WriteLine(result.GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_VerifyFromLargePersonGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<VerifyResult> response = client.VerifyFromLargePersonGroup("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_VerifyFromLargePersonGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<VerifyResult> response = await client.VerifyFromLargePersonGroupAsync("<faceId>", "<largePersonGroupId>", "<personId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_GetTrainingStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_GetTrainingStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_GetTrainingStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_GetTrainingStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_GetTrainingStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = client.GetTrainingStatus("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_GetTrainingStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response response = await client.GetTrainingStatusAsync("<largePersonGroupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_GetTrainingStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<TrainingStatus> response = client.GetTrainingStatus("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_GetTrainingStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_TrainGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Operation operation = client.TrainGroup(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_TrainGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Operation operation = await client.TrainGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LargePersonGroups_TrainGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Operation operation = client.TrainGroup(WaitUntil.Completed, "<largePersonGroupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LargePersonGroups_TrainGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            LargePersonGroups client = new FaceClient(endpoint, credential).GetLargePersonGroupsClient();

            Operation operation = await client.TrainGroupAsync(WaitUntil.Completed, "<largePersonGroupId>");
        }
    }
}
