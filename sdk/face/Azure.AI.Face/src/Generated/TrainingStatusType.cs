// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Face
{
    /// <summary> Type of training status. </summary>
    public readonly partial struct TrainingStatusType : IEquatable<TrainingStatusType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TrainingStatusType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrainingStatusType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NonstartedValue = "nonstarted";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";

        /// <summary> If the training process is waiting to perform, the status is notstarted. </summary>
        public static TrainingStatusType Nonstarted { get; } = new TrainingStatusType(NonstartedValue);
        /// <summary> If the training is ongoing, the status is running. </summary>
        public static TrainingStatusType Running { get; } = new TrainingStatusType(RunningValue);
        /// <summary> Status succeed means this person group or large person group is ready for Face - Identify, or this large face list is ready for Face - Find Similar. </summary>
        public static TrainingStatusType Succeeded { get; } = new TrainingStatusType(SucceededValue);
        /// <summary> Status failed is often caused by no person or no persisted face exist in the person group or large person group, or no persisted face exist in the large face list. </summary>
        public static TrainingStatusType Failed { get; } = new TrainingStatusType(FailedValue);
        /// <summary> Determines if two <see cref="TrainingStatusType"/> values are the same. </summary>
        public static bool operator ==(TrainingStatusType left, TrainingStatusType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrainingStatusType"/> values are not the same. </summary>
        public static bool operator !=(TrainingStatusType left, TrainingStatusType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrainingStatusType"/>. </summary>
        public static implicit operator TrainingStatusType(string value) => new TrainingStatusType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrainingStatusType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrainingStatusType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
