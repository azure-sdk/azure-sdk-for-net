// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Face
{
    /// <summary> Request for creating liveness session. </summary>
    public partial class LivenessSessionCreationContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessSessionCreationContent"/>. </summary>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="livenessOperationMode"/> or <paramref name="deviceCorrelationId"/> is null. </exception>
        public LivenessSessionCreationContent(string livenessOperationMode, string deviceCorrelationId)
        {
            if (livenessOperationMode == null)
            {
                throw new ArgumentNullException(nameof(livenessOperationMode));
            }
            if (deviceCorrelationId == null)
            {
                throw new ArgumentNullException(nameof(deviceCorrelationId));
            }

            LivenessOperationMode = livenessOperationMode;
            DeviceCorrelationId = deviceCorrelationId;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSessionCreationContent"/>. </summary>
        /// <param name="livenessOperationMode"> The operation mode for the liveness modal. </param>
        /// <param name="sendResultsToClient"> Whether or not send back the operation response to client. </param>
        /// <param name="deviceCorrelationIdSetInClient"> Whether or not the device correlation id is set by the client. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessSessionCreationContent(string livenessOperationMode, bool? sendResultsToClient, bool? deviceCorrelationIdSetInClient, string deviceCorrelationId, int? authTokenTimeToLiveInSeconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LivenessOperationMode = livenessOperationMode;
            SendResultsToClient = sendResultsToClient;
            DeviceCorrelationIdSetInClient = deviceCorrelationIdSetInClient;
            DeviceCorrelationId = deviceCorrelationId;
            AuthTokenTimeToLiveInSeconds = authTokenTimeToLiveInSeconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSessionCreationContent"/> for deserialization. </summary>
        internal LivenessSessionCreationContent()
        {
        }

        /// <summary> The operation mode for the liveness modal. </summary>
        public string LivenessOperationMode { get; }
        /// <summary> Whether or not send back the operation response to client. </summary>
        public bool? SendResultsToClient { get; set; }
        /// <summary> Whether or not the device correlation id is set by the client. </summary>
        public bool? DeviceCorrelationIdSetInClient { get; set; }
        /// <summary> Device Correlation Id to use for linking multiple sessions together. </summary>
        public string DeviceCorrelationId { get; }
        /// <summary> Session length in seconds. Range is 60 to 86400 seconds. </summary>
        public int? AuthTokenTimeToLiveInSeconds { get; set; }
    }
}
