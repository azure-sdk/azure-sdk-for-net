// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Face
{
    /// <summary> The recognition model for the face. </summary>
    public readonly partial struct RecognitionModel : IEquatable<RecognitionModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecognitionModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecognitionModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Recognition01Value = "recognition_01";
        private const string Recognition02Value = "recognition_02";
        private const string Recognition03Value = "recognition_03";
        private const string Recognition04Value = "recognition_04";

        /// <summary> The default recognition model for Face - Detect. All those faceIds created before 2019 March are bonded with this recognition model. </summary>
        public static RecognitionModel Recognition01 { get; } = new RecognitionModel(Recognition01Value);
        /// <summary> Recognition model released in 2019 March. </summary>
        public static RecognitionModel Recognition02 { get; } = new RecognitionModel(Recognition02Value);
        /// <summary> Recognition model released in 2020 May. </summary>
        public static RecognitionModel Recognition03 { get; } = new RecognitionModel(Recognition03Value);
        /// <summary> Recognition model released in 2021 February. It's recommended to use this recognition model for better recognition accuracy. </summary>
        public static RecognitionModel Recognition04 { get; } = new RecognitionModel(Recognition04Value);
        /// <summary> Determines if two <see cref="RecognitionModel"/> values are the same. </summary>
        public static bool operator ==(RecognitionModel left, RecognitionModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecognitionModel"/> values are not the same. </summary>
        public static bool operator !=(RecognitionModel left, RecognitionModel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RecognitionModel"/>. </summary>
        public static implicit operator RecognitionModel(string value) => new RecognitionModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecognitionModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecognitionModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
