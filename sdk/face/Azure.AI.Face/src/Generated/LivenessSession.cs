// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Face
{
    /// <summary> Session result of detect liveness. </summary>
    public partial class LivenessSession
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LivenessSession"/>. </summary>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceCorrelationId"/> is null. </exception>
        internal LivenessSession(string deviceCorrelationId)
        {
            if (deviceCorrelationId == null)
            {
                throw new ArgumentNullException(nameof(deviceCorrelationId));
            }

            DeviceCorrelationId = deviceCorrelationId;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSession"/>. </summary>
        /// <param name="id"> Unique ID to reference this session. </param>
        /// <param name="createdDateTime"> Session creation time in millisecond from epoch. </param>
        /// <param name="sessionStartDateTime"> Session started time from session auth token. </param>
        /// <param name="sessionExpired"> Whether or not the session is expired. </param>
        /// <param name="deviceCorrelationId"> Device Correlation Id to use for linking multiple sessions together. </param>
        /// <param name="authTokenTimeToLiveInSeconds"> Session length in seconds. Range is 60 to 86400 seconds. </param>
        /// <param name="status"> The session status. </param>
        /// <param name="result"> The last result of session. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LivenessSession(string id, DateTimeOffset createdDateTime, DateTimeOffset? sessionStartDateTime, bool sessionExpired, string deviceCorrelationId, int? authTokenTimeToLiveInSeconds, SessionStatus status, LivenessSessionAuditEntry result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            CreatedDateTime = createdDateTime;
            SessionStartDateTime = sessionStartDateTime;
            SessionExpired = sessionExpired;
            DeviceCorrelationId = deviceCorrelationId;
            AuthTokenTimeToLiveInSeconds = authTokenTimeToLiveInSeconds;
            Status = status;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LivenessSession"/> for deserialization. </summary>
        internal LivenessSession()
        {
        }

        /// <summary> Unique ID to reference this session. </summary>
        public string Id { get; }
        /// <summary> Session creation time in millisecond from epoch. </summary>
        public DateTimeOffset CreatedDateTime { get; }
        /// <summary> Session started time from session auth token. </summary>
        public DateTimeOffset? SessionStartDateTime { get; }
        /// <summary> Whether or not the session is expired. </summary>
        public bool SessionExpired { get; }
        /// <summary> Device Correlation Id to use for linking multiple sessions together. </summary>
        public string DeviceCorrelationId { get; }
        /// <summary> Session length in seconds. Range is 60 to 86400 seconds. </summary>
        public int? AuthTokenTimeToLiveInSeconds { get; }
        /// <summary> The session status. </summary>
        public SessionStatus Status { get; }
        /// <summary> The last result of session. </summary>
        public LivenessSessionAuditEntry Result { get; }
    }
}
