<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateListAsync(string,LargeFaceList,CancellationToken)">
      <example>
This sample shows how to call CreateListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

LargeFaceList resource = new LargeFaceList("<name>");
Response response = await client.CreateListAsync("<largeFaceListId>", resource);
]]></code>
This sample shows how to call CreateListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

LargeFaceList resource = new LargeFaceList("<name>")
{
    UserData = "<userData>",
};
Response response = await client.CreateListAsync("<largeFaceListId>", resource);
]]></code></example>
    </member>
    <member name="CreateList(string,LargeFaceList,CancellationToken)">
      <example>
This sample shows how to call CreateList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

LargeFaceList resource = new LargeFaceList("<name>");
Response response = client.CreateList("<largeFaceListId>", resource);
]]></code>
This sample shows how to call CreateList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

LargeFaceList resource = new LargeFaceList("<name>")
{
    UserData = "<userData>",
};
Response response = client.CreateList("<largeFaceListId>", resource);
]]></code></example>
    </member>
    <member name="CreateListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.CreateListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.CreateListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="CreateList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.CreateList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.CreateList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteListAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.DeleteListAsync("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.DeleteListAsync("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteList(string,RequestContext)">
      <example>
This sample shows how to call DeleteList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.DeleteList("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.DeleteList("<largeFaceListId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetListAsync(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceList> response = await client.GetListAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceList> response = await client.GetListAsync("<largeFaceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetList(string,bool?,CancellationToken)">
      <example>
This sample shows how to call GetList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceList> response = client.GetList("<largeFaceListId>");
]]></code>
This sample shows how to call GetList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceList> response = client.GetList("<largeFaceListId>", returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetListAsync(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetListAsync("<largeFaceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetListAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetListAsync("<largeFaceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetList(string,bool?,RequestContext)">
      <example>
This sample shows how to call GetList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetList("<largeFaceListId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetList with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetList("<largeFaceListId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
Console.WriteLine(result.GetProperty("recognitionModel").ToString());
Console.WriteLine(result.GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="UpdateListAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.UpdateListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateListAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = await client.UpdateListAsync("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateList(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.UpdateList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateList with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    userData = "<userData>",
});
Response response = client.UpdateList("<largeFaceListId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddFaceFromUrlAsync(string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromUrlAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largeFaceListId>", addFaceFromUrlContent);
]]></code>
This sample shows how to call AddFaceFromUrlAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
Response<AddFaceResult> response = await client.AddFaceFromUrlAsync("<largeFaceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromUrl(string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromUrl.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
Response<AddFaceResult> response = client.AddFaceFromUrl("<largeFaceListId>", addFaceFromUrlContent);
]]></code>
This sample shows how to call AddFaceFromUrl with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

AddFaceFromUrlContent addFaceFromUrlContent = new AddFaceFromUrlContent(new Uri("http://localhost:3000"));
Response<AddFaceResult> response = client.AddFaceFromUrl("<largeFaceListId>", addFaceFromUrlContent, targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromUrlAsync(string,RequestContent,string,string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromUrlAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceFromUrlAsync("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromUrlAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = await client.AddFaceFromUrlAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceFromUrl(string,RequestContent,string,string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromUrl and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceFromUrl("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromUrl with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    url = "http://localhost:3000",
});
Response response = client.AddFaceFromUrl("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceFromStreamAsync(string,BinaryData,string,DetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromStreamAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFaceFromStreamAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<AddFaceResult> response = await client.AddFaceFromStreamAsync("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromStream(string,BinaryData,string,DetectionModel?,string,CancellationToken)">
      <example>
This sample shows how to call AddFaceFromStream.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<AddFaceResult> response = client.AddFaceFromStream("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()));
]]></code>
This sample shows how to call AddFaceFromStream with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<AddFaceResult> response = client.AddFaceFromStream("<largeFaceListId>", BinaryData.FromObjectAsJson(new object()), targetFace: "<targetFace>", detectionModel: DetectionModel.Detection01, userData: "<userData>");
]]></code></example>
    </member>
    <member name="AddFaceFromStreamAsync(string,RequestContent,string,string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromStreamAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceFromStreamAsync("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromStreamAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AddFaceFromStreamAsync("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="AddFaceFromStream(string,RequestContent,string,string,string,RequestContext)">
      <example>
This sample shows how to call AddFaceFromStream and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFaceFromStream("<largeFaceListId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call AddFaceFromStream with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.AddFaceFromStream("<largeFaceListId>", content, targetFace: "<targetFace>", detectionModel: "detection_01", userData: "<userData>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="DeleteFaceAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.DeleteFaceAsync("<largeFaceListId>", "<persistedFaceId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.DeleteFaceAsync("<largeFaceListId>", "<persistedFaceId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteFace(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.DeleteFace("<largeFaceListId>", "<persistedFaceId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.DeleteFace("<largeFaceListId>", "<persistedFaceId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetListsAsync(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetListsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceList>> response = await client.GetListsAsync();
]]></code>
This sample shows how to call GetListsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceList>> response = await client.GetListsAsync(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetLists(string,int?,bool?,CancellationToken)">
      <example>
This sample shows how to call GetLists.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceList>> response = client.GetLists();
]]></code>
This sample shows how to call GetLists with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceList>> response = client.GetLists(start: "<start>", top: 1234, returnRecognitionModel: true);
]]></code></example>
    </member>
    <member name="GetListsAsync(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetListsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetListsAsync(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetListsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetListsAsync("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetLists(string,int?,bool?,RequestContext)">
      <example>
This sample shows how to call GetLists and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetLists(null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code>
This sample shows how to call GetLists with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetLists("<start>", 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
Console.WriteLine(result[0].GetProperty("recognitionModel").ToString());
Console.WriteLine(result[0].GetProperty("largeFaceListId").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<TrainingStatus> response = await client.GetTrainingStatusAsync("<largeFaceListId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<TrainingStatus> response = client.GetTrainingStatus("<largeFaceListId>");
]]></code>
This sample shows how to call GetTrainingStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<TrainingStatus> response = client.GetTrainingStatus("<largeFaceListId>");
]]></code></example>
    </member>
    <member name="GetTrainingStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetTrainingStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetTrainingStatusAsync("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetTrainingStatus(string,RequestContext)">
      <example>
This sample shows how to call GetTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetTrainingStatus("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code>
This sample shows how to call GetTrainingStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetTrainingStatus("<largeFaceListId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetFaceAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>");
]]></code>
This sample shows how to call GetFaceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceListFace> response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>");
]]></code></example>
    </member>
    <member name="GetFace(string,string,CancellationToken)">
      <example>
This sample shows how to call GetFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", "<persistedFaceId>");
]]></code>
This sample shows how to call GetFace with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<LargeFaceListFace> response = client.GetFace("<largeFaceListId>", "<persistedFaceId>");
]]></code></example>
    </member>
    <member name="GetFaceAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetFaceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetFaceAsync("<largeFaceListId>", "<persistedFaceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetFace(string,string,RequestContext)">
      <example>
This sample shows how to call GetFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetFace("<largeFaceListId>", "<persistedFaceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetFace with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetFace("<largeFaceListId>", "<persistedFaceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
Console.WriteLine(result.GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="UpdateFaceAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateFaceAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = await client.UpdateFaceAsync("<largeFaceListId>", "<persistedFaceId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UpdateFace(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateFace.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateFace("<largeFaceListId>", "<persistedFaceId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateFace with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    userData = "<userData>",
});
Response response = client.UpdateFace("<largeFaceListId>", "<persistedFaceId>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetFacesAsync(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetFacesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>");
]]></code>
This sample shows how to call GetFacesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceListFace>> response = await client.GetFacesAsync("<largeFaceListId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetFaces(string,string,int?,CancellationToken)">
      <example>
This sample shows how to call GetFaces.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>");
]]></code>
This sample shows how to call GetFaces with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<LargeFaceListFace>> response = client.GetFaces("<largeFaceListId>", start: "<start>", top: 1234);
]]></code></example>
    </member>
    <member name="GetFacesAsync(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetFacesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetFacesAsync("<largeFaceListId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetFacesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = await client.GetFacesAsync("<largeFaceListId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="GetFaces(string,string,int?,RequestContext)">
      <example>
This sample shows how to call GetFaces and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetFaces("<largeFaceListId>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code>
This sample shows how to call GetFaces with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response response = client.GetFaces("<largeFaceListId>", "<start>", 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
Console.WriteLine(result[0].GetProperty("userData").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceListAsync(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>");
]]></code>
This sample shows how to call FindSimilarFromLargeFaceListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<FindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceList(string,string,int?,FindSimilarMatchMode?,CancellationToken)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>");
]]></code>
This sample shows how to call FindSimilarFromLargeFaceList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Response<IReadOnlyList<FindSimilarResult>> response = client.FindSimilarFromLargeFaceList("<faceId>", "<largeFaceListId>", maxNumOfCandidatesReturned: 1234, mode: FindSimilarMatchMode.MatchPerson);
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceListAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largeFaceListId = "<largeFaceListId>",
});
Response response = await client.FindSimilarFromLargeFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromLargeFaceListAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    largeFaceListId = "<largeFaceListId>",
});
Response response = await client.FindSimilarFromLargeFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="FindSimilarFromLargeFaceList(RequestContent,RequestContext)">
      <example>
This sample shows how to call FindSimilarFromLargeFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    largeFaceListId = "<largeFaceListId>",
});
Response response = client.FindSimilarFromLargeFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code>
This sample shows how to call FindSimilarFromLargeFaceList with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

using RequestContent content = RequestContent.Create(new
{
    faceId = "<faceId>",
    maxNumOfCandidatesReturned = 1234,
    mode = "matchPerson",
    largeFaceListId = "<largeFaceListId>",
});
Response response = client.FindSimilarFromLargeFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("persistedFaceId").ToString());
]]></code></example>
    </member>
    <member name="TrainListAsync(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Operation operation = await client.TrainListAsync(WaitUntil.Completed, "<largeFaceListId>");
]]></code>
This sample shows how to call TrainListAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Operation operation = await client.TrainListAsync(WaitUntil.Completed, "<largeFaceListId>");
]]></code></example>
    </member>
    <member name="TrainList(WaitUntil,string,RequestContext)">
      <example>
This sample shows how to call TrainList.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Operation operation = client.TrainList(WaitUntil.Completed, "<largeFaceListId>");
]]></code>
This sample shows how to call TrainList with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargeFaceLists client = new FaceClient(endpoint, credential).GetLargeFaceListsClient();

Operation operation = client.TrainList(WaitUntil.Completed, "<largeFaceListId>");
]]></code></example>
    </member>
  </members>
</doc>