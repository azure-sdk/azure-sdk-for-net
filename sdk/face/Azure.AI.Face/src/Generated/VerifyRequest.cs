// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Face
{
    /// <summary> The VerifyRequest. </summary>
    internal partial class VerifyRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VerifyRequest"/>. </summary>
        /// <param name="faceId1"> faceId of the face, comes from Face - Detect. </param>
        /// <param name="faceId2"> faceId of the face, comes from Face - Detect. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="faceId1"/> or <paramref name="faceId2"/> is null. </exception>
        public VerifyRequest(string faceId1, string faceId2)
        {
            if (faceId1 == null)
            {
                throw new ArgumentNullException(nameof(faceId1));
            }
            if (faceId2 == null)
            {
                throw new ArgumentNullException(nameof(faceId2));
            }

            FaceId1 = faceId1;
            FaceId2 = faceId2;
        }

        /// <summary> Initializes a new instance of <see cref="VerifyRequest"/>. </summary>
        /// <param name="faceId1"> faceId of the face, comes from Face - Detect. </param>
        /// <param name="faceId2"> faceId of the face, comes from Face - Detect. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VerifyRequest(string faceId1, string faceId2, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FaceId1 = faceId1;
            FaceId2 = faceId2;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VerifyRequest"/> for deserialization. </summary>
        internal VerifyRequest()
        {
        }

        /// <summary> faceId of the face, comes from Face - Detect. </summary>
        public string FaceId1 { get; }
        /// <summary> faceId of the face, comes from Face - Detect. </summary>
        public string FaceId2 { get; }
    }
}
