// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Face
{
    // Data plane generated sub-client.
    /// <summary> The PersonGroups sub-client. </summary>
    public partial class PersonGroups
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PersonGroups for mocking. </summary>
        protected PersonGroups()
        {
        }

        /// <summary> Initializes a new instance of PersonGroups. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal PersonGroups(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> The most basic operation that applies to a resource. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreateGroupAsync(string,PersonGroup,CancellationToken)']/*" />
        public virtual async Task<Response> CreateGroupAsync(string personGroupId, PersonGroup resource, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = resource.ToRequestContent();
            Response response = await CreateGroupAsync(personGroupId, content, context).ConfigureAwait(false);
            return response;
        }

        /// <summary> The most basic operation that applies to a resource. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreateGroup(string,PersonGroup,CancellationToken)']/*" />
        public virtual Response CreateGroup(string personGroupId, PersonGroup resource, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = resource.ToRequestContent();
            Response response = CreateGroup(personGroupId, content, context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateGroupAsync(string,PersonGroup,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreateGroupAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateGroupAsync(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.CreateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGroupRequest(personGroupId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateGroup(string,PersonGroup,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreateGroup(string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateGroup(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.CreateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateGroupRequest(personGroupId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeleteGroupAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteGroupAsync(string personGroupId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeleteGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGroupRequest(personGroupId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeleteGroup(string,RequestContext)']/*" />
        public virtual Response DeleteGroup(string personGroupId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeleteGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGroupRequest(personGroupId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroupAsync(string,bool?,CancellationToken)']/*" />
        public virtual async Task<Response<PersonGroup>> GetGroupAsync(string personGroupId, bool? returnRecognitionModel = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetGroupAsync(personGroupId, returnRecognitionModel, context).ConfigureAwait(false);
            return Response.FromValue(PersonGroup.FromResponse(response), response);
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroup(string,bool?,CancellationToken)']/*" />
        public virtual Response<PersonGroup> GetGroup(string personGroupId, bool? returnRecognitionModel = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetGroup(personGroupId, returnRecognitionModel, context);
            return Response.FromValue(PersonGroup.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetGroupAsync(string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroupAsync(string,bool?,RequestContext)']/*" />
        public virtual async Task<Response> GetGroupAsync(string personGroupId, bool? returnRecognitionModel, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupRequest(personGroupId, returnRecognitionModel, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetGroup(string,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroup(string,bool?,RequestContext)']/*" />
        public virtual Response GetGroup(string personGroupId, bool? returnRecognitionModel, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupRequest(personGroupId, returnRecognitionModel, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdateGroupAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateGroupAsync(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGroupRequest(personGroupId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdateGroup(string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateGroup(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateGroupRequest(personGroupId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation that lists resources in a paginated way. </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroupsAsync(string,int?,bool?,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<PersonGroup>>> GetGroupsAsync(string start = null, int? top = null, bool? returnRecognitionModel = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetGroupsAsync(start, top, returnRecognitionModel, context).ConfigureAwait(false);
            IReadOnlyList<PersonGroup> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<PersonGroup> array = new List<PersonGroup>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(PersonGroup.DeserializePersonGroup(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Operation that lists resources in a paginated way. </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroups(string,int?,bool?,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<PersonGroup>> GetGroups(string start = null, int? top = null, bool? returnRecognitionModel = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetGroups(start, top, returnRecognitionModel, context);
            IReadOnlyList<PersonGroup> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<PersonGroup> array = new List<PersonGroup>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(PersonGroup.DeserializePersonGroup(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Operation that lists resources in a paginated way.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetGroupsAsync(string,int?,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroupsAsync(string,int?,bool?,RequestContext)']/*" />
        public virtual async Task<Response> GetGroupsAsync(string start, int? top, bool? returnRecognitionModel, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetGroups");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupsRequest(start, top, returnRecognitionModel, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Operation that lists resources in a paginated way.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetGroups(string,int?,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetGroups(string,int?,bool?,RequestContext)']/*" />
        public virtual Response GetGroups(string start, int? top, bool? returnRecognitionModel, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetGroups");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupsRequest(start, top, returnRecognitionModel, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreatePersonAsync(string,PersonGroupPerson,CancellationToken)']/*" />
        public virtual async Task<Response<PersonGroupPerson>> CreatePersonAsync(string personGroupId, PersonGroupPerson resource, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = resource.ToRequestContent();
            Response response = await CreatePersonAsync(personGroupId, content, context).ConfigureAwait(false);
            return Response.FromValue(PersonGroupPerson.FromResponse(response), response);
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreatePerson(string,PersonGroupPerson,CancellationToken)']/*" />
        public virtual Response<PersonGroupPerson> CreatePerson(string personGroupId, PersonGroupPerson resource, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = resource.ToRequestContent();
            Response response = CreatePerson(personGroupId, content, context);
            return Response.FromValue(PersonGroupPerson.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreatePersonAsync(string,PersonGroupPerson,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreatePersonAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreatePersonAsync(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.CreatePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreatePersonRequest(personGroupId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreatePerson(string,PersonGroupPerson,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='CreatePerson(string,RequestContent,RequestContext)']/*" />
        public virtual Response CreatePerson(string personGroupId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.CreatePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreatePersonRequest(personGroupId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeletePersonAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeletePersonAsync(string personGroupId, string personId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeletePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeletePersonRequest(personGroupId, personId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeletePerson(string,string,RequestContext)']/*" />
        public virtual Response DeletePerson(string personGroupId, string personId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeletePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeletePersonRequest(personGroupId, personId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPersonAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<PersonGroupPerson>> GetPersonAsync(string personGroupId, string personId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPersonAsync(personGroupId, personId, context).ConfigureAwait(false);
            return Response.FromValue(PersonGroupPerson.FromResponse(response), response);
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPerson(string,string,CancellationToken)']/*" />
        public virtual Response<PersonGroupPerson> GetPerson(string personGroupId, string personId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPerson(personGroupId, personId, context);
            return Response.FromValue(PersonGroupPerson.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPersonAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPersonAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetPersonAsync(string personGroupId, string personId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetPerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPersonRequest(personGroupId, personId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPerson(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPerson(string,string,RequestContext)']/*" />
        public virtual Response GetPerson(string personGroupId, string personId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetPerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPersonRequest(personGroupId, personId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdatePersonAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdatePersonAsync(string personGroupId, string personId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdatePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePersonRequest(personGroupId, personId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdatePerson(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdatePerson(string personGroupId, string personId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdatePerson");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePersonRequest(personGroupId, personId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation that lists resources in a paginated way. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPeopleAsync(string,string,int?,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<PersonGroupPerson>>> GetPeopleAsync(string personGroupId, string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPeopleAsync(personGroupId, start, top, context).ConfigureAwait(false);
            IReadOnlyList<PersonGroupPerson> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<PersonGroupPerson> array = new List<PersonGroupPerson>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(PersonGroupPerson.DeserializePersonGroupPerson(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Operation that lists resources in a paginated way. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPeople(string,string,int?,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<PersonGroupPerson>> GetPeople(string personGroupId, string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPeople(personGroupId, start, top, context);
            IReadOnlyList<PersonGroupPerson> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<PersonGroupPerson> array = new List<PersonGroupPerson>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(PersonGroupPerson.DeserializePersonGroupPerson(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Operation that lists resources in a paginated way.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPeopleAsync(string,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPeopleAsync(string,string,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetPeopleAsync(string personGroupId, string start, int? top, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetPeople");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPeopleRequest(personGroupId, start, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Operation that lists resources in a paginated way.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPeople(string,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetPeople(string,string,int?,RequestContext)']/*" />
        public virtual Response GetPeople(string personGroupId, string start, int? top, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetPeople");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPeopleRequest(personGroupId, start, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="addFaceFromUrlContent"> Model for add face by url. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="addFaceFromUrlContent"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromUrlAsync(string,string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)']/*" />
        public virtual async Task<Response<AddFaceResult>> AddFaceFromUrlAsync(string personGroupId, string personId, AddFaceFromUrlContent addFaceFromUrlContent, string targetFace = null, DetectionModel? detectionModel = null, string userData = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (addFaceFromUrlContent == null)
            {
                throw new ArgumentNullException(nameof(addFaceFromUrlContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = addFaceFromUrlContent.ToRequestContent();
            Response response = await AddFaceFromUrlAsync(personGroupId, personId, content, targetFace, detectionModel?.ToString(), userData, context).ConfigureAwait(false);
            return Response.FromValue(AddFaceResult.FromResponse(response), response);
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="addFaceFromUrlContent"> Model for add face by url. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="addFaceFromUrlContent"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromUrl(string,string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)']/*" />
        public virtual Response<AddFaceResult> AddFaceFromUrl(string personGroupId, string personId, AddFaceFromUrlContent addFaceFromUrlContent, string targetFace = null, DetectionModel? detectionModel = null, string userData = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (addFaceFromUrlContent == null)
            {
                throw new ArgumentNullException(nameof(addFaceFromUrlContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = addFaceFromUrlContent.ToRequestContent();
            Response response = AddFaceFromUrl(personGroupId, personId, content, targetFace, detectionModel?.ToString(), userData, context);
            return Response.FromValue(AddFaceResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddFaceFromUrlAsync(string,string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromUrlAsync(string,string,RequestContent,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> AddFaceFromUrlAsync(string personGroupId, string personId, RequestContent content, string targetFace = null, string detectionModel = null, string userData = null, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.AddFaceFromUrl");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddFaceFromUrlRequest(personGroupId, personId, content, targetFace, detectionModel, userData, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddFaceFromUrl(string,string,AddFaceFromUrlContent,string,DetectionModel?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromUrl(string,string,RequestContent,string,string,string,RequestContext)']/*" />
        public virtual Response AddFaceFromUrl(string personGroupId, string personId, RequestContent content, string targetFace = null, string detectionModel = null, string userData = null, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.AddFaceFromUrl");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddFaceFromUrlRequest(personGroupId, personId, content, targetFace, detectionModel, userData, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="imageContent"> The image to be analyzed. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="imageContent"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromStreamAsync(string,string,BinaryData,string,DetectionModel?,string,CancellationToken)']/*" />
        public virtual async Task<Response<AddFaceResult>> AddFaceFromStreamAsync(string personGroupId, string personId, BinaryData imageContent, string targetFace = null, DetectionModel? detectionModel = null, string userData = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (imageContent == null)
            {
                throw new ArgumentNullException(nameof(imageContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = imageContent;
            Response response = await AddFaceFromStreamAsync(personGroupId, personId, content, targetFace, detectionModel?.ToString(), userData, context).ConfigureAwait(false);
            return Response.FromValue(AddFaceResult.FromResponse(response), response);
        }

        /// <summary> Operation that applies to a collection of resources. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="imageContent"> The image to be analyzed. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="imageContent"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromStream(string,string,BinaryData,string,DetectionModel?,string,CancellationToken)']/*" />
        public virtual Response<AddFaceResult> AddFaceFromStream(string personGroupId, string personId, BinaryData imageContent, string targetFace = null, DetectionModel? detectionModel = null, string userData = null, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (imageContent == null)
            {
                throw new ArgumentNullException(nameof(imageContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = imageContent;
            Response response = AddFaceFromStream(personGroupId, personId, content, targetFace, detectionModel?.ToString(), userData, context);
            return Response.FromValue(AddFaceResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddFaceFromStreamAsync(string,string,BinaryData,string,DetectionModel?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromStreamAsync(string,string,RequestContent,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> AddFaceFromStreamAsync(string personGroupId, string personId, RequestContent content, string targetFace = null, string detectionModel = null, string userData = null, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.AddFaceFromStream");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddFaceFromStreamRequest(personGroupId, personId, content, targetFace, detectionModel, userData, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Operation that applies to a collection of resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddFaceFromStream(string,string,BinaryData,string,DetectionModel?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        /// <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        /// <param name="userData"> User-provided data attached to the face. The size limit is 1KB. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> or <paramref name="personId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='AddFaceFromStream(string,string,RequestContent,string,string,string,RequestContext)']/*" />
        public virtual Response AddFaceFromStream(string personGroupId, string personId, RequestContent content, string targetFace = null, string detectionModel = null, string userData = null, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.AddFaceFromStream");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddFaceFromStreamRequest(personGroupId, personId, content, targetFace, detectionModel, userData, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeleteFaceAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteFaceAsync(string personGroupId, string personId, string persistedFaceId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeleteFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteFaceRequest(personGroupId, personId, persistedFaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='DeleteFace(string,string,string,RequestContext)']/*" />
        public virtual Response DeleteFace(string personGroupId, string personId, string persistedFaceId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.DeleteFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteFaceRequest(personGroupId, personId, persistedFaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetFaceAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<PersonGroupPersonFace>> GetFaceAsync(string personGroupId, string personId, string persistedFaceId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFaceAsync(personGroupId, personId, persistedFaceId, context).ConfigureAwait(false);
            return Response.FromValue(PersonGroupPersonFace.FromResponse(response), response);
        }

        /// <summary> Resource read operation template. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetFace(string,string,string,CancellationToken)']/*" />
        public virtual Response<PersonGroupPersonFace> GetFace(string personGroupId, string personId, string persistedFaceId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFace(personGroupId, personId, persistedFaceId, context);
            return Response.FromValue(PersonGroupPersonFace.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFaceAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetFaceAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetFaceAsync(string personGroupId, string personId, string persistedFaceId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFaceRequest(personGroupId, personId, persistedFaceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Resource read operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFace(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetFace(string,string,string,RequestContext)']/*" />
        public virtual Response GetFace(string personGroupId, string personId, string persistedFaceId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFaceRequest(personGroupId, personId, persistedFaceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/>, <paramref name="persistedFaceId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdateFaceAsync(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateFaceAsync(string personGroupId, string personId, string persistedFaceId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdateFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateFaceRequest(personGroupId, personId, persistedFaceId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="personId"> ID of the person. </param>
        /// <param name="persistedFaceId"> Face ID of the face. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/>, <paramref name="personId"/>, <paramref name="persistedFaceId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/>, <paramref name="personId"/> or <paramref name="persistedFaceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='UpdateFace(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateFace(string personGroupId, string personId, string persistedFaceId, RequestContent content, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }
            if (personId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personId));
            }
            if (persistedFaceId == null)
            {
                throw new ArgumentNullException(nameof(persistedFaceId));
            }
            if (persistedFaceId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(persistedFaceId));
            }
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.UpdateFace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateFaceRequest(personGroupId, personId, persistedFaceId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="faceIds"> Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </param>
        /// <param name="personGroupId"> Id of the target person group, created by PersonGroup - Create. </param>
        /// <param name="maxNumOfCandidatesReturned"> The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10). </param>
        /// <param name="confidenceThreshold"> Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="faceIds"/> or <paramref name="personGroupId"/> is null. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='IdentifyFromPersonGroupAsync(IEnumerable{string},string,int?,float?,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<IdentifyResult>>> IdentifyFromPersonGroupAsync(IEnumerable<string> faceIds, string personGroupId, int? maxNumOfCandidatesReturned = null, float? confidenceThreshold = null, CancellationToken cancellationToken = default)
        {
            if (faceIds == null)
            {
                throw new ArgumentNullException(nameof(faceIds));
            }
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            IdentifyFromPersonGroupRequest identifyFromPersonGroupRequest = new IdentifyFromPersonGroupRequest(faceIds.ToList(), personGroupId)
            {
                MaxNumOfCandidatesReturned = maxNumOfCandidatesReturned,
                ConfidenceThreshold = confidenceThreshold
            };
            Response response = await IdentifyFromPersonGroupAsync(identifyFromPersonGroupRequest.ToRequestContent(), context).ConfigureAwait(false);
            IReadOnlyList<IdentifyResult> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<IdentifyResult> array = new List<IdentifyResult>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(IdentifyResult.DeserializeIdentifyResult(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="faceIds"> Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </param>
        /// <param name="personGroupId"> Id of the target person group, created by PersonGroup - Create. </param>
        /// <param name="maxNumOfCandidatesReturned"> The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10). </param>
        /// <param name="confidenceThreshold"> Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="faceIds"/> or <paramref name="personGroupId"/> is null. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='IdentifyFromPersonGroup(IEnumerable{string},string,int?,float?,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<IdentifyResult>> IdentifyFromPersonGroup(IEnumerable<string> faceIds, string personGroupId, int? maxNumOfCandidatesReturned = null, float? confidenceThreshold = null, CancellationToken cancellationToken = default)
        {
            if (faceIds == null)
            {
                throw new ArgumentNullException(nameof(faceIds));
            }
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            IdentifyFromPersonGroupRequest identifyFromPersonGroupRequest = new IdentifyFromPersonGroupRequest(faceIds.ToList(), personGroupId)
            {
                MaxNumOfCandidatesReturned = maxNumOfCandidatesReturned,
                ConfidenceThreshold = confidenceThreshold
            };
            Response response = IdentifyFromPersonGroup(identifyFromPersonGroupRequest.ToRequestContent(), context);
            IReadOnlyList<IdentifyResult> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<IdentifyResult> array = new List<IdentifyResult>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(IdentifyResult.DeserializeIdentifyResult(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="IdentifyFromPersonGroupAsync(IEnumerable{string},string,int?,float?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='IdentifyFromPersonGroupAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> IdentifyFromPersonGroupAsync(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.IdentifyFromPersonGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIdentifyFromPersonGroupRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="IdentifyFromPersonGroup(IEnumerable{string},string,int?,float?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='IdentifyFromPersonGroup(RequestContent,RequestContext)']/*" />
        public virtual Response IdentifyFromPersonGroup(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.IdentifyFromPersonGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateIdentifyFromPersonGroupRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="faceId"> faceId of the face, comes from Face - Detect. </param>
        /// <param name="personGroupId"> Id of the target person group, created by PersonGroup - Create. </param>
        /// <param name="personId"> Specify a certain person in person group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="faceId"/>, <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='VerifyFromPersonGroupAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<VerifyResult>> VerifyFromPersonGroupAsync(string faceId, string personGroupId, string personId, CancellationToken cancellationToken = default)
        {
            if (faceId == null)
            {
                throw new ArgumentNullException(nameof(faceId));
            }
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            VerifyFromPersonGroupRequest verifyFromPersonGroupRequest = new VerifyFromPersonGroupRequest(faceId, personGroupId, personId);
            Response response = await VerifyFromPersonGroupAsync(verifyFromPersonGroupRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(VerifyResult.FromResponse(response), response);
        }

        /// <summary> A remote procedure call (RPC) operation. </summary>
        /// <param name="faceId"> faceId of the face, comes from Face - Detect. </param>
        /// <param name="personGroupId"> Id of the target person group, created by PersonGroup - Create. </param>
        /// <param name="personId"> Specify a certain person in person group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="faceId"/>, <paramref name="personGroupId"/> or <paramref name="personId"/> is null. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='VerifyFromPersonGroup(string,string,string,CancellationToken)']/*" />
        public virtual Response<VerifyResult> VerifyFromPersonGroup(string faceId, string personGroupId, string personId, CancellationToken cancellationToken = default)
        {
            if (faceId == null)
            {
                throw new ArgumentNullException(nameof(faceId));
            }
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personId == null)
            {
                throw new ArgumentNullException(nameof(personId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            VerifyFromPersonGroupRequest verifyFromPersonGroupRequest = new VerifyFromPersonGroupRequest(faceId, personGroupId, personId);
            Response response = VerifyFromPersonGroup(verifyFromPersonGroupRequest.ToRequestContent(), context);
            return Response.FromValue(VerifyResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="VerifyFromPersonGroupAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='VerifyFromPersonGroupAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> VerifyFromPersonGroupAsync(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.VerifyFromPersonGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyFromPersonGroupRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] A remote procedure call (RPC) operation.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="VerifyFromPersonGroup(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='VerifyFromPersonGroup(RequestContent,RequestContext)']/*" />
        public virtual Response VerifyFromPersonGroup(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.VerifyFromPersonGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyFromPersonGroupRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The most basic operation that applies to a resource. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetTrainingStatusAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<TrainingStatus>> GetTrainingStatusAsync(string personGroupId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTrainingStatusAsync(personGroupId, context).ConfigureAwait(false);
            return Response.FromValue(TrainingStatus.FromResponse(response), response);
        }

        /// <summary> The most basic operation that applies to a resource. </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetTrainingStatus(string,CancellationToken)']/*" />
        public virtual Response<TrainingStatus> GetTrainingStatus(string personGroupId, CancellationToken cancellationToken = default)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTrainingStatus(personGroupId, context);
            return Response.FromValue(TrainingStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTrainingStatusAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetTrainingStatusAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetTrainingStatusAsync(string personGroupId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetTrainingStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTrainingStatusRequest(personGroupId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The most basic operation that applies to a resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTrainingStatus(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='GetTrainingStatus(string,RequestContext)']/*" />
        public virtual Response GetTrainingStatus(string personGroupId, RequestContext context)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.GetTrainingStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTrainingStatusRequest(personGroupId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Resource action operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='TrainGroupAsync(WaitUntil,string,RequestContext)']/*" />
        public virtual async Task<Operation> TrainGroupAsync(WaitUntil waitUntil, string personGroupId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.TrainGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTrainGroupRequest(personGroupId, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "PersonGroups.TrainGroup", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Resource action operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="personGroupId"> ID of the container. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="personGroupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="personGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/PersonGroups.xml" path="doc/members/member[@name='TrainGroup(WaitUntil,string,RequestContext)']/*" />
        public virtual Operation TrainGroup(WaitUntil waitUntil, string personGroupId, RequestContext context = null)
        {
            if (personGroupId == null)
            {
                throw new ArgumentNullException(nameof(personGroupId));
            }
            if (personGroupId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(personGroupId));
            }

            using var scope = ClientDiagnostics.CreateScope("PersonGroups.TrainGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTrainGroupRequest(personGroupId, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "PersonGroups.TrainGroup", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateGroupRequest(string personGroupId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGroupRequest(string personGroupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGroupRequest(string personGroupId, bool? returnRecognitionModel, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            if (returnRecognitionModel != null)
            {
                uri.AppendQuery("returnRecognitionModel", returnRecognitionModel.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateGroupRequest(string personGroupId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetGroupsRequest(string start, int? top, bool? returnRecognitionModel, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            if (returnRecognitionModel != null)
            {
                uri.AppendQuery("returnRecognitionModel", returnRecognitionModel.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreatePersonRequest(string personGroupId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeletePersonRequest(string personGroupId, string personId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPersonRequest(string personGroupId, string personId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdatePersonRequest(string personGroupId, string personId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetPeopleRequest(string personGroupId, string start, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddFaceFromUrlRequest(string personGroupId, string personId, RequestContent content, string targetFace, string detectionModel, string userData, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            uri.AppendPath("/persistedfaces", false);
            if (targetFace != null)
            {
                uri.AppendQuery("targetFace", targetFace, true);
            }
            if (detectionModel != null)
            {
                uri.AppendQuery("detectionModel", detectionModel, true);
            }
            if (userData != null)
            {
                uri.AppendQuery("userData", userData, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddFaceFromStreamRequest(string personGroupId, string personId, RequestContent content, string targetFace, string detectionModel, string userData, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            uri.AppendPath("/persistedfaces", false);
            if (targetFace != null)
            {
                uri.AppendQuery("targetFace", targetFace, true);
            }
            if (detectionModel != null)
            {
                uri.AppendQuery("detectionModel", detectionModel, true);
            }
            if (userData != null)
            {
                uri.AppendQuery("userData", userData, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("content-type", "application/octet-stream");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteFaceRequest(string personGroupId, string personId, string persistedFaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            uri.AppendPath("/persistedfaces/", false);
            uri.AppendPath(persistedFaceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFaceRequest(string personGroupId, string personId, string persistedFaceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            uri.AppendPath("/persistedfaces/", false);
            uri.AppendPath(persistedFaceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateFaceRequest(string personGroupId, string personId, string persistedFaceId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/persons/", false);
            uri.AppendPath(personId, true);
            uri.AppendPath("/persistedfaces/", false);
            uri.AppendPath(persistedFaceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateIdentifyFromPersonGroupRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/identify", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateVerifyFromPersonGroupRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/verify", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateTrainGroupRequest(string personGroupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/train", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTrainingStatusRequest(string personGroupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/persongroups/", false);
            uri.AppendPath(personGroupId, true);
            uri.AppendPath("/training", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
