// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.Face
{
    public partial class FaceLandmarks : IUtf8JsonSerializable, IJsonModel<FaceLandmarks>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FaceLandmarks>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<FaceLandmarks>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceLandmarks)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("pupilLeft"u8);
            writer.WriteObjectValue(PupilLeft);
            writer.WritePropertyName("pupilRight"u8);
            writer.WriteObjectValue(PupilRight);
            writer.WritePropertyName("noseTip"u8);
            writer.WriteObjectValue(NoseTip);
            writer.WritePropertyName("mouthLeft"u8);
            writer.WriteObjectValue(MouthLeft);
            writer.WritePropertyName("mouthRight"u8);
            writer.WriteObjectValue(MouthRight);
            writer.WritePropertyName("eyebrowLeftOuter"u8);
            writer.WriteObjectValue(EyebrowLeftOuter);
            writer.WritePropertyName("eyebrowLeftInner"u8);
            writer.WriteObjectValue(EyebrowLeftInner);
            writer.WritePropertyName("eyeLeftOuter"u8);
            writer.WriteObjectValue(EyeLeftOuter);
            writer.WritePropertyName("eyeLeftTop"u8);
            writer.WriteObjectValue(EyeLeftTop);
            writer.WritePropertyName("eyeLeftBottom"u8);
            writer.WriteObjectValue(EyeLeftBottom);
            writer.WritePropertyName("eyeLeftInner"u8);
            writer.WriteObjectValue(EyeLeftInner);
            writer.WritePropertyName("eyebrowRightInner"u8);
            writer.WriteObjectValue(EyebrowRightInner);
            writer.WritePropertyName("eyebrowRightOuter"u8);
            writer.WriteObjectValue(EyebrowRightOuter);
            writer.WritePropertyName("eyeRightInner"u8);
            writer.WriteObjectValue(EyeRightInner);
            writer.WritePropertyName("eyeRightTop"u8);
            writer.WriteObjectValue(EyeRightTop);
            writer.WritePropertyName("eyeRightBottom"u8);
            writer.WriteObjectValue(EyeRightBottom);
            writer.WritePropertyName("eyeRightOuter"u8);
            writer.WriteObjectValue(EyeRightOuter);
            writer.WritePropertyName("noseRootLeft"u8);
            writer.WriteObjectValue(NoseRootLeft);
            writer.WritePropertyName("noseRootRight"u8);
            writer.WriteObjectValue(NoseRootRight);
            writer.WritePropertyName("noseLeftAlarTop"u8);
            writer.WriteObjectValue(NoseLeftAlarTop);
            writer.WritePropertyName("noseRightAlarTop"u8);
            writer.WriteObjectValue(NoseRightAlarTop);
            writer.WritePropertyName("noseLeftAlarOutTip"u8);
            writer.WriteObjectValue(NoseLeftAlarOutTip);
            writer.WritePropertyName("noseRightAlarOutTip"u8);
            writer.WriteObjectValue(NoseRightAlarOutTip);
            writer.WritePropertyName("upperLipTop"u8);
            writer.WriteObjectValue(UpperLipTop);
            writer.WritePropertyName("upperLipBottom"u8);
            writer.WriteObjectValue(UpperLipBottom);
            writer.WritePropertyName("underLipTop"u8);
            writer.WriteObjectValue(UnderLipTop);
            writer.WritePropertyName("underLipBottom"u8);
            writer.WriteObjectValue(UnderLipBottom);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        FaceLandmarks IJsonModel<FaceLandmarks>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FaceLandmarks)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFaceLandmarks(document.RootElement, options);
        }

        internal static FaceLandmarks DeserializeFaceLandmarks(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            LandmarkCoordinate pupilLeft = default;
            LandmarkCoordinate pupilRight = default;
            LandmarkCoordinate noseTip = default;
            LandmarkCoordinate mouthLeft = default;
            LandmarkCoordinate mouthRight = default;
            LandmarkCoordinate eyebrowLeftOuter = default;
            LandmarkCoordinate eyebrowLeftInner = default;
            LandmarkCoordinate eyeLeftOuter = default;
            LandmarkCoordinate eyeLeftTop = default;
            LandmarkCoordinate eyeLeftBottom = default;
            LandmarkCoordinate eyeLeftInner = default;
            LandmarkCoordinate eyebrowRightInner = default;
            LandmarkCoordinate eyebrowRightOuter = default;
            LandmarkCoordinate eyeRightInner = default;
            LandmarkCoordinate eyeRightTop = default;
            LandmarkCoordinate eyeRightBottom = default;
            LandmarkCoordinate eyeRightOuter = default;
            LandmarkCoordinate noseRootLeft = default;
            LandmarkCoordinate noseRootRight = default;
            LandmarkCoordinate noseLeftAlarTop = default;
            LandmarkCoordinate noseRightAlarTop = default;
            LandmarkCoordinate noseLeftAlarOutTip = default;
            LandmarkCoordinate noseRightAlarOutTip = default;
            LandmarkCoordinate upperLipTop = default;
            LandmarkCoordinate upperLipBottom = default;
            LandmarkCoordinate underLipTop = default;
            LandmarkCoordinate underLipBottom = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pupilLeft"u8))
                {
                    pupilLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("pupilRight"u8))
                {
                    pupilRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseTip"u8))
                {
                    noseTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("mouthLeft"u8))
                {
                    mouthLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("mouthRight"u8))
                {
                    mouthRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyebrowLeftOuter"u8))
                {
                    eyebrowLeftOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyebrowLeftInner"u8))
                {
                    eyebrowLeftInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeLeftOuter"u8))
                {
                    eyeLeftOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeLeftTop"u8))
                {
                    eyeLeftTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeLeftBottom"u8))
                {
                    eyeLeftBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeLeftInner"u8))
                {
                    eyeLeftInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyebrowRightInner"u8))
                {
                    eyebrowRightInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyebrowRightOuter"u8))
                {
                    eyebrowRightOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeRightInner"u8))
                {
                    eyeRightInner = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeRightTop"u8))
                {
                    eyeRightTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeRightBottom"u8))
                {
                    eyeRightBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eyeRightOuter"u8))
                {
                    eyeRightOuter = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseRootLeft"u8))
                {
                    noseRootLeft = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseRootRight"u8))
                {
                    noseRootRight = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseLeftAlarTop"u8))
                {
                    noseLeftAlarTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseRightAlarTop"u8))
                {
                    noseRightAlarTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseLeftAlarOutTip"u8))
                {
                    noseLeftAlarOutTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("noseRightAlarOutTip"u8))
                {
                    noseRightAlarOutTip = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("upperLipTop"u8))
                {
                    upperLipTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("upperLipBottom"u8))
                {
                    upperLipBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("underLipTop"u8))
                {
                    underLipTop = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("underLipBottom"u8))
                {
                    underLipBottom = LandmarkCoordinate.DeserializeLandmarkCoordinate(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new FaceLandmarks(
                pupilLeft,
                pupilRight,
                noseTip,
                mouthLeft,
                mouthRight,
                eyebrowLeftOuter,
                eyebrowLeftInner,
                eyeLeftOuter,
                eyeLeftTop,
                eyeLeftBottom,
                eyeLeftInner,
                eyebrowRightInner,
                eyebrowRightOuter,
                eyeRightInner,
                eyeRightTop,
                eyeRightBottom,
                eyeRightOuter,
                noseRootLeft,
                noseRootRight,
                noseLeftAlarTop,
                noseRightAlarTop,
                noseLeftAlarOutTip,
                noseRightAlarOutTip,
                upperLipTop,
                upperLipBottom,
                underLipTop,
                underLipBottom,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FaceLandmarks>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FaceLandmarks)} does not support '{options.Format}' format.");
            }
        }

        FaceLandmarks IPersistableModel<FaceLandmarks>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FaceLandmarks>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFaceLandmarks(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FaceLandmarks)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<FaceLandmarks>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static FaceLandmarks FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFaceLandmarks(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
