// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Face
{
    // Data plane generated sub-client.
    /// <summary> The LivenessSessions sub-client. </summary>
    public partial class LivenessSessions
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://cognitiveservices.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of LivenessSessions for mocking. </summary>
        protected LivenessSessions()
        {
        }

        /// <summary> Initializes a new instance of LivenessSessions. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal LivenessSessions(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary>
        /// Lists all matching session types.
        /// List sessions from the last sessionId greater than the "start".
        /// The result should be ordered by sessionId in ascending order.
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionsAsync(string,int?,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<LivenessSessionItem>>> GetSessionsAsync(string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSessionsAsync(start, top, context).ConfigureAwait(false);
            IReadOnlyList<LivenessSessionItem> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<LivenessSessionItem> array = new List<LivenessSessionItem>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(LivenessSessionItem.DeserializeLivenessSessionItem(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// Lists all matching session types.
        /// List sessions from the last sessionId greater than the "start".
        /// The result should be ordered by sessionId in ascending order.
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessions(string,int?,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<LivenessSessionItem>> GetSessions(string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSessions(start, top, context);
            IReadOnlyList<LivenessSessionItem> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<LivenessSessionItem> array = new List<LivenessSessionItem>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(LivenessSessionItem.DeserializeLivenessSessionItem(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Lists all matching session types.
        /// List sessions from the last sessionId greater than the "start".
        /// The result should be ordered by sessionId in ascending order.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSessionsAsync(string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionsAsync(string,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetSessionsAsync(string start, int? top, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSessions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionsRequest(start, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all matching session types.
        /// List sessions from the last sessionId greater than the "start".
        /// The result should be ordered by sessionId in ascending order.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSessions(string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessions(string,int?,RequestContext)']/*" />
        public virtual Response GetSessions(string start, int? top, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSessions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionsRequest(start, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get session result of detectLiveness. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<LivenessSession>> GetSessionAsync(string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSessionAsync(sessionId, context).ConfigureAwait(false);
            return Response.FromValue(LivenessSession.FromResponse(response), response);
        }

        /// <summary> Get session result of detectLiveness. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSession(string,CancellationToken)']/*" />
        public virtual Response<LivenessSession> GetSession(string sessionId, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSession(sessionId, context);
            return Response.FromValue(LivenessSession.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get session result of detectLiveness.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSessionAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSessionAsync(string sessionId, RequestContext context)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionRequest(sessionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get session result of detectLiveness.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSession(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSession(string,RequestContext)']/*" />
        public virtual Response GetSession(string sessionId, RequestContext context)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionRequest(sessionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a session and all of it's audit results.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='DeleteSessionAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteSessionAsync(string sessionId, RequestContext context = null)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.DeleteSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteSessionRequest(sessionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes a session and all of it's audit results.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='DeleteSession(string,RequestContext)']/*" />
        public virtual Response DeleteSession(string sessionId, RequestContext context = null)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.DeleteSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteSessionRequest(sessionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get session audit requests/responses for the session. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAuditEntriesAsync(string,string,int?,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<LivenessSessionAuditEntry>>> GetSessionAuditEntriesAsync(string sessionId, string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSessionAuditEntriesAsync(sessionId, start, top, context).ConfigureAwait(false);
            IReadOnlyList<LivenessSessionAuditEntry> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<LivenessSessionAuditEntry> array = new List<LivenessSessionAuditEntry>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(LivenessSessionAuditEntry.DeserializeLivenessSessionAuditEntry(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Get session audit requests/responses for the session. </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAuditEntries(string,string,int?,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<LivenessSessionAuditEntry>> GetSessionAuditEntries(string sessionId, string start = null, int? top = null, CancellationToken cancellationToken = default)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSessionAuditEntries(sessionId, start, top, context);
            IReadOnlyList<LivenessSessionAuditEntry> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<LivenessSessionAuditEntry> array = new List<LivenessSessionAuditEntry>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(LivenessSessionAuditEntry.DeserializeLivenessSessionAuditEntry(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Get session audit requests/responses for the session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSessionAuditEntriesAsync(string,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAuditEntriesAsync(string,string,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetSessionAuditEntriesAsync(string sessionId, string start, int? top, RequestContext context)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSessionAuditEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionAuditEntriesRequest(sessionId, start, top, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get session audit requests/responses for the session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSessionAuditEntries(string,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="sessionId"> Unique ID to reference this session. </param>
        /// <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        /// <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='GetSessionAuditEntries(string,string,int?,RequestContext)']/*" />
        public virtual Response GetSessionAuditEntries(string sessionId, string start, int? top, RequestContext context)
        {
            if (sessionId == null)
            {
                throw new ArgumentNullException(nameof(sessionId));
            }
            if (sessionId.Length == 0)
            {
                throw new ArgumentException("Value cannot be an empty string.", nameof(sessionId));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.GetSessionAuditEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSessionAuditEntriesRequest(sessionId, start, top, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates face liveness detection session. </summary>
        /// <param name="livenessSessionCreationContent"> Request for creating liveness session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="livenessSessionCreationContent"/> is null. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='CreateSessionAsync(LivenessSessionCreationContent,CancellationToken)']/*" />
        public virtual async Task<Response<LivenessSessionCreationResult>> CreateSessionAsync(LivenessSessionCreationContent livenessSessionCreationContent, CancellationToken cancellationToken = default)
        {
            if (livenessSessionCreationContent == null)
            {
                throw new ArgumentNullException(nameof(livenessSessionCreationContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = livenessSessionCreationContent.ToRequestContent();
            Response response = await CreateSessionAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(LivenessSessionCreationResult.FromResponse(response), response);
        }

        /// <summary> Creates face liveness detection session. </summary>
        /// <param name="livenessSessionCreationContent"> Request for creating liveness session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="livenessSessionCreationContent"/> is null. </exception>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='CreateSession(LivenessSessionCreationContent,CancellationToken)']/*" />
        public virtual Response<LivenessSessionCreationResult> CreateSession(LivenessSessionCreationContent livenessSessionCreationContent, CancellationToken cancellationToken = default)
        {
            if (livenessSessionCreationContent == null)
            {
                throw new ArgumentNullException(nameof(livenessSessionCreationContent));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = livenessSessionCreationContent.ToRequestContent();
            Response response = CreateSession(content, context);
            return Response.FromValue(LivenessSessionCreationResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates face liveness detection session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateSessionAsync(LivenessSessionCreationContent,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='CreateSessionAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateSessionAsync(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.CreateSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSessionRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates face liveness detection session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateSession(LivenessSessionCreationContent,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/LivenessSessions.xml" path="doc/members/member[@name='CreateSession(RequestContent,RequestContext)']/*" />
        public virtual Response CreateSession(RequestContent content, RequestContext context = null)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            using var scope = ClientDiagnostics.CreateScope("LivenessSessions.CreateSession");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSessionRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSessionsRequest(string start, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/detectLiveness/singleModal/sessions", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSessionRequest(string sessionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/detectLiveness/singleModal/sessions/", false);
            uri.AppendPath(sessionId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteSessionRequest(string sessionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/detectLiveness/singleModal/sessions/", false);
            uri.AppendPath(sessionId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSessionAuditEntriesRequest(string sessionId, string start, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/detectLiveness/singleModal/sessions/", false);
            uri.AppendPath(sessionId, true);
            uri.AppendPath("/audit", false);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateSessionRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/face/", false);
            uri.AppendPath(_apiVersion, true);
            uri.AppendPath("/detectLiveness/singleModal/sessions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
