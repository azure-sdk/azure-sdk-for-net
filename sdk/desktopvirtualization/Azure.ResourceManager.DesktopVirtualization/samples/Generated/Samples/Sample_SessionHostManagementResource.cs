// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DesktopVirtualization.Models;

namespace Azure.ResourceManager.DesktopVirtualization.Samples
{
    public partial class Sample_SessionHostManagementResource
    {
        // SessionHostManagements_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SessionHostManagementsGet()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_Get.json
            // this example is just showing the usage of "SessionHostManagements_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            SessionHostManagementResource result = await sessionHostManagement.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostManagementData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SessionHostManagements_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SessionHostManagementsCreate()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_Create.json
            // this example is just showing the usage of "SessionHostManagements_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            SessionHostManagementData data = new SessionHostManagementData("Alaskan Standard Time", new HostPoolUpdateConfigurationProperties(4, 10)
            {
                DeleteOriginalVm = true,
                LogOffMessage = "logging off for hostpool update",
            });
            ArmOperation<SessionHostManagementResource> lro = await sessionHostManagement.CreateOrUpdateAsync(WaitUntil.Completed, data);
            SessionHostManagementResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostManagementData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SessionHostManagements_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SessionHostManagementsUpdate()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_Update.json
            // this example is just showing the usage of "SessionHostManagements_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            SessionHostManagementPatch patch = new SessionHostManagementPatch()
            {
                ScheduledDateTimeZone = "Alaskan Standard Time",
                Update = new HostPoolUpdateConfigurationPatchProperties()
                {
                    DeleteOriginalVm = true,
                    MaxVmsRemoved = 4,
                    LogOffDelayMinutes = 10,
                    LogOffMessage = "logging off for hostpool update",
                },
            };
            SessionHostManagementResource result = await sessionHostManagement.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostManagementData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // HostPools_Update_Post
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostInitiateSessionHostUpdate_HostPoolsUpdatePost()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_UpdateSessionHosts_Post.json
            // this example is just showing the usage of "InitiateSessionHostUpdate_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            UpdateSessionHostsRequestBody updateSessionHostsRequestBody = new UpdateSessionHostsRequestBody()
            {
                ScheduledOn = DateTimeOffset.Parse("2008-09-22T14:01:54.9571247Z"),
                ScheduledDateTimeZone = "Alaskan Standard Time",
                Update = new HostPoolUpdateConfigurationPatchProperties()
                {
                    DeleteOriginalVm = true,
                    MaxVmsRemoved = 4,
                    LogOffDelayMinutes = 10,
                    LogOffMessage = "logging off for hostpool update",
                },
            };
            await sessionHostManagement.PostInitiateSessionHostUpdateAsync(updateSessionHostsRequestBody: updateSessionHostsRequestBody);

            Console.WriteLine($"Succeeded");
        }

        // SessionHostManagements_ControlUpdate_Post
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task PostControlSessionHostUpdate_SessionHostManagementsControlUpdatePost()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_ControlSessionHostUpdate_Post.json
            // this example is just showing the usage of "ControlSessionHostUpdate_Post" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            HostPoolUpdateControlParameter hostPoolUpdateControlParameter = new HostPoolUpdateControlParameter(HostPoolUpdateAction.Start)
            {
                CancelMessage = "Host pool update started",
            };
            await sessionHostManagement.PostControlSessionHostUpdateAsync(WaitUntil.Completed, hostPoolUpdateControlParameter);

            Console.WriteLine($"Succeeded");
        }

        // SessionHostManagements_UpdateStatus_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSessionHostManagementsUpdateStatu_SessionHostManagementsUpdateStatusGet()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-04-08-preview/examples/SessionHostManagements_UpdateStatus_Get.json
            // this example is just showing the usage of "SessionHostManagementsUpdateStatus_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostManagementResource created on azure
            // for more information of creating SessionHostManagementResource, please refer to the document of SessionHostManagementResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostManagementResourceId = SessionHostManagementResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostManagementResource sessionHostManagement = client.GetSessionHostManagementResource(sessionHostManagementResourceId);

            // invoke the operation
            SessionHostManagementUpdateStatus result = await sessionHostManagement.GetSessionHostManagementsUpdateStatuAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
