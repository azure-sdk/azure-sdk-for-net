// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DesktopVirtualization.Models;

namespace Azure.ResourceManager.DesktopVirtualization.Samples
{
    public partial class Sample_SessionHostConfigurationResource
    {
        // SessionHostConfigurations_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SessionHostConfigurationsCreate()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-08-08-preview/examples/SessionHostConfigurations_Create.json
            // this example is just showing the usage of "SessionHostConfigurations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostConfigurationResource created on azure
            // for more information of creating SessionHostConfigurationResource, please refer to the document of SessionHostConfigurationResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostConfigurationResourceId = SessionHostConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostConfigurationResource sessionHostConfiguration = client.GetSessionHostConfigurationResource(sessionHostConfigurationResourceId);

            // invoke the operation
            SessionHostConfigurationData data = new SessionHostConfigurationData("westus2-vm", new NetworkInfoProperties(new ResourceIdentifier("/subscriptions/.../resourceGroups/.../providers/Microsoft.Network/virtualNetworks/.../subnets/subnet1"))
            {
                SecurityGroupId = "/subscriptions/.../resourceGroups/.../provider s/Microsoft.Network/networkSecurityGroups/nsg1",
            }, "Standard_D2s_v3", new DiskInfoProperties(VirtualMachineDiskType.StandardLRS), new ImageInfoProperties(Type.Marketplace)
            {
                MarketplaceInfo = new MarketplaceInfoProperties("Windows-10", "MicrosoftWindowsDesktop", "19h2-ent", "2019.0.20190115"),
                CustomInfoResourceId = new ResourceIdentifier("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/images/imageName"),
            }, new DomainInfoProperties(DomainJoinType.ActiveDirectory)
            {
                ActiveDirectoryInfo = new ActiveDirectoryInfoProperties(new KeyVaultCredentialsProperties(new Uri("https://myvault.vault.azure.net/secrets/myusername"), new Uri("https://myvault.vault.azure.net/secrets/mysecretname")), "OU=testOU,DC=domain,DC=Domain,DC=com")
                {
                    DomainName = "wvdarmtest1.net",
                },
                AzureActiveDirectoryInfoMdmProviderGuid = "bdefabc0-95b4-48b3-b645-8a753a63c4fa",
            }, new KeyVaultCredentialsProperties(new Uri("https://myvault.vault.azure.net/secrets/myusername"), new Uri("https://myvault.vault.azure.net/secrets/mysecretname")))
            {
                FriendlyName = "InitialConfiguration",
                VmTags =
{
["Department"] = "myDepartment",
["Team"] = "myTeam",
},
                VmLocation = "eastus2",
                VmResourceGroup = "myResourceGroup",
                AvailabilityZones =
{
1,3
},
                CustomConfigurationScriptUri = new Uri("https://storageaccountname.blob.core.windows.net/blobcontainer/file"),
                SecurityInfo = new SecurityInfoProperties()
                {
                    VirtualMachineSecurityType = VirtualMachineSecurityType.TrustedLaunch,
                    SecureBootEnabled = true,
                    VTpmEnabled = true,
                },
                BootDiagnosticsInfo = new BootDiagnosticsInfoProperties()
                {
                    Enabled = true,
                    StorageUri = new Uri("https://myStorageAccountName.blob.core.windows.net"),
                },
            };
            ArmOperation<SessionHostConfigurationResource> lro = await sessionHostConfiguration.CreateOrUpdateAsync(WaitUntil.Completed, data);
            SessionHostConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SessionHostConfigurations_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SessionHostConfigurationsUpdate()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-08-08-preview/examples/SessionHostConfigurations_Update.json
            // this example is just showing the usage of "SessionHostConfigurations_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostConfigurationResource created on azure
            // for more information of creating SessionHostConfigurationResource, please refer to the document of SessionHostConfigurationResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostConfigurationResourceId = SessionHostConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostConfigurationResource sessionHostConfiguration = client.GetSessionHostConfigurationResource(sessionHostConfigurationResourceId);

            // invoke the operation
            SessionHostConfigurationPatch patch = new SessionHostConfigurationPatch()
            {
                FriendlyName = "Second Version, Updated Location",
                VmTags =
{
["Department"] = "myDepartment",
["Team"] = "myTeam",
},
                VmLocation = "eastus2",
                VmResourceGroup = "myResourceGroup",
                VmNamePrefix = "westus2-vm",
                AvailabilityZones =
{
1,3
},
                NetworkInfo = new NetworkInfoPatchProperties()
                {
                    SubnetId = new ResourceIdentifier("/subscriptions/.../resourceGroups/.../providers/Microsoft.Network/virtualNetworks/.../subnets/subnet1"),
                    SecurityGroupId = "/subscriptions/.../resourceGroups/.../provider s/Microsoft.Network/networkSecurityGroups/nsg1",
                },
                VmSizeId = "Standard_D2s_v3",
                VirtualMachineDiskType = VirtualMachineDiskType.StandardLRS,
                CustomConfigurationScriptUri = new Uri("https://storageaccountname.blob.core.windows.net/blobcontainer/file"),
                ImageInfo = new ImageInfoPatchProperties()
                {
                    ImageType = Type.Marketplace,
                    MarketplaceInfo = new MarketplaceInfoPatchProperties()
                    {
                        Offer = "Windows-10",
                        Publisher = "MicrosoftWindowsDesktop",
                        Sku = "19h2-ent",
                        ExactVersion = "2019.0.20190115",
                    },
                    CustomInfoResourceId = new ResourceIdentifier("/subscriptions/daefabc0-95b4-48b3-b645-8a753a63c4fa/resourceGroups/resourceGroup1/providers/Microsoft.Compute/images/imageName"),
                },
                ActiveDirectoryInfoDomainCredentials = new KeyVaultCredentialsPatchProperties()
                {
                    UsernameKeyVaultSecretUri = new Uri("https://myvault.vault.azure.net/secrets/myusername"),
                    PasswordKeyVaultSecretUri = new Uri("https://myvault.vault.azure.net/secrets/mysecretname"),
                },
                SecurityInfo = new SecurityInfoPatchProperties()
                {
                    VirtualMachineSecurityType = VirtualMachineSecurityType.TrustedLaunch,
                    SecureBootEnabled = true,
                    VTpmEnabled = true,
                },
                VmAdminCredentials = new KeyVaultCredentialsPatchProperties()
                {
                    UsernameKeyVaultSecretUri = new Uri("https://myvault.vault.azure.net/secrets/myusername"),
                    PasswordKeyVaultSecretUri = new Uri("https://myvault.vault.azure.net/secrets/mysecretname"),
                },
                BootDiagnosticsInfo = new BootDiagnosticsInfoPatchProperties()
                {
                    Enabled = true,
                    StorageUri = new Uri("https://myStorageAccountName.blob.core.windows.net"),
                },
            };
            ArmOperation<SessionHostConfigurationResource> lro = await sessionHostConfiguration.UpdateAsync(WaitUntil.Completed, patch);
            SessionHostConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SessionHostConfigurations_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SessionHostConfigurationsGet()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2024-08-08-preview/examples/SessionHostConfigurations_Get.json
            // this example is just showing the usage of "SessionHostConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SessionHostConfigurationResource created on azure
            // for more information of creating SessionHostConfigurationResource, please refer to the document of SessionHostConfigurationResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string hostPoolName = "hostPool1";
            ResourceIdentifier sessionHostConfigurationResourceId = SessionHostConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, hostPoolName);
            SessionHostConfigurationResource sessionHostConfiguration = client.GetSessionHostConfigurationResource(sessionHostConfigurationResourceId);

            // invoke the operation
            SessionHostConfigurationResource result = await sessionHostConfiguration.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SessionHostConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
