// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DesktopVirtualization.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DesktopVirtualization.Samples
{
    public partial class Sample_AppAttachPackageResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AppAttachPackageGet()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2025-04-01-preview/examples/AppAttachPackage_Get.json
            // this example is just showing the usage of "AppAttachPackage_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppAttachPackageResource created on azure
            // for more information of creating AppAttachPackageResource, please refer to the document of AppAttachPackageResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string appAttachPackageName = "packagefullname";
            ResourceIdentifier appAttachPackageResourceId = AppAttachPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, appAttachPackageName);
            AppAttachPackageResource appAttachPackage = client.GetAppAttachPackageResource(appAttachPackageResourceId);

            // invoke the operation
            AppAttachPackageResource result = await appAttachPackage.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppAttachPackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AppAttachPackageDelete()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2025-04-01-preview/examples/AppAttachPackage_Delete.json
            // this example is just showing the usage of "AppAttachPackage_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppAttachPackageResource created on azure
            // for more information of creating AppAttachPackageResource, please refer to the document of AppAttachPackageResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string appAttachPackageName = "packagefullname";
            ResourceIdentifier appAttachPackageResourceId = AppAttachPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, appAttachPackageName);
            AppAttachPackageResource appAttachPackage = client.GetAppAttachPackageResource(appAttachPackageResourceId);

            // invoke the operation
            await appAttachPackage.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AppAttachPackageUpdate()
        {
            // Generated from example definition: specification/desktopvirtualization/resource-manager/Microsoft.DesktopVirtualization/preview/2025-04-01-preview/examples/AppAttachPackage_Update.json
            // this example is just showing the usage of "AppAttachPackage_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AppAttachPackageResource created on azure
            // for more information of creating AppAttachPackageResource, please refer to the document of AppAttachPackageResource
            string subscriptionId = "daefabc0-95b4-48b3-b645-8a753a63c4fa";
            string resourceGroupName = "resourceGroup1";
            string appAttachPackageName = "msixpackagefullname";
            ResourceIdentifier appAttachPackageResourceId = AppAttachPackageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, appAttachPackageName);
            AppAttachPackageResource appAttachPackage = client.GetAppAttachPackageResource(appAttachPackageResourceId);

            // invoke the operation
            AppAttachPackagePatch patch = new AppAttachPackagePatch
            {
                Properties = new AppAttachPackagePatchProperties
                {
                    Image = new AppAttachPackageInfoProperties
                    {
                        PackageAlias = "msixpackagealias",
                        ImagePath = "imagepath",
                        PackageName = "MsixPackageName",
                        PackageFamilyName = "MsixPackage_FamilyName",
                        PackageFullName = "MsixPackage_FullName",
                        DisplayName = "displayname",
                        PackageRelativePath = "packagerelativepath",
                        IsRegularRegistration = false,
                        IsActive = false,
                        PackageDependencies = {new MsixPackageDependencies
{
DependencyName = "MsixPackage_Dependency_Name",
Publisher = "MsixPackage_Dependency_Publisher",
MinVersion = "packageDep_version",
}},
                        Version = "packageversion",
                        LastUpdatedOn = DateTimeOffset.Parse("2008-09-22T14:01:54.9571247Z"),
                        PackageApplications = {new MsixPackageApplications
{
AppId = "AppId",
Description = "PackageApplicationDescription",
AppUserModelId = "AppUserModelId",
FriendlyName = "FriendlyName",
IconImageName = "Iconimagename",
RawIcon = BinaryData.FromObjectAsJson("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
RawPng = BinaryData.FromObjectAsJson("VGhpcyBpcyBhIHN0cmluZyB0byBoYXNo"),
}},
                        CertificateName = "certName",
                        CertificateExpireOn = DateTimeOffset.Parse("2023-01-02T17:18:19.1234567Z"),
                    },
                    HostPoolReferences = { new ResourceIdentifier("/subscriptions/d15725f7-6577-4a8c-95f1-3da903b42364/resourcegroups/charlesk-southcentralus/providers/Microsoft.DesktopVirtualization/hostPool/hp1"), new ResourceIdentifier("/subscriptions/d15725f7-6577-4a8c-95f1-3da903b42364/resourcegroups/charlesk-southcentralus/providers/Microsoft.DesktopVirtualization/hostPool/hp2") },
                    KeyVaultUri = new Uri("url"),
                    FailHealthCheckOnStagingFailure = FailHealthCheckOnStagingFailure.DoNotFail,
                },
            };
            AppAttachPackageResource result = await appAttachPackage.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppAttachPackageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
