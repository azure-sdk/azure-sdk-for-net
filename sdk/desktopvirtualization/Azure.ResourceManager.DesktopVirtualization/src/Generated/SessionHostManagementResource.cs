// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.DesktopVirtualization.Models;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary>
    /// A Class representing a SessionHostManagement along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="SessionHostManagementResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetSessionHostManagementResource method.
    /// Otherwise you can get one from its parent resource <see cref="HostPoolResource"/> using the GetSessionHostManagement method.
    /// </summary>
    public partial class SessionHostManagementResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SessionHostManagementResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="hostPoolName"> The hostPoolName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string hostPoolName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _sessionHostManagementClientDiagnostics;
        private readonly SessionHostManagementsRestOperations _sessionHostManagementRestClient;
        private readonly ClientDiagnostics _initiateSessionHostUpdateClientDiagnostics;
        private readonly InitiateSessionHostUpdateRestOperations _initiateSessionHostUpdateRestClient;
        private readonly ClientDiagnostics _controlSessionHostUpdateClientDiagnostics;
        private readonly ControlSessionHostUpdateRestOperations _controlSessionHostUpdateRestClient;
        private readonly ClientDiagnostics _sessionHostManagementsUpdateStatusClientDiagnostics;
        private readonly SessionHostManagementsUpdateStatusRestOperations _sessionHostManagementsUpdateStatusRestClient;
        private readonly SessionHostManagementData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.DesktopVirtualization/hostPools/sessionHostManagements";

        /// <summary> Initializes a new instance of the <see cref="SessionHostManagementResource"/> class for mocking. </summary>
        protected SessionHostManagementResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SessionHostManagementResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SessionHostManagementResource(ArmClient client, SessionHostManagementData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SessionHostManagementResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SessionHostManagementResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _sessionHostManagementClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DesktopVirtualization", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string sessionHostManagementApiVersion);
            _sessionHostManagementRestClient = new SessionHostManagementsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sessionHostManagementApiVersion);
            _initiateSessionHostUpdateClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DesktopVirtualization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _initiateSessionHostUpdateRestClient = new InitiateSessionHostUpdateRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _controlSessionHostUpdateClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DesktopVirtualization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _controlSessionHostUpdateRestClient = new ControlSessionHostUpdateRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _sessionHostManagementsUpdateStatusClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DesktopVirtualization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _sessionHostManagementsUpdateStatusRestClient = new SessionHostManagementsUpdateStatusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual SessionHostManagementData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SessionHostManagementResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.Get");
            scope.Start();
            try
            {
                var response = await _sessionHostManagementRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SessionHostManagementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SessionHostManagementResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.Get");
            scope.Start();
            try
            {
                var response = _sessionHostManagementRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SessionHostManagementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> Object containing SessionHostManagement definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<SessionHostManagementResource>> UpdateAsync(SessionHostManagementPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.Update");
            scope.Start();
            try
            {
                var response = await _sessionHostManagementRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SessionHostManagementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> Object containing SessionHostManagement definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<SessionHostManagementResource> Update(SessionHostManagementPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.Update");
            scope.Start();
            try
            {
                var response = _sessionHostManagementRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, patch, cancellationToken);
                return Response.FromValue(new SessionHostManagementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Object containing SessionHostManagement definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SessionHostManagementResource>> CreateOrUpdateAsync(WaitUntil waitUntil, SessionHostManagementData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _sessionHostManagementRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, data, cancellationToken).ConfigureAwait(false);
                var uri = _sessionHostManagementRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new DesktopVirtualizationArmOperation<SessionHostManagementResource>(Response.FromValue(new SessionHostManagementResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a SessionHostManagement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagements_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SessionHostManagementResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Object containing SessionHostManagement definitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SessionHostManagementResource> CreateOrUpdate(WaitUntil waitUntil, SessionHostManagementData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _sessionHostManagementClientDiagnostics.CreateScope("SessionHostManagementResource.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _sessionHostManagementRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, data, cancellationToken);
                var uri = _sessionHostManagementRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new DesktopVirtualizationArmOperation<SessionHostManagementResource>(Response.FromValue(new SessionHostManagementResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Initiates a hostpool update or schedule an update for the future.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/initiateSessionHostUpdate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InitiateSessionHostUpdate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateSessionHostsRequestBody"> Object containing the definition for properties to be used in the sessionHostUpdate validation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostInitiateSessionHostUpdateAsync(UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null, CancellationToken cancellationToken = default)
        {
            using var scope = _initiateSessionHostUpdateClientDiagnostics.CreateScope("SessionHostManagementResource.PostInitiateSessionHostUpdate");
            scope.Start();
            try
            {
                var response = await _initiateSessionHostUpdateRestClient.PostAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, updateSessionHostsRequestBody, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Initiates a hostpool update or schedule an update for the future.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/initiateSessionHostUpdate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InitiateSessionHostUpdate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="updateSessionHostsRequestBody"> Object containing the definition for properties to be used in the sessionHostUpdate validation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostInitiateSessionHostUpdate(UpdateSessionHostsRequestBody updateSessionHostsRequestBody = null, CancellationToken cancellationToken = default)
        {
            using var scope = _initiateSessionHostUpdateClientDiagnostics.CreateScope("SessionHostManagementResource.PostInitiateSessionHostUpdate");
            scope.Start();
            try
            {
                var response = _initiateSessionHostUpdateRestClient.Post(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, updateSessionHostsRequestBody, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Control update of a hostpool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/controlSessionHostUpdate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ControlSessionHostUpdate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="hostPoolUpdateControlParameter"> Object containing control action for hostpool update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hostPoolUpdateControlParameter"/> is null. </exception>
        public virtual async Task<ArmOperation> PostControlSessionHostUpdateAsync(WaitUntil waitUntil, HostPoolUpdateControlParameter hostPoolUpdateControlParameter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(hostPoolUpdateControlParameter, nameof(hostPoolUpdateControlParameter));

            using var scope = _controlSessionHostUpdateClientDiagnostics.CreateScope("SessionHostManagementResource.PostControlSessionHostUpdate");
            scope.Start();
            try
            {
                var response = await _controlSessionHostUpdateRestClient.PostAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, hostPoolUpdateControlParameter, cancellationToken).ConfigureAwait(false);
                var operation = new DesktopVirtualizationArmOperation(_controlSessionHostUpdateClientDiagnostics, Pipeline, _controlSessionHostUpdateRestClient.CreatePostRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, hostPoolUpdateControlParameter).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Control update of a hostpool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/controlSessionHostUpdate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ControlSessionHostUpdate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="hostPoolUpdateControlParameter"> Object containing control action for hostpool update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hostPoolUpdateControlParameter"/> is null. </exception>
        public virtual ArmOperation PostControlSessionHostUpdate(WaitUntil waitUntil, HostPoolUpdateControlParameter hostPoolUpdateControlParameter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(hostPoolUpdateControlParameter, nameof(hostPoolUpdateControlParameter));

            using var scope = _controlSessionHostUpdateClientDiagnostics.CreateScope("SessionHostManagementResource.PostControlSessionHostUpdate");
            scope.Start();
            try
            {
                var response = _controlSessionHostUpdateRestClient.Post(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, hostPoolUpdateControlParameter, cancellationToken);
                var operation = new DesktopVirtualizationArmOperation(_controlSessionHostUpdateClientDiagnostics, Pipeline, _controlSessionHostUpdateRestClient.CreatePostRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, hostPoolUpdateControlParameter).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the session host update status for a given hostpool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/sessionHostUpdateStatuses/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagementsUpdateStatus_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SessionHostManagementUpdateStatus>> GetSessionHostManagementsUpdateStatuAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _sessionHostManagementsUpdateStatusClientDiagnostics.CreateScope("SessionHostManagementResource.GetSessionHostManagementsUpdateStatu");
            scope.Start();
            try
            {
                var response = await _sessionHostManagementsUpdateStatusRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the session host update status for a given hostpool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHostManagements/default/sessionHostUpdateStatuses/default</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SessionHostManagementsUpdateStatus_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-08-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SessionHostManagementUpdateStatus> GetSessionHostManagementsUpdateStatu(CancellationToken cancellationToken = default)
        {
            using var scope = _sessionHostManagementsUpdateStatusClientDiagnostics.CreateScope("SessionHostManagementResource.GetSessionHostManagementsUpdateStatu");
            scope.Start();
            try
            {
                var response = _sessionHostManagementsUpdateStatusRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
