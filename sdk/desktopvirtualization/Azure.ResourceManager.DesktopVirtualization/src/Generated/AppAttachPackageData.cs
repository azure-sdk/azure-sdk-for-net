// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DesktopVirtualization.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary>
    /// A class representing the AppAttachPackage data model.
    /// Schema for App Attach Package properties.
    /// </summary>
    public partial class AppAttachPackageData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AppAttachPackageData"/>. </summary>
        /// <param name="location"> The location. </param>
        public AppAttachPackageData(AzureLocation location) : base(location)
        {
            HostPoolReferences = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AppAttachPackageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the App Attach Package. </param>
        /// <param name="image"> Detailed properties for App Attach Package. </param>
        /// <param name="hostPoolReferences"> List of Hostpool resource Ids. </param>
        /// <param name="keyVaultURL"> URL path to certificate name located in keyVault. </param>
        /// <param name="failHealthCheckOnStagingFailure"> Parameter indicating how the health check should behave if this package fails staging. </param>
        /// <param name="packageOwnerName"> Specific name of package owner, is "AppAttach" for native app attach packages. </param>
        /// <param name="packageLookbackUri"> Lookback url to third party control plane, is null for native app attach packages. </param>
        /// <param name="customData"> Field that can be populated with custom data and filtered on in list GET calls. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AppAttachPackageData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, AppAttachPackageProvisioningState? provisioningState, AppAttachPackageInfoProperties image, IList<string> hostPoolReferences, string keyVaultURL, FailHealthCheckOnStagingFailure? failHealthCheckOnStagingFailure, string packageOwnerName, Uri packageLookbackUri, string customData, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ProvisioningState = provisioningState;
            Image = image;
            HostPoolReferences = hostPoolReferences;
            KeyVaultURL = keyVaultURL;
            FailHealthCheckOnStagingFailure = failHealthCheckOnStagingFailure;
            PackageOwnerName = packageOwnerName;
            PackageLookbackUri = packageLookbackUri;
            CustomData = customData;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AppAttachPackageData"/> for deserialization. </summary>
        internal AppAttachPackageData()
        {
        }

        /// <summary> The provisioning state of the App Attach Package. </summary>
        [WirePath("properties.provisioningState")]
        public AppAttachPackageProvisioningState? ProvisioningState { get; }
        /// <summary> Detailed properties for App Attach Package. </summary>
        [WirePath("properties.image")]
        public AppAttachPackageInfoProperties Image { get; set; }
        /// <summary> List of Hostpool resource Ids. </summary>
        [WirePath("properties.hostPoolReferences")]
        public IList<string> HostPoolReferences { get; }
        /// <summary> URL path to certificate name located in keyVault. </summary>
        [WirePath("properties.keyVaultURL")]
        public string KeyVaultURL { get; set; }
        /// <summary> Parameter indicating how the health check should behave if this package fails staging. </summary>
        [WirePath("properties.failHealthCheckOnStagingFailure")]
        public FailHealthCheckOnStagingFailure? FailHealthCheckOnStagingFailure { get; set; }
        /// <summary> Specific name of package owner, is "AppAttach" for native app attach packages. </summary>
        [WirePath("properties.packageOwnerName")]
        public string PackageOwnerName { get; set; }
        /// <summary> Lookback url to third party control plane, is null for native app attach packages. </summary>
        [WirePath("properties.packageLookbackUrl")]
        public Uri PackageLookbackUri { get; set; }
        /// <summary> Field that can be populated with custom data and filtered on in list GET calls. </summary>
        [WirePath("properties.customData")]
        public string CustomData { get; set; }
    }
}
