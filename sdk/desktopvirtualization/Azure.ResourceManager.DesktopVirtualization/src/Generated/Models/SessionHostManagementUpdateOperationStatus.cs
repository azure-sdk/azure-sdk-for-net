// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Operation status for SessionHostManagementUpdate. </summary>
    public readonly partial struct SessionHostManagementUpdateOperationStatus : IEquatable<SessionHostManagementUpdateOperationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SessionHostManagementUpdateOperationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SessionHostManagementUpdateOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ErrorValue = "Error";
        private const string ScheduledValue = "Scheduled";
        private const string UpdatingSessionHostsValue = "UpdatingSessionHosts";
        private const string ValidatingSessionHostUpdateValue = "ValidatingSessionHostUpdate";
        private const string PausedValue = "Paused";
        private const string PausingValue = "Pausing";
        private const string CancellingValue = "Cancelling";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";

        /// <summary> The operation has an error. </summary>
        public static SessionHostManagementUpdateOperationStatus Error { get; } = new SessionHostManagementUpdateOperationStatus(ErrorValue);
        /// <summary> The operation is scheduled. </summary>
        public static SessionHostManagementUpdateOperationStatus Scheduled { get; } = new SessionHostManagementUpdateOperationStatus(ScheduledValue);
        /// <summary> The operation is currently updating Session Hosts. </summary>
        public static SessionHostManagementUpdateOperationStatus UpdatingSessionHosts { get; } = new SessionHostManagementUpdateOperationStatus(UpdatingSessionHostsValue);
        /// <summary> The operation is validating the update. </summary>
        public static SessionHostManagementUpdateOperationStatus ValidatingSessionHostUpdate { get; } = new SessionHostManagementUpdateOperationStatus(ValidatingSessionHostUpdateValue);
        /// <summary> The operation is paused. </summary>
        public static SessionHostManagementUpdateOperationStatus Paused { get; } = new SessionHostManagementUpdateOperationStatus(PausedValue);
        /// <summary> The operation is pausing. </summary>
        public static SessionHostManagementUpdateOperationStatus Pausing { get; } = new SessionHostManagementUpdateOperationStatus(PausingValue);
        /// <summary> Canceling the operation. </summary>
        public static SessionHostManagementUpdateOperationStatus Cancelling { get; } = new SessionHostManagementUpdateOperationStatus(CancellingValue);
        /// <summary> The operation succeeded. </summary>
        public static SessionHostManagementUpdateOperationStatus Succeeded { get; } = new SessionHostManagementUpdateOperationStatus(SucceededValue);
        /// <summary> The operation failed. </summary>
        public static SessionHostManagementUpdateOperationStatus Failed { get; } = new SessionHostManagementUpdateOperationStatus(FailedValue);
        /// <summary> The operation is canceled. </summary>
        public static SessionHostManagementUpdateOperationStatus Cancelled { get; } = new SessionHostManagementUpdateOperationStatus(CancelledValue);
        /// <summary> Determines if two <see cref="SessionHostManagementUpdateOperationStatus"/> values are the same. </summary>
        public static bool operator ==(SessionHostManagementUpdateOperationStatus left, SessionHostManagementUpdateOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SessionHostManagementUpdateOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(SessionHostManagementUpdateOperationStatus left, SessionHostManagementUpdateOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SessionHostManagementUpdateOperationStatus"/>. </summary>
        public static implicit operator SessionHostManagementUpdateOperationStatus(string value) => new SessionHostManagementUpdateOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SessionHostManagementUpdateOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SessionHostManagementUpdateOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
