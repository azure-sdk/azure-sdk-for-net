// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> SessionHostManagement Operation Progress information. </summary>
    public partial class SessionHostManagementOperationProgress
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionHostManagementOperationProgress"/>. </summary>
        internal SessionHostManagementOperationProgress()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SessionHostManagementOperationProgress"/>. </summary>
        /// <param name="executionStartOn"> Time that the sessionHostManagement operation was created. </param>
        /// <param name="totalSessionHosts"> The number of sessionHosts to be started in the sessionHostManagement operation. </param>
        /// <param name="sessionHostsInProgress"> The number of sessionHosts in progress in the sessionHostManagement operation. </param>
        /// <param name="sessionHostsCompleted"> The number of sessionHosts completed in the sessionHostManagement operation. </param>
        /// <param name="sessionHostsRollbackFailed"> The number of sessionHosts rollback failed in the sessionHostManagement operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionHostManagementOperationProgress(DateTimeOffset? executionStartOn, int? totalSessionHosts, int? sessionHostsInProgress, int? sessionHostsCompleted, int? sessionHostsRollbackFailed, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ExecutionStartOn = executionStartOn;
            TotalSessionHosts = totalSessionHosts;
            SessionHostsInProgress = sessionHostsInProgress;
            SessionHostsCompleted = sessionHostsCompleted;
            SessionHostsRollbackFailed = sessionHostsRollbackFailed;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Time that the sessionHostManagement operation was created. </summary>
        [WirePath("executionStartTime")]
        public DateTimeOffset? ExecutionStartOn { get; }
        /// <summary> The number of sessionHosts to be started in the sessionHostManagement operation. </summary>
        [WirePath("totalSessionHosts")]
        public int? TotalSessionHosts { get; }
        /// <summary> The number of sessionHosts in progress in the sessionHostManagement operation. </summary>
        [WirePath("sessionHostsInProgress")]
        public int? SessionHostsInProgress { get; }
        /// <summary> The number of sessionHosts completed in the sessionHostManagement operation. </summary>
        [WirePath("sessionHostsCompleted")]
        public int? SessionHostsCompleted { get; }
        /// <summary> The number of sessionHosts rollback failed in the sessionHostManagement operation. </summary>
        [WirePath("sessionHostsRollbackFailed")]
        public int? SessionHostsRollbackFailed { get; }
    }
}
