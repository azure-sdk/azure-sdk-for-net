// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class AppAttachPackagePatchProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Image))
            {
                writer.WritePropertyName("image"u8);
                writer.WriteObjectValue(Image);
            }
            if (Optional.IsCollectionDefined(HostPoolReferences))
            {
                writer.WritePropertyName("hostPoolReferences"u8);
                writer.WriteStartArray();
                foreach (var item in HostPoolReferences)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(KeyVaultURL))
            {
                writer.WritePropertyName("keyVaultURL"u8);
                writer.WriteStringValue(KeyVaultURL);
            }
            if (Optional.IsDefined(FailHealthCheckOnStagingFailure))
            {
                writer.WritePropertyName("failHealthCheckOnStagingFailure"u8);
                writer.WriteStringValue(FailHealthCheckOnStagingFailure.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static AppAttachPackagePatchProperties DeserializeAppAttachPackagePatchProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AppAttachPackageInfoProperties> image = default;
            Optional<IList<string>> hostPoolReferences = default;
            Optional<string> keyVaultURL = default;
            Optional<FailHealthCheckOnStagingFailure> failHealthCheckOnStagingFailure = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("image"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    image = AppAttachPackageInfoProperties.DeserializeAppAttachPackageInfoProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("hostPoolReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    hostPoolReferences = array;
                    continue;
                }
                if (property.NameEquals("keyVaultURL"u8))
                {
                    keyVaultURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failHealthCheckOnStagingFailure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failHealthCheckOnStagingFailure = new FailHealthCheckOnStagingFailure(property.Value.GetString());
                    continue;
                }
            }
            return new AppAttachPackagePatchProperties(image.Value, Optional.ToList(hostPoolReferences), keyVaultURL.Value, Optional.ToNullable(failHealthCheckOnStagingFailure));
        }
    }
}
