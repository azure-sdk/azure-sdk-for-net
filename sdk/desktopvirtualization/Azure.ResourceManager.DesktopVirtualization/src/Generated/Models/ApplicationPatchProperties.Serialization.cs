// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class ApplicationPatchProperties : IUtf8JsonSerializable, IJsonModel<ApplicationPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApplicationPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ApplicationPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Optional.IsDefined(FilePath))
            {
                writer.WritePropertyName("filePath"u8);
                writer.WriteStringValue(FilePath);
            }
            if (Optional.IsDefined(CommandLineSetting))
            {
                writer.WritePropertyName("commandLineSetting"u8);
                writer.WriteStringValue(CommandLineSetting.Value.ToString());
            }
            if (Optional.IsDefined(CommandLineArguments))
            {
                writer.WritePropertyName("commandLineArguments"u8);
                writer.WriteStringValue(CommandLineArguments);
            }
            if (Optional.IsDefined(ShowInPortal))
            {
                writer.WritePropertyName("showInPortal"u8);
                writer.WriteBooleanValue(ShowInPortal.Value);
            }
            if (Optional.IsDefined(IconPath))
            {
                writer.WritePropertyName("iconPath"u8);
                writer.WriteStringValue(IconPath);
            }
            if (Optional.IsDefined(IconIndex))
            {
                writer.WritePropertyName("iconIndex"u8);
                writer.WriteNumberValue(IconIndex.Value);
            }
            if (Optional.IsDefined(MsixPackageFamilyName))
            {
                writer.WritePropertyName("msixPackageFamilyName"u8);
                writer.WriteStringValue(MsixPackageFamilyName);
            }
            if (Optional.IsDefined(MsixPackageApplicationId))
            {
                writer.WritePropertyName("msixPackageApplicationId"u8);
                writer.WriteStringValue(MsixPackageApplicationId);
            }
            if (Optional.IsDefined(ApplicationType))
            {
                writer.WritePropertyName("applicationType"u8);
                writer.WriteStringValue(ApplicationType.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ApplicationPatchProperties IJsonModel<ApplicationPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApplicationPatchProperties(document.RootElement, options);
        }

        internal static ApplicationPatchProperties DeserializeApplicationPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            string friendlyName = default;
            string filePath = default;
            VirtualApplicationCommandLineSetting? commandLineSetting = default;
            string commandLineArguments = default;
            bool? showInPortal = default;
            string iconPath = default;
            int? iconIndex = default;
            string msixPackageFamilyName = default;
            string msixPackageApplicationId = default;
            RemoteApplicationType? applicationType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyName"u8))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filePath"u8))
                {
                    filePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commandLineSetting"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commandLineSetting = new VirtualApplicationCommandLineSetting(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("commandLineArguments"u8))
                {
                    commandLineArguments = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("showInPortal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    showInPortal = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("iconPath"u8))
                {
                    iconPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("iconIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    iconIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("msixPackageFamilyName"u8))
                {
                    msixPackageFamilyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("msixPackageApplicationId"u8))
                {
                    msixPackageApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationType = new RemoteApplicationType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ApplicationPatchProperties(
                description,
                friendlyName,
                filePath,
                commandLineSetting,
                commandLineArguments,
                showInPortal,
                iconPath,
                iconIndex,
                msixPackageFamilyName,
                msixPackageApplicationId,
                applicationType,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApplicationPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ApplicationPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ApplicationPatchProperties IPersistableModel<ApplicationPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeApplicationPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ApplicationPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ApplicationPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
