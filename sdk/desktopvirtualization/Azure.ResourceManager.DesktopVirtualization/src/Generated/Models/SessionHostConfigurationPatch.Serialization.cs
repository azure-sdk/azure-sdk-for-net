// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class SessionHostConfigurationPatch : IUtf8JsonSerializable, IJsonModel<SessionHostConfigurationPatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SessionHostConfigurationPatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SessionHostConfigurationPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionHostConfigurationPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionHostConfigurationPatch)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Optional.IsCollectionDefined(VmTags))
            {
                writer.WritePropertyName("vmTags"u8);
                writer.WriteStartObject();
                foreach (var item in VmTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(VmLocation))
            {
                writer.WritePropertyName("vmLocation"u8);
                writer.WriteStringValue(VmLocation);
            }
            if (Optional.IsDefined(VmResourceGroup))
            {
                writer.WritePropertyName("vmResourceGroup"u8);
                writer.WriteStringValue(VmResourceGroup);
            }
            if (Optional.IsDefined(VmNamePrefix))
            {
                writer.WritePropertyName("vmNamePrefix"u8);
                writer.WriteStringValue(VmNamePrefix);
            }
            if (Optional.IsCollectionDefined(AvailabilityZones))
            {
                writer.WritePropertyName("availabilityZones"u8);
                writer.WriteStartArray();
                foreach (var item in AvailabilityZones)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NetworkInfo))
            {
                writer.WritePropertyName("networkInfo"u8);
                writer.WriteObjectValue(NetworkInfo, options);
            }
            if (Optional.IsDefined(VmSizeId))
            {
                writer.WritePropertyName("vmSizeId"u8);
                writer.WriteStringValue(VmSizeId);
            }
            if (Optional.IsDefined(DiskInfo))
            {
                writer.WritePropertyName("diskInfo"u8);
                writer.WriteObjectValue(DiskInfo, options);
            }
            if (Optional.IsDefined(CustomConfigurationScriptUri))
            {
                writer.WritePropertyName("customConfigurationScriptUrl"u8);
                writer.WriteStringValue(CustomConfigurationScriptUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ImageInfo))
            {
                writer.WritePropertyName("imageInfo"u8);
                writer.WriteObjectValue(ImageInfo, options);
            }
            if (Optional.IsDefined(DomainInfo))
            {
                writer.WritePropertyName("domainInfo"u8);
                writer.WriteObjectValue(DomainInfo, options);
            }
            if (Optional.IsDefined(SecurityInfo))
            {
                writer.WritePropertyName("securityInfo"u8);
                writer.WriteObjectValue(SecurityInfo, options);
            }
            if (Optional.IsDefined(VmAdminCredentials))
            {
                writer.WritePropertyName("vmAdminCredentials"u8);
                writer.WriteObjectValue(VmAdminCredentials, options);
            }
            if (Optional.IsDefined(BootDiagnosticsInfo))
            {
                writer.WritePropertyName("bootDiagnosticsInfo"u8);
                writer.WriteObjectValue(BootDiagnosticsInfo, options);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SessionHostConfigurationPatch IJsonModel<SessionHostConfigurationPatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionHostConfigurationPatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SessionHostConfigurationPatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSessionHostConfigurationPatch(document.RootElement, options);
        }

        internal static SessionHostConfigurationPatch DeserializeSessionHostConfigurationPatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string friendlyName = default;
            IDictionary<string, string> vmTags = default;
            string vmLocation = default;
            string vmResourceGroup = default;
            string vmNamePrefix = default;
            IList<int> availabilityZones = default;
            NetworkInfoPatchProperties networkInfo = default;
            string vmSizeId = default;
            DiskInfoPatchProperties diskInfo = default;
            Uri customConfigurationScriptUrl = default;
            ImageInfoPatchProperties imageInfo = default;
            DomainInfoPatchProperties domainInfo = default;
            SecurityInfoPatchProperties securityInfo = default;
            KeyVaultCredentialsPatchProperties vmAdminCredentials = default;
            BootDiagnosticsInfoPatchProperties bootDiagnosticsInfo = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("friendlyName"u8))
                        {
                            friendlyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmTags"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            vmTags = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("vmLocation"u8))
                        {
                            vmLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmResourceGroup"u8))
                        {
                            vmResourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vmNamePrefix"u8))
                        {
                            vmNamePrefix = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("availabilityZones"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<int> array = new List<int>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetInt32());
                            }
                            availabilityZones = array;
                            continue;
                        }
                        if (property0.NameEquals("networkInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkInfo = NetworkInfoPatchProperties.DeserializeNetworkInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("vmSizeId"u8))
                        {
                            vmSizeId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("diskInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            diskInfo = DiskInfoPatchProperties.DeserializeDiskInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("customConfigurationScriptUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            customConfigurationScriptUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("imageInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            imageInfo = ImageInfoPatchProperties.DeserializeImageInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("domainInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            domainInfo = DomainInfoPatchProperties.DeserializeDomainInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("securityInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            securityInfo = SecurityInfoPatchProperties.DeserializeSecurityInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("vmAdminCredentials"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmAdminCredentials = KeyVaultCredentialsPatchProperties.DeserializeKeyVaultCredentialsPatchProperties(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("bootDiagnosticsInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bootDiagnosticsInfo = BootDiagnosticsInfoPatchProperties.DeserializeBootDiagnosticsInfoPatchProperties(property0.Value, options);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SessionHostConfigurationPatch(
                friendlyName,
                vmTags ?? new ChangeTrackingDictionary<string, string>(),
                vmLocation,
                vmResourceGroup,
                vmNamePrefix,
                availabilityZones ?? new ChangeTrackingList<int>(),
                networkInfo,
                vmSizeId,
                diskInfo,
                customConfigurationScriptUrl,
                imageInfo,
                domainInfo,
                securityInfo,
                vmAdminCredentials,
                bootDiagnosticsInfo,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SessionHostConfigurationPatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionHostConfigurationPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SessionHostConfigurationPatch)} does not support writing '{options.Format}' format.");
            }
        }

        SessionHostConfigurationPatch IPersistableModel<SessionHostConfigurationPatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SessionHostConfigurationPatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSessionHostConfigurationPatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SessionHostConfigurationPatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SessionHostConfigurationPatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
