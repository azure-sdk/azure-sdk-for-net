// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
    public readonly partial struct DirectUDP : IEquatable<DirectUDP>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DirectUDP"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DirectUDP(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> Default. </summary>
        public static DirectUDP Default { get; } = new DirectUDP(DefaultValue);
        /// <summary> Enabled. </summary>
        public static DirectUDP Enabled { get; } = new DirectUDP(EnabledValue);
        /// <summary> Disabled. </summary>
        public static DirectUDP Disabled { get; } = new DirectUDP(DisabledValue);
        /// <summary> Determines if two <see cref="DirectUDP"/> values are the same. </summary>
        public static bool operator ==(DirectUDP left, DirectUDP right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DirectUDP"/> values are not the same. </summary>
        public static bool operator !=(DirectUDP left, DirectUDP right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DirectUDP"/>. </summary>
        public static implicit operator DirectUDP(string value) => new DirectUDP(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DirectUDP other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DirectUDP other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
