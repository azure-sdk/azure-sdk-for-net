// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class HostPoolPatchProperties : IUtf8JsonSerializable, IJsonModel<HostPoolPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HostPoolPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HostPoolPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostPoolPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HostPoolPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(CustomRdpProperty))
            {
                writer.WritePropertyName("customRdpProperty"u8);
                writer.WriteStringValue(CustomRdpProperty);
            }
            if (Optional.IsDefined(MaxSessionLimit))
            {
                writer.WritePropertyName("maxSessionLimit"u8);
                writer.WriteNumberValue(MaxSessionLimit.Value);
            }
            if (Optional.IsDefined(PersonalDesktopAssignmentType))
            {
                writer.WritePropertyName("personalDesktopAssignmentType"u8);
                writer.WriteStringValue(PersonalDesktopAssignmentType.Value.ToString());
            }
            if (Optional.IsDefined(LoadBalancerType))
            {
                writer.WritePropertyName("loadBalancerType"u8);
                writer.WriteStringValue(LoadBalancerType.Value.ToString());
            }
            if (Optional.IsDefined(Ring))
            {
                writer.WritePropertyName("ring"u8);
                writer.WriteNumberValue(Ring.Value);
            }
            if (Optional.IsDefined(ValidationEnvironment))
            {
                writer.WritePropertyName("validationEnvironment"u8);
                writer.WriteBooleanValue(ValidationEnvironment.Value);
            }
            if (Optional.IsDefined(RegistrationInfo))
            {
                writer.WritePropertyName("registrationInfo"u8);
                writer.WriteObjectValue(RegistrationInfo, options);
            }
            if (Optional.IsDefined(VmTemplate))
            {
                writer.WritePropertyName("vmTemplate"u8);
                writer.WriteStringValue(VmTemplate);
            }
            if (Optional.IsDefined(SsoadfsAuthority))
            {
                writer.WritePropertyName("ssoadfsAuthority"u8);
                writer.WriteStringValue(SsoadfsAuthority);
            }
            if (Optional.IsDefined(SsoClientId))
            {
                writer.WritePropertyName("ssoClientId"u8);
                writer.WriteStringValue(SsoClientId);
            }
            if (Optional.IsDefined(SsoClientSecretKeyVaultPath))
            {
                writer.WritePropertyName("ssoClientSecretKeyVaultPath"u8);
                writer.WriteStringValue(SsoClientSecretKeyVaultPath);
            }
            if (Optional.IsDefined(SsoSecretType))
            {
                writer.WritePropertyName("ssoSecretType"u8);
                writer.WriteStringValue(SsoSecretType.Value.ToString());
            }
            if (Optional.IsDefined(PreferredAppGroupType))
            {
                writer.WritePropertyName("preferredAppGroupType"u8);
                writer.WriteStringValue(PreferredAppGroupType.Value.ToString());
            }
            if (Optional.IsDefined(StartVmOnConnect))
            {
                writer.WritePropertyName("startVMOnConnect"u8);
                writer.WriteBooleanValue(StartVmOnConnect.Value);
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(AgentUpdate))
            {
                writer.WritePropertyName("agentUpdate"u8);
                writer.WriteObjectValue(AgentUpdate, options);
            }
            if (Optional.IsDefined(ManagedPrivateUDP))
            {
                writer.WritePropertyName("managedPrivateUDP"u8);
                writer.WriteStringValue(ManagedPrivateUDP.Value.ToString());
            }
            if (Optional.IsDefined(DirectUDP))
            {
                writer.WritePropertyName("directUDP"u8);
                writer.WriteStringValue(DirectUDP.Value.ToString());
            }
            if (Optional.IsDefined(PublicUDP))
            {
                writer.WritePropertyName("publicUDP"u8);
                writer.WriteStringValue(PublicUDP.Value.ToString());
            }
            if (Optional.IsDefined(RelayUDP))
            {
                writer.WritePropertyName("relayUDP"u8);
                writer.WriteStringValue(RelayUDP.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        HostPoolPatchProperties IJsonModel<HostPoolPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostPoolPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HostPoolPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHostPoolPatchProperties(document.RootElement, options);
        }

        internal static HostPoolPatchProperties DeserializeHostPoolPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string friendlyName = default;
            string description = default;
            string customRdpProperty = default;
            int? maxSessionLimit = default;
            PersonalDesktopAssignmentType? personalDesktopAssignmentType = default;
            HostPoolLoadBalancerType? loadBalancerType = default;
            int? ring = default;
            bool? validationEnvironment = default;
            HostPoolRegistrationInfoPatch registrationInfo = default;
            string vmTemplate = default;
            string ssoadfsAuthority = default;
            string ssoClientId = default;
            string ssoClientSecretKeyVaultPath = default;
            HostPoolSsoSecretType? ssoSecretType = default;
            PreferredAppGroupType? preferredAppGroupType = default;
            bool? startVmOnConnect = default;
            HostPoolPublicNetworkAccess? publicNetworkAccess = default;
            SessionHostAgentUpdatePatchProperties agentUpdate = default;
            ManagedPrivateUDP? managedPrivateUDP = default;
            DirectUDP? directUDP = default;
            PublicUDP? publicUDP = default;
            RelayUDP? relayUDP = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("friendlyName"u8))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customRdpProperty"u8))
                {
                    customRdpProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxSessionLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxSessionLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("personalDesktopAssignmentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    personalDesktopAssignmentType = new PersonalDesktopAssignmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("loadBalancerType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadBalancerType = new HostPoolLoadBalancerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ring"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ring = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("validationEnvironment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationEnvironment = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("registrationInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    registrationInfo = HostPoolRegistrationInfoPatch.DeserializeHostPoolRegistrationInfoPatch(property.Value, options);
                    continue;
                }
                if (property.NameEquals("vmTemplate"u8))
                {
                    vmTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ssoadfsAuthority"u8))
                {
                    ssoadfsAuthority = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ssoClientId"u8))
                {
                    ssoClientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ssoClientSecretKeyVaultPath"u8))
                {
                    ssoClientSecretKeyVaultPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ssoSecretType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ssoSecretType = new HostPoolSsoSecretType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preferredAppGroupType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preferredAppGroupType = new PreferredAppGroupType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startVMOnConnect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startVmOnConnect = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new HostPoolPublicNetworkAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agentUpdate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agentUpdate = SessionHostAgentUpdatePatchProperties.DeserializeSessionHostAgentUpdatePatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managedPrivateUDP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedPrivateUDP = new ManagedPrivateUDP(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("directUDP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    directUDP = new DirectUDP(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("publicUDP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicUDP = new PublicUDP(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("relayUDP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    relayUDP = new RelayUDP(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HostPoolPatchProperties(
                friendlyName,
                description,
                customRdpProperty,
                maxSessionLimit,
                personalDesktopAssignmentType,
                loadBalancerType,
                ring,
                validationEnvironment,
                registrationInfo,
                vmTemplate,
                ssoadfsAuthority,
                ssoClientId,
                ssoClientSecretKeyVaultPath,
                ssoSecretType,
                preferredAppGroupType,
                startVmOnConnect,
                publicNetworkAccess,
                agentUpdate,
                managedPrivateUDP,
                directUDP,
                publicUDP,
                relayUDP,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(FriendlyName), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  friendlyName: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(FriendlyName))
                {
                    builder.Append("  friendlyName: ");
                    if (FriendlyName.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{FriendlyName}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{FriendlyName}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Description), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  description: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Description))
                {
                    builder.Append("  description: ");
                    if (Description.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Description}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Description}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CustomRdpProperty), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  customRdpProperty: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CustomRdpProperty))
                {
                    builder.Append("  customRdpProperty: ");
                    if (CustomRdpProperty.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{CustomRdpProperty}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{CustomRdpProperty}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(MaxSessionLimit), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  maxSessionLimit: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(MaxSessionLimit))
                {
                    builder.Append("  maxSessionLimit: ");
                    builder.AppendLine($"{MaxSessionLimit.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PersonalDesktopAssignmentType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  personalDesktopAssignmentType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PersonalDesktopAssignmentType))
                {
                    builder.Append("  personalDesktopAssignmentType: ");
                    builder.AppendLine($"'{PersonalDesktopAssignmentType.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(LoadBalancerType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  loadBalancerType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(LoadBalancerType))
                {
                    builder.Append("  loadBalancerType: ");
                    builder.AppendLine($"'{LoadBalancerType.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Ring), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  ring: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(Ring))
                {
                    builder.Append("  ring: ");
                    builder.AppendLine($"{Ring.Value}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ValidationEnvironment), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  validationEnvironment: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ValidationEnvironment))
                {
                    builder.Append("  validationEnvironment: ");
                    var boolValue = ValidationEnvironment.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RegistrationInfo), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  registrationInfo: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RegistrationInfo))
                {
                    builder.Append("  registrationInfo: ");
                    BicepSerializationHelpers.AppendChildObject(builder, RegistrationInfo, options, 2, false, "  registrationInfo: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(VmTemplate), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  vmTemplate: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(VmTemplate))
                {
                    builder.Append("  vmTemplate: ");
                    if (VmTemplate.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{VmTemplate}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{VmTemplate}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SsoadfsAuthority), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  ssoadfsAuthority: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SsoadfsAuthority))
                {
                    builder.Append("  ssoadfsAuthority: ");
                    if (SsoadfsAuthority.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{SsoadfsAuthority}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{SsoadfsAuthority}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SsoClientId), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  ssoClientId: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SsoClientId))
                {
                    builder.Append("  ssoClientId: ");
                    if (SsoClientId.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{SsoClientId}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{SsoClientId}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SsoClientSecretKeyVaultPath), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  ssoClientSecretKeyVaultPath: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SsoClientSecretKeyVaultPath))
                {
                    builder.Append("  ssoClientSecretKeyVaultPath: ");
                    if (SsoClientSecretKeyVaultPath.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{SsoClientSecretKeyVaultPath}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{SsoClientSecretKeyVaultPath}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SsoSecretType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  ssoSecretType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SsoSecretType))
                {
                    builder.Append("  ssoSecretType: ");
                    builder.AppendLine($"'{SsoSecretType.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PreferredAppGroupType), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  preferredAppGroupType: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PreferredAppGroupType))
                {
                    builder.Append("  preferredAppGroupType: ");
                    builder.AppendLine($"'{PreferredAppGroupType.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(StartVmOnConnect), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  startVMOnConnect: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(StartVmOnConnect))
                {
                    builder.Append("  startVMOnConnect: ");
                    var boolValue = StartVmOnConnect.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PublicNetworkAccess), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  publicNetworkAccess: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PublicNetworkAccess))
                {
                    builder.Append("  publicNetworkAccess: ");
                    builder.AppendLine($"'{PublicNetworkAccess.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(AgentUpdate), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  agentUpdate: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(AgentUpdate))
                {
                    builder.Append("  agentUpdate: ");
                    BicepSerializationHelpers.AppendChildObject(builder, AgentUpdate, options, 2, false, "  agentUpdate: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(ManagedPrivateUDP), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  managedPrivateUDP: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(ManagedPrivateUDP))
                {
                    builder.Append("  managedPrivateUDP: ");
                    builder.AppendLine($"'{ManagedPrivateUDP.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DirectUDP), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  directUDP: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DirectUDP))
                {
                    builder.Append("  directUDP: ");
                    builder.AppendLine($"'{DirectUDP.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(PublicUDP), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  publicUDP: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(PublicUDP))
                {
                    builder.Append("  publicUDP: ");
                    builder.AppendLine($"'{PublicUDP.Value.ToString()}'");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(RelayUDP), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  relayUDP: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(RelayUDP))
                {
                    builder.Append("  relayUDP: ");
                    builder.AppendLine($"'{RelayUDP.Value.ToString()}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<HostPoolPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostPoolPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(HostPoolPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        HostPoolPatchProperties IPersistableModel<HostPoolPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HostPoolPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeHostPoolPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HostPoolPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HostPoolPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
