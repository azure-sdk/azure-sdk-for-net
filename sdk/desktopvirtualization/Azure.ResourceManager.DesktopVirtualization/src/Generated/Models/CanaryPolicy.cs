// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Policy on whether a Canary VM should be provisioned during a session host provisioning operation. </summary>
    public readonly partial struct CanaryPolicy : IEquatable<CanaryPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CanaryPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CanaryPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoValue = "Auto";
        private const string NeverValue = "Never";
        private const string AlwaysValue = "Always";

        /// <summary> Auto. </summary>
        public static CanaryPolicy Auto { get; } = new CanaryPolicy(AutoValue);
        /// <summary> Never. </summary>
        public static CanaryPolicy Never { get; } = new CanaryPolicy(NeverValue);
        /// <summary> Always. </summary>
        public static CanaryPolicy Always { get; } = new CanaryPolicy(AlwaysValue);
        /// <summary> Determines if two <see cref="CanaryPolicy"/> values are the same. </summary>
        public static bool operator ==(CanaryPolicy left, CanaryPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CanaryPolicy"/> values are not the same. </summary>
        public static bool operator !=(CanaryPolicy left, CanaryPolicy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CanaryPolicy"/>. </summary>
        public static implicit operator CanaryPolicy(string value) => new CanaryPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CanaryPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CanaryPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
