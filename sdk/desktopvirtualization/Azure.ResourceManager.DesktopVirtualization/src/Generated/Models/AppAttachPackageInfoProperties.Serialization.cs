// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class AppAttachPackageInfoProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PackageAlias))
            {
                writer.WritePropertyName("packageAlias"u8);
                writer.WriteStringValue(PackageAlias);
            }
            if (Optional.IsDefined(ImagePath))
            {
                writer.WritePropertyName("imagePath"u8);
                writer.WriteStringValue(ImagePath);
            }
            if (Optional.IsDefined(PackageName))
            {
                writer.WritePropertyName("packageName"u8);
                writer.WriteStringValue(PackageName);
            }
            if (Optional.IsDefined(PackageFamilyName))
            {
                writer.WritePropertyName("packageFamilyName"u8);
                writer.WriteStringValue(PackageFamilyName);
            }
            if (Optional.IsDefined(PackageFullName))
            {
                writer.WritePropertyName("packageFullName"u8);
                writer.WriteStringValue(PackageFullName);
            }
            if (Optional.IsDefined(DisplayName))
            {
                if (DisplayName != null)
                {
                    writer.WritePropertyName("displayName"u8);
                    writer.WriteStringValue(DisplayName);
                }
                else
                {
                    writer.WriteNull("displayName");
                }
            }
            if (Optional.IsDefined(PackageRelativePath))
            {
                writer.WritePropertyName("packageRelativePath"u8);
                writer.WriteStringValue(PackageRelativePath);
            }
            if (Optional.IsDefined(IsRegularRegistration))
            {
                writer.WritePropertyName("isRegularRegistration"u8);
                writer.WriteBooleanValue(IsRegularRegistration.Value);
            }
            if (Optional.IsDefined(IsActive))
            {
                writer.WritePropertyName("isActive"u8);
                writer.WriteBooleanValue(IsActive.Value);
            }
            if (Optional.IsCollectionDefined(PackageDependencies))
            {
                if (PackageDependencies != null)
                {
                    writer.WritePropertyName("packageDependencies"u8);
                    writer.WriteStartArray();
                    foreach (var item in PackageDependencies)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("packageDependencies");
                }
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(LastUpdated))
            {
                writer.WritePropertyName("lastUpdated"u8);
                writer.WriteStringValue(LastUpdated.Value, "O");
            }
            if (Optional.IsCollectionDefined(PackageApplications))
            {
                writer.WritePropertyName("packageApplications"u8);
                writer.WriteStartArray();
                foreach (var item in PackageApplications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CertificateName))
            {
                if (CertificateName != null)
                {
                    writer.WritePropertyName("certificateName"u8);
                    writer.WriteStringValue(CertificateName);
                }
                else
                {
                    writer.WriteNull("certificateName");
                }
            }
            if (Optional.IsDefined(CertificateExpiry))
            {
                if (CertificateExpiry != null)
                {
                    writer.WritePropertyName("certificateExpiry"u8);
                    writer.WriteStringValue(CertificateExpiry.Value, "O");
                }
                else
                {
                    writer.WriteNull("certificateExpiry");
                }
            }
            if (Optional.IsDefined(IsPackageTimestamped))
            {
                if (IsPackageTimestamped != null)
                {
                    writer.WritePropertyName("isPackageTimestamped"u8);
                    writer.WriteStringValue(IsPackageTimestamped.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isPackageTimestamped");
                }
            }
            writer.WriteEndObject();
        }

        internal static AppAttachPackageInfoProperties DeserializeAppAttachPackageInfoProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> packageAlias = default;
            Optional<string> imagePath = default;
            Optional<string> packageName = default;
            Optional<string> packageFamilyName = default;
            Optional<string> packageFullName = default;
            Optional<string> displayName = default;
            Optional<string> packageRelativePath = default;
            Optional<bool> isRegularRegistration = default;
            Optional<bool> isActive = default;
            Optional<IList<MsixPackageDependencies>> packageDependencies = default;
            Optional<string> version = default;
            Optional<DateTimeOffset> lastUpdated = default;
            Optional<IList<MsixPackageApplications>> packageApplications = default;
            Optional<string> certificateName = default;
            Optional<DateTimeOffset?> certificateExpiry = default;
            Optional<PackageTimestamped?> isPackageTimestamped = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("packageAlias"u8))
                {
                    packageAlias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imagePath"u8))
                {
                    imagePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("packageName"u8))
                {
                    packageName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("packageFamilyName"u8))
                {
                    packageFamilyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("packageFullName"u8))
                {
                    packageFullName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        displayName = null;
                        continue;
                    }
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("packageRelativePath"u8))
                {
                    packageRelativePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isRegularRegistration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRegularRegistration = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isActive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isActive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("packageDependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        packageDependencies = null;
                        continue;
                    }
                    List<MsixPackageDependencies> array = new List<MsixPackageDependencies>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MsixPackageDependencies.DeserializeMsixPackageDependencies(item));
                    }
                    packageDependencies = array;
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastUpdated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUpdated = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("packageApplications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MsixPackageApplications> array = new List<MsixPackageApplications>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MsixPackageApplications.DeserializeMsixPackageApplications(item));
                    }
                    packageApplications = array;
                    continue;
                }
                if (property.NameEquals("certificateName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificateName = null;
                        continue;
                    }
                    certificateName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateExpiry"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificateExpiry = null;
                        continue;
                    }
                    certificateExpiry = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isPackageTimestamped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isPackageTimestamped = null;
                        continue;
                    }
                    isPackageTimestamped = new PackageTimestamped(property.Value.GetString());
                    continue;
                }
            }
            return new AppAttachPackageInfoProperties(packageAlias.Value, imagePath.Value, packageName.Value, packageFamilyName.Value, packageFullName.Value, displayName.Value, packageRelativePath.Value, Optional.ToNullable(isRegularRegistration), Optional.ToNullable(isActive), Optional.ToList(packageDependencies), version.Value, Optional.ToNullable(lastUpdated), Optional.ToList(packageApplications), certificateName.Value, Optional.ToNullable(certificateExpiry), Optional.ToNullable(isPackageTimestamped));
        }
    }
}
