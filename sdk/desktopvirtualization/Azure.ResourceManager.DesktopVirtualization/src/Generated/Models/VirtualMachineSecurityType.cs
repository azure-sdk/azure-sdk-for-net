// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> The security type used by virtual machine in hostpool session host. Default is Standard. </summary>
    public readonly partial struct VirtualMachineSecurityType : IEquatable<VirtualMachineSecurityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineSecurityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualMachineSecurityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardValue = "Standard";
        private const string TrustedLaunchValue = "TrustedLaunch";
        private const string ConfidentialVmValue = "ConfidentialVM";

        /// <summary> Standard security protocol. No additional parameters. </summary>
        public static VirtualMachineSecurityType Standard { get; } = new VirtualMachineSecurityType(StandardValue);
        /// <summary> TrustedLaunch allows for secure boot adn vTPM. </summary>
        public static VirtualMachineSecurityType TrustedLaunch { get; } = new VirtualMachineSecurityType(TrustedLaunchValue);
        /// <summary> Confidential Virtual Machine security protocol. </summary>
        public static VirtualMachineSecurityType ConfidentialVm { get; } = new VirtualMachineSecurityType(ConfidentialVmValue);
        /// <summary> Determines if two <see cref="VirtualMachineSecurityType"/> values are the same. </summary>
        public static bool operator ==(VirtualMachineSecurityType left, VirtualMachineSecurityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualMachineSecurityType"/> values are not the same. </summary>
        public static bool operator !=(VirtualMachineSecurityType left, VirtualMachineSecurityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VirtualMachineSecurityType"/>. </summary>
        public static implicit operator VirtualMachineSecurityType(string value) => new VirtualMachineSecurityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualMachineSecurityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualMachineSecurityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
