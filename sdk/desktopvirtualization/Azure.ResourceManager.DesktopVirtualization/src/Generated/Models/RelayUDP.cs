// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
    public readonly partial struct RelayUDP : IEquatable<RelayUDP>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RelayUDP"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RelayUDP(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> Default. </summary>
        public static RelayUDP Default { get; } = new RelayUDP(DefaultValue);
        /// <summary> Enabled. </summary>
        public static RelayUDP Enabled { get; } = new RelayUDP(EnabledValue);
        /// <summary> Disabled. </summary>
        public static RelayUDP Disabled { get; } = new RelayUDP(DisabledValue);
        /// <summary> Determines if two <see cref="RelayUDP"/> values are the same. </summary>
        public static bool operator ==(RelayUDP left, RelayUDP right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RelayUDP"/> values are not the same. </summary>
        public static bool operator !=(RelayUDP left, RelayUDP right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RelayUDP"/>. </summary>
        public static implicit operator RelayUDP(string value) => new RelayUDP(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RelayUDP other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RelayUDP other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
