// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> The desired scaling method to be used to scale the hosts in the assigned host pool. </summary>
    public readonly partial struct ScalingMethodType : IEquatable<ScalingMethodType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScalingMethodType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScalingMethodType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PowerManageValue = "PowerManage";
        private const string CreateDeletePowerManageValue = "CreateDeletePowerManage";

        /// <summary> Scaling will manage hosts in the host pool by power managing the hosts, but will not change the host pool size. </summary>
        public static ScalingMethodType PowerManage { get; } = new ScalingMethodType(PowerManageValue);
        /// <summary> Scaling will manage the hosts in the host pool by power managing the hosts, as well as creating and deleting hosts to modify the host pool size. This requires the create delete object to be set, and the assigned hostpool to have a session host config property. </summary>
        public static ScalingMethodType CreateDeletePowerManage { get; } = new ScalingMethodType(CreateDeletePowerManageValue);
        /// <summary> Determines if two <see cref="ScalingMethodType"/> values are the same. </summary>
        public static bool operator ==(ScalingMethodType left, ScalingMethodType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScalingMethodType"/> values are not the same. </summary>
        public static bool operator !=(ScalingMethodType left, ScalingMethodType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScalingMethodType"/>. </summary>
        public static implicit operator ScalingMethodType(string value) => new ScalingMethodType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScalingMethodType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScalingMethodType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
