// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Properties of HostPool. </summary>
    public partial class HostPoolPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HostPoolPatchProperties"/>. </summary>
        public HostPoolPatchProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HostPoolPatchProperties"/>. </summary>
        /// <param name="friendlyName"> Friendly name of HostPool. </param>
        /// <param name="description"> Description of HostPool. </param>
        /// <param name="customRdpProperty"> Custom rdp property of HostPool. </param>
        /// <param name="maxSessionLimit"> The max session limit of HostPool. </param>
        /// <param name="personalDesktopAssignmentType"> PersonalDesktopAssignment type for HostPool. </param>
        /// <param name="loadBalancerType"> The type of the load balancer. </param>
        /// <param name="ring"> The ring number of HostPool. </param>
        /// <param name="validationEnvironment"> Is validation environment. </param>
        /// <param name="registrationInfo"> The registration info of HostPool. </param>
        /// <param name="vmTemplate"> VM template for sessionhosts configuration within hostpool. </param>
        /// <param name="ssoadfsAuthority"> URL to customer ADFS server for signing WVD SSO certificates. </param>
        /// <param name="ssoClientId"> ClientId for the registered Relying Party used to issue WVD SSO certificates. </param>
        /// <param name="ssoClientSecretKeyVaultPath"> Path to Azure KeyVault storing the secret used for communication to ADFS. </param>
        /// <param name="ssoSecretType"> The type of single sign on Secret Type. </param>
        /// <param name="preferredAppGroupType"> The type of preferred application group type, default to Desktop Application Group. </param>
        /// <param name="startVmOnConnect"> The flag to turn on/off StartVMOnConnect feature. </param>
        /// <param name="publicNetworkAccess"> Enabled to allow this resource to be access from the public network. </param>
        /// <param name="agentUpdate"> The session host configuration for updating agent, monitoring agent, and stack component. </param>
        /// <param name="managedPrivateUDP"> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </param>
        /// <param name="directUDP"> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </param>
        /// <param name="publicUDP"> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </param>
        /// <param name="relayUDP"> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HostPoolPatchProperties(string friendlyName, string description, string customRdpProperty, int? maxSessionLimit, PersonalDesktopAssignmentType? personalDesktopAssignmentType, HostPoolLoadBalancerType? loadBalancerType, int? ring, bool? validationEnvironment, HostPoolRegistrationInfoPatch registrationInfo, string vmTemplate, string ssoadfsAuthority, string ssoClientId, string ssoClientSecretKeyVaultPath, HostPoolSsoSecretType? ssoSecretType, PreferredAppGroupType? preferredAppGroupType, bool? startVmOnConnect, HostPoolPublicNetworkAccess? publicNetworkAccess, SessionHostAgentUpdatePatchProperties agentUpdate, ManagedPrivateUDP? managedPrivateUDP, DirectUDP? directUDP, PublicUDP? publicUDP, RelayUDP? relayUDP, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FriendlyName = friendlyName;
            Description = description;
            CustomRdpProperty = customRdpProperty;
            MaxSessionLimit = maxSessionLimit;
            PersonalDesktopAssignmentType = personalDesktopAssignmentType;
            LoadBalancerType = loadBalancerType;
            Ring = ring;
            ValidationEnvironment = validationEnvironment;
            RegistrationInfo = registrationInfo;
            VmTemplate = vmTemplate;
            SsoadfsAuthority = ssoadfsAuthority;
            SsoClientId = ssoClientId;
            SsoClientSecretKeyVaultPath = ssoClientSecretKeyVaultPath;
            SsoSecretType = ssoSecretType;
            PreferredAppGroupType = preferredAppGroupType;
            StartVmOnConnect = startVmOnConnect;
            PublicNetworkAccess = publicNetworkAccess;
            AgentUpdate = agentUpdate;
            ManagedPrivateUDP = managedPrivateUDP;
            DirectUDP = directUDP;
            PublicUDP = publicUDP;
            RelayUDP = relayUDP;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Friendly name of HostPool. </summary>
        [WirePath("friendlyName")]
        public string FriendlyName { get; set; }
        /// <summary> Description of HostPool. </summary>
        [WirePath("description")]
        public string Description { get; set; }
        /// <summary> Custom rdp property of HostPool. </summary>
        [WirePath("customRdpProperty")]
        public string CustomRdpProperty { get; set; }
        /// <summary> The max session limit of HostPool. </summary>
        [WirePath("maxSessionLimit")]
        public int? MaxSessionLimit { get; set; }
        /// <summary> PersonalDesktopAssignment type for HostPool. </summary>
        [WirePath("personalDesktopAssignmentType")]
        public PersonalDesktopAssignmentType? PersonalDesktopAssignmentType { get; set; }
        /// <summary> The type of the load balancer. </summary>
        [WirePath("loadBalancerType")]
        public HostPoolLoadBalancerType? LoadBalancerType { get; set; }
        /// <summary> The ring number of HostPool. </summary>
        [WirePath("ring")]
        public int? Ring { get; set; }
        /// <summary> Is validation environment. </summary>
        [WirePath("validationEnvironment")]
        public bool? ValidationEnvironment { get; set; }
        /// <summary> The registration info of HostPool. </summary>
        [WirePath("registrationInfo")]
        public HostPoolRegistrationInfoPatch RegistrationInfo { get; set; }
        /// <summary> VM template for sessionhosts configuration within hostpool. </summary>
        [WirePath("vmTemplate")]
        public string VmTemplate { get; set; }
        /// <summary> URL to customer ADFS server for signing WVD SSO certificates. </summary>
        [WirePath("ssoadfsAuthority")]
        public string SsoadfsAuthority { get; set; }
        /// <summary> ClientId for the registered Relying Party used to issue WVD SSO certificates. </summary>
        [WirePath("ssoClientId")]
        public string SsoClientId { get; set; }
        /// <summary> Path to Azure KeyVault storing the secret used for communication to ADFS. </summary>
        [WirePath("ssoClientSecretKeyVaultPath")]
        public string SsoClientSecretKeyVaultPath { get; set; }
        /// <summary> The type of single sign on Secret Type. </summary>
        [WirePath("ssoSecretType")]
        public HostPoolSsoSecretType? SsoSecretType { get; set; }
        /// <summary> The type of preferred application group type, default to Desktop Application Group. </summary>
        [WirePath("preferredAppGroupType")]
        public PreferredAppGroupType? PreferredAppGroupType { get; set; }
        /// <summary> The flag to turn on/off StartVMOnConnect feature. </summary>
        [WirePath("startVMOnConnect")]
        public bool? StartVmOnConnect { get; set; }
        /// <summary> Enabled to allow this resource to be access from the public network. </summary>
        [WirePath("publicNetworkAccess")]
        public HostPoolPublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary> The session host configuration for updating agent, monitoring agent, and stack component. </summary>
        [WirePath("agentUpdate")]
        public SessionHostAgentUpdatePatchProperties AgentUpdate { get; set; }
        /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
        [WirePath("managedPrivateUDP")]
        public ManagedPrivateUDP? ManagedPrivateUDP { get; set; }
        /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
        [WirePath("directUDP")]
        public DirectUDP? DirectUDP { get; set; }
        /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
        [WirePath("publicUDP")]
        public PublicUDP? PublicUDP { get; set; }
        /// <summary> Default: AVD-wide settings are used to determine connection availability, Enabled: UDP will attempt this connection type when making connections. This means that this connection is possible, but is not guaranteed, as there are other factors that may prevent this connection type, Disabled: UDP will not attempt this connection type when making connections. </summary>
        [WirePath("relayUDP")]
        public RelayUDP? RelayUDP { get; set; }
    }
}
