// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints. </summary>
    public readonly partial struct HostpoolPublicNetworkAccess : IEquatable<HostpoolPublicNetworkAccess>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HostpoolPublicNetworkAccess"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HostpoolPublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";
        private const string EnabledForSessionHostsOnlyValue = "EnabledForSessionHostsOnly";
        private const string EnabledForClientsOnlyValue = "EnabledForClientsOnly";

        /// <summary> Enabled. </summary>
        public static HostpoolPublicNetworkAccess Enabled { get; } = new HostpoolPublicNetworkAccess(EnabledValue);
        /// <summary> Disabled. </summary>
        public static HostpoolPublicNetworkAccess Disabled { get; } = new HostpoolPublicNetworkAccess(DisabledValue);
        /// <summary> EnabledForSessionHostsOnly. </summary>
        public static HostpoolPublicNetworkAccess EnabledForSessionHostsOnly { get; } = new HostpoolPublicNetworkAccess(EnabledForSessionHostsOnlyValue);
        /// <summary> EnabledForClientsOnly. </summary>
        public static HostpoolPublicNetworkAccess EnabledForClientsOnly { get; } = new HostpoolPublicNetworkAccess(EnabledForClientsOnlyValue);
        /// <summary> Determines if two <see cref="HostpoolPublicNetworkAccess"/> values are the same. </summary>
        public static bool operator ==(HostpoolPublicNetworkAccess left, HostpoolPublicNetworkAccess right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HostpoolPublicNetworkAccess"/> values are not the same. </summary>
        public static bool operator !=(HostpoolPublicNetworkAccess left, HostpoolPublicNetworkAccess right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HostpoolPublicNetworkAccess"/>. </summary>
        public static implicit operator HostpoolPublicNetworkAccess(string value) => new HostpoolPublicNetworkAccess(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HostpoolPublicNetworkAccess other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HostpoolPublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
