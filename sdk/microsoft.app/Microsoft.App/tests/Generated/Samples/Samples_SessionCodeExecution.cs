// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.App.Samples
{
    public partial class Samples_SessionCodeExecution
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionCodeExecution_ExecuteCode_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    codeInputType = "Inline",
                    executionType = "Synchronous",
                    code = "<code>",
                    timeoutInSeconds = 1234L,
                },
            });
            Response response = client.ExecuteCode(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionCodeExecution_ExecuteCode_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    codeInputType = "Inline",
                    executionType = "Synchronous",
                    code = "<code>",
                    timeoutInSeconds = 1234L,
                },
            });
            Response response = await client.ExecuteCodeAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionCodeExecution_ExecuteCode_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(new SessionCodeExecutionRequestProperties(CodeInputType.Inline, ExecutionType.Synchronous, "<code>", 1234L));
            Response<SessionCodeExecutionResponse> response = client.ExecuteCode(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionCodeExecution_ExecuteCode_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(new SessionCodeExecutionRequestProperties(CodeInputType.Inline, ExecutionType.Synchronous, "<code>", 1234L));
            Response<SessionCodeExecutionResponse> response = await client.ExecuteCodeAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionCodeExecution_ExecuteCode_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    codeInputType = "Inline",
                    executionType = "Synchronous",
                    code = "<code>",
                    timeoutInSeconds = 1234L,
                },
            });
            Response response = client.ExecuteCode(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionCodeExecution_ExecuteCode_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    codeInputType = "Inline",
                    executionType = "Synchronous",
                    code = "<code>",
                    timeoutInSeconds = 1234L,
                },
            });
            Response response = await client.ExecuteCodeAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionCodeExecution_ExecuteCode_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(new SessionCodeExecutionRequestProperties(CodeInputType.Inline, ExecutionType.Synchronous, "<code>", 1234L));
            Response<SessionCodeExecutionResponse> response = client.ExecuteCode(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionCodeExecution_ExecuteCode_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionCodeExecution client = new AppClient(endpoint, credential).GetSessionCodeExecutionClient(apiVersion: "2023-08-01-preview");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(new SessionCodeExecutionRequestProperties(CodeInputType.Inline, ExecutionType.Synchronous, "<code>", 1234L));
            Response<SessionCodeExecutionResponse> response = await client.ExecuteCodeAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), "<resourceGroupName>", "<sessionPoolName>", "<identifier>", codeExecutionRequest);
        }
    }
}
