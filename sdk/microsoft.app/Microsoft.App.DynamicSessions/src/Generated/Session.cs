// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;

namespace Microsoft.App.DynamicSessions
{
    /// <summary> The session resource. </summary>
    public partial class Session
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Session"/>. </summary>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="createdAt"> The date and time when the session was created. </param>
        /// <param name="lastAccessedAt"> The date and time when the session was last accessed. </param>
        /// <param name="expireAt"> The date and time when the session will expire. </param>
        /// <param name="etag"> The ETag of the session, representing the underlying container ID. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        internal Session(string identifier, DateTimeOffset createdAt, DateTimeOffset lastAccessedAt, DateTimeOffset expireAt, ETag etag)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));

            Identifier = identifier;
            CreatedAt = createdAt;
            LastAccessedAt = lastAccessedAt;
            ExpireAt = expireAt;
            Etag = etag;
        }

        /// <summary> Initializes a new instance of <see cref="Session"/>. </summary>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="createdAt"> The date and time when the session was created. </param>
        /// <param name="lastAccessedAt"> The date and time when the session was last accessed. </param>
        /// <param name="expireAt"> The date and time when the session will expire. </param>
        /// <param name="etag"> The ETag of the session, representing the underlying container ID. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Session(string identifier, DateTimeOffset createdAt, DateTimeOffset lastAccessedAt, DateTimeOffset expireAt, ETag etag, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Identifier = identifier;
            CreatedAt = createdAt;
            LastAccessedAt = lastAccessedAt;
            ExpireAt = expireAt;
            Etag = etag;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Session"/> for deserialization. </summary>
        internal Session()
        {
        }

        /// <summary> The identifier of the session. </summary>
        public string Identifier { get; }
        /// <summary> The date and time when the session was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The date and time when the session was last accessed. </summary>
        public DateTimeOffset LastAccessedAt { get; }
        /// <summary> The date and time when the session will expire. </summary>
        public DateTimeOffset ExpireAt { get; }
        /// <summary> The ETag of the session, representing the underlying container ID. </summary>
        public ETag Etag { get; }
    }
}
