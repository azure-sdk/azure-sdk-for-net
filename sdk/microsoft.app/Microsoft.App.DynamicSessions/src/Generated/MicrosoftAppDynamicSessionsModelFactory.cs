// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Microsoft.App.DynamicSessions
{
    /// <summary> Model factory for models. </summary>
    public static partial class MicrosoftAppDynamicSessionsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DynamicSessions.SessionCodeExecutionResource"/>. </summary>
        /// <param name="id"> Session code execution id. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="executionType"> The execution type of the code execution request. </param>
        /// <param name="status"> The status of the code execution operation, indicates whether succeeded or not. </param>
        /// <param name="error"> The error of this code execution if failed. </param>
        /// <param name="result"> The result of this code execution operation. </param>
        /// <returns> A new <see cref="DynamicSessions.SessionCodeExecutionResource"/> instance for mocking. </returns>
        public static SessionCodeExecutionResource SessionCodeExecutionResource(string id = null, string identifier = null, ExecutionType executionType = default, OperationState status = default, ErrorResponse error = null, SessionCodeExecutionResult result = null)
        {
            return new SessionCodeExecutionResource(
                id,
                identifier,
                executionType,
                status,
                error,
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.ErrorResponse"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="DynamicSessions.ErrorResponse"/> instance for mocking. </returns>
        public static ErrorResponse ErrorResponse(ResponseError error = null)
        {
            return new ErrorResponse(error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.SessionCodeExecutionResult"/>. </summary>
        /// <param name="stdout"> The standard output of the code execution. </param>
        /// <param name="stderr"> The standard error of the code execution. </param>
        /// <param name="executionResult"> The result of the code execution. The type of this field is same as the type of actual result of the code execution after being Json serialized. </param>
        /// <param name="executionTimeInMilliseconds"> The execution time of the code in milliseconds. </param>
        /// <returns> A new <see cref="DynamicSessions.SessionCodeExecutionResult"/> instance for mocking. </returns>
        public static SessionCodeExecutionResult SessionCodeExecutionResult(string stdout = null, string stderr = null, BinaryData executionResult = null, long? executionTimeInMilliseconds = null)
        {
            return new SessionCodeExecutionResult(stdout, stderr, executionResult, executionTimeInMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.SessionResourceFile"/>. </summary>
        /// <param name="name"> The name of the file. </param>
        /// <param name="type"> The type of the session resource file. </param>
        /// <param name="contentType"> The type of the content of this file. </param>
        /// <param name="sizeInBytes"> The size of the file. </param>
        /// <param name="lastModifiedAt"> The date time in RFC3339 format when the file was last modified. </param>
        /// <returns> A new <see cref="DynamicSessions.SessionResourceFile"/> instance for mocking. </returns>
        public static SessionResourceFile SessionResourceFile(string name = null, string type = null, string contentType = null, long? sizeInBytes = null, DateTimeOffset lastModifiedAt = default)
        {
            return new SessionResourceFile(
                name,
                type,
                contentType,
                sizeInBytes,
                lastModifiedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.Session"/>. </summary>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="createdAt"> The date and time when the session was created. </param>
        /// <param name="lastAccessedAt"> The date and time when the session was last accessed. </param>
        /// <param name="expireAt"> The date and time when the session will expire. </param>
        /// <param name="etag"> The ETag of the session, representing the underlying container ID. </param>
        /// <returns> A new <see cref="DynamicSessions.Session"/> instance for mocking. </returns>
        public static Session Session(string identifier = null, DateTimeOffset createdAt = default, DateTimeOffset lastAccessedAt = default, DateTimeOffset expireAt = default, ETag etag = default)
        {
            return new Session(
                identifier,
                createdAt,
                lastAccessedAt,
                expireAt,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.SessionsListResponse"/>. </summary>
        /// <param name="sessions"> The list of sessions. </param>
        /// <param name="nextLink"> The link to the next page of sessions. </param>
        /// <returns> A new <see cref="DynamicSessions.SessionsListResponse"/> instance for mocking. </returns>
        public static SessionsListResponse SessionsListResponse(IEnumerable<Session> sessions = null, Uri nextLink = null)
        {
            sessions ??= new List<Session>();

            return new SessionsListResponse(sessions?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.SessionPoolMetadataResponse"/>. </summary>
        /// <param name="runtimes"> List of runtimes. </param>
        /// <param name="preInstalledPackages"> List of pre-installed packages. </param>
        /// <param name="createdAt"> Creation date in RFC3339 format. </param>
        /// <param name="lastUpdatedAt"> Last updated date in RFC3339 format. </param>
        /// <param name="jupyterKernel"> Jupyter kernel information. </param>
        /// <returns> A new <see cref="DynamicSessions.SessionPoolMetadataResponse"/> instance for mocking. </returns>
        public static SessionPoolMetadataResponse SessionPoolMetadataResponse(IEnumerable<Runtime> runtimes = null, IEnumerable<Package> preInstalledPackages = null, DateTimeOffset createdAt = default, DateTimeOffset lastUpdatedAt = default, JupyterKernel jupyterKernel = null)
        {
            runtimes ??= new List<Runtime>();
            preInstalledPackages ??= new List<Package>();

            return new SessionPoolMetadataResponse(
                runtimes?.ToList(),
                preInstalledPackages?.ToList(),
                createdAt,
                lastUpdatedAt,
                jupyterKernel,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.Runtime"/>. </summary>
        /// <param name="name"> Name of the runtime. </param>
        /// <param name="version"> Version of the runtime. </param>
        /// <returns> A new <see cref="DynamicSessions.Runtime"/> instance for mocking. </returns>
        public static Runtime Runtime(string name = null, string version = null)
        {
            return new Runtime(name, version, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.Package"/>. </summary>
        /// <param name="name"> Name of the package. </param>
        /// <param name="version"> Version of the package. </param>
        /// <returns> A new <see cref="DynamicSessions.Package"/> instance for mocking. </returns>
        public static Package Package(string name = null, string version = null)
        {
            return new Package(name, version, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DynamicSessions.JupyterKernel"/>. </summary>
        /// <param name="name"> Name of the kernel. </param>
        /// <param name="version"> Version of the kernel. </param>
        /// <param name="projectUrl"> Project URL of the kernel. </param>
        /// <param name="description"> Description of the kernel. </param>
        /// <returns> A new <see cref="DynamicSessions.JupyterKernel"/> instance for mocking. </returns>
        public static JupyterKernel JupyterKernel(string name = null, string version = null, Uri projectUrl = null, string description = null)
        {
            return new JupyterKernel(name, version, projectUrl, description, serializedAdditionalRawData: null);
        }
    }
}
