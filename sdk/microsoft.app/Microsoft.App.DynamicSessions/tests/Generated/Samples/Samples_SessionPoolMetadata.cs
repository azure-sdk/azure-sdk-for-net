// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.App.DynamicSessions.Samples
{
    public partial class Samples_SessionPoolMetadata
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionPoolMetadata_GetSessionPoolMetadata_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response response = client.GetSessionPoolMetadata(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("projectUrl").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionPoolMetadata_GetSessionPoolMetadata_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response response = await client.GetSessionPoolMetadataAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("projectUrl").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionPoolMetadata_GetSessionPoolMetadata_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response<SessionPoolMetadataResponse> response = client.GetSessionPoolMetadata();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionPoolMetadata_GetSessionPoolMetadata_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response<SessionPoolMetadataResponse> response = await client.GetSessionPoolMetadataAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionPoolMetadata_GetSessionPoolMetadata_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response response = client.GetSessionPoolMetadata(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("projectUrl").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionPoolMetadata_GetSessionPoolMetadata_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response response = await client.GetSessionPoolMetadataAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("runtimes")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("preInstalledPackages")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("projectUrl").ToString());
            Console.WriteLine(result.GetProperty("jupyterKernel").GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SessionPoolMetadata_GetSessionPoolMetadata_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response<SessionPoolMetadataResponse> response = client.GetSessionPoolMetadata();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SessionPoolMetadata_GetSessionPoolMetadata_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            SessionPoolMetadata client = new DynamicSessionsClient(endpoint, credential).GetSessionPoolMetadataClient(apiVersion: "2024-10-02-preview");

            Response<SessionPoolMetadataResponse> response = await client.GetSessionPoolMetadataAsync();
        }
    }
}
