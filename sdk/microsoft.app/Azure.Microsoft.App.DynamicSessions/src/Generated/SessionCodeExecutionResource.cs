// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Microsoft.App.DynamicSessions
{
    /// <summary> The session code execution resource. </summary>
    public partial class SessionCodeExecutionResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResource"/>. </summary>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="executionType"> The execution type of the code execution request. </param>
        /// <param name="status"> The status of the code execution operation, indicates whether succeeded or not. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        internal SessionCodeExecutionResource(string identifier, ExecutionType executionType, OperationState status)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));

            Identifier = identifier;
            ExecutionType = executionType;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResource"/>. </summary>
        /// <param name="id"> Session code execution id. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="executionType"> The execution type of the code execution request. </param>
        /// <param name="status"> The status of the code execution operation, indicates whether succeeded or not. </param>
        /// <param name="error"> The error of this code execution if failed. </param>
        /// <param name="result"> The result of this code execution operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionCodeExecutionResource(string id, string identifier, ExecutionType executionType, OperationState status, ErrorResponse error, SessionCodeExecutionResult result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Identifier = identifier;
            ExecutionType = executionType;
            Status = status;
            Error = error;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResource"/> for deserialization. </summary>
        internal SessionCodeExecutionResource()
        {
        }

        /// <summary> Session code execution id. </summary>
        public string Id { get; }
        /// <summary> The identifier of the session. </summary>
        public string Identifier { get; }
        /// <summary> The execution type of the code execution request. </summary>
        public ExecutionType ExecutionType { get; }
        /// <summary> The status of the code execution operation, indicates whether succeeded or not. </summary>
        public OperationState Status { get; }
        /// <summary> The error of this code execution if failed. </summary>
        public ErrorResponse Error { get; }
        /// <summary> The result of this code execution operation. </summary>
        public SessionCodeExecutionResult Result { get; }
    }
}
