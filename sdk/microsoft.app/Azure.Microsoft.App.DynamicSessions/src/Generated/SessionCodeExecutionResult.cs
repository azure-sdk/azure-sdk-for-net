// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Microsoft.App.DynamicSessions
{
    /// <summary> The result of the code execution. </summary>
    public partial class SessionCodeExecutionResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResult"/>. </summary>
        internal SessionCodeExecutionResult()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResult"/>. </summary>
        /// <param name="stdout"> The standard output of the code execution. </param>
        /// <param name="stderr"> The standard error of the code execution. </param>
        /// <param name="executionResult"> The result of the code execution. The type of this field is same as the type of actual result of the code execution after being Json serialized. </param>
        /// <param name="executionTimeInMilliseconds"> The execution time of the code in milliseconds. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionCodeExecutionResult(string stdout, string stderr, BinaryData executionResult, long? executionTimeInMilliseconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Stdout = stdout;
            Stderr = stderr;
            ExecutionResult = executionResult;
            ExecutionTimeInMilliseconds = executionTimeInMilliseconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The standard output of the code execution. </summary>
        public string Stdout { get; }
        /// <summary> The standard error of the code execution. </summary>
        public string Stderr { get; }
        /// <summary>
        /// The result of the code execution. The type of this field is same as the type of actual result of the code execution after being Json serialized.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ExecutionResult { get; }
        /// <summary> The execution time of the code in milliseconds. </summary>
        public long? ExecutionTimeInMilliseconds { get; }
    }
}
