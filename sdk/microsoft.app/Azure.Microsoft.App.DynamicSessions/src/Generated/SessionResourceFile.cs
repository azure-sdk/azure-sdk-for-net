// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Microsoft.App.DynamicSessions
{
    /// <summary> Code execution file resource. </summary>
    public partial class SessionResourceFile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionResourceFile"/>. </summary>
        /// <param name="name"> The name of the file. </param>
        /// <param name="type"> The type of the session resource file. </param>
        /// <param name="lastModifiedAt"> The date time in RFC3339 format when the file was last modified. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="type"/> is null. </exception>
        internal SessionResourceFile(string name, string type, DateTimeOffset lastModifiedAt)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(type, nameof(type));

            Name = name;
            Type = type;
            LastModifiedAt = lastModifiedAt;
        }

        /// <summary> Initializes a new instance of <see cref="SessionResourceFile"/>. </summary>
        /// <param name="name"> The name of the file. </param>
        /// <param name="type"> The type of the session resource file. </param>
        /// <param name="contentType"> The type of the content of this file. </param>
        /// <param name="sizeInBytes"> The size of the file. </param>
        /// <param name="lastModifiedAt"> The date time in RFC3339 format when the file was last modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionResourceFile(string name, string type, string contentType, long? sizeInBytes, DateTimeOffset lastModifiedAt, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Type = type;
            ContentType = contentType;
            SizeInBytes = sizeInBytes;
            LastModifiedAt = lastModifiedAt;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SessionResourceFile"/> for deserialization. </summary>
        internal SessionResourceFile()
        {
        }

        /// <summary> The name of the file. </summary>
        public string Name { get; }
        /// <summary> The type of the session resource file. </summary>
        public string Type { get; }
        /// <summary> The type of the content of this file. </summary>
        public string ContentType { get; }
        /// <summary> The size of the file. </summary>
        public long? SizeInBytes { get; }
        /// <summary> The date time in RFC3339 format when the file was last modified. </summary>
        public DateTimeOffset LastModifiedAt { get; }
    }
}
