// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Source Mongo to Destination Mongo vCore copy job properties. </summary>
    public partial class MongoRUToMongoVCoreCopyJobProperties : BaseCopyJobProperties
    {
        /// <summary> Initializes a new instance of <see cref="MongoRUToMongoVCoreCopyJobProperties"/>. </summary>
        /// <param name="destinationDetails"> Destination Mongo (vCore) DataStore details. </param>
        /// <param name="tasks"> Copy Job tasks. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="destinationDetails"/> or <paramref name="tasks"/> is null. </exception>
        public MongoRUToMongoVCoreCopyJobProperties(MongoVCoreSourceSinkDetails destinationDetails, IEnumerable<MongoRUToMongoVCoreCopyJobTask> tasks)
        {
            Argument.AssertNotNull(destinationDetails, nameof(destinationDetails));
            Argument.AssertNotNull(tasks, nameof(tasks));

            DestinationDetails = destinationDetails;
            Tasks = tasks.ToList();
            JobType = CopyJobType.MongoRUToMongoVCore;
        }

        /// <summary> Initializes a new instance of <see cref="MongoRUToMongoVCoreCopyJobProperties"/>. </summary>
        /// <param name="jobType"> Copy Job Type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="sourceDetails"> Source Mongo (RU) DataStore details. </param>
        /// <param name="destinationDetails"> Destination Mongo (vCore) DataStore details. </param>
        /// <param name="tasks"> Copy Job tasks. </param>
        internal MongoRUToMongoVCoreCopyJobProperties(CopyJobType jobType, IDictionary<string, BinaryData> serializedAdditionalRawData, CosmosDBSourceSinkDetails sourceDetails, MongoVCoreSourceSinkDetails destinationDetails, IList<MongoRUToMongoVCoreCopyJobTask> tasks) : base(jobType, serializedAdditionalRawData)
        {
            SourceDetails = sourceDetails;
            DestinationDetails = destinationDetails;
            Tasks = tasks;
            JobType = jobType;
        }

        /// <summary> Initializes a new instance of <see cref="MongoRUToMongoVCoreCopyJobProperties"/> for deserialization. </summary>
        internal MongoRUToMongoVCoreCopyJobProperties()
        {
        }

        /// <summary> Source Mongo (RU) DataStore details. </summary>
        internal CosmosDBSourceSinkDetails SourceDetails { get; set; }
        /// <summary> Name of remote account in case of cross-account data transfer. </summary>
        [WirePath("sourceDetails.remoteAccountName")]
        public string SourceDetailsRemoteAccountName
        {
            get => SourceDetails is null ? default : SourceDetails.RemoteAccountName;
            set
            {
                if (SourceDetails is null)
                    SourceDetails = new CosmosDBSourceSinkDetails();
                SourceDetails.RemoteAccountName = value;
            }
        }

        /// <summary> Destination Mongo (vCore) DataStore details. </summary>
        [WirePath("destinationDetails")]
        public MongoVCoreSourceSinkDetails DestinationDetails { get; set; }
        /// <summary> Copy Job tasks. </summary>
        [WirePath("tasks")]
        public IList<MongoRUToMongoVCoreCopyJobTask> Tasks { get; }
    }
}
