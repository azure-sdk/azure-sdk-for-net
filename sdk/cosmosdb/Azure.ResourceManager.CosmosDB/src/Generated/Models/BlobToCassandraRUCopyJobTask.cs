// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> The BlobToCassandraRUCopyJobTask. </summary>
    public partial class BlobToCassandraRUCopyJobTask : BaseCopyJobTask
    {
        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobTask"/>. </summary>
        /// <param name="source"> Source Azure Blob container. </param>
        /// <param name="destination"> Destination Cassandra table. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="source"/> or <paramref name="destination"/> is null. </exception>
        public BlobToCassandraRUCopyJobTask(AzureBlobContainer source, CosmosDBCassandraTable destination)
        {
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(destination, nameof(destination));

            Source = source;
            Destination = destination;
        }

        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobTask"/>. </summary>
        /// <param name="totalCount"> Task level Total Count. </param>
        /// <param name="processedCount"> Task level Processed Count. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="source"> Source Azure Blob container. </param>
        /// <param name="destination"> Destination Cassandra table. </param>
        internal BlobToCassandraRUCopyJobTask(long? totalCount, long? processedCount, IDictionary<string, BinaryData> serializedAdditionalRawData, AzureBlobContainer source, CosmosDBCassandraTable destination) : base(totalCount, processedCount, serializedAdditionalRawData)
        {
            Source = source;
            Destination = destination;
        }

        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobTask"/> for deserialization. </summary>
        internal BlobToCassandraRUCopyJobTask()
        {
        }

        /// <summary> Source Azure Blob container. </summary>
        internal AzureBlobContainer Source { get; set; }
        /// <summary> Azure Blob container. </summary>
        [WirePath("source.containerName")]
        public string SourceContainerName
        {
            get => Source is null ? default : Source.ContainerName;
            set => Source = new AzureBlobContainer(value);
        }

        /// <summary> Destination Cassandra table. </summary>
        [WirePath("destination")]
        public CosmosDBCassandraTable Destination { get; set; }
    }
}
