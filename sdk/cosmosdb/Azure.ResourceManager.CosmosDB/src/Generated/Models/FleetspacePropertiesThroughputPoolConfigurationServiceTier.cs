// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Service Tier for the fleetspace. GeneralPurpose types refers to single write region accounts that can be added to this fleetspace, whereas BusinessCritical refers to multi write region. </summary>
    public readonly partial struct FleetspacePropertiesThroughputPoolConfigurationServiceTier : IEquatable<FleetspacePropertiesThroughputPoolConfigurationServiceTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FleetspacePropertiesThroughputPoolConfigurationServiceTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FleetspacePropertiesThroughputPoolConfigurationServiceTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string BusinessCriticalValue = "BusinessCritical";

        /// <summary> GeneralPurpose. </summary>
        public static FleetspacePropertiesThroughputPoolConfigurationServiceTier GeneralPurpose { get; } = new FleetspacePropertiesThroughputPoolConfigurationServiceTier(GeneralPurposeValue);
        /// <summary> BusinessCritical. </summary>
        public static FleetspacePropertiesThroughputPoolConfigurationServiceTier BusinessCritical { get; } = new FleetspacePropertiesThroughputPoolConfigurationServiceTier(BusinessCriticalValue);
        /// <summary> Determines if two <see cref="FleetspacePropertiesThroughputPoolConfigurationServiceTier"/> values are the same. </summary>
        public static bool operator ==(FleetspacePropertiesThroughputPoolConfigurationServiceTier left, FleetspacePropertiesThroughputPoolConfigurationServiceTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FleetspacePropertiesThroughputPoolConfigurationServiceTier"/> values are not the same. </summary>
        public static bool operator !=(FleetspacePropertiesThroughputPoolConfigurationServiceTier left, FleetspacePropertiesThroughputPoolConfigurationServiceTier right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FleetspacePropertiesThroughputPoolConfigurationServiceTier"/>. </summary>
        public static implicit operator FleetspacePropertiesThroughputPoolConfigurationServiceTier(string value) => new FleetspacePropertiesThroughputPoolConfigurationServiceTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FleetspacePropertiesThroughputPoolConfigurationServiceTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FleetspacePropertiesThroughputPoolConfigurationServiceTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
