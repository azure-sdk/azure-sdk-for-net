// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Job Status. </summary>
    public readonly partial struct CopyJobStatus : IEquatable<CopyJobStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CopyJobStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CopyJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string PartitioningValue = "Partitioning";
        private const string RunningValue = "Running";
        private const string PausedValue = "Paused";
        private const string CompletedValue = "Completed";
        private const string FaultedValue = "Faulted";
        private const string CancelledValue = "Cancelled";

        /// <summary> Pending. </summary>
        public static CopyJobStatus Pending { get; } = new CopyJobStatus(PendingValue);
        /// <summary> Partitioning. </summary>
        public static CopyJobStatus Partitioning { get; } = new CopyJobStatus(PartitioningValue);
        /// <summary> Running. </summary>
        public static CopyJobStatus Running { get; } = new CopyJobStatus(RunningValue);
        /// <summary> Paused. </summary>
        public static CopyJobStatus Paused { get; } = new CopyJobStatus(PausedValue);
        /// <summary> Completed. </summary>
        public static CopyJobStatus Completed { get; } = new CopyJobStatus(CompletedValue);
        /// <summary> Faulted. </summary>
        public static CopyJobStatus Faulted { get; } = new CopyJobStatus(FaultedValue);
        /// <summary> Cancelled. </summary>
        public static CopyJobStatus Cancelled { get; } = new CopyJobStatus(CancelledValue);
        /// <summary> Determines if two <see cref="CopyJobStatus"/> values are the same. </summary>
        public static bool operator ==(CopyJobStatus left, CopyJobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CopyJobStatus"/> values are not the same. </summary>
        public static bool operator !=(CopyJobStatus left, CopyJobStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CopyJobStatus"/>. </summary>
        public static implicit operator CopyJobStatus(string value) => new CopyJobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CopyJobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CopyJobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
