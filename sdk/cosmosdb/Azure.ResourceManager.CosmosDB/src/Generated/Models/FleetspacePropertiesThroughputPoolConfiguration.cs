// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Configuration for throughput pool in the fleetspace. </summary>
    public partial class FleetspacePropertiesThroughputPoolConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FleetspacePropertiesThroughputPoolConfiguration"/>. </summary>
        public FleetspacePropertiesThroughputPoolConfiguration()
        {
            DataRegions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="FleetspacePropertiesThroughputPoolConfiguration"/>. </summary>
        /// <param name="minThroughput"> Minimum throughput for the pool. </param>
        /// <param name="maxThroughput"> Maximum throughput for the pool. </param>
        /// <param name="serviceTier"> Service Tier for the fleetspace. GeneralPurpose types refers to single write region accounts that can be added to this fleetspace, whereas BusinessCritical refers to multi write region. </param>
        /// <param name="dataRegions"> List of data regions assigned to the fleetspace. Eg [westus2]. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FleetspacePropertiesThroughputPoolConfiguration(int? minThroughput, int? maxThroughput, FleetspacePropertiesThroughputPoolConfigurationServiceTier? serviceTier, IList<string> dataRegions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MinThroughput = minThroughput;
            MaxThroughput = maxThroughput;
            ServiceTier = serviceTier;
            DataRegions = dataRegions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Minimum throughput for the pool. </summary>
        [WirePath("minThroughput")]
        public int? MinThroughput { get; set; }
        /// <summary> Maximum throughput for the pool. </summary>
        [WirePath("maxThroughput")]
        public int? MaxThroughput { get; set; }
        /// <summary> Service Tier for the fleetspace. GeneralPurpose types refers to single write region accounts that can be added to this fleetspace, whereas BusinessCritical refers to multi write region. </summary>
        [WirePath("serviceTier")]
        public FleetspacePropertiesThroughputPoolConfigurationServiceTier? ServiceTier { get; set; }
        /// <summary> List of data regions assigned to the fleetspace. Eg [westus2]. </summary>
        [WirePath("dataRegions")]
        public IList<string> DataRegions { get; }
    }
}
