// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Represents a fleetspace resource for updates. </summary>
    public partial class FleetspaceResourcePatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FleetspaceResourcePatch"/>. </summary>
        public FleetspaceResourcePatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FleetspaceResourcePatch"/>. </summary>
        /// <param name="provisioningState"> A provisioning state of the Fleetspace. </param>
        /// <param name="fleetspaceApiKind"> The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'. </param>
        /// <param name="throughputPoolConfiguration"> Configuration for throughput pool in the fleetspace. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FleetspaceResourcePatch(CosmosDBStatus? provisioningState, FleetspacePropertiesFleetspaceApiKind? fleetspaceApiKind, FleetspacePropertiesThroughputPoolConfiguration throughputPoolConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            FleetspaceApiKind = fleetspaceApiKind;
            ThroughputPoolConfiguration = throughputPoolConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> A provisioning state of the Fleetspace. </summary>
        [WirePath("properties.provisioningState")]
        public CosmosDBStatus? ProvisioningState { get; set; }
        /// <summary> The kind of API this fleetspace belongs to. Acceptable values: 'NoSQL'. </summary>
        [WirePath("properties.fleetspaceApiKind")]
        public FleetspacePropertiesFleetspaceApiKind? FleetspaceApiKind { get; set; }
        /// <summary> Configuration for throughput pool in the fleetspace. </summary>
        [WirePath("properties.throughputPoolConfiguration")]
        public FleetspacePropertiesThroughputPoolConfiguration ThroughputPoolConfiguration { get; set; }
    }
}
