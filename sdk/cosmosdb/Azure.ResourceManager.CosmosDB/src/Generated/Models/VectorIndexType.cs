// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> The index type of the vector. Currently, flat, diskANN, and quantizedFlat are supported. </summary>
    public readonly partial struct VectorIndexType : IEquatable<VectorIndexType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VectorIndexType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VectorIndexType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FlatValue = "flat";
        private const string DiskANNValue = "diskANN";
        private const string QuantizedFlatValue = "quantizedFlat";

        /// <summary> flat. </summary>
        public static VectorIndexType Flat { get; } = new VectorIndexType(FlatValue);
        /// <summary> diskANN. </summary>
        public static VectorIndexType DiskANN { get; } = new VectorIndexType(DiskANNValue);
        /// <summary> quantizedFlat. </summary>
        public static VectorIndexType QuantizedFlat { get; } = new VectorIndexType(QuantizedFlatValue);
        /// <summary> Determines if two <see cref="VectorIndexType"/> values are the same. </summary>
        public static bool operator ==(VectorIndexType left, VectorIndexType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VectorIndexType"/> values are not the same. </summary>
        public static bool operator !=(VectorIndexType left, VectorIndexType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VectorIndexType"/>. </summary>
        public static implicit operator VectorIndexType(string value) => new VectorIndexType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorIndexType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VectorIndexType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
