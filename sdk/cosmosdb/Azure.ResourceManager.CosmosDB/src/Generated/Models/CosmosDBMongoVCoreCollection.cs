// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> A CosmosDB Mongo vCore collection. </summary>
    public partial class CosmosDBMongoVCoreCollection
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CosmosDBMongoVCoreCollection"/>. </summary>
        /// <param name="databaseName"> Azure Cosmos DB for MongoDB (vCore) database. </param>
        /// <param name="collectionName"> Azure Cosmos DB for MongoDB (vCore) collection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="collectionName"/> is null. </exception>
        public CosmosDBMongoVCoreCollection(string databaseName, string collectionName)
        {
            Argument.AssertNotNull(databaseName, nameof(databaseName));
            Argument.AssertNotNull(collectionName, nameof(collectionName));

            DatabaseName = databaseName;
            CollectionName = collectionName;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBMongoVCoreCollection"/>. </summary>
        /// <param name="databaseName"> Azure Cosmos DB for MongoDB (vCore) database. </param>
        /// <param name="collectionName"> Azure Cosmos DB for MongoDB (vCore) collection. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CosmosDBMongoVCoreCollection(string databaseName, string collectionName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DatabaseName = databaseName;
            CollectionName = collectionName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBMongoVCoreCollection"/> for deserialization. </summary>
        internal CosmosDBMongoVCoreCollection()
        {
        }

        /// <summary> Azure Cosmos DB for MongoDB (vCore) database. </summary>
        [WirePath("databaseName")]
        public string DatabaseName { get; set; }
        /// <summary> Azure Cosmos DB for MongoDB (vCore) collection. </summary>
        [WirePath("collectionName")]
        public string CollectionName { get; set; }
    }
}
