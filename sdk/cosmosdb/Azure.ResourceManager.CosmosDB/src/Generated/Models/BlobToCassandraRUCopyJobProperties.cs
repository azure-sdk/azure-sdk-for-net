// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Source Azure Blob Storage to Destination Cassandra copy job properties. </summary>
    public partial class BlobToCassandraRUCopyJobProperties : BaseCopyJobProperties
    {
        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobProperties"/>. </summary>
        /// <param name="sourceDetails"> Azure Storage container DataStore details. </param>
        /// <param name="tasks"> Copy Job tasks. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceDetails"/> or <paramref name="tasks"/> is null. </exception>
        public BlobToCassandraRUCopyJobProperties(AzureBlobSourceSinkDetails sourceDetails, IEnumerable<BlobToCassandraRUCopyJobTask> tasks)
        {
            Argument.AssertNotNull(sourceDetails, nameof(sourceDetails));
            Argument.AssertNotNull(tasks, nameof(tasks));

            SourceDetails = sourceDetails;
            Tasks = tasks.ToList();
            JobType = CopyJobType.AzureBlobStorageToCassandraRU;
        }

        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobProperties"/>. </summary>
        /// <param name="jobType"> Copy Job Type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="sourceDetails"> Azure Storage container DataStore details. </param>
        /// <param name="destinationDetails"> Destination Cassandra DataStore details. </param>
        /// <param name="tasks"> Copy Job tasks. </param>
        internal BlobToCassandraRUCopyJobProperties(CopyJobType jobType, IDictionary<string, BinaryData> serializedAdditionalRawData, AzureBlobSourceSinkDetails sourceDetails, CosmosDBSourceSinkDetails destinationDetails, IList<BlobToCassandraRUCopyJobTask> tasks) : base(jobType, serializedAdditionalRawData)
        {
            SourceDetails = sourceDetails;
            DestinationDetails = destinationDetails;
            Tasks = tasks;
            JobType = jobType;
        }

        /// <summary> Initializes a new instance of <see cref="BlobToCassandraRUCopyJobProperties"/> for deserialization. </summary>
        internal BlobToCassandraRUCopyJobProperties()
        {
        }

        /// <summary> Azure Storage container DataStore details. </summary>
        internal AzureBlobSourceSinkDetails SourceDetails { get; set; }
        /// <summary> Azure Blob container endpoint. </summary>
        [WirePath("sourceDetails.endpointUrl")]
        public Uri SourceDetailsEndpointUri
        {
            get => SourceDetails is null ? default : SourceDetails.EndpointUri;
            set => SourceDetails = new AzureBlobSourceSinkDetails(value);
        }

        /// <summary> Destination Cassandra DataStore details. </summary>
        internal CosmosDBSourceSinkDetails DestinationDetails { get; set; }
        /// <summary> Name of remote account in case of cross-account data transfer. </summary>
        [WirePath("destinationDetails.remoteAccountName")]
        public string DestinationDetailsRemoteAccountName
        {
            get => DestinationDetails is null ? default : DestinationDetails.RemoteAccountName;
            set
            {
                if (DestinationDetails is null)
                    DestinationDetails = new CosmosDBSourceSinkDetails();
                DestinationDetails.RemoteAccountName = value;
            }
        }

        /// <summary> Copy Job tasks. </summary>
        [WirePath("tasks")]
        public IList<BlobToCassandraRUCopyJobTask> Tasks { get; }
    }
}
