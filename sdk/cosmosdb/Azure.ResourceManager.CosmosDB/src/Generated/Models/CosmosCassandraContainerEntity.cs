// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> A CosmosDB Cassandra container entity. </summary>
    public partial class CosmosCassandraContainerEntity : ContainerEntity
    {
        /// <summary> Initializes a new instance of <see cref="CosmosCassandraContainerEntity"/>. </summary>
        /// <param name="keySpaceName"></param>
        /// <param name="tableName"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="keySpaceName"/> or <paramref name="tableName"/> is null. </exception>
        public CosmosCassandraContainerEntity(string keySpaceName, string tableName)
        {
            Argument.AssertNotNull(keySpaceName, nameof(keySpaceName));
            Argument.AssertNotNull(tableName, nameof(tableName));

            KeySpaceName = keySpaceName;
            TableName = tableName;
            Component = DataTransferComponent.CosmosDBCassandra;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosCassandraContainerEntity"/>. </summary>
        /// <param name="component"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="keySpaceName"></param>
        /// <param name="tableName"></param>
        internal CosmosCassandraContainerEntity(DataTransferComponent component, IDictionary<string, BinaryData> serializedAdditionalRawData, string keySpaceName, string tableName) : base(component, serializedAdditionalRawData)
        {
            KeySpaceName = keySpaceName;
            TableName = tableName;
            Component = component;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosCassandraContainerEntity"/> for deserialization. </summary>
        internal CosmosCassandraContainerEntity()
        {
        }

        /// <summary> Gets or sets the key space name. </summary>
        [WirePath("keySpaceName")]
        public string KeySpaceName { get; set; }
        /// <summary> Gets or sets the table name. </summary>
        [WirePath("tableName")]
        public string TableName { get; set; }
    }
}
