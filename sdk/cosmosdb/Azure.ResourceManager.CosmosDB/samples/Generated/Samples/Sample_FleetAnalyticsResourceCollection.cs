// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.CosmosDB.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.CosmosDB.Samples
{
    public partial class Sample_FleetAnalyticsResourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CosmosDBFleetAnalyticsCreate()
        {
            // Generated from example definition: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2025-05-01-preview/examples/fleet/CosmosDBFleetAnalyticsCreate.json
            // this example is just showing the usage of "FleetAnalytics_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleetResource = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetAnalyticsResource
            FleetAnalyticsResourceCollection collection = fleetResource.GetFleetAnalyticsResources();

            // invoke the operation
            string fleetAnalyticsName = "storageAccount";
            FleetAnalyticsResourceData data = new FleetAnalyticsResourceData
            {
                StorageLocationType = FleetAnalyticsPropertiesStorageLocationType.StorageAccount,
                StorageLocationUri = new Uri("/subscriptions/d1eb41bc-1b7f-4404-bd2a-868c222852d/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/testStorageAccount1"),
            };
            ArmOperation<FleetAnalyticsResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fleetAnalyticsName, data);
            FleetAnalyticsResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetAnalyticsResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CosmosDBFleetAnalyticsGet()
        {
            // Generated from example definition: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2025-05-01-preview/examples/fleet/CosmosDBFleetAnalyticsGet.json
            // this example is just showing the usage of "FleetAnalytics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleetResource = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetAnalyticsResource
            FleetAnalyticsResourceCollection collection = fleetResource.GetFleetAnalyticsResources();

            // invoke the operation
            string fleetAnalyticsName = "storageAccount";
            FleetAnalyticsResource result = await collection.GetAsync(fleetAnalyticsName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetAnalyticsResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_CosmosDBFleetAnalyticsList()
        {
            // Generated from example definition: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2025-05-01-preview/examples/fleet/CosmosDBFleetAnalyticsList.json
            // this example is just showing the usage of "FleetAnalytics_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleetResource = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetAnalyticsResource
            FleetAnalyticsResourceCollection collection = fleetResource.GetFleetAnalyticsResources();

            // invoke the operation and iterate over the result
            await foreach (FleetAnalyticsResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetAnalyticsResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_CosmosDBFleetAnalyticsGet()
        {
            // Generated from example definition: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2025-05-01-preview/examples/fleet/CosmosDBFleetAnalyticsGet.json
            // this example is just showing the usage of "FleetAnalytics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleetResource = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetAnalyticsResource
            FleetAnalyticsResourceCollection collection = fleetResource.GetFleetAnalyticsResources();

            // invoke the operation
            string fleetAnalyticsName = "storageAccount";
            bool result = await collection.ExistsAsync(fleetAnalyticsName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_CosmosDBFleetAnalyticsGet()
        {
            // Generated from example definition: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2025-05-01-preview/examples/fleet/CosmosDBFleetAnalyticsGet.json
            // this example is just showing the usage of "FleetAnalytics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
            string resourceGroupName = "rg1";
            string fleetName = "fleet1";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleetResource = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetAnalyticsResource
            FleetAnalyticsResourceCollection collection = fleetResource.GetFleetAnalyticsResources();

            // invoke the operation
            string fleetAnalyticsName = "storageAccount";
            NullableResponse<FleetAnalyticsResource> response = await collection.GetIfExistsAsync(fleetAnalyticsName);
            FleetAnalyticsResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetAnalyticsResourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
