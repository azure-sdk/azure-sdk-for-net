// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.AgriculturePlatform
{
    /// <summary> Schema of Weather Metadata. </summary>
    public partial class WeatherMetadata
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WeatherMetadata"/>. </summary>
        /// <param name="providerName"> Weather provider name. </param>
        /// <param name="providerApiName"> Provider's api name to which request is to be made. </param>
        /// <param name="units">
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="providerName"/>, <paramref name="providerApiName"/>, <paramref name="units"/> or <paramref name="weatherDataType"/> is null. </exception>
        internal WeatherMetadata(string providerName, string providerApiName, string units, string weatherDataType)
        {
            Argument.AssertNotNull(providerName, nameof(providerName));
            Argument.AssertNotNull(providerApiName, nameof(providerApiName));
            Argument.AssertNotNull(units, nameof(units));
            Argument.AssertNotNull(weatherDataType, nameof(weatherDataType));

            ProviderName = providerName;
            ProviderApiName = providerApiName;
            Units = units;
            WeatherDataType = weatherDataType;
        }

        /// <summary> Initializes a new instance of <see cref="WeatherMetadata"/>. </summary>
        /// <param name="providerName"> Weather provider name. </param>
        /// <param name="providerApiName"> Provider's api name to which request is to be made. </param>
        /// <param name="language">
        /// Language (IETF BCP 47 language tag) in which search results should be returned
        /// by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
        /// </param>
        /// <param name="units">
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WeatherMetadata(string providerName, string providerApiName, string language, string units, string weatherDataType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProviderName = providerName;
            ProviderApiName = providerApiName;
            Language = language;
            Units = units;
            WeatherDataType = weatherDataType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WeatherMetadata"/> for deserialization. </summary>
        internal WeatherMetadata()
        {
        }

        /// <summary> Weather provider name. </summary>
        public string ProviderName { get; }
        /// <summary> Provider's api name to which request is to be made. </summary>
        public string ProviderApiName { get; }
        /// <summary>
        /// Language (IETF BCP 47 language tag) in which search results should be returned
        /// by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
        /// </summary>
        public string Language { get; }
        /// <summary>
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </summary>
        public string Units { get; }
        /// <summary> Type of weather data (forecast/historical). </summary>
        public string WeatherDataType { get; }
    }
}
