// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.AgriculturePlatform
{
    /// <summary> Schema of weather data. </summary>
    public partial class WeatherData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WeatherData"/>. </summary>
        internal WeatherData()
        {
            AdditionalAttributes = new ChangeTrackingDictionary<string, BinaryData>();
            DayOfWeek = new ChangeTrackingList<string>();
            DayOrNight = new ChangeTrackingList<string>();
            ExpirationTime = new ChangeTrackingList<string>();
            IconCode = new ChangeTrackingList<int>();
            IconCodeExtend = new ChangeTrackingList<int>();
            HasPrecipitation = new ChangeTrackingList<bool>();
            UvDescription = new ChangeTrackingList<string>();
            UvIndex = new ChangeTrackingList<double>();
            ValidTimeLocal = new ChangeTrackingList<string>();
            ValidTime = new ChangeTrackingList<string>();
            WxPhraseLong = new ChangeTrackingList<string>();
            WxPhraseShort = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="WeatherData"/>. </summary>
        /// <param name="additionalAttributes">
        /// A collection of key value pairs that belongs to the resource. Each pair must
        /// not have a key greater than 50 characters and must not have a value greater
        /// than 250 characters. Note: A maximum of 100 key value pairs can be provided for
        /// a resource and only string and numeral values are supported.
        /// </param>
        /// <param name="wetBulbTemperature"> Schema for storing measurement readings and unit. </param>
        /// <param name="cloudCover"> Schema for storing measurement readings and unit. </param>
        /// <param name="dayOfWeek"> Day of week. </param>
        /// <param name="dayOrNight">
        /// This data field indicates whether it is daytime or nighttime based on the Local
        /// Apparent Time of the location.
        /// </param>
        /// <param name="expirationTime"> Expiration time in Utc format. </param>
        /// <param name="iconCode">
        /// This number is the key to the weather icon lookup. The data field shows the
        /// icon number that is matched to represent the observed weather conditions.
        /// </param>
        /// <param name="iconCodeExtend"> Code representing full set sensible weather. </param>
        /// <param name="hasPrecipitation"> Indicates whether there is precipitation or not. </param>
        /// <param name="pressureMeanSeaLevel"> Schema for storing measurement readings and unit. </param>
        /// <param name="relativeHumidity"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperature"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureDewPoint"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureFeelsLike"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureHeatIndex"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureWindChill"> Schema for storing measurement readings and unit. </param>
        /// <param name="uvDescription">
        /// The UV Index Description which complements the UV Index value by providing an
        /// associated level of risk of skin damage due to exposure (-2 = Not Available, -1
        /// = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very
        /// High, 11 to 16 = Extreme).
        /// </param>
        /// <param name="uvIndex"> Hourly maximum UV index. </param>
        /// <param name="validTimeLocal"> Time forecast is valid in local apparent time. </param>
        /// <param name="validTime"> Time forecast is valid in Utc format. </param>
        /// <param name="visibility"> Schema for storing measurement readings and unit. </param>
        /// <param name="windDirection"> Schema for storing measurement readings and unit. </param>
        /// <param name="windGust"> Schema for storing measurement readings and unit. </param>
        /// <param name="windSpeed"> Schema for storing measurement readings and unit. </param>
        /// <param name="wxPhraseLong"> Hourly sensible weather phrase containing longer description. </param>
        /// <param name="wxPhraseShort"> Hourly sensible weather phrase containing short description. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WeatherData(IReadOnlyDictionary<string, BinaryData> additionalAttributes, Measures wetBulbTemperature, Measures cloudCover, IReadOnlyList<string> dayOfWeek, IReadOnlyList<string> dayOrNight, IReadOnlyList<string> expirationTime, IReadOnlyList<int> iconCode, IReadOnlyList<int> iconCodeExtend, IReadOnlyList<bool> hasPrecipitation, Measures pressureMeanSeaLevel, Measures relativeHumidity, Measures temperature, Measures temperatureDewPoint, Measures temperatureFeelsLike, Measures temperatureHeatIndex, Measures temperatureWindChill, IReadOnlyList<string> uvDescription, IReadOnlyList<double> uvIndex, IReadOnlyList<string> validTimeLocal, IReadOnlyList<string> validTime, Measures visibility, Measures windDirection, Measures windGust, Measures windSpeed, IReadOnlyList<string> wxPhraseLong, IReadOnlyList<string> wxPhraseShort, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AdditionalAttributes = additionalAttributes;
            WetBulbTemperature = wetBulbTemperature;
            CloudCover = cloudCover;
            DayOfWeek = dayOfWeek;
            DayOrNight = dayOrNight;
            ExpirationTime = expirationTime;
            IconCode = iconCode;
            IconCodeExtend = iconCodeExtend;
            HasPrecipitation = hasPrecipitation;
            PressureMeanSeaLevel = pressureMeanSeaLevel;
            RelativeHumidity = relativeHumidity;
            Temperature = temperature;
            TemperatureDewPoint = temperatureDewPoint;
            TemperatureFeelsLike = temperatureFeelsLike;
            TemperatureHeatIndex = temperatureHeatIndex;
            TemperatureWindChill = temperatureWindChill;
            UvDescription = uvDescription;
            UvIndex = uvIndex;
            ValidTimeLocal = validTimeLocal;
            ValidTime = validTime;
            Visibility = visibility;
            WindDirection = windDirection;
            WindGust = windGust;
            WindSpeed = windSpeed;
            WxPhraseLong = wxPhraseLong;
            WxPhraseShort = wxPhraseShort;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// A collection of key value pairs that belongs to the resource. Each pair must
        /// not have a key greater than 50 characters and must not have a value greater
        /// than 250 characters. Note: A maximum of 100 key value pairs can be provided for
        /// a resource and only string and numeral values are supported.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> AdditionalAttributes { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures WetBulbTemperature { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures CloudCover { get; }
        /// <summary> Day of week. </summary>
        public IReadOnlyList<string> DayOfWeek { get; }
        /// <summary>
        /// This data field indicates whether it is daytime or nighttime based on the Local
        /// Apparent Time of the location.
        /// </summary>
        public IReadOnlyList<string> DayOrNight { get; }
        /// <summary> Expiration time in Utc format. </summary>
        public IReadOnlyList<string> ExpirationTime { get; }
        /// <summary>
        /// This number is the key to the weather icon lookup. The data field shows the
        /// icon number that is matched to represent the observed weather conditions.
        /// </summary>
        public IReadOnlyList<int> IconCode { get; }
        /// <summary> Code representing full set sensible weather. </summary>
        public IReadOnlyList<int> IconCodeExtend { get; }
        /// <summary> Indicates whether there is precipitation or not. </summary>
        public IReadOnlyList<bool> HasPrecipitation { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures PressureMeanSeaLevel { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures RelativeHumidity { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures Temperature { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures TemperatureDewPoint { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures TemperatureFeelsLike { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures TemperatureHeatIndex { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures TemperatureWindChill { get; }
        /// <summary>
        /// The UV Index Description which complements the UV Index value by providing an
        /// associated level of risk of skin damage due to exposure (-2 = Not Available, -1
        /// = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very
        /// High, 11 to 16 = Extreme).
        /// </summary>
        public IReadOnlyList<string> UvDescription { get; }
        /// <summary> Hourly maximum UV index. </summary>
        public IReadOnlyList<double> UvIndex { get; }
        /// <summary> Time forecast is valid in local apparent time. </summary>
        public IReadOnlyList<string> ValidTimeLocal { get; }
        /// <summary> Time forecast is valid in Utc format. </summary>
        public IReadOnlyList<string> ValidTime { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures Visibility { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures WindDirection { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures WindGust { get; }
        /// <summary> Schema for storing measurement readings and unit. </summary>
        public Measures WindSpeed { get; }
        /// <summary> Hourly sensible weather phrase containing longer description. </summary>
        public IReadOnlyList<string> WxPhraseLong { get; }
        /// <summary> Hourly sensible weather phrase containing short description. </summary>
        public IReadOnlyList<string> WxPhraseShort { get; }
    }
}
