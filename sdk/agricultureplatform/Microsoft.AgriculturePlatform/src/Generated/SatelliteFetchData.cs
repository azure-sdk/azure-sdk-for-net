// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.AgriculturePlatform
{
    /// <summary> SatelliteFetchData. </summary>
    public partial class SatelliteFetchData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SatelliteFetchData"/>. </summary>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="providerCollectionId"/> is null. </exception>
        internal SatelliteFetchData(string providerCollectionId)
        {
            Argument.AssertNotNull(providerCollectionId, nameof(providerCollectionId));

            ProviderCollectionId = providerCollectionId;
            ImageFiles = new ChangeTrackingList<ImageFile>();
        }

        /// <summary> Initializes a new instance of <see cref="SatelliteFetchData"/>. </summary>
        /// <param name="dateTime"> Start Date. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="featureId"> Feature Id. </param>
        /// <param name="imageFiles"> ImageFiles. </param>
        /// <param name="itemUri"> ItemUri. </param>
        /// <param name="id"> Id. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SatelliteFetchData(DateTimeOffset? dateTime, string provider, string providerCollectionId, string featureId, IReadOnlyList<ImageFile> imageFiles, string itemUri, string id, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DateTime = dateTime;
            Provider = provider;
            ProviderCollectionId = providerCollectionId;
            FeatureId = featureId;
            ImageFiles = imageFiles;
            ItemUri = itemUri;
            Id = id;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SatelliteFetchData"/> for deserialization. </summary>
        internal SatelliteFetchData()
        {
        }

        /// <summary> Start Date. </summary>
        public DateTimeOffset? DateTime { get; }
        /// <summary> Provider of satellite data. Available Value: SentinelHub. </summary>
        public string Provider { get; }
        /// <summary> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </summary>
        public string ProviderCollectionId { get; }
        /// <summary> Feature Id. </summary>
        public string FeatureId { get; }
        /// <summary> ImageFiles. </summary>
        public IReadOnlyList<ImageFile> ImageFiles { get; }
        /// <summary> ItemUri. </summary>
        public string ItemUri { get; }
        /// <summary> Id. </summary>
        public string Id { get; }
    }
}
