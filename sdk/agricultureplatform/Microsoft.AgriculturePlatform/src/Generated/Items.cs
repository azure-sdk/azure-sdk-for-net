// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.AgriculturePlatform
{
    // Data plane generated sub-client.
    /// <summary> The Items sub-client. </summary>
    public partial class Items
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Items for mocking. </summary>
        protected Items()
        {
        }

        /// <summary> Initializes a new instance of Items. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Items(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates or updates a Item resource. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="ownerItemId"> OwnerItemId. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='CreateAsync(string,string,IReadOnlyDictionary{string,BinaryData},IEnumerable{Link},string,string,string,string,IReadOnlyDictionary{string,BinaryData},string,IEnumerable{Asset},CancellationToken)']/*" />
        public virtual async Task<Response<ItemResponse>> CreateAsync(string catalogId, string collectionId, IReadOnlyDictionary<string, BinaryData> data, IEnumerable<Link> links = null, string status = null, string source = null, string name = null, string description = null, IReadOnlyDictionary<string, BinaryData> properties = null, string ownerItemId = null, IEnumerable<Asset> assets = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(data, nameof(data));

            CreateRequest createRequest = new CreateRequest(
                links?.ToList() as IReadOnlyList<Link> ?? new ChangeTrackingList<Link>(),
                status,
                source,
                name,
                description,
                properties ?? new ChangeTrackingDictionary<string, BinaryData>(),
                data,
                ownerItemId,
                assets?.ToList() as IReadOnlyList<Asset> ?? new ChangeTrackingList<Asset>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAsync(catalogId, collectionId, createRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(ItemResponse.FromResponse(response), response);
        }

        /// <summary> Creates or updates a Item resource. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="ownerItemId"> OwnerItemId. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='Create(string,string,IReadOnlyDictionary{string,BinaryData},IEnumerable{Link},string,string,string,string,IReadOnlyDictionary{string,BinaryData},string,IEnumerable{Asset},CancellationToken)']/*" />
        public virtual Response<ItemResponse> Create(string catalogId, string collectionId, IReadOnlyDictionary<string, BinaryData> data, IEnumerable<Link> links = null, string status = null, string source = null, string name = null, string description = null, IReadOnlyDictionary<string, BinaryData> properties = null, string ownerItemId = null, IEnumerable<Asset> assets = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(data, nameof(data));

            CreateRequest createRequest = new CreateRequest(
                links?.ToList() as IReadOnlyList<Link> ?? new ChangeTrackingList<Link>(),
                status,
                source,
                name,
                description,
                properties ?? new ChangeTrackingDictionary<string, BinaryData>(),
                data,
                ownerItemId,
                assets?.ToList() as IReadOnlyList<Asset> ?? new ChangeTrackingList<Asset>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Create(catalogId, collectionId, createRequest.ToRequestContent(), context);
            return Response.FromValue(ItemResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateAsync(string,string,IReadOnlyDictionary{string,BinaryData},IEnumerable{Link},string,string,string,string,IReadOnlyDictionary{string,BinaryData},string,IEnumerable{Asset},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='CreateAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(string catalogId, string collectionId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(catalogId, collectionId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Create(string,string,IReadOnlyDictionary{string,BinaryData},IEnumerable{Link},string,string,string,string,IReadOnlyDictionary{string,BinaryData},string,IEnumerable{Asset},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='Create(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response Create(string catalogId, string collectionId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(catalogId, collectionId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a specified Item resource. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetItemAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<Item>> GetItemAsync(string catalogId, string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetItemAsync(catalogId, collectionId, itemId, context).ConfigureAwait(false);
            return Response.FromValue(Item.FromResponse(response), response);
        }

        /// <summary> Gets a specified Item resource. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetItem(string,string,string,CancellationToken)']/*" />
        public virtual Response<Item> GetItem(string catalogId, string collectionId, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetItem(catalogId, collectionId, itemId, context);
            return Response.FromValue(Item.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a specified Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetItemAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetItemAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetItemAsync(string catalogId, string collectionId, string itemId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("Items.GetItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetItemRequest(catalogId, collectionId, itemId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a specified Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetItem(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetItem(string,string,string,RequestContext)']/*" />
        public virtual Response GetItem(string catalogId, string collectionId, string itemId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("Items.GetItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetItemRequest(catalogId, collectionId, itemId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string catalogId, string collectionId, string itemId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(catalogId, collectionId, itemId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a Item resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/>, <paramref name="itemId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string catalogId, string collectionId, string itemId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(catalogId, collectionId, itemId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes Item for given Item id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='DeleteAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string catalogId, string collectionId, string itemId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("Items.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(catalogId, collectionId, itemId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes Item for given Item id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="itemId"> Id of the Item. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='Delete(string,string,string,RequestContext)']/*" />
        public virtual Response Delete(string catalogId, string collectionId, string itemId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("Items.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(catalogId, collectionId, itemId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search for Items across all parties by intersecting geometry. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="ownerItemIds"> Owner Item Ids of the resource. </param>
        /// <param name="dataFilters">
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </param>
        /// <param name="intersectsWithGeometry">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetAllUnderCollectionAsync(string,string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,int?,CancellationToken)']/*" />
        public virtual async Task<Response<ItemListResponse>> GetAllUnderCollectionAsync(string catalogId, string collectionId, IEnumerable<string> ownerItemIds = null, IEnumerable<string> dataFilters = null, GeoJsonObject intersectsWithGeometry = null, IEnumerable<string> ids = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, int? maximumPageSize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            GetAllUnderCollectionRequest getAllUnderCollectionRequest = new GetAllUnderCollectionRequest(
                ownerItemIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                dataFilters?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                intersectsWithGeometry,
                ids?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                minCreatedDateTime,
                maxCreatedDateTime,
                minLastModifiedDateTime,
                maxLastModifiedDateTime,
                maxPageSize,
                skipToken,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAllUnderCollectionAsync(catalogId, collectionId, getAllUnderCollectionRequest.ToRequestContent(), maximumPageSize, context).ConfigureAwait(false);
            return Response.FromValue(ItemListResponse.FromResponse(response), response);
        }

        /// <summary> Search for Items across all parties by intersecting geometry. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="ownerItemIds"> Owner Item Ids of the resource. </param>
        /// <param name="dataFilters">
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </param>
        /// <param name="intersectsWithGeometry">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetAllUnderCollection(string,string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,int?,CancellationToken)']/*" />
        public virtual Response<ItemListResponse> GetAllUnderCollection(string catalogId, string collectionId, IEnumerable<string> ownerItemIds = null, IEnumerable<string> dataFilters = null, GeoJsonObject intersectsWithGeometry = null, IEnumerable<string> ids = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, int? maximumPageSize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));

            GetAllUnderCollectionRequest getAllUnderCollectionRequest = new GetAllUnderCollectionRequest(
                ownerItemIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                dataFilters?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                intersectsWithGeometry,
                ids?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                minCreatedDateTime,
                maxCreatedDateTime,
                minLastModifiedDateTime,
                maxLastModifiedDateTime,
                maxPageSize,
                skipToken,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAllUnderCollection(catalogId, collectionId, getAllUnderCollectionRequest.ToRequestContent(), maximumPageSize, context);
            return Response.FromValue(ItemListResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Search for Items across all parties by intersecting geometry.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllUnderCollectionAsync(string,string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetAllUnderCollectionAsync(string,string,RequestContent,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetAllUnderCollectionAsync(string catalogId, string collectionId, RequestContent content, int? maximumPageSize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.GetAllUnderCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllUnderCollectionRequest(catalogId, collectionId, content, maximumPageSize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Search for Items across all parties by intersecting geometry.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllUnderCollection(string,string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="collectionId"> Unique resource ID. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/>, <paramref name="collectionId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> or <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='GetAllUnderCollection(string,string,RequestContent,int?,RequestContext)']/*" />
        public virtual Response GetAllUnderCollection(string catalogId, string collectionId, RequestContent content, int? maximumPageSize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNullOrEmpty(collectionId, nameof(collectionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.GetAllUnderCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllUnderCollectionRequest(catalogId, collectionId, content, maximumPageSize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Search for Items across all collections. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="ownerItemIds"> Owner Item Ids of the resource. </param>
        /// <param name="dataFilters">
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </param>
        /// <param name="intersectsWithGeometry">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="collectionIds"> Owner Item Ids of the resource. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='SearchAcrossCollectionAsync(string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,IEnumerable{string},int?,CancellationToken)']/*" />
        public virtual async Task<Response<ItemListResponse>> SearchAcrossCollectionAsync(string catalogId, IEnumerable<string> ownerItemIds = null, IEnumerable<string> dataFilters = null, GeoJsonObject intersectsWithGeometry = null, IEnumerable<string> ids = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, IEnumerable<string> collectionIds = null, int? maximumPageSize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));

            SearchAcrossCollectionRequest searchAcrossCollectionRequest = new SearchAcrossCollectionRequest(
                ownerItemIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                dataFilters?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                intersectsWithGeometry,
                ids?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                minCreatedDateTime,
                maxCreatedDateTime,
                minLastModifiedDateTime,
                maxLastModifiedDateTime,
                maxPageSize,
                skipToken,
                collectionIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SearchAcrossCollectionAsync(catalogId, searchAcrossCollectionRequest.ToRequestContent(), maximumPageSize, context).ConfigureAwait(false);
            return Response.FromValue(ItemListResponse.FromResponse(response), response);
        }

        /// <summary> Search for Items across all collections. </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="ownerItemIds"> Owner Item Ids of the resource. </param>
        /// <param name="dataFilters">
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </param>
        /// <param name="intersectsWithGeometry">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="collectionIds"> Owner Item Ids of the resource. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='SearchAcrossCollection(string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,IEnumerable{string},int?,CancellationToken)']/*" />
        public virtual Response<ItemListResponse> SearchAcrossCollection(string catalogId, IEnumerable<string> ownerItemIds = null, IEnumerable<string> dataFilters = null, GeoJsonObject intersectsWithGeometry = null, IEnumerable<string> ids = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, IEnumerable<string> collectionIds = null, int? maximumPageSize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));

            SearchAcrossCollectionRequest searchAcrossCollectionRequest = new SearchAcrossCollectionRequest(
                ownerItemIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                dataFilters?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                intersectsWithGeometry,
                ids?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                minCreatedDateTime,
                maxCreatedDateTime,
                minLastModifiedDateTime,
                maxLastModifiedDateTime,
                maxPageSize,
                skipToken,
                collectionIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SearchAcrossCollection(catalogId, searchAcrossCollectionRequest.ToRequestContent(), maximumPageSize, context);
            return Response.FromValue(ItemListResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Search for Items across all collections.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SearchAcrossCollectionAsync(string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,IEnumerable{string},int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='SearchAcrossCollectionAsync(string,RequestContent,int?,RequestContext)']/*" />
        public virtual async Task<Response> SearchAcrossCollectionAsync(string catalogId, RequestContent content, int? maximumPageSize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.SearchAcrossCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchAcrossCollectionRequest(catalogId, content, maximumPageSize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Search for Items across all collections.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SearchAcrossCollection(string,IEnumerable{string},IEnumerable{string},GeoJsonObject,IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,IEnumerable{string},int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maximumPageSize">
        /// Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000,
        /// Default Value = 50.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Items.xml" path="doc/members/member[@name='SearchAcrossCollection(string,RequestContent,int?,RequestContext)']/*" />
        public virtual Response SearchAcrossCollection(string catalogId, RequestContent content, int? maximumPageSize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(catalogId, nameof(catalogId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Items.SearchAcrossCollection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchAcrossCollectionRequest(catalogId, content, maximumPageSize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateRequest(string catalogId, string collectionId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/items:create", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetItemRequest(string catalogId, string collectionId, string itemId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string catalogId, string collectionId, string itemId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string catalogId, string collectionId, string itemId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllUnderCollectionRequest(string catalogId, string collectionId, RequestContent content, int? maximumPageSize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/items:search", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maximumPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maximumPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSearchAcrossCollectionRequest(string catalogId, RequestContent content, int? maximumPageSize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/catalogs/", false);
            uri.AppendPath(catalogId, true);
            uri.AppendPath("/items:search", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maximumPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maximumPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
