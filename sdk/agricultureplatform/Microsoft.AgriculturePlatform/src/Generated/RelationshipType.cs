// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.AgriculturePlatform
{
    /// <summary> Type of relationship. </summary>
    public readonly partial struct RelationshipType : IEquatable<RelationshipType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RelationshipType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RelationshipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DerivedFromValue = "DerivedFrom";
        private const string ChildValue = "Child";
        private const string ParentValue = "Parent";

        /// <summary> DerivedFrom. </summary>
        public static RelationshipType DerivedFrom { get; } = new RelationshipType(DerivedFromValue);
        /// <summary> Contains. </summary>
        public static RelationshipType Child { get; } = new RelationshipType(ChildValue);
        /// <summary> Parent. </summary>
        public static RelationshipType Parent { get; } = new RelationshipType(ParentValue);
        /// <summary> Determines if two <see cref="RelationshipType"/> values are the same. </summary>
        public static bool operator ==(RelationshipType left, RelationshipType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RelationshipType"/> values are not the same. </summary>
        public static bool operator !=(RelationshipType left, RelationshipType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RelationshipType"/>. </summary>
        public static implicit operator RelationshipType(string value) => new RelationshipType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RelationshipType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RelationshipType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
