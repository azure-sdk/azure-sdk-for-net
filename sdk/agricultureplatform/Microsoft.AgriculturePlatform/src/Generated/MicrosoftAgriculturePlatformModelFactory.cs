// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Microsoft.AgriculturePlatform
{
    /// <summary> Model factory for models. </summary>
    public static partial class MicrosoftAgriculturePlatformModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.ApiKeyAuthCredentials"/>. </summary>
        /// <param name="apiKey"> Properties of the key vault. </param>
        /// <returns> A new <see cref="AgriculturePlatform.ApiKeyAuthCredentials"/> instance for mocking. </returns>
        public static ApiKeyAuthCredentials ApiKeyAuthCredentials(KeyVaultProperties apiKey = null)
        {
            return new ApiKeyAuthCredentials(AuthCredentialsKind.ApiKeyAuthCredentials, serializedAdditionalRawData: null, apiKey);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.OauthClientCredentials"/>. </summary>
        /// <param name="clientId"> ClientId associated with the provider. </param>
        /// <param name="clientSecret"> Properties of the key vault. </param>
        /// <returns> A new <see cref="AgriculturePlatform.OauthClientCredentials"/> instance for mocking. </returns>
        public static OauthClientCredentials OauthClientCredentials(string clientId = null, KeyVaultProperties clientSecret = null)
        {
            return new OauthClientCredentials(AuthCredentialsKind.OAuthClientCredentials, serializedAdditionalRawData: null, clientId, clientSecret);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.WeatherResponse"/>. </summary>
        /// <param name="weatherMetadata"> Schema of Weather Metadata. </param>
        /// <param name="status"> Indicates a Succeeded, Failed, or PartiallySucceeded response. </param>
        /// <param name="locations"> List of weather data for all the weather locations. </param>
        /// <param name="errors"> Model for errors encountered for all failed locations. </param>
        /// <returns> A new <see cref="AgriculturePlatform.WeatherResponse"/> instance for mocking. </returns>
        public static WeatherResponse WeatherResponse(WeatherMetadata weatherMetadata = null, string status = null, IEnumerable<WeatherLocationData> locations = null, WeatherDataErrors errors = null)
        {
            locations ??= new List<WeatherLocationData>();

            return new WeatherResponse(weatherMetadata, status, locations?.ToList(), errors, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.WeatherMetadata"/>. </summary>
        /// <param name="providerName"> Weather provider name. </param>
        /// <param name="providerApiName"> Provider's api name to which request is to be made. </param>
        /// <param name="language">
        /// Language (IETF BCP 47 language tag) in which search results should be returned
        /// by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
        /// </param>
        /// <param name="units">
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <returns> A new <see cref="AgriculturePlatform.WeatherMetadata"/> instance for mocking. </returns>
        public static WeatherMetadata WeatherMetadata(string providerName = null, string providerApiName = null, string language = null, string units = null, string weatherDataType = null)
        {
            return new WeatherMetadata(
                providerName,
                providerApiName,
                language,
                units,
                weatherDataType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.WeatherLocationData"/>. </summary>
        /// <param name="location"> Schema of Location data. </param>
        /// <param name="requestCompletionTime"> Request Completion Time in Utc of the location. </param>
        /// <param name="lastRefreshedDateTime"> Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="data"> Schema of weather data. </param>
        /// <returns> A new <see cref="AgriculturePlatform.WeatherLocationData"/> instance for mocking. </returns>
        public static WeatherLocationData WeatherLocationData(WeatherLocation location = null, string requestCompletionTime = null, DateTimeOffset? lastRefreshedDateTime = null, WeatherData data = null)
        {
            return new WeatherLocationData(location, requestCompletionTime, lastRefreshedDateTime, data, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.WeatherData"/>. </summary>
        /// <param name="additionalAttributes">
        /// A collection of key value pairs that belongs to the resource. Each pair must
        /// not have a key greater than 50 characters and must not have a value greater
        /// than 250 characters. Note: A maximum of 100 key value pairs can be provided for
        /// a resource and only string and numeral values are supported.
        /// </param>
        /// <param name="wetBulbTemperature"> Schema for storing measurement readings and unit. </param>
        /// <param name="cloudCover"> Schema for storing measurement readings and unit. </param>
        /// <param name="dayOfWeek"> Day of week. </param>
        /// <param name="dayOrNight">
        /// This data field indicates whether it is daytime or nighttime based on the Local
        /// Apparent Time of the location.
        /// </param>
        /// <param name="expirationTime"> Expiration time in Utc format. </param>
        /// <param name="iconCode">
        /// This number is the key to the weather icon lookup. The data field shows the
        /// icon number that is matched to represent the observed weather conditions.
        /// </param>
        /// <param name="iconCodeExtend"> Code representing full set sensible weather. </param>
        /// <param name="hasPrecipitation"> Indicates whether there is precipitation or not. </param>
        /// <param name="pressureMeanSeaLevel"> Schema for storing measurement readings and unit. </param>
        /// <param name="relativeHumidity"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperature"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureDewPoint"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureFeelsLike"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureHeatIndex"> Schema for storing measurement readings and unit. </param>
        /// <param name="temperatureWindChill"> Schema for storing measurement readings and unit. </param>
        /// <param name="uvDescription">
        /// The UV Index Description which complements the UV Index value by providing an
        /// associated level of risk of skin damage due to exposure (-2 = Not Available, -1
        /// = No Report, 0 to 2 = Low, 3 to 5 = Moderate, 6 to 7 = High, 8 to 10 = Very
        /// High, 11 to 16 = Extreme).
        /// </param>
        /// <param name="uvIndex"> Hourly maximum UV index. </param>
        /// <param name="validTimeLocal"> Time forecast is valid in local apparent time. </param>
        /// <param name="validTime"> Time forecast is valid in Utc format. </param>
        /// <param name="visibility"> Schema for storing measurement readings and unit. </param>
        /// <param name="windDirection"> Schema for storing measurement readings and unit. </param>
        /// <param name="windGust"> Schema for storing measurement readings and unit. </param>
        /// <param name="windSpeed"> Schema for storing measurement readings and unit. </param>
        /// <param name="wxPhraseLong"> Hourly sensible weather phrase containing longer description. </param>
        /// <param name="wxPhraseShort"> Hourly sensible weather phrase containing short description. </param>
        /// <returns> A new <see cref="AgriculturePlatform.WeatherData"/> instance for mocking. </returns>
        public static WeatherData WeatherData(IReadOnlyDictionary<string, BinaryData> additionalAttributes = null, Measures wetBulbTemperature = null, Measures cloudCover = null, IEnumerable<string> dayOfWeek = null, IEnumerable<string> dayOrNight = null, IEnumerable<string> expirationTime = null, IEnumerable<int> iconCode = null, IEnumerable<int> iconCodeExtend = null, IEnumerable<bool> hasPrecipitation = null, Measures pressureMeanSeaLevel = null, Measures relativeHumidity = null, Measures temperature = null, Measures temperatureDewPoint = null, Measures temperatureFeelsLike = null, Measures temperatureHeatIndex = null, Measures temperatureWindChill = null, IEnumerable<string> uvDescription = null, IEnumerable<double> uvIndex = null, IEnumerable<string> validTimeLocal = null, IEnumerable<string> validTime = null, Measures visibility = null, Measures windDirection = null, Measures windGust = null, Measures windSpeed = null, IEnumerable<string> wxPhraseLong = null, IEnumerable<string> wxPhraseShort = null)
        {
            additionalAttributes ??= new Dictionary<string, BinaryData>();
            dayOfWeek ??= new List<string>();
            dayOrNight ??= new List<string>();
            expirationTime ??= new List<string>();
            iconCode ??= new List<int>();
            iconCodeExtend ??= new List<int>();
            hasPrecipitation ??= new List<bool>();
            uvDescription ??= new List<string>();
            uvIndex ??= new List<double>();
            validTimeLocal ??= new List<string>();
            validTime ??= new List<string>();
            wxPhraseLong ??= new List<string>();
            wxPhraseShort ??= new List<string>();

            return new WeatherData(
                additionalAttributes,
                wetBulbTemperature,
                cloudCover,
                dayOfWeek?.ToList(),
                dayOrNight?.ToList(),
                expirationTime?.ToList(),
                iconCode?.ToList(),
                iconCodeExtend?.ToList(),
                hasPrecipitation?.ToList(),
                pressureMeanSeaLevel,
                relativeHumidity,
                temperature,
                temperatureDewPoint,
                temperatureFeelsLike,
                temperatureHeatIndex,
                temperatureWindChill,
                uvDescription?.ToList(),
                uvIndex?.ToList(),
                validTimeLocal?.ToList(),
                validTime?.ToList(),
                visibility,
                windDirection,
                windGust,
                windSpeed,
                wxPhraseLong?.ToList(),
                wxPhraseShort?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.Measures"/>. </summary>
        /// <param name="unit"> Data unit. </param>
        /// <param name="value"> Data values. </param>
        /// <returns> A new <see cref="AgriculturePlatform.Measures"/> instance for mocking. </returns>
        public static Measures Measures(string unit = null, IEnumerable<double> value = null)
        {
            value ??= new List<double>();

            return new Measures(unit, value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.WeatherDataErrors"/>. </summary>
        /// <param name="locations"> List of errors encountered for all failed locations. </param>
        /// <returns> A new <see cref="AgriculturePlatform.WeatherDataErrors"/> instance for mocking. </returns>
        public static WeatherDataErrors WeatherDataErrors(IEnumerable<ErrorForLocation> locations = null)
        {
            locations ??= new List<ErrorForLocation>();

            return new WeatherDataErrors(locations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.ErrorForLocation"/>. </summary>
        /// <param name="location"> Schema of Location data. </param>
        /// <param name="code"> Status code returned by data provider. </param>
        /// <param name="description"> Description of the error. </param>
        /// <param name="retryable">
        /// Flag suggesting if retry attempt with same request body should be made to fetch
        /// required data.
        /// </param>
        /// <returns> A new <see cref="AgriculturePlatform.ErrorForLocation"/> instance for mocking. </returns>
        public static ErrorForLocation ErrorForLocation(WeatherLocation location = null, int? code = null, string description = null, bool? retryable = null)
        {
            return new ErrorForLocation(location, code, description, retryable, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.SamplePartnerResponse"/>. </summary>
        /// <param name="id"> Id. </param>
        /// <param name="message"> Message. </param>
        /// <param name="status"> Status. </param>
        /// <param name="jobCreatedDateTime"> JobCreatedDateTime. </param>
        /// <param name="jobLastActionDateTime"> JobLastActionDateTime. </param>
        /// <param name="e2Eid"> E2eid. </param>
        /// <param name="partnerRequestBody"> SamplePartnerRequestBody. </param>
        /// <returns> A new <see cref="AgriculturePlatform.SamplePartnerResponse"/> instance for mocking. </returns>
        public static SamplePartnerResponse SamplePartnerResponse(string id = null, string message = null, string status = null, DateTimeOffset? jobCreatedDateTime = null, DateTimeOffset? jobLastActionDateTime = null, string e2Eid = null, SamplePartnerRequestBody partnerRequestBody = null)
        {
            return new SamplePartnerResponse(
                id,
                message,
                status,
                jobCreatedDateTime,
                jobLastActionDateTime,
                e2Eid,
                partnerRequestBody,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.SamplePartnerRequestBody"/>. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="partyId"> PartyId. </param>
        /// <param name="gddStartDate"> GddStartDate. </param>
        /// <param name="gddEndDate"> GddEndDate. </param>
        /// <param name="resourceId"> ResourceId. </param>
        /// <param name="resourceType"> ResourceType. </param>
        /// <param name="crop"> Crop. </param>
        /// <param name="temperatureUnit"> TemperatureUnit. </param>
        /// <param name="method"> Method. </param>
        /// <returns> A new <see cref="AgriculturePlatform.SamplePartnerRequestBody"/> instance for mocking. </returns>
        public static SamplePartnerRequestBody SamplePartnerRequestBody(string solutionId = null, string partyId = null, DateTimeOffset? gddStartDate = null, DateTimeOffset? gddEndDate = null, string resourceId = null, string resourceType = null, string crop = null, string temperatureUnit = null, string method = null)
        {
            return new SamplePartnerRequestBody(
                solutionId,
                partyId,
                gddStartDate,
                gddEndDate,
                resourceId,
                resourceType,
                crop,
                temperatureUnit,
                method,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.Schema"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="dependentCollections"> Dependent Collections. </param>
        /// <param name="schemaModel"> Schema. </param>
        /// <param name="id"> Id of the Schema. </param>
        /// <returns> A new <see cref="AgriculturePlatform.Schema"/> instance for mocking. </returns>
        public static Schema Schema(IEnumerable<Link> links = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string source = null, string name = null, string description = null, string createdBy = null, string modifiedBy = null, IDictionary<string, BinaryData> properties = null, IEnumerable<CatalogCollection> dependentCollections = null, IDictionary<string, BinaryData> schemaModel = null, string id = null)
        {
            links ??= new List<Link>();
            properties ??= new Dictionary<string, BinaryData>();
            dependentCollections ??= new List<CatalogCollection>();
            schemaModel ??= new Dictionary<string, BinaryData>();

            return new Schema(
                links?.ToList(),
                eTag,
                status,
                createdDateTime,
                modifiedDateTime,
                source,
                name,
                description,
                createdBy,
                modifiedBy,
                properties,
                dependentCollections?.ToList(),
                schemaModel,
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.CatalogCollection"/>. </summary>
        /// <param name="catalogId"> Catalog Id. </param>
        /// <param name="collectionId"> Collection Id. </param>
        /// <returns> A new <see cref="AgriculturePlatform.CatalogCollection"/> instance for mocking. </returns>
        public static CatalogCollection CatalogCollection(string catalogId = null, string collectionId = null)
        {
            return new CatalogCollection(catalogId, collectionId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.SatelliteFetchResponse"/>. </summary>
        /// <param name="value"> Value. </param>
        /// <returns> A new <see cref="AgriculturePlatform.SatelliteFetchResponse"/> instance for mocking. </returns>
        public static SatelliteFetchResponse SatelliteFetchResponse(IEnumerable<SatelliteFetchData> value = null)
        {
            value ??= new List<SatelliteFetchData>();

            return new SatelliteFetchResponse(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.SatelliteFetchData"/>. </summary>
        /// <param name="dateTime"> Start Date. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="featureId"> Feature Id. </param>
        /// <param name="imageFiles"> ImageFiles. </param>
        /// <param name="itemUri"> ItemUri. </param>
        /// <param name="id"> Id. </param>
        /// <returns> A new <see cref="AgriculturePlatform.SatelliteFetchData"/> instance for mocking. </returns>
        public static SatelliteFetchData SatelliteFetchData(DateTimeOffset? dateTime = null, string provider = null, string providerCollectionId = null, string featureId = null, IEnumerable<ImageFile> imageFiles = null, string itemUri = null, string id = null)
        {
            imageFiles ??= new List<ImageFile>();

            return new SatelliteFetchData(
                dateTime,
                provider,
                providerCollectionId,
                featureId,
                imageFiles?.ToList(),
                itemUri,
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.ImageFile"/>. </summary>
        /// <param name="filePath"> ADLS path of the image file. </param>
        /// <param name="name"> Name of the image file. </param>
        /// <param name="imageFormat"> Supported image formats for scene resource. </param>
        /// <param name="resolution"> Resolution of image file in meters. </param>
        /// <returns> A new <see cref="AgriculturePlatform.ImageFile"/> instance for mocking. </returns>
        public static ImageFile ImageFile(string filePath = null, string name = null, ImageFormat? imageFormat = null, double? resolution = null)
        {
            return new ImageFile(filePath, name, imageFormat, resolution, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.SearchFeaturesResponse"/>. </summary>
        /// <param name="features"> List of items. </param>
        /// <param name="nextLink">
        /// URL to do the POST request with same filters,
        /// to get next set of items.
        /// </param>
        /// <returns> A new <see cref="AgriculturePlatform.SearchFeaturesResponse"/> instance for mocking. </returns>
        public static SearchFeaturesResponse SearchFeaturesResponse(IEnumerable<StacItem> features = null, string nextLink = null)
        {
            features ??= new List<StacItem>();

            return new SearchFeaturesResponse(features?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.StacItem"/>. </summary>
        /// <param name="stacVersion"> The STAC version the Stac Item implements. </param>
        /// <param name="stacExtensions"> A list of extensions the Stac Item implements. </param>
        /// <param name="id"> Provider identifier. Globally unique ID by Data provider. </param>
        /// <param name="type"> Type of the GeoJSON Object. It's value is always Feature. </param>
        /// <param name="geometry">
        /// Defines the full footprint of the asset represented by this item.
        /// Its a GeoJSON geometry.
        /// </param>
        /// <param name="bbox"> Bounding box of the item. </param>
        /// <param name="properties"> A dictionary of additional metadata for the item. </param>
        /// <param name="links"> List of link objects to resources and related URLs. </param>
        /// <param name="assets"> Dictionary of asset objects, each with a unique key. </param>
        /// <param name="providerCollectionId"> The id of the STAC Collection this Stac Item references. </param>
        /// <returns> A new <see cref="AgriculturePlatform.StacItem"/> instance for mocking. </returns>
        public static StacItem StacItem(string stacVersion = null, IEnumerable<string> stacExtensions = null, string id = null, string type = null, BinaryData geometry = null, IEnumerable<double> bbox = null, BinaryData properties = null, IEnumerable<StacLink> links = null, IReadOnlyDictionary<string, StacAsset> assets = null, string providerCollectionId = null)
        {
            stacExtensions ??= new List<string>();
            bbox ??= new List<double>();
            links ??= new List<StacLink>();
            assets ??= new Dictionary<string, StacAsset>();

            return new StacItem(
                stacVersion,
                stacExtensions?.ToList(),
                id,
                type,
                geometry,
                bbox?.ToList(),
                properties,
                links?.ToList(),
                assets,
                providerCollectionId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.StacLink"/>. </summary>
        /// <param name="href"> The HREF of the link. </param>
        /// <param name="rel"> The relation type of the link. </param>
        /// <param name="type"> The type of the link. Optional. </param>
        /// <param name="title"> The title of the link. Optional. </param>
        /// <returns> A new <see cref="AgriculturePlatform.StacLink"/> instance for mocking. </returns>
        public static StacLink StacLink(string href = null, string rel = null, string type = null, string title = null)
        {
            return new StacLink(href, rel, type, title, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.StacAsset"/>. </summary>
        /// <param name="href"> The HREF of the asset. </param>
        /// <param name="title"> The title of the asset. </param>
        /// <param name="description"> The description of the asset. </param>
        /// <param name="type"> The type of the asset. </param>
        /// <param name="roles"> The roles of the asset. </param>
        /// <returns> A new <see cref="AgriculturePlatform.StacAsset"/> instance for mocking. </returns>
        public static StacAsset StacAsset(string href = null, string title = null, string description = null, string type = null, IEnumerable<string> roles = null)
        {
            roles ??= new List<string>();

            return new StacAsset(
                href,
                title,
                description,
                type,
                roles?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.ItemResponse"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <param name="ownerItemId"> OwnerItemId. </param>
        /// <param name="catalogId"> CatalogId. </param>
        /// <param name="collectionId"> CollectionId. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <returns> A new <see cref="AgriculturePlatform.ItemResponse"/> instance for mocking. </returns>
        public static ItemResponse ItemResponse(IEnumerable<Link> links = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string source = null, string name = null, string description = null, string createdBy = null, string modifiedBy = null, IReadOnlyDictionary<string, BinaryData> properties = null, IReadOnlyDictionary<string, BinaryData> data = null, string ownerItemId = null, string catalogId = null, string collectionId = null, IEnumerable<Asset> assets = null, string id = null)
        {
            links ??= new List<Link>();
            properties ??= new Dictionary<string, BinaryData>();
            data ??= new Dictionary<string, BinaryData>();
            assets ??= new List<Asset>();

            return new ItemResponse(
                links?.ToList(),
                eTag,
                status,
                createdDateTime,
                modifiedDateTime,
                source,
                name,
                description,
                createdBy,
                modifiedBy,
                properties,
                data,
                ownerItemId,
                catalogId,
                collectionId,
                assets?.ToList(),
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.Item"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <param name="ownerItemId"> Owner Item Ids of the resource. </param>
        /// <param name="catalogId"> Id of the Catalog resource. </param>
        /// <param name="collectionId"> Id of the Collection resource. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="id"> Id of the Item. </param>
        /// <returns> A new <see cref="AgriculturePlatform.Item"/> instance for mocking. </returns>
        public static Item Item(IEnumerable<Link> links = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string source = null, string name = null, string description = null, string createdBy = null, string modifiedBy = null, IDictionary<string, BinaryData> properties = null, IDictionary<string, BinaryData> data = null, string ownerItemId = null, string catalogId = null, string collectionId = null, IEnumerable<Asset> assets = null, string id = null)
        {
            links ??= new List<Link>();
            properties ??= new Dictionary<string, BinaryData>();
            data ??= new Dictionary<string, BinaryData>();
            assets ??= new List<Asset>();

            return new Item(
                links?.ToList(),
                eTag,
                status,
                createdDateTime,
                modifiedDateTime,
                source,
                name,
                description,
                createdBy,
                modifiedBy,
                properties,
                data,
                ownerItemId,
                catalogId,
                collectionId,
                assets?.ToList(),
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.ItemListResponse"/>. </summary>
        /// <param name="value"> List of Items. </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="nextLink">
        /// URL to do the POST request with same filters,
        /// to get next set of items.
        /// </param>
        /// <returns> A new <see cref="AgriculturePlatform.ItemListResponse"/> instance for mocking. </returns>
        public static ItemListResponse ItemListResponse(IEnumerable<Item> value = null, string skipToken = null, string nextLink = null)
        {
            value ??= new List<Item>();

            return new ItemListResponse(value?.ToList(), skipToken, nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.FileModel"/>. </summary>
        /// <param name="filePath"> FilePath. </param>
        /// <returns> A new <see cref="AgriculturePlatform.FileModel"/> instance for mocking. </returns>
        public static FileModel FileModel(string filePath = null)
        {
            return new FileModel(filePath, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.Collection"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="schemaId"> Schema Foreign Key. </param>
        /// <param name="catalogId"> Id of the Catalog. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <returns> A new <see cref="AgriculturePlatform.Collection"/> instance for mocking. </returns>
        public static Collection Collection(IEnumerable<Link> links = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string source = null, string name = null, string description = null, string createdBy = null, string modifiedBy = null, IDictionary<string, BinaryData> properties = null, string schemaId = null, string catalogId = null, string id = null)
        {
            links ??= new List<Link>();
            properties ??= new Dictionary<string, BinaryData>();

            return new Collection(
                links?.ToList(),
                eTag,
                status,
                createdDateTime,
                modifiedDateTime,
                source,
                name,
                description,
                createdBy,
                modifiedBy,
                properties,
                schemaId,
                catalogId,
                id,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgriculturePlatform.Catalog"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="id"> Id of the Catalog. </param>
        /// <returns> A new <see cref="AgriculturePlatform.Catalog"/> instance for mocking. </returns>
        public static Catalog Catalog(IEnumerable<Link> links = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string source = null, string name = null, string description = null, string createdBy = null, string modifiedBy = null, IDictionary<string, BinaryData> properties = null, string id = null)
        {
            links ??= new List<Link>();
            properties ??= new Dictionary<string, BinaryData>();

            return new Catalog(
                links?.ToList(),
                eTag,
                status,
                createdDateTime,
                modifiedDateTime,
                source,
                name,
                description,
                createdBy,
                modifiedBy,
                properties,
                id,
                serializedAdditionalRawData: null);
        }
    }
}
