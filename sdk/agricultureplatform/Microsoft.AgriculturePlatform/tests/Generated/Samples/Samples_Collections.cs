// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.AgriculturePlatform.Samples
{
    public partial class Samples_Collections
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_GetCollection_CollectionsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response response = client.GetCollection("CATALOG123", "COLLECTION123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_GetCollection_CollectionsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response response = await client.GetCollectionAsync("CATALOG123", "COLLECTION123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_GetCollection_CollectionsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response<Collection> response = client.GetCollection("CATALOG123", "COLLECTION123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_GetCollection_CollectionsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response<Collection> response = await client.GetCollectionAsync("CATALOG123", "COLLECTION123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_CreateOrUpdate_CollectionsCreateOrUpdate()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                schemaId = "SCHEMA123",
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = client.CreateOrUpdate("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_CreateOrUpdate_CollectionsCreateOrUpdate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                schemaId = "SCHEMA123",
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = await client.CreateOrUpdateAsync("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaId").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_Delete_CollectionsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response response = client.Delete("CATALOG123", "COLLECTION123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_Delete_CollectionsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            Response response = await client.DeleteAsync("CATALOG123", "COLLECTION123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_GetCollections_CollectionsList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            foreach (BinaryData item in client.GetCollections("CATALOG123", null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("schemaId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_GetCollections_CollectionsList_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            await foreach (BinaryData item in client.GetCollectionsAsync("CATALOG123", null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("schemaId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Collection_GetCollections_CollectionsList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            foreach (Collection item in client.GetCollections("CATALOG123"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Collection_GetCollections_CollectionsList_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Collections client = new AgriculturePlatformClient(endpoint, credential).GetCollectionsClient(apiVersion: "2024-11-01-preview");

            await foreach (Collection item in client.GetCollectionsAsync("CATALOG123"))
            {
            }
        }
    }
}
