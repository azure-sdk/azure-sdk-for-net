// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.AgriculturePlatform.Samples
{
    public partial class Samples_Weather
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WeatherOperations_GetWeatherOperation_WeatherGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Weather client = new AgriculturePlatformClient(endpoint, credential).GetWeatherClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                credentials = new
                {
                    apiKey = new
                    {
                        keyVaultUri = "string",
                        keyName = "string",
                        keyVersion = "string",
                    },
                },
                locations = new object[]
            {
new
{
type = "string",
value = "string",
}
            },
                providerName = "string",
                providerApiName = "string",
                language = "en-US",
                units = "string",
            });
            Response response = client.GetWeatherOperation(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("providerApiName").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("units").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("weatherDataType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WeatherOperations_GetWeatherOperation_WeatherGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Weather client = new AgriculturePlatformClient(endpoint, credential).GetWeatherClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                credentials = new
                {
                    apiKey = new
                    {
                        keyVaultUri = "string",
                        keyName = "string",
                        keyVersion = "string",
                    },
                },
                locations = new object[]
            {
new
{
type = "string",
value = "string",
}
            },
                providerName = "string",
                providerApiName = "string",
                language = "en-US",
                units = "string",
            });
            Response response = await client.GetWeatherOperationAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("providerName").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("providerApiName").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("units").ToString());
            Console.WriteLine(result.GetProperty("weatherMetadata").GetProperty("weatherDataType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WeatherOperations_GetWeatherOperation_WeatherGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Weather client = new AgriculturePlatformClient(endpoint, credential).GetWeatherClient(apiVersion: "2024-11-01-preview");

            Response<WeatherResponse> response = client.GetWeatherOperation("string", "string", "string");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WeatherOperations_GetWeatherOperation_WeatherGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Weather client = new AgriculturePlatformClient(endpoint, credential).GetWeatherClient(apiVersion: "2024-11-01-preview");

            Response<WeatherResponse> response = await client.GetWeatherOperationAsync("string", "string", "string");
        }
    }
}
