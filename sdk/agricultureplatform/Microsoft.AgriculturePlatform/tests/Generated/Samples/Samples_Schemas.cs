// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.AgriculturePlatform.Samples
{
    public partial class Samples_Schemas
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_GetSchema_SchemasGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response response = client.GetSchema("SCHEMA123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_GetSchema_SchemasGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response response = await client.GetSchemaAsync("SCHEMA123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_GetSchema_SchemasGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response<Schema> response = client.GetSchema("SCHEMA123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_GetSchema_SchemasGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response<Schema> response = await client.GetSchemaAsync("SCHEMA123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_CreateOrUpdate_SchemasCreateOrUpdate()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                schemaModel = new
                {
                    type = "object",
                    properties = new Dictionary<string, object>
                    {
                        ["$id"] = "2950",
                        ["name"] = new Dictionary<string, object>
                        {
                            ["$id"] = "2951",
                            ["type"] = "string",
                            ["minLength"] = 2,
                            ["maxLength"] = 100
                        },
                        ["geometry"] = new Dictionary<string, object>
                        {
                            ["$id"] = "2952",
                            ["type"] = "object"
                        }
                    },
                },
            });
            Response response = client.CreateOrUpdate("SCHEMA123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_CreateOrUpdate_SchemasCreateOrUpdate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                schemaModel = new
                {
                    type = "object",
                    properties = new Dictionary<string, object>
                    {
                        ["$id"] = "2950",
                        ["name"] = new Dictionary<string, object>
                        {
                            ["$id"] = "2951",
                            ["type"] = "string",
                            ["minLength"] = 2,
                            ["maxLength"] = 100
                        },
                        ["geometry"] = new Dictionary<string, object>
                        {
                            ["$id"] = "2952",
                            ["type"] = "object"
                        }
                    },
                },
            });
            Response response = await client.CreateOrUpdateAsync("SCHEMA123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_Delete_SchemasDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response response = client.Delete("SCHEMA123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_Delete_SchemasDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            Response response = await client.DeleteAsync("SCHEMA123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_GetSchemas_SchemasList()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            foreach (BinaryData item in client.GetSchemas(null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_GetSchemas_SchemasList_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            await foreach (BinaryData item in client.GetSchemasAsync(null, null, null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("schemaModel").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Schema_GetSchemas_SchemasList_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            foreach (Schema item in client.GetSchemas())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Schema_GetSchemas_SchemasList_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Schemas client = new AgriculturePlatformClient(endpoint, credential).GetSchemasClient(apiVersion: "2024-11-01-preview");

            await foreach (Schema item in client.GetSchemasAsync())
            {
            }
        }
    }
}
