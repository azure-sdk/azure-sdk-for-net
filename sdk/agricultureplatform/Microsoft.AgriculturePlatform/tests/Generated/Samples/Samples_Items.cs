// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.AgriculturePlatform.Samples
{
    public partial class Samples_Items
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_Create_ItemsCreate()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                data = new
                {
                    additionalProp1 = "string",
                    additionalProp2 = "string",
                    additionalProp3 = "string",
                },
                assets = new object[]
            {
new
{
type = "Image",
name = "string",
href = "string",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = client.Create("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_Create_ItemsCreate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                data = new
                {
                    additionalProp1 = "string",
                    additionalProp2 = "string",
                    additionalProp3 = "string",
                },
                assets = new object[]
            {
new
{
type = "Image",
name = "string",
href = "string",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = await client.CreateAsync("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_Create_ItemsCreate_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemResponse> response = client.Create("CATALOG123", "COLLECTION123", new Dictionary<string, BinaryData>
            {
                ["additionalProp1"] = BinaryData.FromObjectAsJson("string"),
                ["additionalProp2"] = BinaryData.FromObjectAsJson("string"),
                ["additionalProp3"] = BinaryData.FromObjectAsJson("string")
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_Create_ItemsCreate_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemResponse> response = await client.CreateAsync("CATALOG123", "COLLECTION123", new Dictionary<string, BinaryData>
            {
                ["additionalProp1"] = BinaryData.FromObjectAsJson("string"),
                ["additionalProp2"] = BinaryData.FromObjectAsJson("string"),
                ["additionalProp3"] = BinaryData.FromObjectAsJson("string")
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Item_GetItem_ItemsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response response = client.GetItem("CATALOG123", "COLLECTION123", "ITEM123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Item_GetItem_ItemsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response response = await client.GetItemAsync("CATALOG123", "COLLECTION123", "ITEM123", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Item_GetItem_ItemsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<Item> response = client.GetItem("CATALOG123", "COLLECTION123", "ITEM123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Item_GetItem_ItemsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<Item> response = await client.GetItemAsync("CATALOG123", "COLLECTION123", "ITEM123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Item_CreateOrUpdate_ItemsCreateOrUpdate()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                data = new
                {
                    Company = "string",
                    name = "string",
                },
                ownerItemId = "lavi-item",
                assets = new object[]
            {
new
{
type = "Image",
name = "string",
href = "string",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = client.CreateOrUpdate("CATALOG123", "COLLECTION123", "ITEM123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Item_CreateOrUpdate_ItemsCreateOrUpdate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                links = new object[]
            {
new
{
rel = "DerivedFrom",
href = "string",
type = "Catalog",
}
            },
                data = new
                {
                    Company = "string",
                    name = "string",
                },
                ownerItemId = "lavi-item",
                assets = new object[]
            {
new
{
type = "Image",
name = "string",
href = "string",
}
            },
                status = "string",
                source = "string",
                name = "string",
                description = "string",
                properties = new
                {
                    key1 = "value1",
                    key2 = 123.45F,
                },
            });
            Response response = await client.CreateOrUpdateAsync("CATALOG123", "COLLECTION123", "ITEM123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Item_Delete_ItemsDelete()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response response = client.Delete("CATALOG123", "COLLECTION123", "ITEM123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Item_Delete_ItemsDelete_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response response = await client.DeleteAsync("CATALOG123", "COLLECTION123", "ITEM123");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_GetAllUnderCollection_ItemsGetAllUnderCollection()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetAllUnderCollection("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_GetAllUnderCollection_ItemsGetAllUnderCollection_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetAllUnderCollectionAsync("CATALOG123", "COLLECTION123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_GetAllUnderCollection_ItemsGetAllUnderCollection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemListResponse> response = client.GetAllUnderCollection("CATALOG123", "COLLECTION123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_GetAllUnderCollection_ItemsGetAllUnderCollection_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemListResponse> response = await client.GetAllUnderCollectionAsync("CATALOG123", "COLLECTION123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_SearchAcrossCollection_ItemsSearchAcrossCollection()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.SearchAcrossCollection("CATALOG123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_SearchAcrossCollection_ItemsSearchAcrossCollection_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.SearchAcrossCollectionAsync("CATALOG123", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("data").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ItemsOperations_SearchAcrossCollection_ItemsSearchAcrossCollection_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemListResponse> response = client.SearchAcrossCollection("CATALOG123");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ItemsOperations_SearchAcrossCollection_ItemsSearchAcrossCollection_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Items client = new AgriculturePlatformClient(endpoint, credential).GetItemsClient(apiVersion: "2024-11-01-preview");

            Response<ItemListResponse> response = await client.SearchAcrossCollectionAsync("CATALOG123");
        }
    }
}
