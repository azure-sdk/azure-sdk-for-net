// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AgriculturePlatform
{
    /// <summary>
    /// Schema of STAC Item.
    /// Refer for spec:
    /// https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields.
    /// </summary>
    public partial class StacItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StacItem"/>. </summary>
        /// <param name="stacVersion"> The STAC version the Stac Item implements. </param>
        /// <param name="id"> Provider identifier. Globally unique ID by Data provider. </param>
        /// <param name="type"> Type of the GeoJSON Object. It's value is always Feature. </param>
        /// <param name="properties"> A dictionary of additional metadata for the item. </param>
        /// <param name="links"> List of link objects to resources and related URLs. </param>
        /// <param name="assets"> Dictionary of asset objects, each with a unique key. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stacVersion"/>, <paramref name="id"/>, <paramref name="type"/>, <paramref name="properties"/>, <paramref name="links"/> or <paramref name="assets"/> is null. </exception>
        internal StacItem(string stacVersion, string id, string type, BinaryData properties, IEnumerable<StacLink> links, IReadOnlyDictionary<string, StacAsset> assets)
        {
            Argument.AssertNotNull(stacVersion, nameof(stacVersion));
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(properties, nameof(properties));
            Argument.AssertNotNull(links, nameof(links));
            Argument.AssertNotNull(assets, nameof(assets));

            StacVersion = stacVersion;
            StacExtensions = new ChangeTrackingList<string>();
            Id = id;
            Type = type;
            Bbox = new ChangeTrackingList<double>();
            Properties = properties;
            Links = links.ToList();
            Assets = assets;
        }

        /// <summary> Initializes a new instance of <see cref="StacItem"/>. </summary>
        /// <param name="stacVersion"> The STAC version the Stac Item implements. </param>
        /// <param name="stacExtensions"> A list of extensions the Stac Item implements. </param>
        /// <param name="id"> Provider identifier. Globally unique ID by Data provider. </param>
        /// <param name="type"> Type of the GeoJSON Object. It's value is always Feature. </param>
        /// <param name="geometry">
        /// Defines the full footprint of the asset represented by this item.
        /// Its a GeoJSON geometry.
        /// </param>
        /// <param name="bbox"> Bounding box of the item. </param>
        /// <param name="properties"> A dictionary of additional metadata for the item. </param>
        /// <param name="links"> List of link objects to resources and related URLs. </param>
        /// <param name="assets"> Dictionary of asset objects, each with a unique key. </param>
        /// <param name="providerCollectionId"> The id of the STAC Collection this Stac Item references. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StacItem(string stacVersion, IReadOnlyList<string> stacExtensions, string id, string type, BinaryData geometry, IReadOnlyList<double> bbox, BinaryData properties, IReadOnlyList<StacLink> links, IReadOnlyDictionary<string, StacAsset> assets, string providerCollectionId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StacVersion = stacVersion;
            StacExtensions = stacExtensions;
            Id = id;
            Type = type;
            Geometry = geometry;
            Bbox = bbox;
            Properties = properties;
            Links = links;
            Assets = assets;
            ProviderCollectionId = providerCollectionId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StacItem"/> for deserialization. </summary>
        internal StacItem()
        {
        }

        /// <summary> The STAC version the Stac Item implements. </summary>
        public string StacVersion { get; }
        /// <summary> A list of extensions the Stac Item implements. </summary>
        public IReadOnlyList<string> StacExtensions { get; }
        /// <summary> Provider identifier. Globally unique ID by Data provider. </summary>
        public string Id { get; }
        /// <summary> Type of the GeoJSON Object. It's value is always Feature. </summary>
        public string Type { get; }
        /// <summary>
        /// Defines the full footprint of the asset represented by this item.
        /// Its a GeoJSON geometry.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Geometry { get; }
        /// <summary> Bounding box of the item. </summary>
        public IReadOnlyList<double> Bbox { get; }
        /// <summary>
        /// A dictionary of additional metadata for the item.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Properties { get; }
        /// <summary> List of link objects to resources and related URLs. </summary>
        public IReadOnlyList<StacLink> Links { get; }
        /// <summary> Dictionary of asset objects, each with a unique key. </summary>
        public IReadOnlyDictionary<string, StacAsset> Assets { get; }
        /// <summary> The id of the STAC Collection this Stac Item references. </summary>
        public string ProviderCollectionId { get; }
    }
}
