// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> The CreateJobRequest. </summary>
    internal partial class CreateJobRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateJobRequest"/>. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/>, <paramref name="partnerRequestHeaders"/> or <paramref name="inputData"/> is null. </exception>
        internal CreateJobRequest(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));
            Argument.AssertNotNull(inputData, nameof(inputData));

            SolutionId = solutionId;
            RequestPath = requestPath;
            PartnerRequestBody = partnerRequestBody;
            PartnerRequestHeaders = partnerRequestHeaders;
            InputData = inputData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateJobRequest"/>. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateJobRequest(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionId = solutionId;
            RequestPath = requestPath;
            PartnerRequestBody = partnerRequestBody;
            PartnerRequestHeaders = partnerRequestHeaders;
            InputData = inputData;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateJobRequest"/> for deserialization. </summary>
        internal CreateJobRequest()
        {
        }

        /// <summary> SolutionId. </summary>
        public string SolutionId { get; }
        /// <summary> RequestPath. </summary>
        public string RequestPath { get; }
        /// <summary>
        /// Properties.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> PartnerRequestBody { get; }
        /// <summary>
        /// Properties.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> PartnerRequestHeaders { get; }
        /// <summary>
        /// Input Data.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> InputData { get; }
    }
}
