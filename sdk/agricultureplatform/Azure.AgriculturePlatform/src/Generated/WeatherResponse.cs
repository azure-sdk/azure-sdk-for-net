// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> Schema of Weather Data Provider Response. </summary>
    public partial class WeatherResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WeatherResponse"/>. </summary>
        /// <param name="weatherMetadata"> Schema of Weather Metadata. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="weatherMetadata"/> is null. </exception>
        internal WeatherResponse(WeatherMetadata weatherMetadata)
        {
            Argument.AssertNotNull(weatherMetadata, nameof(weatherMetadata));

            WeatherMetadata = weatherMetadata;
            Locations = new ChangeTrackingList<WeatherLocationData>();
        }

        /// <summary> Initializes a new instance of <see cref="WeatherResponse"/>. </summary>
        /// <param name="weatherMetadata"> Schema of Weather Metadata. </param>
        /// <param name="status"> Indicates a Succeeded, Failed, or PartiallySucceeded response. </param>
        /// <param name="locations"> List of weather data for all the weather locations. </param>
        /// <param name="errors"> Model for errors encountered for all failed locations. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WeatherResponse(WeatherMetadata weatherMetadata, string status, IReadOnlyList<WeatherLocationData> locations, WeatherDataErrors errors, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WeatherMetadata = weatherMetadata;
            Status = status;
            Locations = locations;
            Errors = errors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WeatherResponse"/> for deserialization. </summary>
        internal WeatherResponse()
        {
        }

        /// <summary> Schema of Weather Metadata. </summary>
        public WeatherMetadata WeatherMetadata { get; }
        /// <summary> Indicates a Succeeded, Failed, or PartiallySucceeded response. </summary>
        public string Status { get; }
        /// <summary> List of weather data for all the weather locations. </summary>
        public IReadOnlyList<WeatherLocationData> Locations { get; }
        /// <summary> Model for errors encountered for all failed locations. </summary>
        public WeatherDataErrors Errors { get; }
    }
}
