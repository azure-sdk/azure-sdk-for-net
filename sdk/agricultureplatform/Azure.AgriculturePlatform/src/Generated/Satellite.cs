// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AgriculturePlatform
{
    // Data plane generated sub-client.
    /// <summary> The Satellite sub-client. </summary>
    public partial class Satellite
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Satellite for mocking. </summary>
        protected Satellite()
        {
        }

        /// <summary> Initializes a new instance of Satellite. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Satellite(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Fetches Satellite data. </summary>
        /// <param name="credentials"> OAuthClientCredentials for clientId clientSecret auth. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="itemUri"> ItemUri. </param>
        /// <param name="data"> Data Model for SatelliteIngestionJobRequest. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="startDateTime"> Start Date. </param>
        /// <param name="endDateTime"> End Date. </param>
        /// <param name="featureId"> Feature Id. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/>, <paramref name="provider"/>, <paramref name="itemUri"/>, <paramref name="data"/> or <paramref name="providerCollectionId"/> is null. </exception>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='FetchItemsAsync(OauthClientCredentials,string,string,SatelliteData,string,DateTimeOffset?,DateTimeOffset?,string,int?,int?,CancellationToken)']/*" />
        public virtual async Task<Response<SatelliteFetchResponse>> FetchItemsAsync(OauthClientCredentials credentials, string provider, string itemUri, SatelliteData data, string providerCollectionId, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, string featureId = null, int? maxpagesize = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(credentials, nameof(credentials));
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(itemUri, nameof(itemUri));
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(providerCollectionId, nameof(providerCollectionId));

            FetchItemsRequest fetchItemsRequest = new FetchItemsRequest(
                startDateTime,
                credentials,
                endDateTime,
                provider,
                itemUri,
                data,
                providerCollectionId,
                featureId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await FetchItemsAsync(fetchItemsRequest.ToRequestContent(), maxpagesize, skip, context).ConfigureAwait(false);
            return Response.FromValue(SatelliteFetchResponse.FromResponse(response), response);
        }

        /// <summary> Fetches Satellite data. </summary>
        /// <param name="credentials"> OAuthClientCredentials for clientId clientSecret auth. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="itemUri"> ItemUri. </param>
        /// <param name="data"> Data Model for SatelliteIngestionJobRequest. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="startDateTime"> Start Date. </param>
        /// <param name="endDateTime"> End Date. </param>
        /// <param name="featureId"> Feature Id. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/>, <paramref name="provider"/>, <paramref name="itemUri"/>, <paramref name="data"/> or <paramref name="providerCollectionId"/> is null. </exception>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='FetchItems(OauthClientCredentials,string,string,SatelliteData,string,DateTimeOffset?,DateTimeOffset?,string,int?,int?,CancellationToken)']/*" />
        public virtual Response<SatelliteFetchResponse> FetchItems(OauthClientCredentials credentials, string provider, string itemUri, SatelliteData data, string providerCollectionId, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, string featureId = null, int? maxpagesize = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(credentials, nameof(credentials));
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(itemUri, nameof(itemUri));
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(providerCollectionId, nameof(providerCollectionId));

            FetchItemsRequest fetchItemsRequest = new FetchItemsRequest(
                startDateTime,
                credentials,
                endDateTime,
                provider,
                itemUri,
                data,
                providerCollectionId,
                featureId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = FetchItems(fetchItemsRequest.ToRequestContent(), maxpagesize, skip, context);
            return Response.FromValue(SatelliteFetchResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Fetches Satellite data.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FetchItemsAsync(OauthClientCredentials,string,string,SatelliteData,string,DateTimeOffset?,DateTimeOffset?,string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='FetchItemsAsync(RequestContent,int?,int?,RequestContext)']/*" />
        public virtual async Task<Response> FetchItemsAsync(RequestContent content, int? maxpagesize = null, int? skip = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Satellite.FetchItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFetchItemsRequest(content, maxpagesize, skip, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetches Satellite data.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="FetchItems(OauthClientCredentials,string,string,SatelliteData,string,DateTimeOffset?,DateTimeOffset?,string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='FetchItems(RequestContent,int?,int?,RequestContext)']/*" />
        public virtual Response FetchItems(RequestContent content, int? maxpagesize = null, int? skip = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Satellite.FetchItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFetchItemsRequest(content, maxpagesize, skip, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Searches for STAC items by collection id, bbox, intersecting geometry, start
        /// and end datetime.
        /// </summary>
        /// <param name="credentials"> OAuthClientCredentials for clientId clientSecret auth. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="startDateTime"> Start datetime of the time interval in which to search for Items. </param>
        /// <param name="endDateTime"> End datetime of the time interval in which to search for Items. </param>
        /// <param name="intersects">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="bbox">
        /// Only items that have a geometry that intersects the bounding box are selected.
        /// The bounding box is provided as four numbers. The coordinate reference system
        /// of the values is WGS84 longitude/latitude.
        /// </param>
        /// <param name="featureIds"> Array of feature ids to return. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/>, <paramref name="provider"/> or <paramref name="providerCollectionId"/> is null. </exception>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='SearchItemsAsync(OauthClientCredentials,string,string,DateTimeOffset?,DateTimeOffset?,GeoJsonObject,IEnumerable{double},IEnumerable{string},int?,int?,CancellationToken)']/*" />
        public virtual async Task<Response<SearchFeaturesResponse>> SearchItemsAsync(OauthClientCredentials credentials, string provider, string providerCollectionId, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, GeoJsonObject intersects = null, IEnumerable<double> bbox = null, IEnumerable<string> featureIds = null, int? maxpagesize = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(credentials, nameof(credentials));
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(providerCollectionId, nameof(providerCollectionId));

            SearchItemsRequest searchItemsRequest = new SearchItemsRequest(
                startDateTime,
                credentials,
                provider,
                endDateTime,
                intersects,
                bbox?.ToList() as IReadOnlyList<double> ?? new ChangeTrackingList<double>(),
                featureIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                providerCollectionId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SearchItemsAsync(searchItemsRequest.ToRequestContent(), maxpagesize, skip, context).ConfigureAwait(false);
            return Response.FromValue(SearchFeaturesResponse.FromResponse(response), response);
        }

        /// <summary>
        /// Searches for STAC items by collection id, bbox, intersecting geometry, start
        /// and end datetime.
        /// </summary>
        /// <param name="credentials"> OAuthClientCredentials for clientId clientSecret auth. </param>
        /// <param name="provider"> Provider of satellite data. Available Value: SentinelHub. </param>
        /// <param name="providerCollectionId"> Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c. </param>
        /// <param name="startDateTime"> Start datetime of the time interval in which to search for Items. </param>
        /// <param name="endDateTime"> End datetime of the time interval in which to search for Items. </param>
        /// <param name="intersects">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// </param>
        /// <param name="bbox">
        /// Only items that have a geometry that intersects the bounding box are selected.
        /// The bounding box is provided as four numbers. The coordinate reference system
        /// of the values is WGS84 longitude/latitude.
        /// </param>
        /// <param name="featureIds"> Array of feature ids to return. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/>, <paramref name="provider"/> or <paramref name="providerCollectionId"/> is null. </exception>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='SearchItems(OauthClientCredentials,string,string,DateTimeOffset?,DateTimeOffset?,GeoJsonObject,IEnumerable{double},IEnumerable{string},int?,int?,CancellationToken)']/*" />
        public virtual Response<SearchFeaturesResponse> SearchItems(OauthClientCredentials credentials, string provider, string providerCollectionId, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, GeoJsonObject intersects = null, IEnumerable<double> bbox = null, IEnumerable<string> featureIds = null, int? maxpagesize = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(credentials, nameof(credentials));
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(providerCollectionId, nameof(providerCollectionId));

            SearchItemsRequest searchItemsRequest = new SearchItemsRequest(
                startDateTime,
                credentials,
                provider,
                endDateTime,
                intersects,
                bbox?.ToList() as IReadOnlyList<double> ?? new ChangeTrackingList<double>(),
                featureIds?.ToList() as IReadOnlyList<string> ?? new ChangeTrackingList<string>(),
                providerCollectionId,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SearchItems(searchItemsRequest.ToRequestContent(), maxpagesize, skip, context);
            return Response.FromValue(SearchFeaturesResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Searches for STAC items by collection id, bbox, intersecting geometry, start
        /// and end datetime.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SearchItemsAsync(OauthClientCredentials,string,string,DateTimeOffset?,DateTimeOffset?,GeoJsonObject,IEnumerable{double},IEnumerable{string},int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='SearchItemsAsync(RequestContent,int?,int?,RequestContext)']/*" />
        public virtual async Task<Response> SearchItemsAsync(RequestContent content, int? maxpagesize = null, int? skip = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Satellite.SearchItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchItemsRequest(content, maxpagesize, skip, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Searches for STAC items by collection id, bbox, intersecting geometry, start
        /// and end datetime.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SearchItems(OauthClientCredentials,string,string,DateTimeOffset?,DateTimeOffset?,GeoJsonObject,IEnumerable{double},IEnumerable{string},int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="maxpagesize">
        /// Maximum number of items needed (inclusive). Minimum = 1, Maximum = 100, Default
        /// value = 10.
        /// </param>
        /// <param name="skip"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Satellite.xml" path="doc/members/member[@name='SearchItems(RequestContent,int?,int?,RequestContext)']/*" />
        public virtual Response SearchItems(RequestContent content, int? maxpagesize = null, int? skip = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Satellite.SearchItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSearchItemsRequest(content, maxpagesize, skip, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateFetchItemsRequest(RequestContent content, int? maxpagesize, int? skip, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/satellite:fetch", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSearchItemsRequest(RequestContent content, int? maxpagesize, int? skip, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/satellite:stac", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
