// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> SamplePartnerResponse. </summary>
    public partial class SamplePartnerResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SamplePartnerResponse"/>. </summary>
        internal SamplePartnerResponse()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SamplePartnerResponse"/>. </summary>
        /// <param name="id"> Id. </param>
        /// <param name="message"> Message. </param>
        /// <param name="status"> Status. </param>
        /// <param name="jobCreatedDateTime"> JobCreatedDateTime. </param>
        /// <param name="jobLastActionDateTime"> JobLastActionDateTime. </param>
        /// <param name="e2Eid"> E2eid. </param>
        /// <param name="partnerRequestBody"> SamplePartnerRequestBody. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SamplePartnerResponse(string id, string message, string status, DateTimeOffset? jobCreatedDateTime, DateTimeOffset? jobLastActionDateTime, string e2Eid, SamplePartnerRequestBody partnerRequestBody, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Message = message;
            Status = status;
            JobCreatedDateTime = jobCreatedDateTime;
            JobLastActionDateTime = jobLastActionDateTime;
            E2Eid = e2Eid;
            PartnerRequestBody = partnerRequestBody;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Id. </summary>
        public string Id { get; }
        /// <summary> Message. </summary>
        public string Message { get; }
        /// <summary> Status. </summary>
        public string Status { get; }
        /// <summary> JobCreatedDateTime. </summary>
        public DateTimeOffset? JobCreatedDateTime { get; }
        /// <summary> JobLastActionDateTime. </summary>
        public DateTimeOffset? JobLastActionDateTime { get; }
        /// <summary> E2eid. </summary>
        public string E2Eid { get; }
        /// <summary> SamplePartnerRequestBody. </summary>
        public SamplePartnerRequestBody PartnerRequestBody { get; }
    }
}
