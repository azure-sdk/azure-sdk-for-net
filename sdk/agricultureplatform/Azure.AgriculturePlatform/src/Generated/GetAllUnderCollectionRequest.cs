// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> The GetAllUnderCollectionRequest. </summary>
    internal partial class GetAllUnderCollectionRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GetAllUnderCollectionRequest"/>. </summary>
        internal GetAllUnderCollectionRequest()
        {
            OwnerItemIds = new ChangeTrackingList<string>();
            DataFilters = new ChangeTrackingList<string>();
            Ids = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="GetAllUnderCollectionRequest"/>. </summary>
        /// <param name="ownerItemIds"> Owner Item Ids of the resource. </param>
        /// <param name="dataFilters">
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </param>
        /// <param name="intersectsWithGeometry">
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// Please note <see cref="GeoJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MultiPolygon"/>, <see cref="Point"/> and <see cref="Polygon"/>.
        /// </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GetAllUnderCollectionRequest(IReadOnlyList<string> ownerItemIds, IReadOnlyList<string> dataFilters, GeoJsonObject intersectsWithGeometry, IReadOnlyList<string> ids, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OwnerItemIds = ownerItemIds;
            DataFilters = dataFilters;
            IntersectsWithGeometry = intersectsWithGeometry;
            Ids = ids;
            MinCreatedDateTime = minCreatedDateTime;
            MaxCreatedDateTime = maxCreatedDateTime;
            MinLastModifiedDateTime = minLastModifiedDateTime;
            MaxLastModifiedDateTime = maxLastModifiedDateTime;
            MaxPageSize = maxPageSize;
            SkipToken = skipToken;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Owner Item Ids of the resource. </summary>
        public IReadOnlyList<string> OwnerItemIds { get; }
        /// <summary>
        /// Filters on key-value pairs within the Data object.
        /// e.g. "{testKey} eq {testValue}".
        /// </summary>
        public IReadOnlyList<string> DataFilters { get; }
        /// <summary>
        /// GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
        /// expected in [Longitude, Latitude] format.
        /// Please note <see cref="GeoJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MultiPolygon"/>, <see cref="Point"/> and <see cref="Polygon"/>.
        /// </summary>
        public GeoJsonObject IntersectsWithGeometry { get; }
        /// <summary> Ids of the resource. </summary>
        public IReadOnlyList<string> Ids { get; }
        /// <summary> Minimum creation date of resource (inclusive). </summary>
        public DateTimeOffset? MinCreatedDateTime { get; }
        /// <summary> Maximum creation date of resource (inclusive). </summary>
        public DateTimeOffset? MaxCreatedDateTime { get; }
        /// <summary> Minimum last modified date of resource (inclusive). </summary>
        public DateTimeOffset? MinLastModifiedDateTime { get; }
        /// <summary> Maximum last modified date of resource (inclusive). </summary>
        public DateTimeOffset? MaxLastModifiedDateTime { get; }
        /// <summary>
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </summary>
        public int? MaxPageSize { get; }
        /// <summary> Skip token for getting next set of results. </summary>
        public string SkipToken { get; }
    }
}
