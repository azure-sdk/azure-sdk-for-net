// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AgriculturePlatform
{
    // Data plane generated client.
    /// <summary> APIs documentation for Azure AgPlatform DataPlane Service. </summary>
    public partial class AgriculturePlatformClient
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AgriculturePlatformClient for mocking. </summary>
        protected AgriculturePlatformClient()
        {
        }

        /// <summary> Initializes a new instance of AgriculturePlatformClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AgriculturePlatformClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new AgriculturePlatformClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AgriculturePlatformClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AgriculturePlatformClient(Uri endpoint, AzureKeyCredential credential, AgriculturePlatformClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AgriculturePlatformClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Initializes a new instance of Catalogs. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Catalogs GetCatalogsClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Catalogs(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Collections. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Collections GetCollectionsClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Collections(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of File. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual File GetFileClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new File(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Items. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Items GetItemsClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Items(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Satellite. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Satellite GetSatelliteClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Satellite(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Schemas. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Schemas GetSchemasClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Schemas(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Solutions. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Solutions GetSolutionsClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Solutions(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Weather. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Weather GetWeatherClient(string apiVersion = "2024-11-01-preview")
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Weather(ClientDiagnostics, _pipeline, _keyCredential, _endpoint, apiVersion);
        }
    }
}
