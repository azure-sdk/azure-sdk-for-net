// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> Schema of image file resource. </summary>
    public partial class ImageFile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ImageFile"/>. </summary>
        /// <param name="name"> Name of the image file. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal ImageFile(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="ImageFile"/>. </summary>
        /// <param name="filePath"> ADLS path of the image file. </param>
        /// <param name="name"> Name of the image file. </param>
        /// <param name="imageFormat"> Supported image formats for scene resource. </param>
        /// <param name="resolution"> Resolution of image file in meters. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ImageFile(string filePath, string name, ImageFormat? imageFormat, double? resolution, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FilePath = filePath;
            Name = name;
            ImageFormat = imageFormat;
            Resolution = resolution;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ImageFile"/> for deserialization. </summary>
        internal ImageFile()
        {
        }

        /// <summary> ADLS path of the image file. </summary>
        public string FilePath { get; }
        /// <summary> Name of the image file. </summary>
        public string Name { get; }
        /// <summary> Supported image formats for scene resource. </summary>
        public ImageFormat? ImageFormat { get; }
        /// <summary> Resolution of image file in meters. </summary>
        public double? Resolution { get; }
    }
}
