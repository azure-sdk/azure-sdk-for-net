// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.AgriculturePlatform
{
    public partial class WeatherData : IUtf8JsonSerializable, IJsonModel<WeatherData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WeatherData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WeatherData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WeatherData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WeatherData)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(AdditionalAttributes))
            {
                writer.WritePropertyName("additionalAttributes"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalAttributes)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(WetBulbTemperature))
            {
                writer.WritePropertyName("wetBulbTemperature"u8);
                writer.WriteObjectValue(WetBulbTemperature, options);
            }
            if (Optional.IsDefined(CloudCover))
            {
                writer.WritePropertyName("cloudCover"u8);
                writer.WriteObjectValue(CloudCover, options);
            }
            if (Optional.IsCollectionDefined(DayOfWeek))
            {
                writer.WritePropertyName("dayOfWeek"u8);
                writer.WriteStartArray();
                foreach (var item in DayOfWeek)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DayOrNight))
            {
                writer.WritePropertyName("dayOrNight"u8);
                writer.WriteStartArray();
                foreach (var item in DayOrNight)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ExpirationTime))
            {
                writer.WritePropertyName("expirationTime"u8);
                writer.WriteStartArray();
                foreach (var item in ExpirationTime)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IconCode))
            {
                writer.WritePropertyName("iconCode"u8);
                writer.WriteStartArray();
                foreach (var item in IconCode)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IconCodeExtend))
            {
                writer.WritePropertyName("iconCodeExtend"u8);
                writer.WriteStartArray();
                foreach (var item in IconCodeExtend)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HasPrecipitation))
            {
                writer.WritePropertyName("hasPrecipitation"u8);
                writer.WriteStartArray();
                foreach (var item in HasPrecipitation)
                {
                    writer.WriteBooleanValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PressureMeanSeaLevel))
            {
                writer.WritePropertyName("pressureMeanSeaLevel"u8);
                writer.WriteObjectValue(PressureMeanSeaLevel, options);
            }
            if (Optional.IsDefined(RelativeHumidity))
            {
                writer.WritePropertyName("relativeHumidity"u8);
                writer.WriteObjectValue(RelativeHumidity, options);
            }
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteObjectValue(Temperature, options);
            }
            if (Optional.IsDefined(TemperatureDewPoint))
            {
                writer.WritePropertyName("temperatureDewPoint"u8);
                writer.WriteObjectValue(TemperatureDewPoint, options);
            }
            if (Optional.IsDefined(TemperatureFeelsLike))
            {
                writer.WritePropertyName("temperatureFeelsLike"u8);
                writer.WriteObjectValue(TemperatureFeelsLike, options);
            }
            if (Optional.IsDefined(TemperatureHeatIndex))
            {
                writer.WritePropertyName("temperatureHeatIndex"u8);
                writer.WriteObjectValue(TemperatureHeatIndex, options);
            }
            if (Optional.IsDefined(TemperatureWindChill))
            {
                writer.WritePropertyName("temperatureWindChill"u8);
                writer.WriteObjectValue(TemperatureWindChill, options);
            }
            if (Optional.IsCollectionDefined(UvDescription))
            {
                writer.WritePropertyName("uvDescription"u8);
                writer.WriteStartArray();
                foreach (var item in UvDescription)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UvIndex))
            {
                writer.WritePropertyName("uvIndex"u8);
                writer.WriteStartArray();
                foreach (var item in UvIndex)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ValidTimeLocal))
            {
                writer.WritePropertyName("validTimeLocal"u8);
                writer.WriteStartArray();
                foreach (var item in ValidTimeLocal)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ValidTime))
            {
                writer.WritePropertyName("validTime"u8);
                writer.WriteStartArray();
                foreach (var item in ValidTime)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Visibility))
            {
                writer.WritePropertyName("visibility"u8);
                writer.WriteObjectValue(Visibility, options);
            }
            if (Optional.IsDefined(WindDirection))
            {
                writer.WritePropertyName("windDirection"u8);
                writer.WriteObjectValue(WindDirection, options);
            }
            if (Optional.IsDefined(WindGust))
            {
                writer.WritePropertyName("windGust"u8);
                writer.WriteObjectValue(WindGust, options);
            }
            if (Optional.IsDefined(WindSpeed))
            {
                writer.WritePropertyName("windSpeed"u8);
                writer.WriteObjectValue(WindSpeed, options);
            }
            if (Optional.IsCollectionDefined(WxPhraseLong))
            {
                writer.WritePropertyName("wxPhraseLong"u8);
                writer.WriteStartArray();
                foreach (var item in WxPhraseLong)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WxPhraseShort))
            {
                writer.WritePropertyName("wxPhraseShort"u8);
                writer.WriteStartArray();
                foreach (var item in WxPhraseShort)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        WeatherData IJsonModel<WeatherData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WeatherData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WeatherData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWeatherData(document.RootElement, options);
        }

        internal static WeatherData DeserializeWeatherData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyDictionary<string, BinaryData> additionalAttributes = default;
            Measures wetBulbTemperature = default;
            Measures cloudCover = default;
            IReadOnlyList<string> dayOfWeek = default;
            IReadOnlyList<string> dayOrNight = default;
            IReadOnlyList<string> expirationTime = default;
            IReadOnlyList<int> iconCode = default;
            IReadOnlyList<int> iconCodeExtend = default;
            IReadOnlyList<bool> hasPrecipitation = default;
            Measures pressureMeanSeaLevel = default;
            Measures relativeHumidity = default;
            Measures temperature = default;
            Measures temperatureDewPoint = default;
            Measures temperatureFeelsLike = default;
            Measures temperatureHeatIndex = default;
            Measures temperatureWindChill = default;
            IReadOnlyList<string> uvDescription = default;
            IReadOnlyList<double> uvIndex = default;
            IReadOnlyList<string> validTimeLocal = default;
            IReadOnlyList<string> validTime = default;
            Measures visibility = default;
            Measures windDirection = default;
            Measures windGust = default;
            Measures windSpeed = default;
            IReadOnlyList<string> wxPhraseLong = default;
            IReadOnlyList<string> wxPhraseShort = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("additionalAttributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    additionalAttributes = dictionary;
                    continue;
                }
                if (property.NameEquals("wetBulbTemperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wetBulbTemperature = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("cloudCover"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudCover = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dayOfWeek"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dayOfWeek = array;
                    continue;
                }
                if (property.NameEquals("dayOrNight"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dayOrNight = array;
                    continue;
                }
                if (property.NameEquals("expirationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    expirationTime = array;
                    continue;
                }
                if (property.NameEquals("iconCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    iconCode = array;
                    continue;
                }
                if (property.NameEquals("iconCodeExtend"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    iconCodeExtend = array;
                    continue;
                }
                if (property.NameEquals("hasPrecipitation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    hasPrecipitation = array;
                    continue;
                }
                if (property.NameEquals("pressureMeanSeaLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pressureMeanSeaLevel = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("relativeHumidity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    relativeHumidity = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("temperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("temperatureDewPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperatureDewPoint = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("temperatureFeelsLike"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperatureFeelsLike = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("temperatureHeatIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperatureHeatIndex = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("temperatureWindChill"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperatureWindChill = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("uvDescription"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    uvDescription = array;
                    continue;
                }
                if (property.NameEquals("uvIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    uvIndex = array;
                    continue;
                }
                if (property.NameEquals("validTimeLocal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    validTimeLocal = array;
                    continue;
                }
                if (property.NameEquals("validTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    validTime = array;
                    continue;
                }
                if (property.NameEquals("visibility"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    visibility = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("windDirection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    windDirection = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("windGust"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    windGust = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("windSpeed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    windSpeed = Measures.DeserializeMeasures(property.Value, options);
                    continue;
                }
                if (property.NameEquals("wxPhraseLong"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    wxPhraseLong = array;
                    continue;
                }
                if (property.NameEquals("wxPhraseShort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    wxPhraseShort = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WeatherData(
                additionalAttributes ?? new ChangeTrackingDictionary<string, BinaryData>(),
                wetBulbTemperature,
                cloudCover,
                dayOfWeek ?? new ChangeTrackingList<string>(),
                dayOrNight ?? new ChangeTrackingList<string>(),
                expirationTime ?? new ChangeTrackingList<string>(),
                iconCode ?? new ChangeTrackingList<int>(),
                iconCodeExtend ?? new ChangeTrackingList<int>(),
                hasPrecipitation ?? new ChangeTrackingList<bool>(),
                pressureMeanSeaLevel,
                relativeHumidity,
                temperature,
                temperatureDewPoint,
                temperatureFeelsLike,
                temperatureHeatIndex,
                temperatureWindChill,
                uvDescription ?? new ChangeTrackingList<string>(),
                uvIndex ?? new ChangeTrackingList<double>(),
                validTimeLocal ?? new ChangeTrackingList<string>(),
                validTime ?? new ChangeTrackingList<string>(),
                visibility,
                windDirection,
                windGust,
                windSpeed,
                wxPhraseLong ?? new ChangeTrackingList<string>(),
                wxPhraseShort ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WeatherData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WeatherData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(WeatherData)} does not support writing '{options.Format}' format.");
            }
        }

        WeatherData IPersistableModel<WeatherData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WeatherData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeWeatherData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WeatherData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WeatherData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static WeatherData FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeWeatherData(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
