// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AgriculturePlatform
{
    // Data plane generated sub-client.
    /// <summary> The Weather sub-client. </summary>
    public partial class Weather
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Weather for mocking. </summary>
        protected Weather()
        {
        }

        /// <summary> Initializes a new instance of Weather. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Weather(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Returns a list of WeatherData. </summary>
        /// <param name="providerName"> Weather provider name. </param>
        /// <param name="providerApiName"> Provider's api name to which request is to be made. </param>
        /// <param name="units">
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </param>
        /// <param name="language">
        /// Language (IETF BCP 47 language tag) in which search results should be returned
        /// by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
        /// </param>
        /// <param name="credentials"> Api Key Auth Credentials class for API Key based Auth. </param>
        /// <param name="locations"> List of locations for which weather data need to be fetched from the provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="providerName"/>, <paramref name="providerApiName"/> or <paramref name="units"/> is null. </exception>
        /// <include file="Docs/Weather.xml" path="doc/members/member[@name='GetWeatherOperationAsync(string,string,string,string,ApiKeyAuthCredentials,IEnumerable{WeatherLocation},CancellationToken)']/*" />
        public virtual async Task<Response<WeatherResponse>> GetWeatherOperationAsync(string providerName, string providerApiName, string units, string language = null, ApiKeyAuthCredentials credentials = null, IEnumerable<WeatherLocation> locations = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(providerName, nameof(providerName));
            Argument.AssertNotNull(providerApiName, nameof(providerApiName));
            Argument.AssertNotNull(units, nameof(units));

            GetRequest getRequest = new GetRequest(
                providerName,
                providerApiName,
                language,
                units,
                credentials,
                locations?.ToList() as IReadOnlyList<WeatherLocation> ?? new ChangeTrackingList<WeatherLocation>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetWeatherOperationAsync(getRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(WeatherResponse.FromResponse(response), response);
        }

        /// <summary> Returns a list of WeatherData. </summary>
        /// <param name="providerName"> Weather provider name. </param>
        /// <param name="providerApiName"> Provider's api name to which request is to be made. </param>
        /// <param name="units">
        /// Units for which request to data provider is to be sent. Supported values are
        /// 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
        /// for Metric SI units.
        /// </param>
        /// <param name="language">
        /// Language (IETF BCP 47 language tag) in which search results should be returned
        /// by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
        /// </param>
        /// <param name="credentials"> Api Key Auth Credentials class for API Key based Auth. </param>
        /// <param name="locations"> List of locations for which weather data need to be fetched from the provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="providerName"/>, <paramref name="providerApiName"/> or <paramref name="units"/> is null. </exception>
        /// <include file="Docs/Weather.xml" path="doc/members/member[@name='GetWeatherOperation(string,string,string,string,ApiKeyAuthCredentials,IEnumerable{WeatherLocation},CancellationToken)']/*" />
        public virtual Response<WeatherResponse> GetWeatherOperation(string providerName, string providerApiName, string units, string language = null, ApiKeyAuthCredentials credentials = null, IEnumerable<WeatherLocation> locations = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(providerName, nameof(providerName));
            Argument.AssertNotNull(providerApiName, nameof(providerApiName));
            Argument.AssertNotNull(units, nameof(units));

            GetRequest getRequest = new GetRequest(
                providerName,
                providerApiName,
                language,
                units,
                credentials,
                locations?.ToList() as IReadOnlyList<WeatherLocation> ?? new ChangeTrackingList<WeatherLocation>(),
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetWeatherOperation(getRequest.ToRequestContent(), context);
            return Response.FromValue(WeatherResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Returns a list of WeatherData.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetWeatherOperationAsync(string,string,string,string,ApiKeyAuthCredentials,IEnumerable{WeatherLocation},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Weather.xml" path="doc/members/member[@name='GetWeatherOperationAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetWeatherOperationAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Weather.GetWeatherOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWeatherOperationRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns a list of WeatherData.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetWeatherOperation(string,string,string,string,ApiKeyAuthCredentials,IEnumerable{WeatherLocation},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Weather.xml" path="doc/members/member[@name='GetWeatherOperation(RequestContent,RequestContext)']/*" />
        public virtual Response GetWeatherOperation(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Weather.GetWeatherOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWeatherOperationRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetWeatherOperationRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/weather:fetch", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
