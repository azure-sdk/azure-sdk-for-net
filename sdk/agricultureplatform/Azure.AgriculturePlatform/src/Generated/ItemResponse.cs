// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> ItemResponse model for Items api. </summary>
    public partial class ItemResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ItemResponse"/>. </summary>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        internal ItemResponse(IReadOnlyDictionary<string, BinaryData> data)
        {
            Argument.AssertNotNull(data, nameof(data));

            Links = new ChangeTrackingList<Link>();
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
            Data = data;
            Assets = new ChangeTrackingList<Asset>();
        }

        /// <summary> Initializes a new instance of <see cref="ItemResponse"/>. </summary>
        /// <param name="links"> Links for referencing other objects. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="source"> Source of the resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="createdBy"> Created by user/tenant id. </param>
        /// <param name="modifiedBy"> Modified by user/tenant id. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// </param>
        /// <param name="data"> Schema for records under the dataset. </param>
        /// <param name="ownerItemId"> OwnerItemId. </param>
        /// <param name="catalogId"> CatalogId. </param>
        /// <param name="collectionId"> CollectionId. </param>
        /// <param name="assets"> Assets. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ItemResponse(IReadOnlyList<Link> links, string eTag, string status, DateTimeOffset? createdDateTime, DateTimeOffset? modifiedDateTime, string source, string name, string description, string createdBy, string modifiedBy, IReadOnlyDictionary<string, BinaryData> properties, IReadOnlyDictionary<string, BinaryData> data, string ownerItemId, string catalogId, string collectionId, IReadOnlyList<Asset> assets, string id, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Links = links;
            ETag = eTag;
            Status = status;
            CreatedDateTime = createdDateTime;
            ModifiedDateTime = modifiedDateTime;
            Source = source;
            Name = name;
            Description = description;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            Properties = properties;
            Data = data;
            OwnerItemId = ownerItemId;
            CatalogId = catalogId;
            CollectionId = collectionId;
            Assets = assets;
            Id = id;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ItemResponse"/> for deserialization. </summary>
        internal ItemResponse()
        {
        }

        /// <summary> Links for referencing other objects. </summary>
        public IReadOnlyList<Link> Links { get; }
        /// <summary> The ETag value to implement optimistic concurrency. </summary>
        public string ETag { get; }
        /// <summary> Status of the resource. </summary>
        public string Status { get; }
        /// <summary> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? ModifiedDateTime { get; }
        /// <summary> Source of the resource. </summary>
        public string Source { get; }
        /// <summary> Name to identify resource. </summary>
        public string Name { get; }
        /// <summary> Textual description of the resource. </summary>
        public string Description { get; }
        /// <summary> Created by user/tenant id. </summary>
        public string CreatedBy { get; }
        /// <summary> Modified by user/tenant id. </summary>
        public string ModifiedBy { get; }
        /// <summary>
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only
        /// string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Properties { get; }
        /// <summary>
        /// Schema for records under the dataset.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Data { get; }
        /// <summary> OwnerItemId. </summary>
        public string OwnerItemId { get; }
        /// <summary> CatalogId. </summary>
        public string CatalogId { get; }
        /// <summary> CollectionId. </summary>
        public string CollectionId { get; }
        /// <summary> Assets. </summary>
        public IReadOnlyList<Asset> Assets { get; }
        /// <summary> Unique resource ID. </summary>
        public string Id { get; }
    }
}
