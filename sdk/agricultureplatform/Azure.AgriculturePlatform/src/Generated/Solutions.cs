// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AgriculturePlatform
{
    // Data plane generated sub-client.
    /// <summary> The Solutions sub-client. </summary>
    public partial class Solutions
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Solutions for mocking. </summary>
        protected Solutions()
        {
        }

        /// <summary> Initializes a new instance of Solutions. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Solutions(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Cancel Solution job Async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/> or <paramref name="partnerRequestHeaders"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CancelJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual async Task<Response<SamplePartnerResponse>> CancelJobAsync(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));

            CancelJobRequest cancelJobRequest = new CancelJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CancelJobAsync(cancelJobRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary> Cancel Solution job Async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/> or <paramref name="partnerRequestHeaders"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CancelJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual Response<SamplePartnerResponse> CancelJob(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));

            CancelJobRequest cancelJobRequest = new CancelJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CancelJob(cancelJobRequest.ToRequestContent(), context);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Cancel Solution job Async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CancelJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CancelJobAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CancelJobAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Cancel Solution job Async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CancelJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CancelJob(RequestContent,RequestContext)']/*" />
        public virtual Response CancelJob(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.CancelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelJobRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates solution job async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/>, <paramref name="partnerRequestHeaders"/> or <paramref name="inputData"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CreateJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual async Task<Response<SamplePartnerResponse>> CreateJobAsync(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));
            Argument.AssertNotNull(inputData, nameof(inputData));

            CreateJobRequest createJobRequest = new CreateJobRequest(
                solutionId,
                requestPath,
                partnerRequestBody,
                partnerRequestHeaders,
                inputData,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateJobAsync(createJobRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary> Creates solution job async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/>, <paramref name="partnerRequestHeaders"/> or <paramref name="inputData"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CreateJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual Response<SamplePartnerResponse> CreateJob(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));
            Argument.AssertNotNull(inputData, nameof(inputData));

            CreateJobRequest createJobRequest = new CreateJobRequest(
                solutionId,
                requestPath,
                partnerRequestBody,
                partnerRequestHeaders,
                inputData,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateJob(createJobRequest.ToRequestContent(), context);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates solution job async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CreateJobAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateJobAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.CreateJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateJobRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates solution job async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='CreateJob(RequestContent,RequestContext)']/*" />
        public virtual Response CreateJob(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.CreateJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateJobRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets solution Data async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/>, <paramref name="partnerRequestHeaders"/> or <paramref name="inputData"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetDataAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual async Task<Response<SamplePartnerResponse>> GetDataAsync(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));
            Argument.AssertNotNull(inputData, nameof(inputData));

            GetDataRequest getDataRequest = new GetDataRequest(
                solutionId,
                requestPath,
                partnerRequestBody,
                partnerRequestHeaders,
                inputData,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDataAsync(getDataRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary> Gets solution Data async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="inputData"> Input Data. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/>, <paramref name="partnerRequestHeaders"/> or <paramref name="inputData"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetData(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual Response<SamplePartnerResponse> GetData(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, IReadOnlyDictionary<string, BinaryData> inputData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));
            Argument.AssertNotNull(inputData, nameof(inputData));

            GetDataRequest getDataRequest = new GetDataRequest(
                solutionId,
                requestPath,
                partnerRequestBody,
                partnerRequestHeaders,
                inputData,
                null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetData(getDataRequest.ToRequestContent(), context);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets solution Data async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDataAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetDataAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetDataAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.GetData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets solution Data async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetData(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetData(RequestContent,RequestContext)']/*" />
        public virtual Response GetData(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.GetData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets Solution get job response async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/> or <paramref name="partnerRequestHeaders"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual async Task<Response<SamplePartnerResponse>> GetJobAsync(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));

            GetJobRequest getJobRequest = new GetJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetJobAsync(getJobRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary> Gets Solution get job response async. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="requestPath"> RequestPath. </param>
        /// <param name="partnerRequestBody"> Properties. </param>
        /// <param name="partnerRequestHeaders"> Properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/>, <paramref name="requestPath"/>, <paramref name="partnerRequestBody"/> or <paramref name="partnerRequestHeaders"/> is null. </exception>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)']/*" />
        public virtual Response<SamplePartnerResponse> GetJob(string solutionId, string requestPath, IReadOnlyDictionary<string, BinaryData> partnerRequestBody, IReadOnlyDictionary<string, BinaryData> partnerRequestHeaders, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(solutionId, nameof(solutionId));
            Argument.AssertNotNull(requestPath, nameof(requestPath));
            Argument.AssertNotNull(partnerRequestBody, nameof(partnerRequestBody));
            Argument.AssertNotNull(partnerRequestHeaders, nameof(partnerRequestHeaders));

            GetJobRequest getJobRequest = new GetJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetJob(getJobRequest.ToRequestContent(), context);
            return Response.FromValue(SamplePartnerResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets Solution get job response async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetJobAsync(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetJobAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetJobAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.GetJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets Solution get job response async.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetJob(string,string,IReadOnlyDictionary{string,BinaryData},IReadOnlyDictionary{string,BinaryData},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Solutions.xml" path="doc/members/member[@name='GetJob(RequestContent,RequestContext)']/*" />
        public virtual Response GetJob(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Solutions.GetJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCancelJobRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/solutions:cancel-job", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateJobRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/solutions:create-job", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetDataRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/solutions:get-data", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetJobRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/external/solutions:get-job", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
