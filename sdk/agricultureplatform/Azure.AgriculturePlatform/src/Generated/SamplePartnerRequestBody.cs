// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AgriculturePlatform
{
    /// <summary> SamplePartnerRequestBody. </summary>
    public partial class SamplePartnerRequestBody
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SamplePartnerRequestBody"/>. </summary>
        internal SamplePartnerRequestBody()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SamplePartnerRequestBody"/>. </summary>
        /// <param name="solutionId"> SolutionId. </param>
        /// <param name="partyId"> PartyId. </param>
        /// <param name="gddStartDate"> GddStartDate. </param>
        /// <param name="gddEndDate"> GddEndDate. </param>
        /// <param name="resourceId"> ResourceId. </param>
        /// <param name="resourceType"> ResourceType. </param>
        /// <param name="crop"> Crop. </param>
        /// <param name="temperatureUnit"> TemperatureUnit. </param>
        /// <param name="method"> Method. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SamplePartnerRequestBody(string solutionId, string partyId, DateTimeOffset? gddStartDate, DateTimeOffset? gddEndDate, string resourceId, string resourceType, string crop, string temperatureUnit, string method, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SolutionId = solutionId;
            PartyId = partyId;
            GddStartDate = gddStartDate;
            GddEndDate = gddEndDate;
            ResourceId = resourceId;
            ResourceType = resourceType;
            Crop = crop;
            TemperatureUnit = temperatureUnit;
            Method = method;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> SolutionId. </summary>
        public string SolutionId { get; }
        /// <summary> PartyId. </summary>
        public string PartyId { get; }
        /// <summary> GddStartDate. </summary>
        public DateTimeOffset? GddStartDate { get; }
        /// <summary> GddEndDate. </summary>
        public DateTimeOffset? GddEndDate { get; }
        /// <summary> ResourceId. </summary>
        public string ResourceId { get; }
        /// <summary> ResourceType. </summary>
        public string ResourceType { get; }
        /// <summary> Crop. </summary>
        public string Crop { get; }
        /// <summary> TemperatureUnit. </summary>
        public string TemperatureUnit { get; }
        /// <summary> Method. </summary>
        public string Method { get; }
    }
}
