// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AgriculturePlatform.Samples
{
    public partial class Samples_Solutions
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_CancelJob_SolutionCancelJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = client.CancelJob(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_CancelJob_SolutionCancelJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = await client.CancelJobAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_CancelJob_SolutionCancelJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = client.CancelJob("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_CancelJob_SolutionCancelJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = await client.CancelJobAsync("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_CreateJob_SolutionCreateJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputData = new object(),
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = client.CreateJob(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_CreateJob_SolutionCreateJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputData = new object(),
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = await client.CreateJobAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_CreateJob_SolutionCreateJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = client.CreateJob("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_CreateJob_SolutionCreateJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = await client.CreateJobAsync("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_GetData_SolutionGetData()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputData = new object(),
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = client.GetData(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_GetData_SolutionGetData_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputData = new object(),
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = await client.GetDataAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_GetData_SolutionGetData_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = client.GetData("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_GetData_SolutionGetData_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = await client.GetDataAsync("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_GetJob_SolutionGetJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = client.GetJob(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_GetJob_SolutionGetJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                solutionId = "string",
                requestPath = "string",
                partnerRequestBody = new object(),
                partnerRequestHeaders = new object(),
            });
            Response response = await client.GetJobAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SolutionsOperations_GetJob_SolutionGetJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = client.GetJob("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SolutionsOperations_GetJob_SolutionGetJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Solutions client = new AgriculturePlatformClient(endpoint, credential).GetSolutionsClient(apiVersion: "2024-11-01-preview");

            Response<SamplePartnerResponse> response = await client.GetJobAsync("string", "string", new Dictionary<string, BinaryData>(), new Dictionary<string, BinaryData>());
        }
    }
}
