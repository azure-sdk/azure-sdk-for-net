// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Contoso
{
    // Data plane generated sub-client.
    /// <summary> The Motorcycles sub-client. </summary>
    public partial class Motorcycles
    {
        private const string AuthorizationHeader = "api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://widget.contoso.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Motorcycles for mocking. </summary>
        protected Motorcycles()
        {
        }

        /// <summary> Initializes a new instance of Motorcycles. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Motorcycles(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, TokenCredential tokenCredential, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _tokenCredential = tokenCredential;
            _apiVersion = apiVersion;
        }

        /// <summary> Fetch a Motorcycle by its id. </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycleAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<Motorcycle>> GetMotorcycleAsync(string workspaceName, string motorcycleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetMotorcycleAsync(workspaceName, motorcycleId, context).ConfigureAwait(false);
            return Response.FromValue(Motorcycle.FromResponse(response), response);
        }

        /// <summary> Fetch a Motorcycle by its id. </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycle(string,string,CancellationToken)']/*" />
        public virtual Response<Motorcycle> GetMotorcycle(string workspaceName, string motorcycleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetMotorcycle(workspaceName, motorcycleId, context);
            return Response.FromValue(Motorcycle.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Fetch a Motorcycle by its id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMotorcycleAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycleAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetMotorcycleAsync(string workspaceName, string motorcycleId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));

            using var scope = ClientDiagnostics.CreateScope("Motorcycles.GetMotorcycle");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetMotorcycleRequest(workspaceName, motorcycleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch a Motorcycle by its id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMotorcycle(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycle(string,string,RequestContext)']/*" />
        public virtual Response GetMotorcycle(string workspaceName, string motorcycleId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));

            using var scope = ClientDiagnostics.CreateScope("Motorcycles.GetMotorcycle");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetMotorcycleRequest(workspaceName, motorcycleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or Update a Motorcycle.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/>, <paramref name="motorcycleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string workspaceName, string motorcycleId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Motorcycles.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(workspaceName, motorcycleId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create or Update a Motorcycle.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="motorcycleId"> The id of the motorcycle. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/>, <paramref name="motorcycleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> or <paramref name="motorcycleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string workspaceName, string motorcycleId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(motorcycleId, nameof(motorcycleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Motorcycles.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(workspaceName, motorcycleId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all Motorcycle. </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcyclesAsync(string,CancellationToken)']/*" />
        public virtual AsyncPageable<Motorcycle> GetMotorcyclesAsync(string workspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMotorcyclesRequest(workspaceName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMotorcyclesNextPageRequest(nextLink, workspaceName, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => Motorcycle.DeserializeMotorcycle(e), ClientDiagnostics, _pipeline, "Motorcycles.GetMotorcycles", "value", "nextLink", context);
        }

        /// <summary> List all Motorcycle. </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycles(string,CancellationToken)']/*" />
        public virtual Pageable<Motorcycle> GetMotorcycles(string workspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMotorcyclesRequest(workspaceName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMotorcyclesNextPageRequest(nextLink, workspaceName, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => Motorcycle.DeserializeMotorcycle(e), ClientDiagnostics, _pipeline, "Motorcycles.GetMotorcycles", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List all Motorcycle.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMotorcyclesAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcyclesAsync(string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetMotorcyclesAsync(string workspaceName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMotorcyclesRequest(workspaceName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMotorcyclesNextPageRequest(nextLink, workspaceName, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Motorcycles.GetMotorcycles", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List all Motorcycle.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetMotorcycles(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceName"> The name of the Vehicle Workspace. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/Motorcycles.xml" path="doc/members/member[@name='GetMotorcycles(string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetMotorcycles(string workspaceName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetMotorcyclesRequest(workspaceName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetMotorcyclesNextPageRequest(nextLink, workspaceName, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "Motorcycles.GetMotorcycles", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetMotorcycleRequest(string workspaceName, string motorcycleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/motorcycles/", false);
            uri.AppendPath(motorcycleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string workspaceName, string motorcycleId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/motorcycles/", false);
            uri.AppendPath(motorcycleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetMotorcyclesRequest(string workspaceName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/motorcycles", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetMotorcyclesNextPageRequest(string nextLink, string workspaceName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
    }
}
