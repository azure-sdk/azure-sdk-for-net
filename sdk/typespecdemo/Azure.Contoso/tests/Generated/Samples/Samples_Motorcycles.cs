// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Contoso;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Contoso.Samples
{
    public partial class Samples_Motorcycles
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycle_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response response = client.GetMotorcycle("<workspaceName>", "<motorcycleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycle_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response response = await client.GetMotorcycleAsync("<workspaceName>", "<motorcycleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycle_ShortVersion_Convenience()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response<Motorcycle> response = client.GetMotorcycle("<workspaceName>", "<motorcycleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycle_ShortVersion_Convenience_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response<Motorcycle> response = await client.GetMotorcycleAsync("<workspaceName>", "<motorcycleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycle_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response response = client.GetMotorcycle("<workspaceName>", "<motorcycleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycle_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response response = await client.GetMotorcycleAsync("<workspaceName>", "<motorcycleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycle_AllParameters_Convenience()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response<Motorcycle> response = client.GetMotorcycle("<workspaceName>", "<motorcycleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycle_AllParameters_Convenience_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            Response<Motorcycle> response = await client.GetMotorcycleAsync("<workspaceName>", "<motorcycleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_CreateOrUpdate_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                vehicleKind = "Car",
                hasEngineBars = true,
            });
            Response response = client.CreateOrUpdate("<workspaceName>", "<motorcycleId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_CreateOrUpdate_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                vehicleKind = "Car",
                hasEngineBars = true,
            });
            Response response = await client.CreateOrUpdateAsync("<workspaceName>", "<motorcycleId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_CreateOrUpdate_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                vehicleKind = "Car",
                hasEngineBars = true,
            });
            Response response = client.CreateOrUpdate("<workspaceName>", "<motorcycleId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_CreateOrUpdate_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                vehicleKind = "Car",
                hasEngineBars = true,
            });
            Response response = await client.CreateOrUpdateAsync("<workspaceName>", "<motorcycleId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("vehicleKind").ToString());
            Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycles_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            foreach (BinaryData item in client.GetMotorcycles("<workspaceName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("vehicleKind").ToString());
                Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycles_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            await foreach (BinaryData item in client.GetMotorcyclesAsync("<workspaceName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("vehicleKind").ToString());
                Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycles_ShortVersion_Convenience()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            foreach (Motorcycle item in client.GetMotorcycles("<workspaceName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycles_ShortVersion_Convenience_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            await foreach (Motorcycle item in client.GetMotorcyclesAsync("<workspaceName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycles_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            foreach (BinaryData item in client.GetMotorcycles("<workspaceName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("vehicleKind").ToString());
                Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycles_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            await foreach (BinaryData item in client.GetMotorcyclesAsync("<workspaceName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("vehicleKind").ToString());
                Console.WriteLine(result.GetProperty("hasEngineBars").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Motorcycle_GetMotorcycles_AllParameters_Convenience()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            foreach (Motorcycle item in client.GetMotorcycles("<workspaceName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Motorcycle_GetMotorcycles_AllParameters_Convenience_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Motorcycles client = new ServiceClient(credential).GetMotorcyclesClient(apiVersion: "2022-11-01-preview");

            await foreach (Motorcycle item in client.GetMotorcyclesAsync("<workspaceName>"))
            {
            }
        }
    }
}
