// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary>
    /// Frequency of a notification. Represents how long the notification will be silent after triggering an alert for a threshold breach. If not specified, the frequency will be set by default based on the timeGrain (Weekly when timeGrain: Last7Days, Monthly when timeGrain: Last30Days).
    ///
    ///  Supported for CategoryType(s): ReservationUtilization.
    /// </summary>
    public readonly partial struct Frequency : IEquatable<Frequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Frequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Frequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DailyValue = "Daily";
        private const string WeeklyValue = "Weekly";
        private const string MonthlyValue = "Monthly";

        /// <summary> After the threshold breaches and an Alert is fired, no further alerts will be sent until the next calendar day. </summary>
        public static Frequency Daily { get; } = new Frequency(DailyValue);
        /// <summary> After the threshold breaches and an Alert is fired, no further alerts will be sent for 7 calendar days. </summary>
        public static Frequency Weekly { get; } = new Frequency(WeeklyValue);
        /// <summary> After the threshold breaches and an Alert is fired, no further alerts will be sent for 30 calendar days. </summary>
        public static Frequency Monthly { get; } = new Frequency(MonthlyValue);
        /// <summary> Determines if two <see cref="Frequency"/> values are the same. </summary>
        public static bool operator ==(Frequency left, Frequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Frequency"/> values are not the same. </summary>
        public static bool operator !=(Frequency left, Frequency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Frequency"/>. </summary>
        public static implicit operator Frequency(string value) => new Frequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Frequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Frequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
