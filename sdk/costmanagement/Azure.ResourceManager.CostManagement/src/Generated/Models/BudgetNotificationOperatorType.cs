// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary>
    /// The comparison operator.
    ///
    ///  Supported for CategoryType(s): Cost, ReservationUtilization.
    ///
    ///  Supported operators for **CategoryType: Cost**
    /// - GreaterThan
    /// - GreaterThanOrEqualTo
    ///
    ///  Supported operators for **CategoryType: ReservationUtilization**
    /// - LessThan
    /// </summary>
    public readonly partial struct BudgetNotificationOperatorType : IEquatable<BudgetNotificationOperatorType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BudgetNotificationOperatorType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BudgetNotificationOperatorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EqualToValue = "EqualTo";
        private const string GreaterThanValue = "GreaterThan";
        private const string GreaterThanOrEqualToValue = "GreaterThanOrEqualTo";
        private const string LessThanValue = "LessThan";

        /// <summary>
        /// Notification will be triggered if the evaluated cost is the same as threshold value. Note: It’s not recommended to use this OperatorType as there’s low chance of cost being exactly the same as threshold value, leading to missing of your alert. This OperatorType will be deprecated in future.
        ///
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public static BudgetNotificationOperatorType EqualTo { get; } = new BudgetNotificationOperatorType(EqualToValue);
        /// <summary>
        /// Notification will be triggered if the evaluated cost is greater than the threshold value. Note: This is the recommended OperatorType while configuring Budget Alert.
        ///
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public static BudgetNotificationOperatorType GreaterThan { get; } = new BudgetNotificationOperatorType(GreaterThanValue);
        /// <summary>
        /// Notification will be triggered if the evaluated cost is greater than or equal to the threshold value.
        ///
        ///  Supported for CategoryType(s): Cost.
        /// </summary>
        public static BudgetNotificationOperatorType GreaterThanOrEqualTo { get; } = new BudgetNotificationOperatorType(GreaterThanOrEqualToValue);
        /// <summary>
        /// Notification will be triggered if any Reservations in the scope of the Reservation Utilization Alert Rule have a utilization less than the threshold percentage.
        ///
        ///  Supported for CategoryType(s): ReservationUtilization.
        /// </summary>
        public static BudgetNotificationOperatorType LessThan { get; } = new BudgetNotificationOperatorType(LessThanValue);
        /// <summary> Determines if two <see cref="BudgetNotificationOperatorType"/> values are the same. </summary>
        public static bool operator ==(BudgetNotificationOperatorType left, BudgetNotificationOperatorType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BudgetNotificationOperatorType"/> values are not the same. </summary>
        public static bool operator !=(BudgetNotificationOperatorType left, BudgetNotificationOperatorType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BudgetNotificationOperatorType"/>. </summary>
        public static implicit operator BudgetNotificationOperatorType(string value) => new BudgetNotificationOperatorType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BudgetNotificationOperatorType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BudgetNotificationOperatorType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
