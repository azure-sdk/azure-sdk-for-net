// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.CostManagement;
using Azure.ResourceManager.CostManagement.Models;

namespace Azure.ResourceManager.CostManagement.Samples
{
    public partial class Sample_BudgetCollection
    {
        // BillingAccountBudgetsList-EA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingAccountBudgetsListEA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/EA/BillingAccountBudgetsList-EA.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BillingAccountBudgetsList-EA-CategoryTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingAccountBudgetsListEACategoryTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/EA/BillingAccountBudgetsList-EA-CategoryTypeFilter.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            string filter = "properties/category eq 'ReservationUtilization'";
            await foreach (BudgetResource item in collection.GetAllAsync(filter: filter))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BillingAccountBudgetsList-MCA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingAccountBudgetsListMCA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/BillingAccountBudgetsList-MCA.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BillingAccountBudgetsList-MCA-CategoryTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingAccountBudgetsListMCACategoryTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/BillingAccountBudgetsList-MCA-CategoryTypeFilter.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            string filter = "properties/category eq 'ReservationUtilization'";
            await foreach (BudgetResource item in collection.GetAllAsync(filter: filter))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BillingProfileBudgetsList-MCA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingProfileBudgetsListMCA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/BillingProfileBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/MYDEVTESTBP";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // BillingProfileBudgetsList-MCA-CategoryTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_BillingProfileBudgetsListMCACategoryTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/BillingProfileBudgetsList-CategoryTypeFilter.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/MYDEVTESTBP";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            string filter = "properties/category eq 'ReservationUtilization'";
            await foreach (BudgetResource item in collection.GetAllAsync(filter: filter))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // CustomerBudgetsList-MCA-CSP
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_CustomerBudgetsListMCACSP()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/CustomerBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // CustomerBudgetsList-MCA-CSP-CategoryTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_CustomerBudgetsListMCACSPCategoryTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/CustomerBudgetsList-CategoryTypeFilter.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            string filter = "properties/category eq 'ReservationUtilization'";
            await foreach (BudgetResource item in collection.GetAllAsync(filter: filter))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // DepartmentBudgetsList-EA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_DepartmentBudgetsListEA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/EA/DepartmentBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456/departments/789101";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // EnrollmentAccountBudgetsList-EA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_EnrollmentAccountBudgetsListEA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/EA/EnrollmentAccountBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456/enrollmentAccounts/473845";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // InvoiceSectionBudgetsList-MCA
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_InvoiceSectionBudgetsListMCA()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/MCA/InvoiceSectionBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/MYDEVTESTBP/invoiceSections/AAAA-BBBB-CCC-DDD";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ManagementGroupBudgetsList
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ManagementGroupBudgetsList()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/RBAC/ManagementGroupBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "Microsoft.Management/managementGroups/MYDEVTESTMG";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // ResourceGroupBudgetsList
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ResourceGroupBudgetsList()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/RBAC/ResourceGroupBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // SubscriptionBudgetsList
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_SubscriptionBudgetsList()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/List/RBAC/SubscriptionBudgetsList.json
            // this example is just showing the usage of "Budgets_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation and iterate over the result
            await foreach (BudgetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                BudgetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get-Cost-Budget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCostBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/Cost/Get-Cost-Budget.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestBudget";
            BudgetResource result = await collection.GetAsync(budgetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get-Cost-Budget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetCostBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/Cost/Get-Cost-Budget.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestBudget";
            bool result = await collection.ExistsAsync(budgetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get-ReservationUtilization-AlertRule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetReservationUtilizationAlertRule()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/ReservationUtilization/Get-ReservationUtilization-AlertRule.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetResource result = await collection.GetAsync(budgetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get-ReservationUtilization-AlertRule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetReservationUtilizationAlertRule()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/ReservationUtilization/Get-ReservationUtilization-AlertRule.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            bool result = await collection.ExistsAsync(budgetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // CreateOrUpdate-Cost-Subscription-Budget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateCostSubscriptionBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/Cost/CreateOrUpdate-Cost-Subscription-Budget.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestBudget";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.Cost,
                Amount = 100.65,
                TimeGrain = TimeGrainType.Monthly,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2024-10-31T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    And =
{
new BudgetFilterProperties()
{
Dimensions = new BudgetComparisonExpression("ResourceId",BudgetOperatorType.In,new string[]
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2","/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1"
}),
},new BudgetFilterProperties()
{
Tags = new BudgetComparisonExpression("category",BudgetOperatorType.In,new string[]
{
"Dev","Prod"
}),
},new BudgetFilterProperties()
{
Tags = new BudgetComparisonExpression("department",BudgetOperatorType.In,new string[]
{
"engineering","sales"
}),
}
},
                },
                Notifications =
{
["Actual_GreaterThan_80_Percent"] = new Notification(true,BudgetNotificationOperatorType.GreaterThan,80,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
ContactRoles =
{
"Contributor","Reader"
},
ContactGroups =
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup"
},
ThresholdType = ThresholdType.Actual,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRule()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule.json
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleJson()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule.json
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleJson()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ArmResource created on azure
            // for more information of creating ArmResource, please refer to the document of ArmResource

            // get the collection of this BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            ResourceIdentifier scopeId = new ResourceIdentifier(string.Format("/{0}", scope));
            BudgetCollection collection = client.GetBudgets(scopeId);

            // invoke the operation
            string budgetName = "TestAlertRule";
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, budgetName, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
