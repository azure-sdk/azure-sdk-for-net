// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.CostManagement;
using Azure.ResourceManager.CostManagement.Models;

namespace Azure.ResourceManager.CostManagement.Samples
{
    public partial class Sample_BudgetResource
    {
        // Get-Cost-Budget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCostBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/Cost/Get-Cost-Budget.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            string budgetName = "TestBudget";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetResource result = await budget.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get-ReservationUtilization-AlertRule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetReservationUtilizationAlertRule()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Get/ReservationUtilization/Get-ReservationUtilization-AlertRule.json
            // this example is just showing the usage of "Budgets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetResource result = await budget.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-Cost-Subscription-Budget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateCostSubscriptionBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/Cost/CreateOrUpdate-Cost-Subscription-Budget.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            string budgetName = "TestBudget";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.Cost,
                Amount = 100.65,
                TimeGrain = TimeGrainType.Monthly,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2024-10-31T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    And =
{
new BudgetFilterProperties()
{
Dimensions = new BudgetComparisonExpression("ResourceId",BudgetOperatorType.In,new string[]
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2","/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1"
}),
},new BudgetFilterProperties()
{
Tags = new BudgetComparisonExpression("category",BudgetOperatorType.In,new string[]
{
"Dev","Prod"
}),
},new BudgetFilterProperties()
{
Tags = new BudgetComparisonExpression("department",BudgetOperatorType.In,new string[]
{
"engineering","sales"
}),
}
},
                },
                Notifications =
{
["Actual_GreaterThan_80_Percent"] = new Notification(true,BudgetNotificationOperatorType.GreaterThan,80,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
ContactRoles =
{
"Contributor","Reader"
},
ContactGroups =
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup"
},
ThresholdType = ThresholdType.Actual,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRule()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingAccountEA-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingAccountEAAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/EA/BillingAccountEA-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/123456";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last7Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Weekly,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-BillingProfileMCA-AlertRule.json
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationBillingProfileMCAAlertRuleJson()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/BillingProfile-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/billingProfiles/KKKK-LLLL-MMM-NNN";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule-ReservationIdFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleReservationIdFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule-ReservationIdFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservationId", BudgetOperatorType.In, new string[]
            {
"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000001","00000000-0000-0000-0000-000000000002"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule-ReservedResourceTypeFilter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleReservedResourceTypeFilter()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule-ReservedResourceTypeFilter.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter()
                {
                    Dimensions = new BudgetComparisonExpression("ReservedResourceType", BudgetOperatorType.In, new string[]
            {
"VirtualMachines","SqlDatabases","CosmosDb"
            }),
                },
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // CreateOrUpdate-ReservationUtilization-CustomerCSP-AlertRule.json
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateReservationUtilizationCustomerCSPAlertRuleJson()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/CreateOrUpdate/ReservationUtilization/MCA/Customer-AlertRule.json
            // this example is just showing the usage of "Budgets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "providers/Microsoft.Billing/billingAccounts/aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee:ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj_2023-04-01/customers/000000-1111-2222-3333-444444444444";
            string budgetName = "TestAlertRule";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            BudgetData data = new BudgetData()
            {
                Category = CategoryType.ReservationUtilization,
                TimeGrain = TimeGrainType.Last30Days,
                TimePeriod = new BudgetTimePeriod(DateTimeOffset.Parse("2023-04-01T00:00:00Z"))
                {
                    EndOn = DateTimeOffset.Parse("2025-04-01T00:00:00Z"),
                },
                Filter = new BudgetFilter(),
                Notifications =
{
["Actual_LessThan_99_Percent"] = new Notification(true,BudgetNotificationOperatorType.LessThan,99,new string[]
{
"johndoe@contoso.com","janesmith@contoso.com"
})
{
Frequency = Frequency.Daily,
Locale = CultureCode.EnUs,
},
},
                ETag = new ETag("\"1d34d016a593709\""),
            };
            ArmOperation<BudgetResource> lro = await budget.UpdateAsync(WaitUntil.Completed, data);
            BudgetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BudgetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeleteBudget
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteBudget()
        {
            // Generated from example definition: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2023-08-01/examples/Budgets/Delete/DeleteBudget.json
            // this example is just showing the usage of "Budgets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BudgetResource created on azure
            // for more information of creating BudgetResource, please refer to the document of BudgetResource
            string scope = "subscriptions/00000000-0000-0000-0000-000000000000";
            string budgetName = "TestBudget";
            ResourceIdentifier budgetResourceId = BudgetResource.CreateResourceIdentifier(scope, budgetName);
            BudgetResource budget = client.GetBudgetResource(budgetResourceId);

            // invoke the operation
            await budget.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
