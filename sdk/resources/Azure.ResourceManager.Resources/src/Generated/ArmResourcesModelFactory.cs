// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Resources.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmResourcesModelFactory
    {
        /// <summary> Initializes a new instance of ArmApplicationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="plan"> The plan information. </param>
        /// <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="managedResourceGroupId"> The managed resource group Id. </param>
        /// <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
        /// <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
        /// <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
        /// <param name="provisioningState"> The managed application provisioning state. </param>
        /// <param name="billingDetailsResourceUsageId"> The managed application billing details. </param>
        /// <param name="jitAccessPolicy"> The managed application Jit access policy. </param>
        /// <param name="publisherTenantId"> The publisher tenant Id. </param>
        /// <param name="authorizations"> The  read-only authorizations property that is retrieved from the application package. </param>
        /// <param name="managementMode"> The managed application management mode. </param>
        /// <param name="customerSupport"> The read-only customer support property that is retrieved from the application package. </param>
        /// <param name="supportUris"> The read-only support URLs property that is retrieved from the application package. </param>
        /// <param name="artifacts"> The collection of managed application artifacts. </param>
        /// <param name="createdBy"> The client entity that created the JIT request. </param>
        /// <param name="updatedBy"> The client entity that last updated the JIT request. </param>
        /// <returns> A new <see cref="Resources.ArmApplicationData"/> instance for mocking. </returns>
        public static ArmApplicationData ArmApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string managedBy = null, ArmApplicationSku sku = null, ArmPlan plan = null, string kind = null, ArmApplicationManagedIdentity identity = null, ResourceIdentifier managedResourceGroupId = null, ResourceIdentifier applicationDefinitionId = null, BinaryData parameters = null, BinaryData outputs = null, ResourcesProvisioningState? provisioningState = null, string billingDetailsResourceUsageId = null, ArmApplicationJitAccessPolicy jitAccessPolicy = null, Guid? publisherTenantId = null, IEnumerable<ArmApplicationAuthorization> authorizations = null, ArmApplicationManagementMode? managementMode = null, ArmApplicationPackageContact customerSupport = null, ArmApplicationPackageSupportUris supportUris = null, IEnumerable<ArmApplicationArtifact> artifacts = null, ArmApplicationDetails createdBy = null, ArmApplicationDetails updatedBy = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizations ??= new List<ArmApplicationAuthorization>();
            artifacts ??= new List<ArmApplicationArtifact>();

            return new ArmApplicationData(id, name, resourceType, systemData, tags, location, managedBy, sku, plan, kind, identity, managedResourceGroupId, applicationDefinitionId, parameters, outputs, provisioningState, billingDetailsResourceUsageId != null ? new ArmApplicationBillingDetails(billingDetailsResourceUsageId) : null, jitAccessPolicy, publisherTenantId, authorizations?.ToList(), managementMode, customerSupport, supportUris, artifacts?.ToList(), createdBy, updatedBy);
        }

        /// <summary> Initializes a new instance of ArmApplicationPackageContact. </summary>
        /// <param name="contactName"> The contact name. </param>
        /// <param name="email"> The contact email. </param>
        /// <param name="phone"> The contact phone number. </param>
        /// <returns> A new <see cref="Models.ArmApplicationPackageContact"/> instance for mocking. </returns>
        public static ArmApplicationPackageContact ArmApplicationPackageContact(string contactName = null, string email = null, string phone = null)
        {
            return new ArmApplicationPackageContact(contactName, email, phone);
        }

        /// <summary> Initializes a new instance of ArmApplicationPackageSupportUris. </summary>
        /// <param name="azurePublicCloudUri"> The public azure support URL. </param>
        /// <param name="azureGovernmentUri"> The government cloud support URL. </param>
        /// <returns> A new <see cref="Models.ArmApplicationPackageSupportUris"/> instance for mocking. </returns>
        public static ArmApplicationPackageSupportUris ArmApplicationPackageSupportUris(Uri azurePublicCloudUri = null, Uri azureGovernmentUri = null)
        {
            return new ArmApplicationPackageSupportUris(azurePublicCloudUri, azureGovernmentUri);
        }

        /// <summary> Initializes a new instance of ArmApplicationArtifact. </summary>
        /// <param name="name"> The managed application artifact name. </param>
        /// <param name="uri"> The managed application artifact blob uri. </param>
        /// <param name="artifactType"> The managed application artifact type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        /// <returns> A new <see cref="Models.ArmApplicationArtifact"/> instance for mocking. </returns>
        public static ArmApplicationArtifact ArmApplicationArtifact(ArmApplicationArtifactName name = default, Uri uri = null, ArmApplicationArtifactType artifactType = default)
        {
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }

            return new ArmApplicationArtifact(name, uri, artifactType);
        }

        /// <summary> Initializes a new instance of ArmApplicationDetails. </summary>
        /// <param name="objectId"> The client Oid. </param>
        /// <param name="puid"> The client Puid. </param>
        /// <param name="applicationId"> The client application Id. </param>
        /// <returns> A new <see cref="Models.ArmApplicationDetails"/> instance for mocking. </returns>
        public static ArmApplicationDetails ArmApplicationDetails(Guid? objectId = null, string puid = null, Guid? applicationId = null)
        {
            return new ArmApplicationDetails(objectId, puid, applicationId);
        }

        /// <summary> Initializes a new instance of ArmApplicationManagedIdentity. </summary>
        /// <param name="principalId"> The principal ID of resource identity. </param>
        /// <param name="tenantId"> The tenant ID of resource. </param>
        /// <param name="identityType"> The identity type. </param>
        /// <param name="userAssignedIdentities"> The list of user identities associated with the resource. The user identity dictionary key references will be resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        /// <returns> A new <see cref="Models.ArmApplicationManagedIdentity"/> instance for mocking. </returns>
        public static ArmApplicationManagedIdentity ArmApplicationManagedIdentity(Guid? principalId = null, Guid? tenantId = null, ArmApplicationManagedIdentityType? identityType = null, IDictionary<string, ArmApplicationUserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, ArmApplicationUserAssignedIdentity>();

            return new ArmApplicationManagedIdentity(principalId, tenantId, identityType, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of ArmApplicationUserAssignedIdentity. </summary>
        /// <param name="principalId"> The principal id of user assigned identity. </param>
        /// <param name="tenantId"> The tenant id of user assigned identity. </param>
        /// <returns> A new <see cref="Models.ArmApplicationUserAssignedIdentity"/> instance for mocking. </returns>
        public static ArmApplicationUserAssignedIdentity ArmApplicationUserAssignedIdentity(Guid? principalId = null, Guid? tenantId = null)
        {
            return new ArmApplicationUserAssignedIdentity(principalId, tenantId);
        }

        /// <summary> Initializes a new instance of ArmApplicationResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <returns> A new <see cref="Models.ArmApplicationResourceData"/> instance for mocking. </returns>
        public static ArmApplicationResourceData ArmApplicationResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string managedBy = null, ArmApplicationSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArmApplicationResourceData(id, name, resourceType, systemData, tags, location, managedBy, sku);
        }

        /// <summary> Initializes a new instance of ArmApplicationPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="plan"> The plan information. </param>
        /// <param name="kind"> The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="managedResourceGroupId"> The managed resource group Id. </param>
        /// <param name="applicationDefinitionId"> The fully qualified path of managed application definition Id. </param>
        /// <param name="parameters"> Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. </param>
        /// <param name="outputs"> Name and value pairs that define the managed application outputs. </param>
        /// <param name="provisioningState"> The managed application provisioning state. </param>
        /// <param name="billingDetailsResourceUsageId"> The managed application billing details. </param>
        /// <param name="jitAccessPolicy"> The managed application Jit access policy. </param>
        /// <param name="publisherTenantId"> The publisher tenant Id. </param>
        /// <param name="authorizations"> The  read-only authorizations property that is retrieved from the application package. </param>
        /// <param name="managementMode"> The managed application management mode. </param>
        /// <param name="customerSupport"> The read-only customer support property that is retrieved from the application package. </param>
        /// <param name="supportUris"> The read-only support URLs property that is retrieved from the application package. </param>
        /// <param name="artifacts"> The collection of managed application artifacts. </param>
        /// <param name="createdBy"> The client entity that created the JIT request. </param>
        /// <param name="updatedBy"> The client entity that last updated the JIT request. </param>
        /// <returns> A new <see cref="Models.ArmApplicationPatch"/> instance for mocking. </returns>
        public static ArmApplicationPatch ArmApplicationPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string managedBy = null, ArmApplicationSku sku = null, ArmPlan plan = null, string kind = null, ArmApplicationManagedIdentity identity = null, ResourceIdentifier managedResourceGroupId = null, ResourceIdentifier applicationDefinitionId = null, BinaryData parameters = null, BinaryData outputs = null, ResourcesProvisioningState? provisioningState = null, string billingDetailsResourceUsageId = null, ArmApplicationJitAccessPolicy jitAccessPolicy = null, Guid? publisherTenantId = null, IEnumerable<ArmApplicationAuthorization> authorizations = null, ArmApplicationManagementMode? managementMode = null, ArmApplicationPackageContact customerSupport = null, ArmApplicationPackageSupportUris supportUris = null, IEnumerable<ArmApplicationArtifact> artifacts = null, ArmApplicationDetails createdBy = null, ArmApplicationDetails updatedBy = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizations ??= new List<ArmApplicationAuthorization>();
            artifacts ??= new List<ArmApplicationArtifact>();

            return new ArmApplicationPatch(id, name, resourceType, systemData, tags, location, managedBy, sku, plan, kind, identity, managedResourceGroupId, applicationDefinitionId, parameters, outputs, provisioningState, billingDetailsResourceUsageId != null ? new ArmApplicationBillingDetails(billingDetailsResourceUsageId) : null, jitAccessPolicy, publisherTenantId, authorizations?.ToList(), managementMode, customerSupport, supportUris, artifacts?.ToList(), createdBy, updatedBy);
        }

        /// <summary> Initializes a new instance of ArmApplicationDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> ID of the resource that manages this resource. </param>
        /// <param name="sku"> The SKU of the resource. </param>
        /// <param name="lockLevel"> The managed application lock level. </param>
        /// <param name="displayName"> The managed application definition display name. </param>
        /// <param name="isEnabled"> A value indicating whether the package is enabled or not. </param>
        /// <param name="authorizations"> The managed application provider authorizations. </param>
        /// <param name="artifacts"> The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition. </param>
        /// <param name="description"> The managed application definition description. </param>
        /// <param name="packageFileUri"> The managed application definition package file Uri. Use this element. </param>
        /// <param name="mainTemplate"> The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string. </param>
        /// <param name="createUiDefinition"> The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string. </param>
        /// <param name="notificationEndpoints"> The managed application notification policy. </param>
        /// <param name="lockingPolicy"> The managed application locking policy. </param>
        /// <param name="deploymentMode"> The managed application deployment policy. </param>
        /// <param name="managementMode"> The managed application management policy that determines publisher's access to the managed resource group. </param>
        /// <param name="policies"> The managed application provider policies. </param>
        /// <returns> A new <see cref="Resources.ArmApplicationDefinitionData"/> instance for mocking. </returns>
        public static ArmApplicationDefinitionData ArmApplicationDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string managedBy = null, ArmApplicationSku sku = null, ArmApplicationLockLevel lockLevel = default, string displayName = null, bool? isEnabled = null, IEnumerable<ArmApplicationAuthorization> authorizations = null, IEnumerable<ArmApplicationDefinitionArtifact> artifacts = null, string description = null, Uri packageFileUri = null, BinaryData mainTemplate = null, BinaryData createUiDefinition = null, IEnumerable<ArmApplicationNotificationEndpoint> notificationEndpoints = null, ArmApplicationPackageLockingPolicy lockingPolicy = null, ArmApplicationDeploymentMode? deploymentMode = null, ArmApplicationManagementMode? managementMode = null, IEnumerable<ArmApplicationPolicy> policies = null)
        {
            tags ??= new Dictionary<string, string>();
            authorizations ??= new List<ArmApplicationAuthorization>();
            artifacts ??= new List<ArmApplicationDefinitionArtifact>();
            notificationEndpoints ??= new List<ArmApplicationNotificationEndpoint>();
            policies ??= new List<ArmApplicationPolicy>();

            return new ArmApplicationDefinitionData(id, name, resourceType, systemData, tags, location, managedBy, sku, lockLevel, displayName, isEnabled, authorizations?.ToList(), artifacts?.ToList(), description, packageFileUri, mainTemplate, createUiDefinition, notificationEndpoints != null ? new ArmApplicationNotificationPolicy(notificationEndpoints?.ToList()) : null, lockingPolicy, deploymentMode.HasValue ? new ArmApplicationDeploymentPolicy(deploymentMode.Value) : null, managementMode != null ? new ArmApplicationManagementPolicy(managementMode) : null, policies?.ToList());
        }

        /// <summary> Initializes a new instance of JitRequestData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="applicationResourceId"> The parent application id. </param>
        /// <param name="publisherTenantId"> The publisher tenant id. </param>
        /// <param name="jitAuthorizationPolicies"> The JIT authorization policies. </param>
        /// <param name="jitSchedulingPolicy"> The JIT request properties. </param>
        /// <param name="provisioningState"> The JIT request provisioning state. </param>
        /// <param name="jitRequestState"> The JIT request state. </param>
        /// <param name="createdBy"> The client entity that created the JIT request. </param>
        /// <param name="updatedBy"> The client entity that last updated the JIT request. </param>
        /// <returns> A new <see cref="Resources.JitRequestData"/> instance for mocking. </returns>
        public static JitRequestData JitRequestData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string applicationResourceId = null, Guid? publisherTenantId = null, IEnumerable<JitAuthorizationPolicies> jitAuthorizationPolicies = null, JitSchedulingPolicy jitSchedulingPolicy = null, ResourcesProvisioningState? provisioningState = null, JitRequestState? jitRequestState = null, ArmApplicationDetails createdBy = null, ArmApplicationDetails updatedBy = null)
        {
            tags ??= new Dictionary<string, string>();
            jitAuthorizationPolicies ??= new List<JitAuthorizationPolicies>();

            return new JitRequestData(id, name, resourceType, systemData, tags, location, applicationResourceId, publisherTenantId, jitAuthorizationPolicies?.ToList(), jitSchedulingPolicy, provisioningState, jitRequestState, createdBy, updatedBy);
        }

        /// <summary> Initializes a new instance of ArmDeploymentScriptData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="kind"> Type of the script. </param>
        /// <returns> A new <see cref="Resources.ArmDeploymentScriptData"/> instance for mocking. </returns>
        public static ArmDeploymentScriptData ArmDeploymentScriptData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ArmDeploymentScriptManagedIdentity identity = null, AzureLocation location = default, IDictionary<string, string> tags = null, string kind = "Unknown")
        {
            tags ??= new Dictionary<string, string>();

            return new ArmDeploymentScriptData(id, name, resourceType, systemData, identity, location, tags, kind);
        }

        /// <summary> Initializes a new instance of ArmDeploymentScriptManagedIdentity. </summary>
        /// <param name="identityType"> Type of the managed identity. </param>
        /// <param name="tenantId"> ID of the Azure Active Directory. </param>
        /// <param name="userAssignedIdentities"> The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentScriptManagedIdentity"/> instance for mocking. </returns>
        public static ArmDeploymentScriptManagedIdentity ArmDeploymentScriptManagedIdentity(ArmDeploymentScriptManagedIdentityType? identityType = null, Guid? tenantId = null, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();

            return new ArmDeploymentScriptManagedIdentity(identityType, tenantId, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of ArmDeploymentScriptPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags to be updated. </param>
        /// <returns> A new <see cref="Models.ArmDeploymentScriptPatch"/> instance for mocking. </returns>
        public static ArmDeploymentScriptPatch ArmDeploymentScriptPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArmDeploymentScriptPatch(id, name, resourceType, systemData, tags);
        }

        /// <summary> Initializes a new instance of ScriptLogData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="log"> Script execution logs in text format. </param>
        /// <returns> A new <see cref="Resources.ScriptLogData"/> instance for mocking. </returns>
        public static ScriptLogData ScriptLogData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string log = null)
        {
            return new ScriptLogData(id, name, resourceType, systemData, log);
        }

        /// <summary> Initializes a new instance of TemplateSpecData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the Template Spec. It cannot be changed after Template Spec creation. It must be one of the supported Azure locations. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="description"> Template Spec description. </param>
        /// <param name="displayName"> Template Spec display name. </param>
        /// <param name="metadata"> The Template Spec metadata. Metadata is an open-ended object and is typically a collection of key-value pairs. </param>
        /// <param name="versions"> High-level information about the versions within this Template Spec. The keys are the version names. Only populated if the $expand query parameter is set to 'versions'. </param>
        /// <returns> A new <see cref="Resources.TemplateSpecData"/> instance for mocking. </returns>
        public static TemplateSpecData TemplateSpecData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation location = default, IDictionary<string, string> tags = null, string description = null, string displayName = null, BinaryData metadata = null, IReadOnlyDictionary<string, TemplateSpecVersionInfo> versions = null)
        {
            tags ??= new Dictionary<string, string>();
            versions ??= new Dictionary<string, TemplateSpecVersionInfo>();

            return new TemplateSpecData(id, name, resourceType, systemData, location, tags, description, displayName, metadata, versions);
        }

        /// <summary> Initializes a new instance of TemplateSpecVersionInfo. </summary>
        /// <param name="description"> Template Spec version description. </param>
        /// <param name="timeCreated"> The timestamp of when the version was created. </param>
        /// <param name="timeModified"> The timestamp of when the version was last modified. </param>
        /// <returns> A new <see cref="Models.TemplateSpecVersionInfo"/> instance for mocking. </returns>
        public static TemplateSpecVersionInfo TemplateSpecVersionInfo(string description = null, DateTimeOffset? timeCreated = null, DateTimeOffset? timeModified = null)
        {
            return new TemplateSpecVersionInfo(description, timeCreated, timeModified);
        }

        /// <summary> Initializes a new instance of TemplateSpecPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.TemplateSpecPatch"/> instance for mocking. </returns>
        public static TemplateSpecPatch TemplateSpecPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TemplateSpecPatch(id, name, resourceType, systemData, tags);
        }

        /// <summary> Initializes a new instance of TemplateSpecVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the Template Spec Version. It must match the location of the parent Template Spec. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="description"> Template Spec version description. </param>
        /// <param name="linkedTemplates"> An array of linked template artifacts. </param>
        /// <param name="metadata"> The version metadata. Metadata is an open-ended object and is typically a collection of key-value pairs. </param>
        /// <param name="mainTemplate"> The main Azure Resource Manager template content. </param>
        /// <param name="uiFormDefinition"> The Azure Resource Manager template UI definition content. </param>
        /// <returns> A new <see cref="Resources.TemplateSpecVersionData"/> instance for mocking. </returns>
        public static TemplateSpecVersionData TemplateSpecVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation location = default, IDictionary<string, string> tags = null, string description = null, IEnumerable<LinkedTemplateArtifact> linkedTemplates = null, BinaryData metadata = null, BinaryData mainTemplate = null, BinaryData uiFormDefinition = null)
        {
            tags ??= new Dictionary<string, string>();
            linkedTemplates ??= new List<LinkedTemplateArtifact>();

            return new TemplateSpecVersionData(id, name, resourceType, systemData, location, tags, description, linkedTemplates?.ToList(), metadata, mainTemplate, uiFormDefinition);
        }

        /// <summary> Initializes a new instance of TemplateSpecVersionPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.TemplateSpecVersionPatch"/> instance for mocking. </returns>
        public static TemplateSpecVersionPatch TemplateSpecVersionPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TemplateSpecVersionPatch(id, name, resourceType, systemData, tags);
        }

        /// <summary> Initializes a new instance of AzurePowerShellScript. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="containerGroupName"> Container settings. </param>
        /// <param name="storageAccountSettings"> Storage Account settings. </param>
        /// <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'. </param>
        /// <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
        /// <param name="status"> Contains the results of script execution. </param>
        /// <param name="outputs"> List of script outputs. </param>
        /// <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
        /// <param name="supportingScriptUris"> Supporting files for the external script. </param>
        /// <param name="scriptContent"> Script body. </param>
        /// <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2'. </param>
        /// <param name="environmentVariables"> The environment variables to pass over to the script. </param>
        /// <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day). </param>
        /// <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D. </param>
        /// <param name="azPowerShellVersion"> Azure PowerShell module version to be used. </param>
        /// <returns> A new <see cref="Models.AzurePowerShellScript"/> instance for mocking. </returns>
        public static AzurePowerShellScript AzurePowerShellScript(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ArmDeploymentScriptManagedIdentity identity = null, AzureLocation location = default, IDictionary<string, string> tags = null, string containerGroupName = null, ScriptStorageConfiguration storageAccountSettings = null, ScriptCleanupOptions? cleanupPreference = null, ScriptProvisioningState? provisioningState = null, ScriptStatus status = null, BinaryData outputs = null, Uri primaryScriptUri = null, IEnumerable<Uri> supportingScriptUris = null, string scriptContent = null, string arguments = null, IEnumerable<ScriptEnvironmentVariable> environmentVariables = null, string forceUpdateTag = null, TimeSpan retentionInterval = default, TimeSpan? timeout = null, string azPowerShellVersion = null)
        {
            tags ??= new Dictionary<string, string>();
            supportingScriptUris ??= new List<Uri>();
            environmentVariables ??= new List<ScriptEnvironmentVariable>();

            return new AzurePowerShellScript(id, name, resourceType, systemData, identity, location, tags, ScriptType.AzurePowerShell, containerGroupName != null ? new ContainerConfiguration(containerGroupName) : null, storageAccountSettings, cleanupPreference, provisioningState, status, outputs, primaryScriptUri, supportingScriptUris?.ToList(), scriptContent, arguments, environmentVariables?.ToList(), forceUpdateTag, retentionInterval, timeout, azPowerShellVersion);
        }

        /// <summary> Initializes a new instance of ScriptStatus. </summary>
        /// <param name="containerInstanceId"> ACI resource Id. </param>
        /// <param name="storageAccountId"> Storage account resource Id. </param>
        /// <param name="startOn"> Start time of the script execution. </param>
        /// <param name="endOn"> End time of the script execution. </param>
        /// <param name="expireOn"> Time the deployment script resource will expire. </param>
        /// <param name="error"> Error that is relayed from the script execution. </param>
        /// <returns> A new <see cref="Models.ScriptStatus"/> instance for mocking. </returns>
        public static ScriptStatus ScriptStatus(string containerInstanceId = null, string storageAccountId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? expireOn = null, ResponseError error = null)
        {
            return new ScriptStatus(containerInstanceId, storageAccountId, startOn, endOn, expireOn, error);
        }

        /// <summary> Initializes a new instance of AzureCliScript. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported. </param>
        /// <param name="location"> The location of the ACI and the storage account for the deployment script. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="containerGroupName"> Container settings. </param>
        /// <param name="storageAccountSettings"> Storage Account settings. </param>
        /// <param name="cleanupPreference"> The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'. </param>
        /// <param name="provisioningState"> State of the script execution. This only appears in the response. </param>
        /// <param name="status"> Contains the results of script execution. </param>
        /// <param name="outputs"> List of script outputs. </param>
        /// <param name="primaryScriptUri"> Uri for the script. This is the entry point for the external script. </param>
        /// <param name="supportingScriptUris"> Supporting files for the external script. </param>
        /// <param name="scriptContent"> Script body. </param>
        /// <param name="arguments"> Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2'. </param>
        /// <param name="environmentVariables"> The environment variables to pass over to the script. </param>
        /// <param name="forceUpdateTag"> Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. </param>
        /// <param name="retentionInterval"> Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day). </param>
        /// <param name="timeout"> Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D. </param>
        /// <param name="azCliVersion"> Azure CLI module version to be used. </param>
        /// <returns> A new <see cref="Models.AzureCliScript"/> instance for mocking. </returns>
        public static AzureCliScript AzureCliScript(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ArmDeploymentScriptManagedIdentity identity = null, AzureLocation location = default, IDictionary<string, string> tags = null, string containerGroupName = null, ScriptStorageConfiguration storageAccountSettings = null, ScriptCleanupOptions? cleanupPreference = null, ScriptProvisioningState? provisioningState = null, ScriptStatus status = null, BinaryData outputs = null, Uri primaryScriptUri = null, IEnumerable<Uri> supportingScriptUris = null, string scriptContent = null, string arguments = null, IEnumerable<ScriptEnvironmentVariable> environmentVariables = null, string forceUpdateTag = null, TimeSpan retentionInterval = default, TimeSpan? timeout = null, string azCliVersion = null)
        {
            tags ??= new Dictionary<string, string>();
            supportingScriptUris ??= new List<Uri>();
            environmentVariables ??= new List<ScriptEnvironmentVariable>();

            return new AzureCliScript(id, name, resourceType, systemData, identity, location, tags, ScriptType.AzureCLI, containerGroupName != null ? new ContainerConfiguration(containerGroupName) : null, storageAccountSettings, cleanupPreference, provisioningState, status, outputs, primaryScriptUri, supportingScriptUris?.ToList(), scriptContent, arguments, environmentVariables?.ToList(), forceUpdateTag, retentionInterval, timeout, azCliVersion);
        }
    }
}
