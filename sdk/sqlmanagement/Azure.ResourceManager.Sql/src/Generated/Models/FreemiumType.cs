// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Weather or not Managed Instance is freemium. </summary>
    public readonly partial struct FreemiumType : IEquatable<FreemiumType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FreemiumType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FreemiumType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegularValue = "Regular";
        private const string FreemiumValue = "Freemium";

        /// <summary> Regular. </summary>
        public static FreemiumType Regular { get; } = new FreemiumType(RegularValue);
        /// <summary> Freemium. </summary>
        public static FreemiumType Freemium { get; } = new FreemiumType(FreemiumValue);
        /// <summary> Determines if two <see cref="FreemiumType"/> values are the same. </summary>
        public static bool operator ==(FreemiumType left, FreemiumType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FreemiumType"/> values are not the same. </summary>
        public static bool operator !=(FreemiumType left, FreemiumType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FreemiumType"/>. </summary>
        public static implicit operator FreemiumType(string value) => new FreemiumType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FreemiumType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FreemiumType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
