// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace azure.ApiCenter
{
    /// <summary> API resource model. </summary>
    public partial class Api
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Api"/>. </summary>
        /// <param name="name"> Api identifier. </param>
        /// <param name="title"> The name of the API. </param>
        /// <param name="kind"> Kind of API. For example, REST or GraphQL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="title"/> is null. </exception>
        internal Api(string name, string title, ApiKind kind)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(title, nameof(title));

            Name = name;
            Title = title;
            Kind = kind;
            ExternalDocumentation = new ChangeTrackingList<ExternalDocumentation>();
            Contacts = new ChangeTrackingList<Contact>();
        }

        /// <summary> Initializes a new instance of <see cref="Api"/>. </summary>
        /// <param name="name"> Api identifier. </param>
        /// <param name="title"> The name of the API. </param>
        /// <param name="summary"> Short description of the API. </param>
        /// <param name="description"> The description of the API. </param>
        /// <param name="kind"> Kind of API. For example, REST or GraphQL. </param>
        /// <param name="lifecycleStage"> Current lifecycle stage of the API. </param>
        /// <param name="termsOfService"> Terms of service for the API. </param>
        /// <param name="license"> The license information for the API. </param>
        /// <param name="externalDocumentation"> External documentation. </param>
        /// <param name="contacts"> Points of contact for the API. </param>
        /// <param name="customProperties"> The custom metadata defined for API entities. </param>
        /// <param name="lastUpdated"> Last updated date and time. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Api(string name, string title, string summary, string description, ApiKind kind, LifecycleStage? lifecycleStage, TermsOfService termsOfService, License license, IReadOnlyList<ExternalDocumentation> externalDocumentation, IReadOnlyList<Contact> contacts, ApiCustomProperties customProperties, DateTimeOffset? lastUpdated, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Title = title;
            Summary = summary;
            Description = description;
            Kind = kind;
            LifecycleStage = lifecycleStage;
            TermsOfService = termsOfService;
            License = license;
            ExternalDocumentation = externalDocumentation;
            Contacts = contacts;
            CustomProperties = customProperties;
            LastUpdated = lastUpdated;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Api"/> for deserialization. </summary>
        internal Api()
        {
        }

        /// <summary> Api identifier. </summary>
        public string Name { get; }
        /// <summary> The name of the API. </summary>
        public string Title { get; }
        /// <summary> Short description of the API. </summary>
        public string Summary { get; }
        /// <summary> The description of the API. </summary>
        public string Description { get; }
        /// <summary> Kind of API. For example, REST or GraphQL. </summary>
        public ApiKind Kind { get; }
        /// <summary> Current lifecycle stage of the API. </summary>
        public LifecycleStage? LifecycleStage { get; }
        /// <summary> Terms of service for the API. </summary>
        public TermsOfService TermsOfService { get; }
        /// <summary> The license information for the API. </summary>
        public License License { get; }
        /// <summary> External documentation. </summary>
        public IReadOnlyList<ExternalDocumentation> ExternalDocumentation { get; }
        /// <summary> Points of contact for the API. </summary>
        public IReadOnlyList<Contact> Contacts { get; }
        /// <summary> The custom metadata defined for API entities. </summary>
        public ApiCustomProperties CustomProperties { get; }
        /// <summary> Last updated date and time. </summary>
        public DateTimeOffset? LastUpdated { get; }
    }
}
