// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace azure.ApiCenter
{
    /// <summary> Environment Server. </summary>
    public partial class EnvironmentServer
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EnvironmentServer"/>. </summary>
        /// <param name="type"> Type of the server that represents the environment. </param>
        /// <param name="managementPortalUris"> URIs of the server's management portal. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> or <paramref name="managementPortalUris"/> is null. </exception>
        internal EnvironmentServer(string type, IEnumerable<Uri> managementPortalUris)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(managementPortalUris, nameof(managementPortalUris));

            Type = type;
            ManagementPortalUris = managementPortalUris.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentServer"/>. </summary>
        /// <param name="type"> Type of the server that represents the environment. </param>
        /// <param name="managementPortalUris"> URIs of the server's management portal. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EnvironmentServer(string type, IReadOnlyList<Uri> managementPortalUris, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            ManagementPortalUris = managementPortalUris;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentServer"/> for deserialization. </summary>
        internal EnvironmentServer()
        {
        }

        /// <summary> Type of the server that represents the environment. </summary>
        public string Type { get; }
        /// <summary> URIs of the server's management portal. </summary>
        public IReadOnlyList<Uri> ManagementPortalUris { get; }
    }
}
