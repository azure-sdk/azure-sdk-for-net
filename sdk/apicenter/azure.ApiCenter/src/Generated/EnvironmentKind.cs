// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace azure.ApiCenter
{
    /// <summary> Environment kind. </summary>
    public readonly partial struct EnvironmentKind : IEquatable<EnvironmentKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnvironmentKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnvironmentKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DevelopmentValue = "development";
        private const string TestingValue = "testing";
        private const string StagingValue = "staging";
        private const string ProductionValue = "production";

        /// <summary> Environment is in the development stage. </summary>
        public static EnvironmentKind Development { get; } = new EnvironmentKind(DevelopmentValue);
        /// <summary> Environment is in the testing stage. </summary>
        public static EnvironmentKind Testing { get; } = new EnvironmentKind(TestingValue);
        /// <summary> Environment is in the staging stage. </summary>
        public static EnvironmentKind Staging { get; } = new EnvironmentKind(StagingValue);
        /// <summary> Environment is in the production stage. </summary>
        public static EnvironmentKind Production { get; } = new EnvironmentKind(ProductionValue);
        /// <summary> Determines if two <see cref="EnvironmentKind"/> values are the same. </summary>
        public static bool operator ==(EnvironmentKind left, EnvironmentKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnvironmentKind"/> values are not the same. </summary>
        public static bool operator !=(EnvironmentKind left, EnvironmentKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnvironmentKind"/>. </summary>
        public static implicit operator EnvironmentKind(string value) => new EnvironmentKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnvironmentKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnvironmentKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
