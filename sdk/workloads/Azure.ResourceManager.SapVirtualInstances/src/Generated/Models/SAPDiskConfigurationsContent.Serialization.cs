// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SapVirtualInstances.Models
{
    public partial class SAPDiskConfigurationsContent : IUtf8JsonSerializable, IJsonModel<SAPDiskConfigurationsContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SAPDiskConfigurationsContent>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SAPDiskConfigurationsContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SAPDiskConfigurationsContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SAPDiskConfigurationsContent)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("appLocation"u8);
            writer.WriteStringValue(AppLocation);
            writer.WritePropertyName("environment"u8);
            writer.WriteStringValue(Environment.ToString());
            writer.WritePropertyName("sapProduct"u8);
            writer.WriteStringValue(SapProduct.ToString());
            writer.WritePropertyName("databaseType"u8);
            writer.WriteStringValue(DatabaseType.ToString());
            writer.WritePropertyName("deploymentType"u8);
            writer.WriteStringValue(DeploymentType.ToString());
            writer.WritePropertyName("dbVmSku"u8);
            writer.WriteStringValue(DbVmSku);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SAPDiskConfigurationsContent IJsonModel<SAPDiskConfigurationsContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SAPDiskConfigurationsContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SAPDiskConfigurationsContent)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSAPDiskConfigurationsContent(document.RootElement, options);
        }

        internal static SAPDiskConfigurationsContent DeserializeSAPDiskConfigurationsContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string appLocation = default;
            SAPEnvironmentType environment = default;
            SAPProductType sapProduct = default;
            SAPDatabaseType databaseType = default;
            SAPDeploymentType deploymentType = default;
            string dbVmSku = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("appLocation"u8))
                {
                    appLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("environment"u8))
                {
                    environment = new SAPEnvironmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sapProduct"u8))
                {
                    sapProduct = new SAPProductType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("databaseType"u8))
                {
                    databaseType = new SAPDatabaseType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deploymentType"u8))
                {
                    deploymentType = new SAPDeploymentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dbVmSku"u8))
                {
                    dbVmSku = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SAPDiskConfigurationsContent(
                appLocation,
                environment,
                sapProduct,
                databaseType,
                deploymentType,
                dbVmSku,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SAPDiskConfigurationsContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SAPDiskConfigurationsContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SAPDiskConfigurationsContent)} does not support writing '{options.Format}' format.");
            }
        }

        SAPDiskConfigurationsContent IPersistableModel<SAPDiskConfigurationsContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SAPDiskConfigurationsContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSAPDiskConfigurationsContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SAPDiskConfigurationsContent)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SAPDiskConfigurationsContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
