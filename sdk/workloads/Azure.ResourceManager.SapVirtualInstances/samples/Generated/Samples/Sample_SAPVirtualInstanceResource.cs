// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SapVirtualInstances.Models;

namespace Azure.ResourceManager.SapVirtualInstances.Samples
{
    public partial class Sample_SAPVirtualInstanceResource
    {
        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SAPVirtualInstancesGet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            SAPVirtualInstanceResource result = await sapVirtualInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances Get With ACSS Installation Blocked
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SAPVirtualInstancesGetWithACSSInstallationBlocked()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_GetAcssInstallationBlocked.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            SAPVirtualInstanceResource result = await sapVirtualInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SAPVirtualInstancesUpdate()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Update.json
            // this example is just showing the usage of "SAPVirtualInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            SAPVirtualInstancePatch patch = new SAPVirtualInstancePatch()
            {
                Tags =
{
["key1"] = "svi1",
},
                Identity = new SapVirtualInstanceIdentity(SapVirtualInstanceIdentityType.None),
            };
            ArmOperation<SAPVirtualInstanceResource> lro = await sapVirtualInstance.UpdateAsync(WaitUntil.Completed, patch);
            SAPVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_TrustedAccessEnable_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SAPVirtualInstancesTrustedAccessEnableUpdate()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_UpdateTrustedAccess.json
            // this example is just showing the usage of "SAPVirtualInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            SAPVirtualInstancePatch patch = new SAPVirtualInstancePatch()
            {
                Tags =
{
["key1"] = "svi1",
},
                Identity = new SapVirtualInstanceIdentity(SapVirtualInstanceIdentityType.None),
                UpdateSAPVirtualInstanceManagedResourcesNetworkAccessType = ManagedResourcesNetworkAccessType.Private,
            };
            ArmOperation<SAPVirtualInstanceResource> lro = await sapVirtualInstance.UpdateAsync(WaitUntil.Completed, patch);
            SAPVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_SAPVirtualInstancesDelete()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Delete.json
            // this example is just showing the usage of "SAPVirtualInstance_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            await sapVirtualInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // SAPVirtualInstances_ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSAPVirtualInstances_SAPVirtualInstancesListBySubscription()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_ListBySubscription.json
            // this example is just showing the usage of "SAPVirtualInstance_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (SAPVirtualInstanceResource item in subscriptionResource.GetSAPVirtualInstancesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SAPVirtualInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // SAPVirtualInstances_Start
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_SAPVirtualInstancesStart()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Start.json
            // this example is just showing the usage of "SAPVirtualInstances_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StartContent content = new StartContent()
            {
                StartVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StartAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAPVirtualInstances_Start_WithInfraOperations
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_SAPVirtualInstancesStartWithInfraOperations()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_StartWithInfraOperations.json
            // this example is just showing the usage of "SAPVirtualInstances_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StartContent content = new StartContent()
            {
                StartVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StartAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Soft Stop of SapVirtualInstances_Stop
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_SoftStopOfSapVirtualInstancesStop()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_SoftStop.json
            // this example is just showing the usage of "SAPVirtualInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                SoftStopTimeoutSeconds = 300L,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Soft Stop the virtual machine(s) and the SAP system on it.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_SoftStopTheVirtualMachineSAndTheSAPSystemOnIt()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_SoftStopVMAndSystem.json
            // this example is just showing the usage of "SAPVirtualInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                SoftStopTimeoutSeconds = 300L,
                DeallocateVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAPVirtualInstances_Stop
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_SAPVirtualInstancesStop()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Stop.json
            // this example is just showing the usage of "SAPVirtualInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                SoftStopTimeoutSeconds = 0L,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Stop the virtual machine(s) and the SAP system on it.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_StopTheVirtualMachineSAndTheSAPSystemOnIt()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_StopVMAndSystem.json
            // this example is just showing the usage of "SAPVirtualInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPVirtualInstanceResource created on azure
            // for more information of creating SAPVirtualInstanceResource, please refer to the document of SAPVirtualInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            ResourceIdentifier sapVirtualInstanceResourceId = SAPVirtualInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName);
            SAPVirtualInstanceResource sapVirtualInstance = client.GetSAPVirtualInstanceResource(sapVirtualInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                SoftStopTimeoutSeconds = 0L,
                DeallocateVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapVirtualInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP sizing recommendations for non HA distributed system.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSizingRecommendationsSAPVirtualInstance_SAPSizingRecommendationsForNonHADistributedSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSizingRecommendations_S4HANA_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSizingRecommendations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSizingRecommendationContent content = new SAPSizingRecommendationContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, 20000L, 1024L, SAPDatabaseType.HANA)
            {
                DbScaleMethod = SAPDatabaseScaleMethod.ScaleUp,
            };
            SAPSizingRecommendationResult result = await subscriptionResource.GetSizingRecommendationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP sizing recommendations for HA with availability set.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSizingRecommendationsSAPVirtualInstance_SAPSizingRecommendationsForHAWithAvailabilitySet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSizingRecommendations_S4HANA_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSizingRecommendations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSizingRecommendationContent content = new SAPSizingRecommendationContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, 75000L, 1024L, SAPDatabaseType.HANA)
            {
                DbScaleMethod = SAPDatabaseScaleMethod.ScaleUp,
                HighAvailabilityType = SAPHighAvailabilityType.AvailabilitySet,
            };
            SAPSizingRecommendationResult result = await subscriptionResource.GetSizingRecommendationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP sizing recommendations for HA with availability zone.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSizingRecommendationsSAPVirtualInstance_SAPSizingRecommendationsForHAWithAvailabilityZone()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSizingRecommendations_S4HANA_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSizingRecommendations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSizingRecommendationContent content = new SAPSizingRecommendationContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, 75000L, 1024L, SAPDatabaseType.HANA)
            {
                DbScaleMethod = SAPDatabaseScaleMethod.ScaleUp,
                HighAvailabilityType = SAPHighAvailabilityType.AvailabilityZone,
            };
            SAPSizingRecommendationResult result = await subscriptionResource.GetSizingRecommendationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP sizing recommendations for single server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSizingRecommendationsSAPVirtualInstance_SAPSizingRecommendationsForSingleServer()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSizingRecommendations_S4HANA_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSizingRecommendations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSizingRecommendationContent content = new SAPSizingRecommendationContent("eastus", SAPEnvironmentType.NonProd, SAPProductType.S4HANA, SAPDeploymentType.SingleServer, 60000L, 2000L, SAPDatabaseType.HANA)
            {
                DbScaleMethod = SAPDatabaseScaleMethod.ScaleUp,
            };
            SAPSizingRecommendationResult result = await subscriptionResource.GetSizingRecommendationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP supported SKUs for distributed Non HA environment.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSapSupportedSkuSAPVirtualInstance_SAPSupportedSKUsForDistributedNonHAEnvironment()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSapSupportedSku_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSapSupportedSku" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSupportedSkusContent content = new SAPSupportedSkusContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, SAPDatabaseType.HANA);
            SAPSupportedResourceSkusResult result = await subscriptionResource.GetSapSupportedSkuSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP supported SKUs for distributed HA environment with Availability set.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSapSupportedSkuSAPVirtualInstance_SAPSupportedSKUsForDistributedHAEnvironmentWithAvailabilitySet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSapSupportedSku_DistributedHA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSapSupportedSku" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSupportedSkusContent content = new SAPSupportedSkusContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, SAPDatabaseType.HANA)
            {
                HighAvailabilityType = SAPHighAvailabilityType.AvailabilitySet,
            };
            SAPSupportedResourceSkusResult result = await subscriptionResource.GetSapSupportedSkuSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP supported Skus for HA with availability zone.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSapSupportedSkuSAPVirtualInstance_SAPSupportedSkusForHAWithAvailabilityZone()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSapSupportedSku_DistributedHA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSapSupportedSku" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSupportedSkusContent content = new SAPSupportedSkusContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDeploymentType.ThreeTier, SAPDatabaseType.HANA)
            {
                HighAvailabilityType = SAPHighAvailabilityType.AvailabilityZone,
            };
            SAPSupportedResourceSkusResult result = await subscriptionResource.GetSapSupportedSkuSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP supported SKUs for single server.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSapSupportedSkuSAPVirtualInstance_SAPSupportedSKUsForSingleServer()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeSapSupportedSku_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_GetSapSupportedSku" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPSupportedSkusContent content = new SAPSupportedSkusContent("eastus", SAPEnvironmentType.NonProd, SAPProductType.S4HANA, SAPDeploymentType.SingleServer, SAPDatabaseType.HANA);
            SAPSupportedResourceSkusResult result = await subscriptionResource.GetSapSupportedSkuSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP disk configurations for input environment NonProd.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDiskConfigurationsSAPVirtualInstance_SAPDiskConfigurationsForInputEnvironmentNonProd()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeDiskConfigurations_NonProd.json
            // this example is just showing the usage of "SAPVirtualInstances_GetDiskConfigurations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPDiskConfigurationsContent content = new SAPDiskConfigurationsContent("eastus", SAPEnvironmentType.NonProd, SAPProductType.S4HANA, SAPDatabaseType.HANA, SAPDeploymentType.ThreeTier, "Standard_M32ts");
            SAPDiskConfigurationsResult result = await subscriptionResource.GetDiskConfigurationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP disk configurations for input environment Prod.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDiskConfigurationsSAPVirtualInstance_SAPDiskConfigurationsForInputEnvironmentProd()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeDiskConfigurations_Prod.json
            // this example is just showing the usage of "SAPVirtualInstances_GetDiskConfigurations" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("centralus");
            SAPDiskConfigurationsContent content = new SAPDiskConfigurationsContent("eastus", SAPEnvironmentType.Prod, SAPProductType.S4HANA, SAPDatabaseType.HANA, SAPDeploymentType.ThreeTier, "Standard_M32ts");
            SAPDiskConfigurationsResult result = await subscriptionResource.GetDiskConfigurationsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP Availability zone details in east us
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAvailabilityZoneDetailsSAPVirtualInstance_SAPAvailabilityZoneDetailsInEastUs()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeAvailabilityZoneDetails_eastus.json
            // this example is just showing the usage of "SAPVirtualInstances_GetAvailabilityZoneDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("eastus");
            SAPAvailabilityZoneDetailsContent content = new SAPAvailabilityZoneDetailsContent("eastus", SAPProductType.S4HANA, SAPDatabaseType.HANA);
            SAPAvailabilityZoneDetailsResult result = await subscriptionResource.GetAvailabilityZoneDetailsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAP Availability zone details in north europe
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAvailabilityZoneDetailsSAPVirtualInstance_SAPAvailabilityZoneDetailsInNorthEurope()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_InvokeAvailabilityZoneDetails_northeurope.json
            // this example is just showing the usage of "SAPVirtualInstances_GetAvailabilityZoneDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("northeurope");
            SAPAvailabilityZoneDetailsContent content = new SAPAvailabilityZoneDetailsContent("northeurope", SAPProductType.S4HANA, SAPDatabaseType.HANA);
            SAPAvailabilityZoneDetailsResult result = await subscriptionResource.GetAvailabilityZoneDetailsSAPVirtualInstanceAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
