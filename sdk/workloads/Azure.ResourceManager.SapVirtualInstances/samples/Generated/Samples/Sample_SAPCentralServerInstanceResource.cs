// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.SapVirtualInstances.Models;

namespace Azure.ResourceManager.SapVirtualInstances.Samples
{
    public partial class Sample_SAPCentralServerInstanceResource
    {
        // SapCentralServerInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SapCentralServerInstancesGet()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_Get.json
            // this example is just showing the usage of "SAPCentralServerInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            SAPCentralServerInstanceResource result = await sapCentralServerInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPCentralServerInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SapCentralServerInstances_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_SapCentralServerInstancesUpdate()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_Update.json
            // this example is just showing the usage of "SAPCentralServerInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            SAPCentralServerInstancePatch patch = new SAPCentralServerInstancePatch()
            {
                Tags =
{
["tag1"] = "value1",
},
            };
            SAPCentralServerInstanceResource result = await sapCentralServerInstance.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SAPCentralServerInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SapCentralServerInstances_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_SapCentralServerInstancesDelete()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_Delete.json
            // this example is just showing the usage of "SAPCentralServerInstance_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            await sapCentralServerInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Start the SAP Central Services Instance
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_StartTheSAPCentralServicesInstance()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_StartInstance.json
            // this example is just showing the usage of "SAPCentralServerInstances_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            StartContent content = new StartContent();
            ArmOperation<OperationStatusResult> lro = await sapCentralServerInstance.StartAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Start the virtual machine(s) and the SAP central services instance on it.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_StartTheVirtualMachineSAndTheSAPCentralServicesInstanceOnIt()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_StartInstanceVM.json
            // this example is just showing the usage of "SAPCentralServerInstances_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            StartContent content = new StartContent()
            {
                StartVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapCentralServerInstance.StartAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Stop the SAP Central Services Instance.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_StopTheSAPCentralServicesInstance()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_StopInstance.json
            // this example is just showing the usage of "SAPCentralServerInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                SoftStopTimeoutSeconds = 1200L,
            };
            ArmOperation<OperationStatusResult> lro = await sapCentralServerInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Stop the SAP Central Services Instance and its underlying Virtual Machine(s)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_StopTheSAPCentralServicesInstanceAndItsUnderlyingVirtualMachineS()
        {
            // Generated from example definition: 2024-09-01/SapCentralInstances_StopInstanceVM.json
            // this example is just showing the usage of "SAPCentralServerInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SAPCentralServerInstanceResource created on azure
            // for more information of creating SAPCentralServerInstanceResource, please refer to the document of SAPCentralServerInstanceResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string sapVirtualInstanceName = "X00";
            string centralInstanceName = "centralServer";
            ResourceIdentifier sapCentralServerInstanceResourceId = SAPCentralServerInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, sapVirtualInstanceName, centralInstanceName);
            SAPCentralServerInstanceResource sapCentralServerInstance = client.GetSAPCentralServerInstanceResource(sapCentralServerInstanceResourceId);

            // invoke the operation
            StopContent content = new StopContent()
            {
                DeallocateVm = true,
            };
            ArmOperation<OperationStatusResult> lro = await sapCentralServerInstance.StopAsync(WaitUntil.Completed, content: content);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
