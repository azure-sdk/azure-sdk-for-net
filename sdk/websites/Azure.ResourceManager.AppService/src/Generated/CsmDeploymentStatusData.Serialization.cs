// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.AppService.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppService
{
    public partial class CsmDeploymentStatusData : IUtf8JsonSerializable, IJsonModel<CsmDeploymentStatusData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CsmDeploymentStatusData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<CsmDeploymentStatusData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CsmDeploymentStatusData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CsmDeploymentStatusData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Kind != null)
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (DeploymentId != null)
            {
                writer.WritePropertyName("deploymentId"u8);
                writer.WriteStringValue(DeploymentId);
            }
            if (Status.HasValue)
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (NumberOfInstancesInProgress.HasValue)
            {
                writer.WritePropertyName("numberOfInstancesInProgress"u8);
                writer.WriteNumberValue(NumberOfInstancesInProgress.Value);
            }
            if (NumberOfInstancesSuccessful.HasValue)
            {
                writer.WritePropertyName("numberOfInstancesSuccessful"u8);
                writer.WriteNumberValue(NumberOfInstancesSuccessful.Value);
            }
            if (NumberOfInstancesFailed.HasValue)
            {
                writer.WritePropertyName("numberOfInstancesFailed"u8);
                writer.WriteNumberValue(NumberOfInstancesFailed.Value);
            }
            if (!(FailedInstancesLogs is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("failedInstancesLogs"u8);
                writer.WriteStartArray();
                foreach (var item in FailedInstancesLogs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Errors is ChangeTrackingList<ErrorEntity> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CsmDeploymentStatusData IJsonModel<CsmDeploymentStatusData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CsmDeploymentStatusData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CsmDeploymentStatusData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCsmDeploymentStatusData(document.RootElement, options);
        }

        internal static CsmDeploymentStatusData DeserializeCsmDeploymentStatusData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> kind = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> deploymentId = default;
            Optional<DeploymentBuildStatus> status = default;
            Optional<int> numberOfInstancesInProgress = default;
            Optional<int> numberOfInstancesSuccessful = default;
            Optional<int> numberOfInstancesFailed = default;
            IList<string> failedInstancesLogs = default;
            IList<ErrorEntity> errors = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("deploymentId"u8))
                        {
                            deploymentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new DeploymentBuildStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("numberOfInstancesInProgress"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfInstancesInProgress = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfInstancesSuccessful"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfInstancesSuccessful = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfInstancesFailed"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfInstancesFailed = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("failedInstancesLogs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            failedInstancesLogs = array;
                            continue;
                        }
                        if (property0.NameEquals("errors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ErrorEntity> array = new List<ErrorEntity>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ErrorEntity.DeserializeErrorEntity(item, options));
                            }
                            errors = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new CsmDeploymentStatusData(
                id,
                name,
                type,
                systemData.Value,
                deploymentId.Value,
                Optional.ToNullable(status),
                Optional.ToNullable(numberOfInstancesInProgress),
                Optional.ToNullable(numberOfInstancesSuccessful),
                Optional.ToNullable(numberOfInstancesFailed),
                failedInstancesLogs ?? new ChangeTrackingList<string>(),
                errors ?? new ChangeTrackingList<ErrorEntity>(),
                kind.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CsmDeploymentStatusData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CsmDeploymentStatusData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CsmDeploymentStatusData)} does not support '{options.Format}' format.");
            }
        }

        CsmDeploymentStatusData IPersistableModel<CsmDeploymentStatusData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CsmDeploymentStatusData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCsmDeploymentStatusData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CsmDeploymentStatusData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<CsmDeploymentStatusData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
