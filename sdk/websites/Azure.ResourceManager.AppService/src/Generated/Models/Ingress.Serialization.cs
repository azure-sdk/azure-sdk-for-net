// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class Ingress : IUtf8JsonSerializable, IJsonModel<Ingress>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Ingress>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<Ingress>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Ingress>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Ingress)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Fqdn != null)
            {
                writer.WritePropertyName("fqdn"u8);
                writer.WriteStringValue(Fqdn);
            }
            if (External.HasValue)
            {
                writer.WritePropertyName("external"u8);
                writer.WriteBooleanValue(External.Value);
            }
            if (TargetPort.HasValue)
            {
                writer.WritePropertyName("targetPort"u8);
                writer.WriteNumberValue(TargetPort.Value);
            }
            if (Transport.HasValue)
            {
                writer.WritePropertyName("transport"u8);
                writer.WriteStringValue(Transport.Value.ToString());
            }
            if (!(Traffic is ChangeTrackingList<TrafficWeight> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("traffic"u8);
                writer.WriteStartArray();
                foreach (var item in Traffic)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (AllowInsecure.HasValue)
            {
                writer.WritePropertyName("allowInsecure"u8);
                writer.WriteBooleanValue(AllowInsecure.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        Ingress IJsonModel<Ingress>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Ingress>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Ingress)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeIngress(document.RootElement, options);
        }

        internal static Ingress DeserializeIngress(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> fqdn = default;
            Optional<bool> external = default;
            Optional<int> targetPort = default;
            Optional<IngressTransportMethod> transport = default;
            IList<TrafficWeight> traffic = default;
            Optional<bool> allowInsecure = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fqdn"u8))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("external"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    external = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("transport"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    transport = new IngressTransportMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("traffic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TrafficWeight> array = new List<TrafficWeight>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TrafficWeight.DeserializeTrafficWeight(item, options));
                    }
                    traffic = array;
                    continue;
                }
                if (property.NameEquals("allowInsecure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowInsecure = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new Ingress(
                fqdn.Value,
                Optional.ToNullable(external),
                Optional.ToNullable(targetPort),
                Optional.ToNullable(transport),
                traffic ?? new ChangeTrackingList<TrafficWeight>(),
                Optional.ToNullable(allowInsecure),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<Ingress>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Ingress>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Ingress)} does not support '{options.Format}' format.");
            }
        }

        Ingress IPersistableModel<Ingress>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Ingress>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeIngress(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Ingress)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<Ingress>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
