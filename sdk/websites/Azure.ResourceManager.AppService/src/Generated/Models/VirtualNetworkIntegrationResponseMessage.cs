// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Description of the result. </summary>
    public readonly partial struct VirtualNetworkIntegrationResponseMessage : IEquatable<VirtualNetworkIntegrationResponseMessage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualNetworkIntegrationResponseMessage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualNetworkIntegrationResponseMessage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OperationIsNotSupportedAtTheMomentValue = "Operation is not supported at the moment.";
        private const string PurgedUnusedVirtualNetworkIntegrationValue = "Purged unused virtual network integration.";
        private const string ErrorConflictVirtualNetworkIntegrationIsStillInUseValue = "<ERROR> Conflict: Virtual network integration is still in use.";

        /// <summary> Operation is not supported at the moment. </summary>
        public static VirtualNetworkIntegrationResponseMessage OperationIsNotSupportedAtTheMoment { get; } = new VirtualNetworkIntegrationResponseMessage(OperationIsNotSupportedAtTheMomentValue);
        /// <summary> Purged unused virtual network integration. </summary>
        public static VirtualNetworkIntegrationResponseMessage PurgedUnusedVirtualNetworkIntegration { get; } = new VirtualNetworkIntegrationResponseMessage(PurgedUnusedVirtualNetworkIntegrationValue);
        /// <summary> &lt;ERROR&gt; Conflict: Virtual network integration is still in use. </summary>
        public static VirtualNetworkIntegrationResponseMessage ErrorConflictVirtualNetworkIntegrationIsStillInUse { get; } = new VirtualNetworkIntegrationResponseMessage(ErrorConflictVirtualNetworkIntegrationIsStillInUseValue);
        /// <summary> Determines if two <see cref="VirtualNetworkIntegrationResponseMessage"/> values are the same. </summary>
        public static bool operator ==(VirtualNetworkIntegrationResponseMessage left, VirtualNetworkIntegrationResponseMessage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualNetworkIntegrationResponseMessage"/> values are not the same. </summary>
        public static bool operator !=(VirtualNetworkIntegrationResponseMessage left, VirtualNetworkIntegrationResponseMessage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VirtualNetworkIntegrationResponseMessage"/>. </summary>
        public static implicit operator VirtualNetworkIntegrationResponseMessage(string value) => new VirtualNetworkIntegrationResponseMessage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualNetworkIntegrationResponseMessage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualNetworkIntegrationResponseMessage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
