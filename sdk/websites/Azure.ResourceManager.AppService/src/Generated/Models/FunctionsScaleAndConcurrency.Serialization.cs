// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    public partial class FunctionsScaleAndConcurrency : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AlwaysReady))
            {
                writer.WritePropertyName("alwaysReady"u8);
                writer.WriteStartArray();
                foreach (var item in AlwaysReady)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MaximumInstanceCount))
            {
                writer.WritePropertyName("maximumInstanceCount"u8);
                writer.WriteNumberValue(MaximumInstanceCount.Value);
            }
            if (Optional.IsDefined(InstanceMemoryMB))
            {
                writer.WritePropertyName("instanceMemoryMB"u8);
                writer.WriteNumberValue(InstanceMemoryMB.Value);
            }
            if (Optional.IsDefined(Triggers))
            {
                writer.WritePropertyName("triggers"u8);
                writer.WriteObjectValue(Triggers);
            }
            writer.WriteEndObject();
        }

        internal static FunctionsScaleAndConcurrency DeserializeFunctionsScaleAndConcurrency(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<FunctionsAlwaysReadyConfig>> alwaysReady = default;
            Optional<float> maximumInstanceCount = default;
            Optional<float> instanceMemoryMB = default;
            Optional<FunctionsScaleAndConcurrencyTriggers> triggers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alwaysReady"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FunctionsAlwaysReadyConfig> array = new List<FunctionsAlwaysReadyConfig>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FunctionsAlwaysReadyConfig.DeserializeFunctionsAlwaysReadyConfig(item));
                    }
                    alwaysReady = array;
                    continue;
                }
                if (property.NameEquals("maximumInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumInstanceCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("instanceMemoryMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceMemoryMB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("triggers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggers = FunctionsScaleAndConcurrencyTriggers.DeserializeFunctionsScaleAndConcurrencyTriggers(property.Value);
                    continue;
                }
            }
            return new FunctionsScaleAndConcurrency(Optional.ToList(alwaysReady), Optional.ToNullable(maximumInstanceCount), Optional.ToNullable(instanceMemoryMB), triggers.Value);
        }
    }
}
