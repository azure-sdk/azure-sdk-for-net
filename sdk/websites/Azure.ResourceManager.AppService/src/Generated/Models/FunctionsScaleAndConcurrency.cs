// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppService.Models
{
    /// <summary> Scale and concurrency settings for an Azure Functions app. </summary>
    public partial class FunctionsScaleAndConcurrency
    {
        /// <summary> Initializes a new instance of <see cref="FunctionsScaleAndConcurrency"/>. </summary>
        public FunctionsScaleAndConcurrency()
        {
            AlwaysReady = new ChangeTrackingList<FunctionsAlwaysReadyConfig>();
        }

        /// <summary> Initializes a new instance of <see cref="FunctionsScaleAndConcurrency"/>. </summary>
        /// <param name="alwaysReady"> 'Always Ready' configuration for an Azure Function app. </param>
        /// <param name="maximumInstanceCount"> The maximum number of VM instances for the Azure Functions app. </param>
        /// <param name="instanceMemoryMB"> Set the amount of memory allocated to each instance of the function app in MiB; CPU and network bandwidth are allocated proportionally. </param>
        /// <param name="triggers"> Scale and concurrency settings for Azure Functions triggers. </param>
        internal FunctionsScaleAndConcurrency(IList<FunctionsAlwaysReadyConfig> alwaysReady, float? maximumInstanceCount, float? instanceMemoryMB, FunctionsScaleAndConcurrencyTriggers triggers)
        {
            AlwaysReady = alwaysReady;
            MaximumInstanceCount = maximumInstanceCount;
            InstanceMemoryMB = instanceMemoryMB;
            Triggers = triggers;
        }

        /// <summary> 'Always Ready' configuration for an Azure Function app. </summary>
        public IList<FunctionsAlwaysReadyConfig> AlwaysReady { get; }
        /// <summary> The maximum number of VM instances for the Azure Functions app. </summary>
        public float? MaximumInstanceCount { get; set; }
        /// <summary> Set the amount of memory allocated to each instance of the function app in MiB; CPU and network bandwidth are allocated proportionally. </summary>
        public float? InstanceMemoryMB { get; set; }
        /// <summary> Scale and concurrency settings for Azure Functions triggers. </summary>
        internal FunctionsScaleAndConcurrencyTriggers Triggers { get; set; }
        /// <summary> The maximum number of concurrent HTTP trigger invocations per VM instance. </summary>
        public float? HttpPerInstanceConcurrency
        {
            get => Triggers is null ? default : Triggers.HttpPerInstanceConcurrency;
            set
            {
                if (Triggers is null)
                    Triggers = new FunctionsScaleAndConcurrencyTriggers();
                Triggers.HttpPerInstanceConcurrency = value;
            }
        }
    }
}
