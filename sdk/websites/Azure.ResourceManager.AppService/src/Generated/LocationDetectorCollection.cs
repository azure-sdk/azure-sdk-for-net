// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppService
{
    /// <summary>
    /// A class representing a collection of <see cref="LocationDetectorResource" /> and their operations.
    /// Each <see cref="LocationDetectorResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get a <see cref="LocationDetectorCollection" /> instance call the GetLocationDetectors method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class LocationDetectorCollection : ArmCollection
    {
        private readonly ClientDiagnostics _locationDetectorDiagnosticsClientDiagnostics;
        private readonly DiagnosticsRestOperations _locationDetectorDiagnosticsRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="LocationDetectorCollection"/> class for mocking. </summary>
        protected LocationDetectorCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LocationDetectorCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of a supported Azure region. </param>
        internal LocationDetectorCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _locationDetectorDiagnosticsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppService", LocationDetectorResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(LocationDetectorResource.ResourceType, out string locationDetectorDiagnosticsApiVersion);
            _locationDetectorDiagnosticsRestClient = new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, locationDetectorDiagnosticsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Description for Get Provider Detector Response
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors/{detectorName}
        /// Operation Id: Diagnostics_GetProviderDetectorResponse
        /// </summary>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="detectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="detectorName"/> or <paramref name="resourceType"/> is null. </exception>
        public virtual async Task<Response<LocationDetectorResource>> GetAsync(string detectorName, string resourceType, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(detectorName, nameof(detectorName));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.Get");
            scope.Start();
            try
            {
                var response = await _locationDetectorDiagnosticsRestClient.GetProviderDetectorResponseAsync(Id.SubscriptionId, new AzureLocation(_location), detectorName, resourceType, startTime, endTime, timeGrain, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationDetectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for Get Provider Detector Response
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors/{detectorName}
        /// Operation Id: Diagnostics_GetProviderDetectorResponse
        /// </summary>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="detectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="detectorName"/> or <paramref name="resourceType"/> is null. </exception>
        public virtual Response<LocationDetectorResource> Get(string detectorName, string resourceType, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(detectorName, nameof(detectorName));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.Get");
            scope.Start();
            try
            {
                var response = _locationDetectorDiagnosticsRestClient.GetProviderDetectorResponse(Id.SubscriptionId, new AzureLocation(_location), detectorName, resourceType, startTime, endTime, timeGrain, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationDetectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Description for List Provider Detector Responses
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors
        /// Operation Id: Diagnostics_ListProviderDetectorResponses
        /// </summary>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceType"/> is null. </exception>
        /// <returns> An async collection of <see cref="LocationDetectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LocationDetectorResource> GetAllAsync(string resourceType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            async Task<Page<LocationDetectorResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _locationDetectorDiagnosticsRestClient.ListProviderDetectorResponsesAsync(Id.SubscriptionId, new AzureLocation(_location), resourceType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LocationDetectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LocationDetectorResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _locationDetectorDiagnosticsRestClient.ListProviderDetectorResponsesNextPageAsync(nextLink, Id.SubscriptionId, new AzureLocation(_location), resourceType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LocationDetectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Description for List Provider Detector Responses
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors
        /// Operation Id: Diagnostics_ListProviderDetectorResponses
        /// </summary>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceType"/> is null. </exception>
        /// <returns> A collection of <see cref="LocationDetectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LocationDetectorResource> GetAll(string resourceType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            Page<LocationDetectorResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _locationDetectorDiagnosticsRestClient.ListProviderDetectorResponses(Id.SubscriptionId, new AzureLocation(_location), resourceType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LocationDetectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LocationDetectorResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _locationDetectorDiagnosticsRestClient.ListProviderDetectorResponsesNextPage(nextLink, Id.SubscriptionId, new AzureLocation(_location), resourceType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LocationDetectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors/{detectorName}
        /// Operation Id: Diagnostics_GetProviderDetectorResponse
        /// </summary>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="detectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="detectorName"/> or <paramref name="resourceType"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string detectorName, string resourceType, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(detectorName, nameof(detectorName));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.Exists");
            scope.Start();
            try
            {
                var response = await _locationDetectorDiagnosticsRestClient.GetProviderDetectorResponseAsync(Id.SubscriptionId, new AzureLocation(_location), detectorName, resourceType, startTime, endTime, timeGrain, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/detectors/{detectorName}
        /// Operation Id: Diagnostics_GetProviderDetectorResponse
        /// </summary>
        /// <param name="detectorName"> Detector Resource Name. </param>
        /// <param name="resourceType"> Resource type for which detectors are being requested. </param>
        /// <param name="startTime"> Start Time. </param>
        /// <param name="endTime"> End Time. </param>
        /// <param name="timeGrain"> Time Grain. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="detectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="detectorName"/> or <paramref name="resourceType"/> is null. </exception>
        public virtual Response<bool> Exists(string detectorName, string resourceType, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeGrain = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(detectorName, nameof(detectorName));
            Argument.AssertNotNull(resourceType, nameof(resourceType));

            using var scope = _locationDetectorDiagnosticsClientDiagnostics.CreateScope("LocationDetectorCollection.Exists");
            scope.Start();
            try
            {
                var response = _locationDetectorDiagnosticsRestClient.GetProviderDetectorResponse(Id.SubscriptionId, new AzureLocation(_location), detectorName, resourceType, startTime, endTime, timeGrain, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
