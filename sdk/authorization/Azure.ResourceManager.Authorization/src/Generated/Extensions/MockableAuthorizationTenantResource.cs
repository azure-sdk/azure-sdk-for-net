// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Authorization.Models;

namespace Azure.ResourceManager.Authorization.Mocking
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class MockableAuthorizationTenantResource : ArmResource
    {
        private ClientDiagnostics _globalAdministratorClientDiagnostics;
        private GlobalAdministratorRestOperations _globalAdministratorRestClient;
        private ClientDiagnostics _providerOperationsMetadataClientDiagnostics;
        private ProviderOperationsMetadataRestOperations _providerOperationsMetadataRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableAuthorizationTenantResource"/> class for mocking. </summary>
        protected MockableAuthorizationTenantResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableAuthorizationTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableAuthorizationTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics GlobalAdministratorClientDiagnostics => _globalAdministratorClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private GlobalAdministratorRestOperations GlobalAdministratorRestClient => _globalAdministratorRestClient ??= new GlobalAdministratorRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ProviderOperationsMetadataClientDiagnostics => _providerOperationsMetadataClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Authorization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ProviderOperationsMetadataRestOperations ProviderOperationsMetadataRestClient => _providerOperationsMetadataRestClient ??= new ProviderOperationsMetadataRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Elevates access for a Global Administrator.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Authorization/elevateAccess</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalAdministrator_ElevateAccess</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2015-07-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ElevateAccessGlobalAdministratorAsync(CancellationToken cancellationToken = default)
        {
            using var scope = GlobalAdministratorClientDiagnostics.CreateScope("MockableAuthorizationTenantResource.ElevateAccessGlobalAdministrator");
            scope.Start();
            try
            {
                var response = await GlobalAdministratorRestClient.ElevateAccessAsync(cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Elevates access for a Global Administrator.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Authorization/elevateAccess</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GlobalAdministrator_ElevateAccess</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2015-07-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ElevateAccessGlobalAdministrator(CancellationToken cancellationToken = default)
        {
            using var scope = GlobalAdministratorClientDiagnostics.CreateScope("MockableAuthorizationTenantResource.ElevateAccessGlobalAdministrator");
            scope.Start();
            try
            {
                var response = GlobalAdministratorRestClient.ElevateAccess(cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets provider operations metadata for all resource providers.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Authorization/providerOperations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProviderOperationsMetadata_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2022-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="expand"> Specifies whether to expand the values. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AuthorizationProviderOperationsMetadata"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AuthorizationProviderOperationsMetadata> GetAllProviderOperationsMetadataAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProviderOperationsMetadataRestClient.CreateListRequest(expand);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProviderOperationsMetadataRestClient.CreateListNextPageRequest(nextLink, expand);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => AuthorizationProviderOperationsMetadata.DeserializeAuthorizationProviderOperationsMetadata(e), ProviderOperationsMetadataClientDiagnostics, Pipeline, "MockableAuthorizationTenantResource.GetAllProviderOperationsMetadata", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets provider operations metadata for all resource providers.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Authorization/providerOperations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProviderOperationsMetadata_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2022-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="expand"> Specifies whether to expand the values. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AuthorizationProviderOperationsMetadata"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AuthorizationProviderOperationsMetadata> GetAllProviderOperationsMetadata(string expand = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ProviderOperationsMetadataRestClient.CreateListRequest(expand);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ProviderOperationsMetadataRestClient.CreateListNextPageRequest(nextLink, expand);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => AuthorizationProviderOperationsMetadata.DeserializeAuthorizationProviderOperationsMetadata(e), ProviderOperationsMetadataClientDiagnostics, Pipeline, "MockableAuthorizationTenantResource.GetAllProviderOperationsMetadata", "value", "nextLink", cancellationToken);
        }
    }
}
