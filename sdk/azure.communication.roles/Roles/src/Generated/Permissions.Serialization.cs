// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Roles
{
    public partial class Permissions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("chat"u8);
            writer.WriteObjectValue(Chat);
            writer.WritePropertyName("calling"u8);
            writer.WriteObjectValue(Calling);
            writer.WriteEndObject();
        }

        internal static Permissions DeserializePermissions(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ChatPermissions chat = default;
            CallingPermissions calling = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("chat"u8))
                {
                    chat = ChatPermissions.DeserializeChatPermissions(property.Value);
                    continue;
                }
                if (property.NameEquals("calling"u8))
                {
                    calling = CallingPermissions.DeserializeCallingPermissions(property.Value);
                    continue;
                }
            }
            return new Permissions(chat, calling);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Permissions FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializePermissions(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
