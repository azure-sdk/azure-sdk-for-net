// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Roles
{
    public partial class ChatPermissions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("addParticipants"u8);
            writer.WriteBooleanValue(AddParticipants);
            writer.WritePropertyName("removeSelf"u8);
            writer.WriteBooleanValue(RemoveSelf);
            writer.WritePropertyName("leaveChatThread"u8);
            writer.WriteBooleanValue(LeaveChatThread);
            writer.WritePropertyName("removeParticipants"u8);
            writer.WriteBooleanValue(RemoveParticipants);
            writer.WritePropertyName("listParticipants"u8);
            writer.WriteBooleanValue(ListParticipants);
            writer.WritePropertyName("getOwnData"u8);
            writer.WriteBooleanValue(GetOwnData);
            writer.WritePropertyName("getOthersData"u8);
            writer.WriteBooleanValue(GetOthersData);
            writer.WritePropertyName("updateOwnData"u8);
            writer.WriteBooleanValue(UpdateOwnData);
            writer.WritePropertyName("updateOthersData"u8);
            writer.WriteBooleanValue(UpdateOthersData);
            writer.WritePropertyName("shareHistory"u8);
            writer.WriteBooleanValue(ShareHistory);
            writer.WritePropertyName("getChatThreadProperties"u8);
            writer.WriteBooleanValue(GetChatThreadProperties);
            writer.WritePropertyName("updateChatThreadProperties"u8);
            writer.WriteBooleanValue(UpdateChatThreadProperties);
            writer.WritePropertyName("deleteChatThread"u8);
            writer.WriteBooleanValue(DeleteChatThread);
            writer.WritePropertyName("sendMessage"u8);
            writer.WriteBooleanValue(SendMessage);
            writer.WritePropertyName("getMessages"u8);
            writer.WriteBooleanValue(GetMessages);
            writer.WritePropertyName("readMessages"u8);
            writer.WriteBooleanValue(ReadMessages);
            writer.WritePropertyName("editOwnMessage"u8);
            writer.WriteBooleanValue(EditOwnMessage);
            writer.WritePropertyName("editOthersMessage"u8);
            writer.WriteBooleanValue(EditOthersMessage);
            writer.WritePropertyName("editAnyMessage"u8);
            writer.WriteBooleanValue(EditAnyMessage);
            writer.WritePropertyName("annotateOwnMessage"u8);
            writer.WriteBooleanValue(AnnotateOwnMessage);
            writer.WritePropertyName("replyOwnMessage"u8);
            writer.WriteBooleanValue(ReplyOwnMessage);
            writer.WritePropertyName("annotateOthersMessage"u8);
            writer.WriteBooleanValue(AnnotateOthersMessage);
            writer.WritePropertyName("replyOthersMessage"u8);
            writer.WriteBooleanValue(ReplyOthersMessage);
            writer.WritePropertyName("deleteOwnMessage"u8);
            writer.WriteBooleanValue(DeleteOwnMessage);
            writer.WritePropertyName("deleteOthersMessage"u8);
            writer.WriteBooleanValue(DeleteOthersMessage);
            writer.WritePropertyName("deleteAnyMessage"u8);
            writer.WriteBooleanValue(DeleteAnyMessage);
            writer.WritePropertyName("recoverOwnMessage"u8);
            writer.WriteBooleanValue(RecoverOwnMessage);
            writer.WritePropertyName("recoverOthersMessage"u8);
            writer.WriteBooleanValue(RecoverOthersMessage);
            writer.WritePropertyName("recoverAnyMessage"u8);
            writer.WriteBooleanValue(RecoverAnyMessage);
            writer.WritePropertyName("getReadReceipts"u8);
            writer.WriteBooleanValue(GetReadReceipts);
            writer.WritePropertyName("sendReadReceipt"u8);
            writer.WriteBooleanValue(SendReadReceipt);
            writer.WritePropertyName("sendTypingNotification"u8);
            writer.WriteBooleanValue(SendTypingNotification);
            writer.WriteEndObject();
        }

        internal static ChatPermissions DeserializeChatPermissions(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool addParticipants = default;
            bool removeSelf = default;
            bool leaveChatThread = default;
            bool removeParticipants = default;
            bool listParticipants = default;
            bool getOwnData = default;
            bool getOthersData = default;
            bool updateOwnData = default;
            bool updateOthersData = default;
            bool shareHistory = default;
            bool getChatThreadProperties = default;
            bool updateChatThreadProperties = default;
            bool deleteChatThread = default;
            bool sendMessage = default;
            bool getMessages = default;
            bool readMessages = default;
            bool editOwnMessage = default;
            bool editOthersMessage = default;
            bool editAnyMessage = default;
            bool annotateOwnMessage = default;
            bool replyOwnMessage = default;
            bool annotateOthersMessage = default;
            bool replyOthersMessage = default;
            bool deleteOwnMessage = default;
            bool deleteOthersMessage = default;
            bool deleteAnyMessage = default;
            bool recoverOwnMessage = default;
            bool recoverOthersMessage = default;
            bool recoverAnyMessage = default;
            bool getReadReceipts = default;
            bool sendReadReceipt = default;
            bool sendTypingNotification = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addParticipants"u8))
                {
                    addParticipants = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("removeSelf"u8))
                {
                    removeSelf = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("leaveChatThread"u8))
                {
                    leaveChatThread = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("removeParticipants"u8))
                {
                    removeParticipants = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("listParticipants"u8))
                {
                    listParticipants = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("getOwnData"u8))
                {
                    getOwnData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("getOthersData"u8))
                {
                    getOthersData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("updateOwnData"u8))
                {
                    updateOwnData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("updateOthersData"u8))
                {
                    updateOthersData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("shareHistory"u8))
                {
                    shareHistory = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("getChatThreadProperties"u8))
                {
                    getChatThreadProperties = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("updateChatThreadProperties"u8))
                {
                    updateChatThreadProperties = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deleteChatThread"u8))
                {
                    deleteChatThread = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sendMessage"u8))
                {
                    sendMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("getMessages"u8))
                {
                    getMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("readMessages"u8))
                {
                    readMessages = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("editOwnMessage"u8))
                {
                    editOwnMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("editOthersMessage"u8))
                {
                    editOthersMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("editAnyMessage"u8))
                {
                    editAnyMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("annotateOwnMessage"u8))
                {
                    annotateOwnMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("replyOwnMessage"u8))
                {
                    replyOwnMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("annotateOthersMessage"u8))
                {
                    annotateOthersMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("replyOthersMessage"u8))
                {
                    replyOthersMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deleteOwnMessage"u8))
                {
                    deleteOwnMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deleteOthersMessage"u8))
                {
                    deleteOthersMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deleteAnyMessage"u8))
                {
                    deleteAnyMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoverOwnMessage"u8))
                {
                    recoverOwnMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoverOthersMessage"u8))
                {
                    recoverOthersMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoverAnyMessage"u8))
                {
                    recoverAnyMessage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("getReadReceipts"u8))
                {
                    getReadReceipts = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sendReadReceipt"u8))
                {
                    sendReadReceipt = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sendTypingNotification"u8))
                {
                    sendTypingNotification = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ChatPermissions(addParticipants, removeSelf, leaveChatThread, removeParticipants, listParticipants, getOwnData, getOthersData, updateOwnData, updateOthersData, shareHistory, getChatThreadProperties, updateChatThreadProperties, deleteChatThread, sendMessage, getMessages, readMessages, editOwnMessage, editOthersMessage, editAnyMessage, annotateOwnMessage, replyOwnMessage, annotateOthersMessage, replyOthersMessage, deleteOwnMessage, deleteOthersMessage, deleteAnyMessage, recoverOwnMessage, recoverOthersMessage, recoverAnyMessage, getReadReceipts, sendReadReceipt, sendTypingNotification);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ChatPermissions FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeChatPermissions(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
