// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Edge;

namespace Azure.ResourceManager.Edge.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableEdgeArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableEdgeArmClient"/> class for mocking. </summary>
        protected MockableEdgeArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableEdgeArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableEdgeArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableEdgeArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of UpdateResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of UpdateResources and their operations over a UpdateResource. </returns>
        public virtual UpdateCollection GetUpdates(ResourceIdentifier scope)
        {
            return new UpdateCollection(Client, scope);
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<UpdateResource>> GetUpdateAsync(ResourceIdentifier scope, string updateName, CancellationToken cancellationToken = default)
        {
            return await GetUpdates(scope).GetAsync(updateName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Update
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/updates/{updateName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Updates_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="updateName"> Name of update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="updateName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<UpdateResource> GetUpdate(ResourceIdentifier scope, string updateName, CancellationToken cancellationToken = default)
        {
            return GetUpdates(scope).Get(updateName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing an <see cref="UpdateResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UpdateResource.CreateResourceIdentifier" /> to create an <see cref="UpdateResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UpdateResource" /> object. </returns>
        public virtual UpdateResource GetUpdateResource(ResourceIdentifier id)
        {
            UpdateResource.ValidateResourceId(id);
            return new UpdateResource(Client, id);
        }
    }
}
