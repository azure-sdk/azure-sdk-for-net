// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BenefitUtilizationSummariesAsyncOperations.
    /// </summary>
    public static partial class BenefitUtilizationSummariesAsyncOperationsExtensions
    {
            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusBillingAccountScope(this IBenefitUtilizationSummariesAsyncOperations operations, string billingAccountId, string operationId)
            {
                return operations.GetOperationStatusBillingAccountScopeAsync(billingAccountId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusBillingAccountScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string billingAccountId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusBillingAccountScopeWithHttpMessagesAsync(billingAccountId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='billingProfileId'>
            /// Billing profile ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusBillingProfileScope(this IBenefitUtilizationSummariesAsyncOperations operations, string billingAccountId, string billingProfileId, string operationId)
            {
                return operations.GetOperationStatusBillingProfileScopeAsync(billingAccountId, billingProfileId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='billingProfileId'>
            /// Billing profile ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusBillingProfileScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string billingAccountId, string billingProfileId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusBillingProfileScopeWithHttpMessagesAsync(billingAccountId, billingProfileId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationOrderId'>
            /// Reservation Order ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusReservationOrderScope(this IBenefitUtilizationSummariesAsyncOperations operations, string reservationOrderId, string operationId)
            {
                return operations.GetOperationStatusReservationOrderScopeAsync(reservationOrderId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationOrderId'>
            /// Reservation Order ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusReservationOrderScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string reservationOrderId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusReservationOrderScopeWithHttpMessagesAsync(reservationOrderId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationOrderId'>
            /// Reservation Order ID
            /// </param>
            /// <param name='reservationId'>
            /// Reservation ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusReservationScope(this IBenefitUtilizationSummariesAsyncOperations operations, string reservationOrderId, string reservationId, string operationId)
            {
                return operations.GetOperationStatusReservationScopeAsync(reservationOrderId, reservationId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reservationOrderId'>
            /// Reservation Order ID
            /// </param>
            /// <param name='reservationId'>
            /// Reservation ID
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusReservationScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string reservationOrderId, string reservationId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusReservationScopeWithHttpMessagesAsync(reservationOrderId, reservationId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusSavingsPlanOrderScope(this IBenefitUtilizationSummariesAsyncOperations operations, string savingsPlanOrderId, string operationId)
            {
                return operations.GetOperationStatusSavingsPlanOrderScopeAsync(savingsPlanOrderId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusSavingsPlanOrderScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string savingsPlanOrderId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusSavingsPlanOrderScopeWithHttpMessagesAsync(savingsPlanOrderId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='savingsPlanId'>
            /// Savings plan ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            public static BenefitUtilizationSummariesOperationStatus GetOperationStatusSavingsPlanScope(this IBenefitUtilizationSummariesAsyncOperations operations, string savingsPlanOrderId, string savingsPlanId, string operationId)
            {
                return operations.GetOperationStatusSavingsPlanScopeAsync(savingsPlanOrderId, savingsPlanId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of benefit utilization summaries report.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='savingsPlanId'>
            /// Savings plan ID.
            /// </param>
            /// <param name='operationId'>
            /// Operation id of the report being generated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BenefitUtilizationSummariesOperationStatus> GetOperationStatusSavingsPlanScopeAsync(this IBenefitUtilizationSummariesAsyncOperations operations, string savingsPlanOrderId, string savingsPlanId, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusSavingsPlanScopeWithHttpMessagesAsync(savingsPlanOrderId, savingsPlanId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
