// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The notification associated with a budget.
    ///
    /// Supported for CategoryType(s): Cost, ReservationUtilization.
    /// </summary>
    public partial class Notification
    {
        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        public Notification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        /// <param name="enabled">The notification is enabled or not.
        ///
        /// Supported for CategoryType(s): Cost,
        /// ReservationUtilization.</param>
        /// <param name="operatorProperty">The comparison operator.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Supported operators for **CategoryType: Cost**
        /// - GreaterThan
        /// - GreaterThanOrEqualTo
        ///
        /// Supported operators for **CategoryType: ReservationUtilization**
        /// - LessThan. Possible values include: 'EqualTo', 'GreaterThan',
        /// 'GreaterThanOrEqualTo', 'LessThan'</param>
        /// <param name="threshold">Threshold value associated with a
        /// notification. It is always percent with a maximum of 2 decimal
        /// places.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// **CategoryType: Cost** - Must be between 0 and 1000. Notification
        /// is sent when the cost exceeded the threshold.
        ///
        /// **CategoryType: ReservationUtilization** - Must be between 0 and
        /// 100. Notification is sent when a reservation has a utilization
        /// percentage below the threshold.</param>
        /// <param name="contactEmails">Email addresses to send the
        /// notification to when the threshold is breached. Must have at least
        /// one contact email or contact group specified at the Subscription or
        /// Resource Group scopes. All other scopes must have at least one
        /// contact email specified.
        ///
        /// Supported for CategoryType(s): Cost,
        /// ReservationUtilization.</param>
        /// <param name="frequency">Frequency of a notification. Represents how
        /// long the notification will be silent after triggering an alert for
        /// a threshold breach. If not specified, the frequency will be set by
        /// default based on the timeGrain (Weekly when timeGrain: Last7Days,
        /// Monthly when timeGrain: Last30Days).
        ///
        /// Supported for CategoryType(s): ReservationUtilization. Possible
        /// values include: 'Daily', 'Weekly', 'Monthly'</param>
        /// <param name="contactRoles">Subscription or Resource Group scopes
        /// only. Contact roles to send the notification to when the threshold
        /// is breached.
        ///
        /// Supported for CategoryType(s): Cost.</param>
        /// <param name="contactGroups">Subscription or Resource Group scopes
        /// only. Action groups to send the notification to when the threshold
        /// is exceeded. Must be provided as a fully qualified Azure resource
        /// id.
        ///
        /// Supported for CategoryType(s): Cost.</param>
        /// <param name="thresholdType">The type of threshold.
        ///
        /// Supported for CategoryType(s): Cost. Possible values include:
        /// 'Actual', 'Forecasted'</param>
        /// <param name="locale">Language in which the recipient will receive
        /// the notification,
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// Possible values include: 'en-us', 'ja-jp', 'zh-cn', 'de-de',
        /// 'es-es', 'fr-fr', 'it-it', 'ko-kr', 'pt-br', 'ru-ru', 'zh-tw',
        /// 'cs-cz', 'pl-pl', 'tr-tr', 'da-dk', 'en-gb', 'hu-hu', 'nb-no',
        /// 'nl-nl', 'pt-pt', 'sv-se'</param>
        public Notification(bool enabled, string operatorProperty, double threshold, IList<string> contactEmails, string frequency = default(string), IList<string> contactRoles = default(IList<string>), IList<string> contactGroups = default(IList<string>), string thresholdType = default(string), string locale = default(string))
        {
            Enabled = enabled;
            OperatorProperty = operatorProperty;
            Threshold = threshold;
            Frequency = frequency;
            ContactEmails = contactEmails;
            ContactRoles = contactRoles;
            ContactGroups = contactGroups;
            ThresholdType = thresholdType;
            Locale = locale;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the notification is enabled or not.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets the comparison operator.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Supported operators for **CategoryType: Cost**
        /// - GreaterThan
        /// - GreaterThanOrEqualTo
        ///
        /// Supported operators for **CategoryType: ReservationUtilization**
        /// - LessThan. Possible values include: 'EqualTo', 'GreaterThan',
        /// 'GreaterThanOrEqualTo', 'LessThan'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets threshold value associated with a notification. It is
        /// always percent with a maximum of 2 decimal places.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// **CategoryType: Cost** - Must be between 0 and 1000. Notification
        /// is sent when the cost exceeded the threshold.
        ///
        /// **CategoryType: ReservationUtilization** - Must be between 0 and
        /// 100. Notification is sent when a reservation has a utilization
        /// percentage below the threshold.
        /// </summary>
        [JsonProperty(PropertyName = "threshold")]
        public double Threshold { get; set; }

        /// <summary>
        /// Gets or sets frequency of a notification. Represents how long the
        /// notification will be silent after triggering an alert for a
        /// threshold breach. If not specified, the frequency will be set by
        /// default based on the timeGrain (Weekly when timeGrain: Last7Days,
        /// Monthly when timeGrain: Last30Days).
        ///
        /// Supported for CategoryType(s): ReservationUtilization. Possible
        /// values include: 'Daily', 'Weekly', 'Monthly'
        /// </summary>
        [JsonProperty(PropertyName = "frequency")]
        public string Frequency { get; set; }

        /// <summary>
        /// Gets or sets email addresses to send the notification to when the
        /// threshold is breached. Must have at least one contact email or
        /// contact group specified at the Subscription or Resource Group
        /// scopes. All other scopes must have at least one contact email
        /// specified.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "contactEmails")]
        public IList<string> ContactEmails { get; set; }

        /// <summary>
        /// Gets or sets subscription or Resource Group scopes only. Contact
        /// roles to send the notification to when the threshold is breached.
        ///
        /// Supported for CategoryType(s): Cost.
        /// </summary>
        [JsonProperty(PropertyName = "contactRoles")]
        public IList<string> ContactRoles { get; set; }

        /// <summary>
        /// Gets or sets subscription or Resource Group scopes only. Action
        /// groups to send the notification to when the threshold is exceeded.
        /// Must be provided as a fully qualified Azure resource id.
        ///
        /// Supported for CategoryType(s): Cost.
        /// </summary>
        [JsonProperty(PropertyName = "contactGroups")]
        public IList<string> ContactGroups { get; set; }

        /// <summary>
        /// Gets or sets the type of threshold.
        ///
        /// Supported for CategoryType(s): Cost. Possible values include:
        /// 'Actual', 'Forecasted'
        /// </summary>
        [JsonProperty(PropertyName = "thresholdType")]
        public string ThresholdType { get; set; }

        /// <summary>
        /// Gets or sets language in which the recipient will receive the
        /// notification,
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// Possible values include: 'en-us', 'ja-jp', 'zh-cn', 'de-de',
        /// 'es-es', 'fr-fr', 'it-it', 'ko-kr', 'pt-br', 'ru-ru', 'zh-tw',
        /// 'cs-cz', 'pl-pl', 'tr-tr', 'da-dk', 'en-gb', 'hu-hu', 'nb-no',
        /// 'nl-nl', 'pt-pt', 'sv-se'
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OperatorProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (ContactEmails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContactEmails");
            }
            if (ContactEmails != null)
            {
                if (ContactEmails.Count > 50)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "ContactEmails", 50);
                }
                if (ContactEmails.Count < 0)
                {
                    throw new ValidationException(ValidationRules.MinItems, "ContactEmails", 0);
                }
            }
            if (ContactGroups != null)
            {
                if (ContactGroups.Count > 50)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "ContactGroups", 50);
                }
                if (ContactGroups.Count < 0)
                {
                    throw new ValidationException(ValidationRules.MinItems, "ContactGroups", 0);
                }
            }
        }
    }
}
