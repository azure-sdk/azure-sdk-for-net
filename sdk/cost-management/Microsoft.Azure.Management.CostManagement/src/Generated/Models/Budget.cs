// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A budget resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Budget : CostManagementProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Budget class.
        /// </summary>
        public Budget()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Budget class.
        /// </summary>
        /// <param name="category">The category of the budget.
        /// - 'Cost' defines a Budget.
        /// - 'ReservationUtilization' defines a Reservation Utilization Alert
        /// Rule. Possible values include: 'Cost',
        /// 'ReservationUtilization'</param>
        /// <param name="timeGrain">The time covered by a budget. Tracking of
        /// the amount will be reset based on the time grain.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Supported timeGrainTypes for **CategoryType: Cost**
        ///
        /// - Monthly
        /// - Quarterly
        /// - Annually
        /// - BillingMonth*
        /// - BillingQuarter*
        /// - BillingAnnual*
        ///
        /// *only supported for Web Direct customers.
        ///
        /// Supported timeGrainTypes for **CategoryType:
        /// ReservationUtilization**
        /// - Last7Days
        /// - Last30Days
        ///
        /// Required for CategoryType(s): Cost, ReservationUtilization.
        /// Possible values include: 'Monthly', 'Quarterly', 'Annually',
        /// 'BillingMonth', 'BillingQuarter', 'BillingAnnual', 'Last7Days',
        /// 'Last30Days'</param>
        /// <param name="timePeriod">The time period that defines the active
        /// period of the budget. The budget will evaluate data on or after the
        /// startDate and will expire on the endDate.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Required for CategoryType(s): Cost, ReservationUtilization.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="eTag">eTag of the resource. To handle concurrent
        /// update scenario, this field will be used to determine whether the
        /// user is updating the latest version or not.</param>
        /// <param name="amount">The total amount of cost to track with the
        /// budget.
        ///
        /// Supported for CategoryType(s): Cost.
        ///
        /// Required for CategoryType(s): Cost.</param>
        /// <param name="filter">May be used to filter budgets by
        /// user-specified dimensions and/or tags.
        ///
        /// Supported for CategoryType(s): Cost,
        /// ReservationUtilization.</param>
        /// <param name="currentSpend">The current amount of cost which is
        /// being tracked for a budget.
        ///
        /// Supported for CategoryType(s): Cost.</param>
        /// <param name="notifications">Dictionary of notifications associated
        /// with the budget.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// - Constraints for **CategoryType: Cost** - Budget can have up to 5
        /// notifications with thresholdType: Actual and 5 notifications with
        /// thresholdType: Forecasted.
        /// - Constraints for **CategoryType: ReservationUtilization** - Only
        /// one notification allowed. thresholdType is not applicable.</param>
        /// <param name="forecastSpend">The forecasted cost which is being
        /// tracked for a budget.
        ///
        /// Supported for CategoryType(s): Cost.</param>
        public Budget(string category, string timeGrain, BudgetTimePeriod timePeriod, string id = default(string), string name = default(string), string type = default(string), string eTag = default(string), double? amount = default(double?), BudgetFilter filter = default(BudgetFilter), CurrentSpend currentSpend = default(CurrentSpend), IDictionary<string, Notification> notifications = default(IDictionary<string, Notification>), ForecastSpend forecastSpend = default(ForecastSpend))
            : base(id, name, type, eTag)
        {
            Category = category;
            Amount = amount;
            TimeGrain = timeGrain;
            TimePeriod = timePeriod;
            Filter = filter;
            CurrentSpend = currentSpend;
            Notifications = notifications;
            ForecastSpend = forecastSpend;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the category of the budget.
        /// - 'Cost' defines a Budget.
        /// - 'ReservationUtilization' defines a Reservation Utilization Alert
        /// Rule. Possible values include: 'Cost', 'ReservationUtilization'
        /// </summary>
        [JsonProperty(PropertyName = "properties.category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the total amount of cost to track with the budget.
        ///
        /// Supported for CategoryType(s): Cost.
        ///
        /// Required for CategoryType(s): Cost.
        /// </summary>
        [JsonProperty(PropertyName = "properties.amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or sets the time covered by a budget. Tracking of the amount
        /// will be reset based on the time grain.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Supported timeGrainTypes for **CategoryType: Cost**
        ///
        /// - Monthly
        /// - Quarterly
        /// - Annually
        /// - BillingMonth*
        /// - BillingQuarter*
        /// - BillingAnnual*
        ///
        /// *only supported for Web Direct customers.
        ///
        /// Supported timeGrainTypes for **CategoryType:
        /// ReservationUtilization**
        /// - Last7Days
        /// - Last30Days
        ///
        /// Required for CategoryType(s): Cost, ReservationUtilization.
        /// Possible values include: 'Monthly', 'Quarterly', 'Annually',
        /// 'BillingMonth', 'BillingQuarter', 'BillingAnnual', 'Last7Days',
        /// 'Last30Days'
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeGrain")]
        public string TimeGrain { get; set; }

        /// <summary>
        /// Gets or sets the time period that defines the active period of the
        /// budget. The budget will evaluate data on or after the startDate and
        /// will expire on the endDate.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// Required for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timePeriod")]
        public BudgetTimePeriod TimePeriod { get; set; }

        /// <summary>
        /// Gets or sets may be used to filter budgets by user-specified
        /// dimensions and/or tags.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filter")]
        public BudgetFilter Filter { get; set; }

        /// <summary>
        /// Gets the current amount of cost which is being tracked for a
        /// budget.
        ///
        /// Supported for CategoryType(s): Cost.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentSpend")]
        public CurrentSpend CurrentSpend { get; private set; }

        /// <summary>
        /// Gets or sets dictionary of notifications associated with the
        /// budget.
        ///
        /// Supported for CategoryType(s): Cost, ReservationUtilization.
        ///
        /// - Constraints for **CategoryType: Cost** - Budget can have up to 5
        /// notifications with thresholdType: Actual and 5 notifications with
        /// thresholdType: Forecasted.
        /// - Constraints for **CategoryType: ReservationUtilization** - Only
        /// one notification allowed. thresholdType is not applicable.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notifications")]
        public IDictionary<string, Notification> Notifications { get; set; }

        /// <summary>
        /// Gets the forecasted cost which is being tracked for a budget.
        ///
        /// Supported for CategoryType(s): Cost.
        /// </summary>
        [JsonProperty(PropertyName = "properties.forecastSpend")]
        public ForecastSpend ForecastSpend { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (TimeGrain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimeGrain");
            }
            if (TimePeriod == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimePeriod");
            }
            if (TimePeriod != null)
            {
                TimePeriod.Validate();
            }
            if (Filter != null)
            {
                Filter.Validate();
            }
            if (Notifications != null)
            {
                foreach (var valueElement in Notifications.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
