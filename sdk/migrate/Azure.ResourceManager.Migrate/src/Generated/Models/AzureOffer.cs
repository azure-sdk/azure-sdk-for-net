// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Azure Offer. </summary>
    public readonly partial struct AzureOffer : IEquatable<AzureOffer>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureOffer"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureOffer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string Msazr0003PValue = "MSAZR0003P";
        private const string Msazr0023PValue = "MSAZR0023P";
        private const string Msmcazr0044PValue = "MSMCAZR0044P";
        private const string Msmcazr0059PValue = "MSMCAZR0059P";
        private const string Msmcazr0060PValue = "MSMCAZR0060P";
        private const string Msmcazr0063PValue = "MSMCAZR0063P";
        private const string Msazrusgov0003PValue = "MSAZRUSGOV0003P";
        private const string EAValue = "EA";
        private const string SavingsPlan1YearValue = "SavingsPlan1Year";
        private const string SavingsPlan3YearValue = "SavingsPlan3Year";

        /// <summary> Unknown - Azure Offer. </summary>
        public static AzureOffer Unknown { get; } = new AzureOffer(UnknownValue);
        /// <summary> MSAZR0003P Azure Offer. </summary>
        public static AzureOffer Msazr0003P { get; } = new AzureOffer(Msazr0003PValue);
        /// <summary> MSAZR0023P Azure Offer. </summary>
        public static AzureOffer Msazr0023P { get; } = new AzureOffer(Msazr0023PValue);
        /// <summary> MSMCAZR0044P Azure Offer. </summary>
        public static AzureOffer Msmcazr0044P { get; } = new AzureOffer(Msmcazr0044PValue);
        /// <summary> MSMCAZR0059P Azure Offer. </summary>
        public static AzureOffer Msmcazr0059P { get; } = new AzureOffer(Msmcazr0059PValue);
        /// <summary> MSMCAZR0060P Azure Offer. </summary>
        public static AzureOffer Msmcazr0060P { get; } = new AzureOffer(Msmcazr0060PValue);
        /// <summary> MSMCAZR0063P Azure Offer. </summary>
        public static AzureOffer Msmcazr0063P { get; } = new AzureOffer(Msmcazr0063PValue);
        /// <summary> MSAZRUSGOV0003P Azure Offer. </summary>
        public static AzureOffer Msazrusgov0003P { get; } = new AzureOffer(Msazrusgov0003PValue);
        /// <summary> EA Azure Offer. </summary>
        public static AzureOffer EA { get; } = new AzureOffer(EAValue);
        /// <summary> SavingsPlan1Year Azure Offer. </summary>
        public static AzureOffer SavingsPlan1Year { get; } = new AzureOffer(SavingsPlan1YearValue);
        /// <summary> SavingsPlan3Year Azure Offer. </summary>
        public static AzureOffer SavingsPlan3Year { get; } = new AzureOffer(SavingsPlan3YearValue);
        /// <summary> Determines if two <see cref="AzureOffer"/> values are the same. </summary>
        public static bool operator ==(AzureOffer left, AzureOffer right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureOffer"/> values are not the same. </summary>
        public static bool operator !=(AzureOffer left, AzureOffer right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureOffer"/>. </summary>
        public static implicit operator AzureOffer(string value) => new AzureOffer(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureOffer other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureOffer other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
