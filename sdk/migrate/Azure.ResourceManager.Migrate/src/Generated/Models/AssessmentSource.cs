// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Assessment Source. </summary>
    public readonly partial struct AssessmentSource : IEquatable<AssessmentSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string MachineValue = "Machine";
        private const string IISValue = "IIS";
        private const string TomCatValue = "TomCat";
        private const string OracleServerValue = "OracleServer";
        private const string OracleDatabaseValue = "OracleDatabase";
        private const string SAPInstanceValue = "SAPInstance";
        private const string SpringbootApplicationValue = "SpringbootApplication";
        private const string MySQLServerValue = "MySQLServer";
        private const string SqlInstanceValue = "SqlInstance";
        private const string SqlDatabaseValue = "SqlDatabase";
        private const string WebAppsValue = "WebApps";

        /// <summary> Unknown - Assessment Source. </summary>
        public static AssessmentSource Unknown { get; } = new AssessmentSource(UnknownValue);
        /// <summary> Machine - Assessment Source. </summary>
        public static AssessmentSource Machine { get; } = new AssessmentSource(MachineValue);
        /// <summary> IIS - Assessment Source. </summary>
        public static AssessmentSource IIS { get; } = new AssessmentSource(IISValue);
        /// <summary> TomCat - Assessment Source. </summary>
        public static AssessmentSource TomCat { get; } = new AssessmentSource(TomCatValue);
        /// <summary> OracleServer - Assessment Source. </summary>
        public static AssessmentSource OracleServer { get; } = new AssessmentSource(OracleServerValue);
        /// <summary> OracleDatabase - Assessment Source. </summary>
        public static AssessmentSource OracleDatabase { get; } = new AssessmentSource(OracleDatabaseValue);
        /// <summary> SAPInstance - Assessment Source. </summary>
        public static AssessmentSource SAPInstance { get; } = new AssessmentSource(SAPInstanceValue);
        /// <summary> SpringbootApplication - Assessment Source. </summary>
        public static AssessmentSource SpringbootApplication { get; } = new AssessmentSource(SpringbootApplicationValue);
        /// <summary> MySQLServer - Assessment Source. </summary>
        public static AssessmentSource MySQLServer { get; } = new AssessmentSource(MySQLServerValue);
        /// <summary> SqlInstance - Assessment Source. </summary>
        public static AssessmentSource SqlInstance { get; } = new AssessmentSource(SqlInstanceValue);
        /// <summary> SqlDatabase - Assessment Source. </summary>
        public static AssessmentSource SqlDatabase { get; } = new AssessmentSource(SqlDatabaseValue);
        /// <summary> WebApps - Assessment Source. </summary>
        public static AssessmentSource WebApps { get; } = new AssessmentSource(WebAppsValue);
        /// <summary> Determines if two <see cref="AssessmentSource"/> values are the same. </summary>
        public static bool operator ==(AssessmentSource left, AssessmentSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentSource"/> values are not the same. </summary>
        public static bool operator !=(AssessmentSource left, AssessmentSource right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AssessmentSource"/>. </summary>
        public static implicit operator AssessmentSource(string value) => new AssessmentSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
