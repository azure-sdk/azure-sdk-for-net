// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Disk mode property used for identifying independent disks. </summary>
    public readonly partial struct VirtualDiskMode : IEquatable<VirtualDiskMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualDiskMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualDiskMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PersistentValue = "persistent";
        private const string IndependentPersistentValue = "independent_persistent";
        private const string IndependentNonpersistentValue = "independent_nonpersistent";
        private const string NonpersistentValue = "nonpersistent";
        private const string UndoableValue = "undoable";
        private const string AppendValue = "append";

        /// <summary> persistent. </summary>
        public static VirtualDiskMode Persistent { get; } = new VirtualDiskMode(PersistentValue);
        /// <summary> independent_persistent. </summary>
        public static VirtualDiskMode IndependentPersistent { get; } = new VirtualDiskMode(IndependentPersistentValue);
        /// <summary> independent_nonpersistent. </summary>
        public static VirtualDiskMode IndependentNonpersistent { get; } = new VirtualDiskMode(IndependentNonpersistentValue);
        /// <summary> nonpersistent. </summary>
        public static VirtualDiskMode Nonpersistent { get; } = new VirtualDiskMode(NonpersistentValue);
        /// <summary> undoable. </summary>
        public static VirtualDiskMode Undoable { get; } = new VirtualDiskMode(UndoableValue);
        /// <summary> append. </summary>
        public static VirtualDiskMode Append { get; } = new VirtualDiskMode(AppendValue);
        /// <summary> Determines if two <see cref="VirtualDiskMode"/> values are the same. </summary>
        public static bool operator ==(VirtualDiskMode left, VirtualDiskMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualDiskMode"/> values are not the same. </summary>
        public static bool operator !=(VirtualDiskMode left, VirtualDiskMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VirtualDiskMode"/>. </summary>
        public static implicit operator VirtualDiskMode(string value) => new VirtualDiskMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualDiskMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualDiskMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
