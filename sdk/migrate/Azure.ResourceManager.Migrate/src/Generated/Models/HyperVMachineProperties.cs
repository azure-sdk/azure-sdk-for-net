// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Class for machine properties. </summary>
    public partial class HyperVMachineProperties
    {
        /// <summary> Initializes a new instance of HyperVMachineProperties. </summary>
        internal HyperVMachineProperties()
        {
            Disks = new ChangeTrackingList<HyperVDisk>();
            NetworkAdapters = new ChangeTrackingList<HyperVNetworkAdapter>();
            Errors = new ChangeTrackingList<HealthErrorDetails>();
        }

        /// <summary> Initializes a new instance of HyperVMachineProperties. </summary>
        /// <param name="hostFqdn"> Host FQDN/IPAddress. </param>
        /// <param name="hostId"> Host ARM ID. </param>
        /// <param name="clusterFqdn"> Cluster FQDN/IPAddress. </param>
        /// <param name="clusterId"> Cluster ARM ID. </param>
        /// <param name="managementServerType"> Management server type of the machine. It is either Host or Cluster. </param>
        /// <param name="generation"> Generation of the virtual machine. </param>
        /// <param name="version"> VM version. </param>
        /// <param name="highAvailability"> Value indicating whether the VM is highly available. </param>
        /// <param name="maxMemoryMB"> Max memory of the virtual machine in MB. </param>
        /// <param name="firmware"> Firmware of the machine. </param>
        /// <param name="isDynamicMemoryEnabled"> Value indicating whether dynamic memory is enabled for the VM. </param>
        /// <param name="disks"> Disks attached to the machine. </param>
        /// <param name="appsAndRoles"> Apps and Roles of the VM. </param>
        /// <param name="networkAdapters"> Network adapters attached to the machine. </param>
        /// <param name="displayName"> Display name of the machine. </param>
        /// <param name="numberOfProcessorCore"> Number of Processor Cores allocated for the machine. </param>
        /// <param name="allocatedMemoryInMB"> Allocated Memory in MB. </param>
        /// <param name="vmConfigurationFileLocation"> Root location of the VM configuration file. </param>
        /// <param name="operatingSystemDetails"> Operating System Details installed on the machine. </param>
        /// <param name="guestOSDetails"> Operating System Details extracted from the guest by executing script inside the guest VM. </param>
        /// <param name="numberOfApplications"> Number of applications installed in the guest VM. </param>
        /// <param name="guestDetailsDiscoveryTimestamp"> The last time at which the Guest Details of machine was discovered. </param>
        /// <param name="isGuestDetailsDiscoveryInProgress"> Whether Refresh Fabric Layout Guest Details has been completed once. Portal will show discovery in progress, if this value is true. </param>
        /// <param name="createdTimestamp"> Timestamp marking machine creation. </param>
        /// <param name="updatedTimestamp"> Timestamp marking last updated on the machine. </param>
        /// <param name="instanceUuid"> On-premise Instance UUID of the machine. </param>
        /// <param name="powerStatus"> Machine power status. </param>
        /// <param name="biosSerialNumber"> Machine BIOS serial number. </param>
        /// <param name="biosGuid"> Machine BIOS GUID. </param>
        /// <param name="vmFqdn"> Machine FQDN. </param>
        /// <param name="isDeleted"> Value indicating whether VM is deleted. </param>
        /// <param name="errors"> Errors for machine. </param>
        internal HyperVMachineProperties(string hostFqdn, string hostId, string clusterFqdn, string clusterId, string managementServerType, int? generation, string version, HighlyAvailable? highAvailability, int? maxMemoryMB, string firmware, bool? isDynamicMemoryEnabled, IReadOnlyList<HyperVDisk> disks, AppsAndRoles appsAndRoles, IReadOnlyList<HyperVNetworkAdapter> networkAdapters, string displayName, int? numberOfProcessorCore, double? allocatedMemoryInMB, string vmConfigurationFileLocation, OperatingSystem operatingSystemDetails, GuestOSDetails guestOSDetails, int? numberOfApplications, DateTimeOffset? guestDetailsDiscoveryTimestamp, bool? isGuestDetailsDiscoveryInProgress, string createdTimestamp, string updatedTimestamp, string instanceUuid, string powerStatus, string biosSerialNumber, string biosGuid, string vmFqdn, bool? isDeleted, IReadOnlyList<HealthErrorDetails> errors)
        {
            HostFqdn = hostFqdn;
            HostId = hostId;
            ClusterFqdn = clusterFqdn;
            ClusterId = clusterId;
            ManagementServerType = managementServerType;
            Generation = generation;
            Version = version;
            HighAvailability = highAvailability;
            MaxMemoryMB = maxMemoryMB;
            Firmware = firmware;
            IsDynamicMemoryEnabled = isDynamicMemoryEnabled;
            Disks = disks;
            AppsAndRoles = appsAndRoles;
            NetworkAdapters = networkAdapters;
            DisplayName = displayName;
            NumberOfProcessorCore = numberOfProcessorCore;
            AllocatedMemoryInMB = allocatedMemoryInMB;
            VmConfigurationFileLocation = vmConfigurationFileLocation;
            OperatingSystemDetails = operatingSystemDetails;
            GuestOSDetails = guestOSDetails;
            NumberOfApplications = numberOfApplications;
            GuestDetailsDiscoveryTimestamp = guestDetailsDiscoveryTimestamp;
            IsGuestDetailsDiscoveryInProgress = isGuestDetailsDiscoveryInProgress;
            CreatedTimestamp = createdTimestamp;
            UpdatedTimestamp = updatedTimestamp;
            InstanceUuid = instanceUuid;
            PowerStatus = powerStatus;
            BiosSerialNumber = biosSerialNumber;
            BiosGuid = biosGuid;
            VmFqdn = vmFqdn;
            IsDeleted = isDeleted;
            Errors = errors;
        }

        /// <summary> Host FQDN/IPAddress. </summary>
        public string HostFqdn { get; }
        /// <summary> Host ARM ID. </summary>
        public string HostId { get; }
        /// <summary> Cluster FQDN/IPAddress. </summary>
        public string ClusterFqdn { get; }
        /// <summary> Cluster ARM ID. </summary>
        public string ClusterId { get; }
        /// <summary> Management server type of the machine. It is either Host or Cluster. </summary>
        public string ManagementServerType { get; }
        /// <summary> Generation of the virtual machine. </summary>
        public int? Generation { get; }
        /// <summary> VM version. </summary>
        public string Version { get; }
        /// <summary> Value indicating whether the VM is highly available. </summary>
        public HighlyAvailable? HighAvailability { get; }
        /// <summary> Max memory of the virtual machine in MB. </summary>
        public int? MaxMemoryMB { get; }
        /// <summary> Firmware of the machine. </summary>
        public string Firmware { get; }
        /// <summary> Value indicating whether dynamic memory is enabled for the VM. </summary>
        public bool? IsDynamicMemoryEnabled { get; }
        /// <summary> Disks attached to the machine. </summary>
        public IReadOnlyList<HyperVDisk> Disks { get; }
        /// <summary> Apps and Roles of the VM. </summary>
        public AppsAndRoles AppsAndRoles { get; }
        /// <summary> Network adapters attached to the machine. </summary>
        public IReadOnlyList<HyperVNetworkAdapter> NetworkAdapters { get; }
        /// <summary> Display name of the machine. </summary>
        public string DisplayName { get; }
        /// <summary> Number of Processor Cores allocated for the machine. </summary>
        public int? NumberOfProcessorCore { get; }
        /// <summary> Allocated Memory in MB. </summary>
        public double? AllocatedMemoryInMB { get; }
        /// <summary> Root location of the VM configuration file. </summary>
        public string VmConfigurationFileLocation { get; }
        /// <summary> Operating System Details installed on the machine. </summary>
        public OperatingSystem OperatingSystemDetails { get; }
        /// <summary> Operating System Details extracted from the guest by executing script inside the guest VM. </summary>
        public GuestOSDetails GuestOSDetails { get; }
        /// <summary> Number of applications installed in the guest VM. </summary>
        public int? NumberOfApplications { get; }
        /// <summary> The last time at which the Guest Details of machine was discovered. </summary>
        public DateTimeOffset? GuestDetailsDiscoveryTimestamp { get; }
        /// <summary> Whether Refresh Fabric Layout Guest Details has been completed once. Portal will show discovery in progress, if this value is true. </summary>
        public bool? IsGuestDetailsDiscoveryInProgress { get; }
        /// <summary> Timestamp marking machine creation. </summary>
        public string CreatedTimestamp { get; }
        /// <summary> Timestamp marking last updated on the machine. </summary>
        public string UpdatedTimestamp { get; }
        /// <summary> On-premise Instance UUID of the machine. </summary>
        public string InstanceUuid { get; }
        /// <summary> Machine power status. </summary>
        public string PowerStatus { get; }
        /// <summary> Machine BIOS serial number. </summary>
        public string BiosSerialNumber { get; }
        /// <summary> Machine BIOS GUID. </summary>
        public string BiosGuid { get; }
        /// <summary> Machine FQDN. </summary>
        public string VmFqdn { get; }
        /// <summary> Value indicating whether VM is deleted. </summary>
        public bool? IsDeleted { get; }
        /// <summary> Errors for machine. </summary>
        public IReadOnlyList<HealthErrorDetails> Errors { get; }
    }
}
