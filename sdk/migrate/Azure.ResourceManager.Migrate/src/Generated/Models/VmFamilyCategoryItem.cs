// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Vm Family Category Item. </summary>
    public readonly partial struct VmFamilyCategoryItem : IEquatable<VmFamilyCategoryItem>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmFamilyCategoryItem"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmFamilyCategoryItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string ComputeOptimizedValue = "ComputeOptimized";
        private const string MemoryOptimizedValue = "MemoryOptimized";
        private const string StorageOptimizedValue = "StorageOptimized";
        private const string GpuOptimizedValue = "GpuOptimized";
        private const string HighPerformanceComputeValue = "HighPerformanceCompute";
        private const string SupportsPremiumStorageValue = "SupportsPremiumStorage";
        private const string ConfidentialValue = "Confidential";
        private const string SupportsUltraDiskStorageValue = "SupportsUltraDiskStorage";

        /// <summary> Unknown - Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem Unknown { get; } = new VmFamilyCategoryItem(UnknownValue);
        /// <summary> GeneralPurpose Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem GeneralPurpose { get; } = new VmFamilyCategoryItem(GeneralPurposeValue);
        /// <summary> ComputeOptimized Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem ComputeOptimized { get; } = new VmFamilyCategoryItem(ComputeOptimizedValue);
        /// <summary> MemoryOptimized Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem MemoryOptimized { get; } = new VmFamilyCategoryItem(MemoryOptimizedValue);
        /// <summary> StorageOptimized Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem StorageOptimized { get; } = new VmFamilyCategoryItem(StorageOptimizedValue);
        /// <summary> GpuOptimized Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem GpuOptimized { get; } = new VmFamilyCategoryItem(GpuOptimizedValue);
        /// <summary> HighPerformanceCompute Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem HighPerformanceCompute { get; } = new VmFamilyCategoryItem(HighPerformanceComputeValue);
        /// <summary> SupportsPremiumStorage Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem SupportsPremiumStorage { get; } = new VmFamilyCategoryItem(SupportsPremiumStorageValue);
        /// <summary> Confidential Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem Confidential { get; } = new VmFamilyCategoryItem(ConfidentialValue);
        /// <summary> SupportsUltraDiskStorage Vm Family Category Item. </summary>
        public static VmFamilyCategoryItem SupportsUltraDiskStorage { get; } = new VmFamilyCategoryItem(SupportsUltraDiskStorageValue);
        /// <summary> Determines if two <see cref="VmFamilyCategoryItem"/> values are the same. </summary>
        public static bool operator ==(VmFamilyCategoryItem left, VmFamilyCategoryItem right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmFamilyCategoryItem"/> values are not the same. </summary>
        public static bool operator !=(VmFamilyCategoryItem left, VmFamilyCategoryItem right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VmFamilyCategoryItem"/>. </summary>
        public static implicit operator VmFamilyCategoryItem(string value) => new VmFamilyCategoryItem(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmFamilyCategoryItem other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmFamilyCategoryItem other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
