// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Sku type. </summary>
    public readonly partial struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkuType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string ComputeValue = "Compute";
        private const string StorageValue = "Storage";
        private const string NetworkValue = "Network";
        private const string AppServicePlanValue = "AppServicePlan";
        private const string AzureSpringAppsValue = "AzureSpringApps";

        /// <summary> Unknown - Sku type. </summary>
        public static SkuType Unknown { get; } = new SkuType(UnknownValue);
        /// <summary> Compute - Sku type. </summary>
        public static SkuType Compute { get; } = new SkuType(ComputeValue);
        /// <summary> Storage - Sku type. </summary>
        public static SkuType Storage { get; } = new SkuType(StorageValue);
        /// <summary> Network - Sku type. </summary>
        public static SkuType Network { get; } = new SkuType(NetworkValue);
        /// <summary> AppServicePlan - Sku type. </summary>
        public static SkuType AppServicePlan { get; } = new SkuType(AppServicePlanValue);
        /// <summary> AzureSpringApps - Sku type. </summary>
        public static SkuType AzureSpringApps { get; } = new SkuType(AzureSpringAppsValue);
        /// <summary> Determines if two <see cref="SkuType"/> values are the same. </summary>
        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkuType"/> values are not the same. </summary>
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SkuType"/>. </summary>
        public static implicit operator SkuType(string value) => new SkuType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkuType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
