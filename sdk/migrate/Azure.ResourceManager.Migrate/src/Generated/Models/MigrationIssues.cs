// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Migration issues. </summary>
    public partial class MigrationIssues
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrationIssues"/>. </summary>
        internal MigrationIssues()
        {
            RecommendedActions = new ChangeTrackingList<string>();
            MoreInformation = new ChangeTrackingList<MoreInformation>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrationIssues"/>. </summary>
        /// <param name="issueCode"> The issue id. </param>
        /// <param name="issueCategory"> The issue category. </param>
        /// <param name="issueDescription"> The issue description. </param>
        /// <param name="possibleCause"> The possible causes. </param>
        /// <param name="recommendedActions"> The recommended action. </param>
        /// <param name="moreInformation"> The more information list. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrationIssues(string issueCode, MigrationIssuesCategory? issueCategory, string issueDescription, string possibleCause, IReadOnlyList<string> recommendedActions, IReadOnlyList<MoreInformation> moreInformation, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IssueCode = issueCode;
            IssueCategory = issueCategory;
            IssueDescription = issueDescription;
            PossibleCause = possibleCause;
            RecommendedActions = recommendedActions;
            MoreInformation = moreInformation;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The issue id. </summary>
        public string IssueCode { get; }
        /// <summary> The issue category. </summary>
        public MigrationIssuesCategory? IssueCategory { get; }
        /// <summary> The issue description. </summary>
        public string IssueDescription { get; }
        /// <summary> The possible causes. </summary>
        public string PossibleCause { get; }
        /// <summary> The recommended action. </summary>
        public IReadOnlyList<string> RecommendedActions { get; }
        /// <summary> The more information list. </summary>
        public IReadOnlyList<MoreInformation> MoreInformation { get; }
    }
}
