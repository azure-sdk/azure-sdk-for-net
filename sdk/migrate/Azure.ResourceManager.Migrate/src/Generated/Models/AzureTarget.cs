// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Azure Target. </summary>
    public readonly partial struct AzureTarget : IEquatable<AzureTarget>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureTarget"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureTarget(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string SqlDatabaseValue = "SqlDatabase";
        private const string SqlMIValue = "SqlMI";
        private const string FlexServerPGValue = "FlexServerPG";
        private const string OracleIaasVmValue = "OracleIaasVM";
        private const string AzureSpringAppsValue = "AzureSpringApps";
        private const string SAPAzureInstanceValue = "SAPAzureInstance";
        private const string AKSValue = "AKS";
        private const string MySQLAzureFlexServerValue = "MySQLAzureFlexServer";
        private const string AzureSQLVMValue = "AzureSQLVM";
        private const string AzureVmValue = "AzureVM";
        private const string AzureAppServiceValue = "AzureAppService";
        private const string AzureAppServiceContainerValue = "AzureAppServiceContainer";
        private const string AvsValue = "Avs";

        /// <summary> Unknown - Azure Target. </summary>
        public static AzureTarget Unknown { get; } = new AzureTarget(UnknownValue);
        /// <summary> SqlDatabase - Azure Target. </summary>
        public static AzureTarget SqlDatabase { get; } = new AzureTarget(SqlDatabaseValue);
        /// <summary> SqlMI - Azure Target. </summary>
        public static AzureTarget SqlMI { get; } = new AzureTarget(SqlMIValue);
        /// <summary> FlexServerPG - Azure Target. </summary>
        public static AzureTarget FlexServerPG { get; } = new AzureTarget(FlexServerPGValue);
        /// <summary> OracleIaasVM - Azure Target. </summary>
        public static AzureTarget OracleIaasVm { get; } = new AzureTarget(OracleIaasVmValue);
        /// <summary> AzureSpringApps - Azure Target. </summary>
        public static AzureTarget AzureSpringApps { get; } = new AzureTarget(AzureSpringAppsValue);
        /// <summary> SAPAzureInstance - Azure Target. </summary>
        public static AzureTarget SAPAzureInstance { get; } = new AzureTarget(SAPAzureInstanceValue);
        /// <summary> AKS - Azure Target. </summary>
        public static AzureTarget AKS { get; } = new AzureTarget(AKSValue);
        /// <summary> MySQLAzureFlexServer - Azure Target. </summary>
        public static AzureTarget MySQLAzureFlexServer { get; } = new AzureTarget(MySQLAzureFlexServerValue);
        /// <summary> AzureSQLVM - Azure Target. </summary>
        public static AzureTarget AzureSQLVM { get; } = new AzureTarget(AzureSQLVMValue);
        /// <summary> AzureVM - Azure Target. </summary>
        public static AzureTarget AzureVm { get; } = new AzureTarget(AzureVmValue);
        /// <summary> AzureAppService - Azure Target. </summary>
        public static AzureTarget AzureAppService { get; } = new AzureTarget(AzureAppServiceValue);
        /// <summary> AzureAppServiceContainer - Azure Target. </summary>
        public static AzureTarget AzureAppServiceContainer { get; } = new AzureTarget(AzureAppServiceContainerValue);
        /// <summary> Avs - Azure Target. </summary>
        public static AzureTarget Avs { get; } = new AzureTarget(AvsValue);
        /// <summary> Determines if two <see cref="AzureTarget"/> values are the same. </summary>
        public static bool operator ==(AzureTarget left, AzureTarget right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureTarget"/> values are not the same. </summary>
        public static bool operator !=(AzureTarget left, AzureTarget right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureTarget"/>. </summary>
        public static implicit operator AzureTarget(string value) => new AzureTarget(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureTarget other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureTarget other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
