// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class MasterSiteProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess");
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(AllowMultipleSites))
            {
                writer.WritePropertyName("allowMultipleSites");
                writer.WriteBooleanValue(AllowMultipleSites.Value);
            }
            if (Optional.IsCollectionDefined(Sites))
            {
                writer.WritePropertyName("sites");
                writer.WriteStartArray();
                foreach (var item in Sites)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CustomerStorageAccountArmId))
            {
                writer.WritePropertyName("customerStorageAccountArmId");
                writer.WriteStringValue(CustomerStorageAccountArmId);
            }
            writer.WriteEndObject();
        }

        internal static MasterSiteProperties DeserializeMasterSiteProperties(JsonElement element)
        {
            Optional<MasterSitePropertiesPublicNetworkAccess> publicNetworkAccess = default;
            Optional<bool> allowMultipleSites = default;
            Optional<IList<string>> sites = default;
            Optional<string> customerStorageAccountArmId = default;
            Optional<IReadOnlyList<MigratePrivateEndpointConnectionData>> privateEndpointConnections = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("publicNetworkAccess"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    publicNetworkAccess = new MasterSitePropertiesPublicNetworkAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allowMultipleSites"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allowMultipleSites = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sites"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sites = array;
                    continue;
                }
                if (property.NameEquals("customerStorageAccountArmId"))
                {
                    customerStorageAccountArmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MigratePrivateEndpointConnectionData> array = new List<MigratePrivateEndpointConnectionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MigratePrivateEndpointConnectionData.DeserializeMigratePrivateEndpointConnectionData(item));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
            }
            return new MasterSiteProperties(Optional.ToNullable(publicNetworkAccess), Optional.ToNullable(allowMultipleSites), Optional.ToList(sites), customerStorageAccountArmId.Value, Optional.ToList(privateEndpointConnections));
        }
    }
}
