// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Cloud Suitability Common. </summary>
    public readonly partial struct CloudSuitabilityCommon : IEquatable<CloudSuitabilityCommon>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CloudSuitabilityCommon"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CloudSuitabilityCommon(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotSuitableValue = "NotSuitable";
        private const string SuitableValue = "Suitable";
        private const string ConditionallySuitableValue = "ConditionallySuitable";
        private const string ReadinessUnknownValue = "ReadinessUnknown";
        private const string SuitableWithWarningsValue = "SuitableWithWarnings";

        /// <summary> Unknown - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon Unknown { get; } = new CloudSuitabilityCommon(UnknownValue);
        /// <summary> NotSuitable - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon NotSuitable { get; } = new CloudSuitabilityCommon(NotSuitableValue);
        /// <summary> Suitable - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon Suitable { get; } = new CloudSuitabilityCommon(SuitableValue);
        /// <summary> ConditionallySuitable - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon ConditionallySuitable { get; } = new CloudSuitabilityCommon(ConditionallySuitableValue);
        /// <summary> ReadinessUnknown - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon ReadinessUnknown { get; } = new CloudSuitabilityCommon(ReadinessUnknownValue);
        /// <summary> SuitableWithWarnings - Cloud Suitability Common. </summary>
        public static CloudSuitabilityCommon SuitableWithWarnings { get; } = new CloudSuitabilityCommon(SuitableWithWarningsValue);
        /// <summary> Determines if two <see cref="CloudSuitabilityCommon"/> values are the same. </summary>
        public static bool operator ==(CloudSuitabilityCommon left, CloudSuitabilityCommon right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CloudSuitabilityCommon"/> values are not the same. </summary>
        public static bool operator !=(CloudSuitabilityCommon left, CloudSuitabilityCommon right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CloudSuitabilityCommon"/>. </summary>
        public static implicit operator CloudSuitabilityCommon(string value) => new CloudSuitabilityCommon(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CloudSuitabilityCommon other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CloudSuitabilityCommon other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
