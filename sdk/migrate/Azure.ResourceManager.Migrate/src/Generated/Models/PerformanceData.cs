// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Performance data class. </summary>
    public partial class PerformanceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PerformanceData"/>. </summary>
        public PerformanceData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PerformanceData"/>. </summary>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PerformanceData(Percentile? percentile, TimeRange? timeRange, DateTimeOffset? perfDataStartOn, DateTimeOffset? perfDataEndOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Percentile = percentile;
            TimeRange = timeRange;
            PerfDataStartOn = perfDataStartOn;
            PerfDataEndOn = perfDataEndOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </summary>
        public Percentile? Percentile { get; set; }
        /// <summary>
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </summary>
        public TimeRange? TimeRange { get; set; }
        /// <summary> Gets or sets the start time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataStartOn { get; set; }
        /// <summary> Gets or sets the end time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataEndOn { get; set; }
    }
}
