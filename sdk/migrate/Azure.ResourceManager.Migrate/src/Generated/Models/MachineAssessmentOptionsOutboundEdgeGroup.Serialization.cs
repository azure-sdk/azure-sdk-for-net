// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class MachineAssessmentOptionsOutboundEdgeGroup : IUtf8JsonSerializable, IJsonModel<MachineAssessmentOptionsOutboundEdgeGroup>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineAssessmentOptionsOutboundEdgeGroup>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MachineAssessmentOptionsOutboundEdgeGroup>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentOptionsOutboundEdgeGroup)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("targetLocations"u8);
            writer.WriteStartArray();
            foreach (var item in TargetLocations)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("currencies"u8);
            writer.WriteStartArray();
            foreach (var item in Currencies)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("savingsOptions"u8);
            writer.WriteStartArray();
            foreach (var item in SavingsOptions)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("licensingProgram"u8);
            writer.WriteStartArray();
            foreach (var item in LicensingProgram)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("azureVmFamilies"u8);
            writer.WriteStartArray();
            foreach (var item in AzureVmFamilies)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("azureVmFamilyCategories"u8);
            writer.WriteStartArray();
            foreach (var item in AzureVmFamilyCategories)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("premiumDiskSupport"u8);
            writer.WriteStartArray();
            foreach (var item in PremiumDiskSupport)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("ultraDiskSupport"u8);
            writer.WriteStartArray();
            foreach (var item in UltraDiskSupport)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("azureOfferCode"u8);
            writer.WriteStartArray();
            foreach (var item in AzureOfferCode)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("azureVmSecurityOptions"u8);
            writer.WriteStartArray();
            foreach (var item in AzureVmSecurityOptions)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MachineAssessmentOptionsOutboundEdgeGroup IJsonModel<MachineAssessmentOptionsOutboundEdgeGroup>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentOptionsOutboundEdgeGroup)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineAssessmentOptionsOutboundEdgeGroup(document.RootElement, options);
        }

        internal static MachineAssessmentOptionsOutboundEdgeGroup DeserializeMachineAssessmentOptionsOutboundEdgeGroup(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<AzureLocation> targetLocations = default;
            IReadOnlyList<AzureCurrency> currencies = default;
            IReadOnlyList<SavingsOption> savingsOptions = default;
            IReadOnlyList<LicensingProgram> licensingProgram = default;
            IReadOnlyList<AzureVmFamily> azureVmFamilies = default;
            IReadOnlyList<VmFamilyCategoryItem> azureVmFamilyCategories = default;
            IReadOnlyList<PremiumDiskSupport> premiumDiskSupport = default;
            IReadOnlyList<UltraDiskSupport> ultraDiskSupport = default;
            IReadOnlyList<AzureOffer> azureOfferCode = default;
            IReadOnlyList<AzureVmSecurityType> azureVmSecurityOptions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetLocations"u8))
                {
                    List<AzureLocation> array = new List<AzureLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureLocation(item.GetString()));
                    }
                    targetLocations = array;
                    continue;
                }
                if (property.NameEquals("currencies"u8))
                {
                    List<AzureCurrency> array = new List<AzureCurrency>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureCurrency(item.GetString()));
                    }
                    currencies = array;
                    continue;
                }
                if (property.NameEquals("savingsOptions"u8))
                {
                    List<SavingsOption> array = new List<SavingsOption>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SavingsOption(item.GetString()));
                    }
                    savingsOptions = array;
                    continue;
                }
                if (property.NameEquals("licensingProgram"u8))
                {
                    List<LicensingProgram> array = new List<LicensingProgram>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new LicensingProgram(item.GetString()));
                    }
                    licensingProgram = array;
                    continue;
                }
                if (property.NameEquals("azureVmFamilies"u8))
                {
                    List<AzureVmFamily> array = new List<AzureVmFamily>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureVmFamily(item.GetString()));
                    }
                    azureVmFamilies = array;
                    continue;
                }
                if (property.NameEquals("azureVmFamilyCategories"u8))
                {
                    List<VmFamilyCategoryItem> array = new List<VmFamilyCategoryItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new VmFamilyCategoryItem(item.GetString()));
                    }
                    azureVmFamilyCategories = array;
                    continue;
                }
                if (property.NameEquals("premiumDiskSupport"u8))
                {
                    List<PremiumDiskSupport> array = new List<PremiumDiskSupport>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new PremiumDiskSupport(item.GetString()));
                    }
                    premiumDiskSupport = array;
                    continue;
                }
                if (property.NameEquals("ultraDiskSupport"u8))
                {
                    List<UltraDiskSupport> array = new List<UltraDiskSupport>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new UltraDiskSupport(item.GetString()));
                    }
                    ultraDiskSupport = array;
                    continue;
                }
                if (property.NameEquals("azureOfferCode"u8))
                {
                    List<AzureOffer> array = new List<AzureOffer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureOffer(item.GetString()));
                    }
                    azureOfferCode = array;
                    continue;
                }
                if (property.NameEquals("azureVmSecurityOptions"u8))
                {
                    List<AzureVmSecurityType> array = new List<AzureVmSecurityType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureVmSecurityType(item.GetString()));
                    }
                    azureVmSecurityOptions = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MachineAssessmentOptionsOutboundEdgeGroup(
                targetLocations,
                currencies,
                savingsOptions,
                licensingProgram,
                azureVmFamilies,
                azureVmFamilyCategories,
                premiumDiskSupport,
                ultraDiskSupport,
                azureOfferCode,
                azureVmSecurityOptions,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentOptionsOutboundEdgeGroup)} does not support writing '{options.Format}' format.");
            }
        }

        MachineAssessmentOptionsOutboundEdgeGroup IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMachineAssessmentOptionsOutboundEdgeGroup(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentOptionsOutboundEdgeGroup)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineAssessmentOptionsOutboundEdgeGroup>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
