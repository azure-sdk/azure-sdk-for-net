// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Azure Vm Security Suitability Detail. </summary>
    public readonly partial struct AzureVmSecuritySuitabilityDetail : IEquatable<AzureVmSecuritySuitabilityDetail>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureVmSecuritySuitabilityDetail"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureVmSecuritySuitabilityDetail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotApplicableValue = "NotApplicable";
        private const string GuestOperatingSystemNotSupportedValue = "GuestOperatingSystemNotSupported";
        private const string BootTypeNotSupportedValue = "BootTypeNotSupported";
        private const string DiskSizeLargeValue = "DiskSizeLarge";
        private const string AllDiskSizeExceeds4TBValue = "AllDiskSizeExceeds4TB";
        private const string AnyDiskSizeExceeds4TBValue = "AnyDiskSizeExceeds4TB";
        private const string AnyDiskSizeExceeds4TBConditionalValue = "AnyDiskSizeExceeds4TBConditional";
        private const string OSNotSupportedValue = "OSNotSupported";
        private const string StandardReadyValue = "StandardReady";
        private const string TVMReadyValue = "TVMReady";
        private const string StandardNotReadyOSNotSupportedValue = "StandardNotReadyOSNotSupported";
        private const string TVMNotReadyOSNotSupportedValue = "TVMNotReadyOSNotSupported";
        private const string StandardNotReady2TBBiosBootValue = "StandardNotReady2TBBiosBoot";
        private const string AllDiskSizeExceeds2TBValue = "AllDiskSizeExceeds2TB";
        private const string DiskSize2TBConditionalReadyBiosBootValue = "DiskSize2TBConditionalReadyBiosBoot";
        private const string TVMCannotMigrateOSNotSupportedValue = "TVMCannotMigrateOSNotSupported";
        private const string StandardCannotMigrateOSNotSupportedValue = "StandardCannotMigrateOSNotSupported";
        private const string StandardCanMigrateValue = "StandardCanMigrate";
        private const string TVMCanMigrateConditionalValue = "TVMCanMigrateConditional";
        private const string OSNameCannotBeReadValue = "OSNameCannotBeRead";
        private const string TVMNotSupportedForBiosBootValue = "TVMNotSupportedForBiosBoot";

        /// <summary> Unknown - Azure Vm Security Suitability Detail. </summary>
        public static AzureVmSecuritySuitabilityDetail Unknown { get; } = new AzureVmSecuritySuitabilityDetail(UnknownValue);
        /// <summary> NotApplicable - Azure Vm Security Suitability Detail. </summary>
        public static AzureVmSecuritySuitabilityDetail NotApplicable { get; } = new AzureVmSecuritySuitabilityDetail(NotApplicableValue);
        /// <summary> GuestOperatingSystemNotSupported Azure Vm Security Suitability Detail. </summary>
        public static AzureVmSecuritySuitabilityDetail GuestOperatingSystemNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(GuestOperatingSystemNotSupportedValue);
        /// <summary> BootTypeNotSupported Azure Vm Security Suitability Detail. </summary>
        public static AzureVmSecuritySuitabilityDetail BootTypeNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(BootTypeNotSupportedValue);
        /// <summary> DiskSizeLarge Azure Vm Security Suitability Detail. </summary>
        public static AzureVmSecuritySuitabilityDetail DiskSizeLarge { get; } = new AzureVmSecuritySuitabilityDetail(DiskSizeLargeValue);
        /// <summary> Azure does not support VM with OS disk size greater than 4TB. </summary>
        public static AzureVmSecuritySuitabilityDetail AllDiskSizeExceeds4TB { get; } = new AzureVmSecuritySuitabilityDetail(AllDiskSizeExceeds4TBValue);
        /// <summary> Azure does not support VM with OS disk size greater than 4TB. If OS disk size is less than 4TB, proceed with migration. </summary>
        public static AzureVmSecuritySuitabilityDetail AnyDiskSizeExceeds4TB { get; } = new AzureVmSecuritySuitabilityDetail(AnyDiskSizeExceeds4TBValue);
        /// <summary> Azure does not support VM with any disk size greater than 4TB. Please proceed only if you know the OS disk size is less than 4TB. </summary>
        public static AzureVmSecuritySuitabilityDetail AnyDiskSizeExceeds4TBConditional { get; } = new AzureVmSecuritySuitabilityDetail(AnyDiskSizeExceeds4TBConditionalValue);
        /// <summary> The VM is not ready to be migrated to Azure because the OS is not supported. </summary>
        public static AzureVmSecuritySuitabilityDetail OSNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(OSNotSupportedValue);
        /// <summary> The VM is ready to be migrated to Azure with standard VM security type. </summary>
        public static AzureVmSecuritySuitabilityDetail StandardReady { get; } = new AzureVmSecuritySuitabilityDetail(StandardReadyValue);
        /// <summary> The VM is ready to be migrated to Azure with Trusted launch VM security type. </summary>
        public static AzureVmSecuritySuitabilityDetail TVMReady { get; } = new AzureVmSecuritySuitabilityDetail(TVMReadyValue);
        /// <summary> The VM is not ready to be migrated to Azure with standard VM security type because the OS is not supported. </summary>
        public static AzureVmSecuritySuitabilityDetail StandardNotReadyOSNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(StandardNotReadyOSNotSupportedValue);
        /// <summary> The VM is not ready to be migrated to Azure with Trusted launch VM security type because the OS is not supported for Trusted launch VM. Get more information [here]. </summary>
        public static AzureVmSecuritySuitabilityDetail TVMNotReadyOSNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(TVMNotReadyOSNotSupportedValue);
        /// <summary> The VM is not ready to be migrated to Azure with standard VM security type. Azure does not support OS disk size greater than 2TB for VMs with BIOS boot type. </summary>
        public static AzureVmSecuritySuitabilityDetail StandardNotReady2TBBiosBoot { get; } = new AzureVmSecuritySuitabilityDetail(StandardNotReady2TBBiosBootValue);
        /// <summary> The VM is not ready to be migrated to Azure with Trusted launch VM security type. Azure does not support OS disk size greater than 2TB for VMs with BIOS boot type. </summary>
        public static AzureVmSecuritySuitabilityDetail AllDiskSizeExceeds2TB { get; } = new AzureVmSecuritySuitabilityDetail(AllDiskSizeExceeds2TBValue);
        /// <summary> The VM readiness is unknown. Azure does not support OS disk size greater than 2TB for VMs with BIOS boot type. Please proceed with migration only if OS disk size is less than 2TB. </summary>
        public static AzureVmSecuritySuitabilityDetail DiskSize2TBConditionalReadyBiosBoot { get; } = new AzureVmSecuritySuitabilityDetail(DiskSize2TBConditionalReadyBiosBootValue);
        /// <summary> The VM cannot be migrated to Trusted launch VM because the OS is not supported. Learn more [here]. </summary>
        public static AzureVmSecuritySuitabilityDetail TVMCannotMigrateOSNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(TVMCannotMigrateOSNotSupportedValue);
        /// <summary> The VM cannot be migrated to Azure because the OS is not supported. </summary>
        public static AzureVmSecuritySuitabilityDetail StandardCannotMigrateOSNotSupported { get; } = new AzureVmSecuritySuitabilityDetail(StandardCannotMigrateOSNotSupportedValue);
        /// <summary> The VM can be migrated to Azure with standard VM security type. </summary>
        public static AzureVmSecuritySuitabilityDetail StandardCanMigrate { get; } = new AzureVmSecuritySuitabilityDetail(StandardCanMigrateValue);
        /// <summary> The VM can be migrated to Trusted launch VM. Currently, Azure Migrate does not support migration to Trusted launch for VM with BIOS boot type. You can convert the VM post-migration to Trusted Launch VM. The steps are mentioned in this documentation. </summary>
        public static AzureVmSecuritySuitabilityDetail TVMCanMigrateConditional { get; } = new AzureVmSecuritySuitabilityDetail(TVMCanMigrateConditionalValue);
        /// <summary> Readiness is marked as unknown because the OS name cannot be read. </summary>
        public static AzureVmSecuritySuitabilityDetail OSNameCannotBeRead { get; } = new AzureVmSecuritySuitabilityDetail(OSNameCannotBeReadValue);
        /// <summary> Migration to Trusted Launch VM is not supported for BIOS boot type VMs at this time. </summary>
        public static AzureVmSecuritySuitabilityDetail TVMNotSupportedForBiosBoot { get; } = new AzureVmSecuritySuitabilityDetail(TVMNotSupportedForBiosBootValue);
        /// <summary> Determines if two <see cref="AzureVmSecuritySuitabilityDetail"/> values are the same. </summary>
        public static bool operator ==(AzureVmSecuritySuitabilityDetail left, AzureVmSecuritySuitabilityDetail right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureVmSecuritySuitabilityDetail"/> values are not the same. </summary>
        public static bool operator !=(AzureVmSecuritySuitabilityDetail left, AzureVmSecuritySuitabilityDetail right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureVmSecuritySuitabilityDetail"/>. </summary>
        public static implicit operator AzureVmSecuritySuitabilityDetail(string value) => new AzureVmSecuritySuitabilityDetail(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureVmSecuritySuitabilityDetail other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureVmSecuritySuitabilityDetail other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
