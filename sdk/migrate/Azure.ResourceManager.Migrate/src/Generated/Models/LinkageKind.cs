// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Linkage kind. </summary>
    public readonly partial struct LinkageKind : IEquatable<LinkageKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LinkageKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LinkageKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string MachineValue = "Machine";
        private const string ServerValue = "Server";
        private const string InstanceValue = "Instance";
        private const string WebServerValue = "WebServer";
        private const string WebApplicationValue = "WebApplication";
        private const string DatabaseValue = "Database";

        /// <summary> Unknown - Linkage kind. </summary>
        public static LinkageKind Unknown { get; } = new LinkageKind(UnknownValue);
        /// <summary> Machine - Linkage kind. </summary>
        public static LinkageKind Machine { get; } = new LinkageKind(MachineValue);
        /// <summary> Server - Linkage kind. </summary>
        public static LinkageKind Server { get; } = new LinkageKind(ServerValue);
        /// <summary> Instance - Linkage kind. </summary>
        public static LinkageKind Instance { get; } = new LinkageKind(InstanceValue);
        /// <summary> WebServer - Linkage kind. </summary>
        public static LinkageKind WebServer { get; } = new LinkageKind(WebServerValue);
        /// <summary> WebApplication - Linkage kind. </summary>
        public static LinkageKind WebApplication { get; } = new LinkageKind(WebApplicationValue);
        /// <summary> Database - Linkage kind. </summary>
        public static LinkageKind Database { get; } = new LinkageKind(DatabaseValue);
        /// <summary> Determines if two <see cref="LinkageKind"/> values are the same. </summary>
        public static bool operator ==(LinkageKind left, LinkageKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LinkageKind"/> values are not the same. </summary>
        public static bool operator !=(LinkageKind left, LinkageKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LinkageKind"/>. </summary>
        public static implicit operator LinkageKind(string value) => new LinkageKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LinkageKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LinkageKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
