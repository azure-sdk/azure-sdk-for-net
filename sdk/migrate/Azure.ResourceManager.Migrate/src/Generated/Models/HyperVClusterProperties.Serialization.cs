// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class HyperVClusterProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Fqdn))
            {
                writer.WritePropertyName("fqdn");
                writer.WriteStringValue(Fqdn);
            }
            if (Optional.IsDefined(RunAsAccountId))
            {
                writer.WritePropertyName("runAsAccountId");
                writer.WriteStringValue(RunAsAccountId);
            }
            if (Optional.IsCollectionDefined(HostFqdnList))
            {
                writer.WritePropertyName("hostFqdnList");
                writer.WriteStartArray();
                foreach (var item in HostFqdnList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static HyperVClusterProperties DeserializeHyperVClusterProperties(JsonElement element)
        {
            Optional<string> createdTimestamp = default;
            Optional<string> updatedTimestamp = default;
            Optional<string> fqdn = default;
            Optional<int> functionalLevel = default;
            Optional<string> status = default;
            Optional<string> runAsAccountId = default;
            Optional<IList<string>> hostFqdnList = default;
            Optional<IReadOnlyList<HealthErrorDetails>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createdTimestamp"))
                {
                    createdTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    updatedTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fqdn"))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("functionalLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    functionalLevel = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostFqdnList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    hostFqdnList = array;
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthErrorDetails> array = new List<HealthErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorDetails.DeserializeHealthErrorDetails(item));
                    }
                    errors = array;
                    continue;
                }
            }
            return new HyperVClusterProperties(createdTimestamp.Value, updatedTimestamp.Value, fqdn.Value, Optional.ToNullable(functionalLevel), status.Value, runAsAccountId.Value, Optional.ToList(hostFqdnList), Optional.ToList(errors));
        }
    }
}
