// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class VCenterProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Fqdn))
            {
                writer.WritePropertyName("fqdn");
                writer.WriteStringValue(Fqdn);
            }
            if (Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port");
                writer.WriteStringValue(Port);
            }
            if (Optional.IsDefined(RunAsAccountId))
            {
                writer.WritePropertyName("runAsAccountId");
                writer.WriteStringValue(RunAsAccountId);
            }
            writer.WriteEndObject();
        }

        internal static VCenterProperties DeserializeVCenterProperties(JsonElement element)
        {
            Optional<string> createdTimestamp = default;
            Optional<string> updatedTimestamp = default;
            Optional<string> fqdn = default;
            Optional<string> port = default;
            Optional<string> runAsAccountId = default;
            Optional<string> version = default;
            Optional<string> perfStatisticsLevel = default;
            Optional<string> instanceUuid = default;
            Optional<IReadOnlyList<HealthErrorDetails>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createdTimestamp"))
                {
                    createdTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    updatedTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fqdn"))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    port = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("perfStatisticsLevel"))
                {
                    perfStatisticsLevel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceUuid"))
                {
                    instanceUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthErrorDetails> array = new List<HealthErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorDetails.DeserializeHealthErrorDetails(item));
                    }
                    errors = array;
                    continue;
                }
            }
            return new VCenterProperties(createdTimestamp.Value, updatedTimestamp.Value, fqdn.Value, port.Value, runAsAccountId.Value, version.Value, perfStatisticsLevel.Value, instanceUuid.Value, Optional.ToList(errors));
        }
    }
}
