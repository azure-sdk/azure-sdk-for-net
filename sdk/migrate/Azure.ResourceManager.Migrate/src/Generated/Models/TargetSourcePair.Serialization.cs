// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class TargetSourcePair : IUtf8JsonSerializable, IJsonModel<TargetSourcePair>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TargetSourcePair>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TargetSourcePair>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetSourcePair>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetSourcePair)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(SourceRef))
            {
                writer.WritePropertyName("sourceRef"u8);
                writer.WriteStringValue(SourceRef.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TargetRef))
            {
                writer.WritePropertyName("targetRef"u8);
                writer.WriteStringValue(TargetRef.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SourceCount))
            {
                writer.WritePropertyName("sourceCount"u8);
                writer.WriteNumberValue(SourceCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetCount))
            {
                writer.WritePropertyName("targetCount"u8);
                writer.WriteNumberValue(TargetCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationDetails))
            {
                writer.WritePropertyName("migrationDetails"u8);
                writer.WriteObjectValue(MigrationDetails, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ManagementDetails))
            {
                writer.WritePropertyName("managementDetails"u8);
                writer.WriteStartArray();
                foreach (var item in ManagementDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(CostDetails))
            {
                writer.WritePropertyName("costDetails"u8);
                writer.WriteStartArray();
                foreach (var item in CostDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SavingsDetails))
            {
                writer.WritePropertyName("savingsDetails"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ConfidenceScore))
            {
                writer.WritePropertyName("confidenceScore"u8);
                writer.WriteNumberValue(ConfidenceScore.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TargetSourcePair IJsonModel<TargetSourcePair>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetSourcePair>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TargetSourcePair)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTargetSourcePair(document.RootElement, options);
        }

        internal static TargetSourcePair DeserializeTargetSourcePair(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AssessmentSource? sourceRef = default;
            AzureTarget? targetRef = default;
            int? sourceCount = default;
            int? targetCount = default;
            MigrationDetails migrationDetails = default;
            IReadOnlyList<ManagementDetails> managementDetails = default;
            IReadOnlyList<CostDetailsCommon> costDetails = default;
            IReadOnlyList<SavingsDetailsCommon> savingsDetails = default;
            double? confidenceScore = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourceRef"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceRef = new AssessmentSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetRef"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetRef = new AzureTarget(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("migrationDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationDetails = MigrationDetails.DeserializeMigrationDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managementDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ManagementDetails> array = new List<ManagementDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.ManagementDetails.DeserializeManagementDetails(item, options));
                    }
                    managementDetails = array;
                    continue;
                }
                if (property.NameEquals("costDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CostDetailsCommon> array = new List<CostDetailsCommon>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CostDetailsCommon.DeserializeCostDetailsCommon(item, options));
                    }
                    costDetails = array;
                    continue;
                }
                if (property.NameEquals("savingsDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SavingsDetailsCommon> array = new List<SavingsDetailsCommon>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SavingsDetailsCommon.DeserializeSavingsDetailsCommon(item, options));
                    }
                    savingsDetails = array;
                    continue;
                }
                if (property.NameEquals("confidenceScore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    confidenceScore = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TargetSourcePair(
                sourceRef,
                targetRef,
                sourceCount,
                targetCount,
                migrationDetails,
                managementDetails ?? new ChangeTrackingList<ManagementDetails>(),
                costDetails ?? new ChangeTrackingList<CostDetailsCommon>(),
                savingsDetails ?? new ChangeTrackingList<SavingsDetailsCommon>(),
                confidenceScore,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TargetSourcePair>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetSourcePair>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerMigrateContext.Default);
                default:
                    throw new FormatException($"The model {nameof(TargetSourcePair)} does not support writing '{options.Format}' format.");
            }
        }

        TargetSourcePair IPersistableModel<TargetSourcePair>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TargetSourcePair>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeTargetSourcePair(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TargetSourcePair)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TargetSourcePair>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
