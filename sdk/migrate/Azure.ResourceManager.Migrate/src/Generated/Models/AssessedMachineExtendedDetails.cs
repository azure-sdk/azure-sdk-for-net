// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The assessed machine extended details. </summary>
    public partial class AssessedMachineExtendedDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessedMachineExtendedDetails"/>. </summary>
        internal AssessedMachineExtendedDetails()
        {
            Disks = new ChangeTrackingList<AssessedDiskDataV3>();
            NetworkAdapters = new ChangeTrackingList<AssessedMachineNetworkAdaptersV3>();
            Errors = new ChangeTrackingList<Error>();
        }

        /// <summary> Initializes a new instance of <see cref="AssessedMachineExtendedDetails"/>. </summary>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="disks"> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </param>
        /// <param name="hostProcessor"> Gets or sets the processor details of the host. </param>
        /// <param name="networkAdapters">
        /// List of Network Adapters that were assessed as part of this machine's
        /// assessment.
        /// </param>
        /// <param name="assessedMachineType"> Assessed machine type. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="operatingSystemArchitecture"> Operating system architecture as reported by datacenter management solution. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="percentageCoresUtilization">
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///    Here N and T are settings on Assessment.
        /// </param>
        /// <param name="percentageMemoryUtilization">
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///     Here N and T are settings on Assessment.
        /// </param>
        /// <param name="errors"> List of errors for this machine. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessedMachineExtendedDetails(string displayName, ProductSupportStatus productSupportStatus, IReadOnlyList<AssessedDiskDataV3> disks, ProcessorInfo hostProcessor, IReadOnlyList<AssessedMachineNetworkAdaptersV3> networkAdapters, AssessedMachineType? assessedMachineType, MachineBootType? bootType, string operatingSystemType, string operatingSystemName, string operatingSystemVersion, GuestOperatingSystemArchitecture? operatingSystemArchitecture, string description, float? megabytesOfMemory, int? numberOfCores, float? percentageCoresUtilization, float? percentageMemoryUtilization, IReadOnlyList<Error> errors, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DisplayName = displayName;
            ProductSupportStatus = productSupportStatus;
            Disks = disks;
            HostProcessor = hostProcessor;
            NetworkAdapters = networkAdapters;
            AssessedMachineType = assessedMachineType;
            BootType = bootType;
            OperatingSystemType = operatingSystemType;
            OperatingSystemName = operatingSystemName;
            OperatingSystemVersion = operatingSystemVersion;
            OperatingSystemArchitecture = operatingSystemArchitecture;
            Description = description;
            MegabytesOfMemory = megabytesOfMemory;
            NumberOfCores = numberOfCores;
            PercentageCoresUtilization = percentageCoresUtilization;
            PercentageMemoryUtilization = percentageMemoryUtilization;
            Errors = errors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Display Name of the Machine. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the product support status related details. </summary>
        public ProductSupportStatus ProductSupportStatus { get; }
        /// <summary> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </summary>
        public IReadOnlyList<AssessedDiskDataV3> Disks { get; }
        /// <summary> Gets or sets the processor details of the host. </summary>
        public ProcessorInfo HostProcessor { get; }
        /// <summary>
        /// List of Network Adapters that were assessed as part of this machine's
        /// assessment.
        /// </summary>
        public IReadOnlyList<AssessedMachineNetworkAdaptersV3> NetworkAdapters { get; }
        /// <summary> Assessed machine type. </summary>
        public AssessedMachineType? AssessedMachineType { get; }
        /// <summary> Boot type of machine discovered in private data center. </summary>
        public MachineBootType? BootType { get; }
        /// <summary> Operating system as reported by datacenter management solution. </summary>
        public string OperatingSystemType { get; }
        /// <summary> Operating system as reported by datacenter management solution. </summary>
        public string OperatingSystemName { get; }
        /// <summary> Operating system version as reported by datacenter management solution. </summary>
        public string OperatingSystemVersion { get; }
        /// <summary> Operating system architecture as reported by datacenter management solution. </summary>
        public GuestOperatingSystemArchitecture? OperatingSystemArchitecture { get; }
        /// <summary> Description for the machine. </summary>
        public string Description { get; }
        /// <summary> Megabytes of memory found allocated for the machine in private data center. </summary>
        public float? MegabytesOfMemory { get; }
        /// <summary> Number of CPU cores found on the machine. </summary>
        public int? NumberOfCores { get; }
        /// <summary>
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///    Here N and T are settings on Assessment.
        /// </summary>
        public float? PercentageCoresUtilization { get; }
        /// <summary>
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///     Here N and T are settings on Assessment.
        /// </summary>
        public float? PercentageMemoryUtilization { get; }
        /// <summary> List of errors for this machine. </summary>
        public IReadOnlyList<Error> Errors { get; }
    }
}
