// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Cost type. </summary>
    public readonly partial struct CostType : IEquatable<CostType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CostType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CostType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MonthlyStorageCostValue = "MonthlyStorageCost";
        private const string MonthlyComputeCostValue = "MonthlyComputeCost";
        private const string MonthlyLicensingCostValue = "MonthlyLicensingCost";
        private const string MonthlySecurityCostValue = "MonthlySecurityCost";
        private const string MonthlyManagementCostValue = "MonthlyManagementCost";
        private const string MonitoringServiceValue = "MonitoringService";
        private const string DataProtectionServiceValue = "DataProtectionService";
        private const string PatchingServiceValue = "PatchingService";
        private const string MonthlyAzureHybridCostValue = "MonthlyAzureHybridCost";
        private const string MonthlyPremiumV2StorageCostValue = "MonthlyPremiumV2StorageCost";
        private const string MonthlyLinuxAzureHybridCostValue = "MonthlyLinuxAzureHybridCost";
        private const string MonthlyUltraStorageCostValue = "MonthlyUltraStorageCost";
        private const string MonthlyStandardSsdStorageCostValue = "MonthlyStandardSsdStorageCost";
        private const string MonthlyBandwidthCostValue = "MonthlyBandwidthCost";
        private const string MonthlyPremiumStorageCostValue = "MonthlyPremiumStorageCost";
        private const string MonthlyUltraDiskCostValue = "MonthlyUltraDiskCost";
        private const string MonthlyStandardHddStorageCostValue = "MonthlyStandardHddStorageCost";
        private const string MonthlyAvsExternalStorageCostValue = "MonthlyAvsExternalStorageCost";
        private const string MonthlyAvsNetworkCostValue = "MonthlyAvsNetworkCost";
        private const string MonthlyAvsNodeCostValue = "MonthlyAvsNodeCost";
        private const string TotalMonthlyCostValue = "TotalMonthlyCost";

        /// <summary> MonthlyStorageCost - Cost type. </summary>
        public static CostType MonthlyStorageCost { get; } = new CostType(MonthlyStorageCostValue);
        /// <summary> MonthlyComputeCost - Cost type. </summary>
        public static CostType MonthlyComputeCost { get; } = new CostType(MonthlyComputeCostValue);
        /// <summary> MonthlyLicensingCost - Cost type. </summary>
        public static CostType MonthlyLicensingCost { get; } = new CostType(MonthlyLicensingCostValue);
        /// <summary> MonthlySecurityCost - Cost type. </summary>
        public static CostType MonthlySecurityCost { get; } = new CostType(MonthlySecurityCostValue);
        /// <summary> MonthlyManagementCost - Cost type. </summary>
        public static CostType MonthlyManagementCost { get; } = new CostType(MonthlyManagementCostValue);
        /// <summary> MonitoringService - Cost type. </summary>
        public static CostType MonitoringService { get; } = new CostType(MonitoringServiceValue);
        /// <summary> DataProtectionService - Cost type. </summary>
        public static CostType DataProtectionService { get; } = new CostType(DataProtectionServiceValue);
        /// <summary> PatchingService - Cost type. </summary>
        public static CostType PatchingService { get; } = new CostType(PatchingServiceValue);
        /// <summary> MonthlyAzureHybridCost - Cost type. </summary>
        public static CostType MonthlyAzureHybridCost { get; } = new CostType(MonthlyAzureHybridCostValue);
        /// <summary> MonthlyPremiumV2StorageCost - Cost type. </summary>
        public static CostType MonthlyPremiumV2StorageCost { get; } = new CostType(MonthlyPremiumV2StorageCostValue);
        /// <summary> MonthlyLinuxAzureHybridCost - Cost type. </summary>
        public static CostType MonthlyLinuxAzureHybridCost { get; } = new CostType(MonthlyLinuxAzureHybridCostValue);
        /// <summary> MonthlyUltraStorageCost - Cost type. </summary>
        public static CostType MonthlyUltraStorageCost { get; } = new CostType(MonthlyUltraStorageCostValue);
        /// <summary> MonthlyStandardSsdStorageCost - Cost type. </summary>
        public static CostType MonthlyStandardSsdStorageCost { get; } = new CostType(MonthlyStandardSsdStorageCostValue);
        /// <summary> MonthlyBandwidthCost - Cost type. </summary>
        public static CostType MonthlyBandwidthCost { get; } = new CostType(MonthlyBandwidthCostValue);
        /// <summary> MonthlyPremiumStorageCost - Cost type. </summary>
        public static CostType MonthlyPremiumStorageCost { get; } = new CostType(MonthlyPremiumStorageCostValue);
        /// <summary> MonthlyUltraDiskCost - Cost type. </summary>
        public static CostType MonthlyUltraDiskCost { get; } = new CostType(MonthlyUltraDiskCostValue);
        /// <summary> MonthlyStandardHddStorageCost - Cost type. </summary>
        public static CostType MonthlyStandardHddStorageCost { get; } = new CostType(MonthlyStandardHddStorageCostValue);
        /// <summary> MonthlyAvsExternalStorageCost - Cost type. </summary>
        public static CostType MonthlyAvsExternalStorageCost { get; } = new CostType(MonthlyAvsExternalStorageCostValue);
        /// <summary> MonthlyAvsNetworkCost - Cost type. </summary>
        public static CostType MonthlyAvsNetworkCost { get; } = new CostType(MonthlyAvsNetworkCostValue);
        /// <summary> MonthlyAvsNodeCost - Cost type. </summary>
        public static CostType MonthlyAvsNodeCost { get; } = new CostType(MonthlyAvsNodeCostValue);
        /// <summary> TotalMonthlyCost - Cost type. </summary>
        public static CostType TotalMonthlyCost { get; } = new CostType(TotalMonthlyCostValue);
        /// <summary> Determines if two <see cref="CostType"/> values are the same. </summary>
        public static bool operator ==(CostType left, CostType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CostType"/> values are not the same. </summary>
        public static bool operator !=(CostType left, CostType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CostType"/>. </summary>
        public static implicit operator CostType(string value) => new CostType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CostType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CostType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
