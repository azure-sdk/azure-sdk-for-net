// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Credential type of the run as account. </summary>
    public readonly partial struct CredentialType : IEquatable<CredentialType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CredentialType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VMwareFabricValue = "VMwareFabric";
        private const string HyperVFabricValue = "HyperVFabric";
        private const string LinuxGuestValue = "LinuxGuest";
        private const string WindowsGuestValue = "WindowsGuest";
        private const string LinuxServerValue = "LinuxServer";
        private const string WindowsServerValue = "WindowsServer";

        /// <summary> VMwareFabric. </summary>
        public static CredentialType VMwareFabric { get; } = new CredentialType(VMwareFabricValue);
        /// <summary> HyperVFabric. </summary>
        public static CredentialType HyperVFabric { get; } = new CredentialType(HyperVFabricValue);
        /// <summary> LinuxGuest. </summary>
        public static CredentialType LinuxGuest { get; } = new CredentialType(LinuxGuestValue);
        /// <summary> WindowsGuest. </summary>
        public static CredentialType WindowsGuest { get; } = new CredentialType(WindowsGuestValue);
        /// <summary> LinuxServer. </summary>
        public static CredentialType LinuxServer { get; } = new CredentialType(LinuxServerValue);
        /// <summary> WindowsServer. </summary>
        public static CredentialType WindowsServer { get; } = new CredentialType(WindowsServerValue);
        /// <summary> Determines if two <see cref="CredentialType"/> values are the same. </summary>
        public static bool operator ==(CredentialType left, CredentialType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CredentialType"/> values are not the same. </summary>
        public static bool operator !=(CredentialType left, CredentialType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CredentialType"/>. </summary>
        public static implicit operator CredentialType(string value) => new CredentialType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CredentialType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CredentialType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
