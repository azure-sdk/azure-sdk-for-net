// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Summary of the compound assessment. </summary>
    public partial class DiscoveredLightSummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiscoveredLightSummary"/>. </summary>
        /// <param name="numberOfWebApps"> Number of web apps. </param>
        /// <param name="numberOfWebServers"> Number of web servers. </param>
        /// <param name="numberOfServers"> Number of servers. </param>
        internal DiscoveredLightSummary(int numberOfWebApps, int numberOfWebServers, int numberOfServers)
        {
            NumberOfWebApps = numberOfWebApps;
            NumberOfWebAppsPerType = new ChangeTrackingList<WebAppsPerType>();
            NumberOfWebServersPerType = new ChangeTrackingList<WebServersPerType>();
            NumberOfWebServers = numberOfWebServers;
            NumberOfServers = numberOfServers;
        }

        /// <summary> Initializes a new instance of <see cref="DiscoveredLightSummary"/>. </summary>
        /// <param name="numberOfWebApps"> Number of web apps. </param>
        /// <param name="numberOfWebAppsPerType"> Number of web apps per type. </param>
        /// <param name="numberOfWebServersPerType"> Number of web servers per type. </param>
        /// <param name="numberOfWebServers"> Number of web servers. </param>
        /// <param name="numberOfServers"> Number of servers. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiscoveredLightSummary(int numberOfWebApps, IReadOnlyList<WebAppsPerType> numberOfWebAppsPerType, IReadOnlyList<WebServersPerType> numberOfWebServersPerType, int numberOfWebServers, int numberOfServers, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NumberOfWebApps = numberOfWebApps;
            NumberOfWebAppsPerType = numberOfWebAppsPerType;
            NumberOfWebServersPerType = numberOfWebServersPerType;
            NumberOfWebServers = numberOfWebServers;
            NumberOfServers = numberOfServers;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DiscoveredLightSummary"/> for deserialization. </summary>
        internal DiscoveredLightSummary()
        {
        }

        /// <summary> Number of web apps. </summary>
        public int NumberOfWebApps { get; }
        /// <summary> Number of web apps per type. </summary>
        public IReadOnlyList<WebAppsPerType> NumberOfWebAppsPerType { get; }
        /// <summary> Number of web servers per type. </summary>
        public IReadOnlyList<WebServersPerType> NumberOfWebServersPerType { get; }
        /// <summary> Number of web servers. </summary>
        public int NumberOfWebServers { get; }
        /// <summary> Number of servers. </summary>
        public int NumberOfServers { get; }
    }
}
