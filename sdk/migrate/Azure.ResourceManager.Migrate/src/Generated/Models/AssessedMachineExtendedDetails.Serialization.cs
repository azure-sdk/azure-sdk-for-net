// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessedMachineExtendedDetails : IUtf8JsonSerializable, IJsonModel<AssessedMachineExtendedDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedMachineExtendedDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AssessedMachineExtendedDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedMachineExtendedDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedMachineExtendedDetails)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductSupportStatus))
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Disks))
            {
                writer.WritePropertyName("disks"u8);
                writer.WriteStartArray();
                foreach (var item in Disks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HostProcessor))
            {
                writer.WritePropertyName("hostProcessor"u8);
                writer.WriteObjectValue(HostProcessor, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(NetworkAdapters))
            {
                writer.WritePropertyName("networkAdapters"u8);
                writer.WriteStartArray();
                foreach (var item in NetworkAdapters)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(AssessedMachineType))
            {
                writer.WritePropertyName("assessedMachineType"u8);
                writer.WriteStringValue(AssessedMachineType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BootType))
            {
                writer.WritePropertyName("bootType"u8);
                writer.WriteStringValue(BootType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemType))
            {
                writer.WritePropertyName("operatingSystemType"u8);
                writer.WriteStringValue(OperatingSystemType);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemName))
            {
                writer.WritePropertyName("operatingSystemName"u8);
                writer.WriteStringValue(OperatingSystemName);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemVersion))
            {
                writer.WritePropertyName("operatingSystemVersion"u8);
                writer.WriteStringValue(OperatingSystemVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemArchitecture))
            {
                writer.WritePropertyName("operatingSystemArchitecture"u8);
                writer.WriteStringValue(OperatingSystemArchitecture.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && Optional.IsDefined(MegabytesOfMemory))
            {
                writer.WritePropertyName("megabytesOfMemory"u8);
                writer.WriteNumberValue(MegabytesOfMemory.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfCores))
            {
                writer.WritePropertyName("numberOfCores"u8);
                writer.WriteNumberValue(NumberOfCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PercentageCoresUtilization))
            {
                writer.WritePropertyName("percentageCoresUtilization"u8);
                writer.WriteNumberValue(PercentageCoresUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PercentageMemoryUtilization))
            {
                writer.WritePropertyName("percentageMemoryUtilization"u8);
                writer.WriteNumberValue(PercentageMemoryUtilization.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AssessedMachineExtendedDetails IJsonModel<AssessedMachineExtendedDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedMachineExtendedDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedMachineExtendedDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedMachineExtendedDetails(document.RootElement, options);
        }

        internal static AssessedMachineExtendedDetails DeserializeAssessedMachineExtendedDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string displayName = default;
            ProductSupportStatus productSupportStatus = default;
            IReadOnlyList<AssessedDiskDataV3> disks = default;
            ProcessorInfo hostProcessor = default;
            IReadOnlyList<AssessedMachineNetworkAdaptersV3> networkAdapters = default;
            AssessedMachineType? assessedMachineType = default;
            MachineBootType? bootType = default;
            string operatingSystemType = default;
            string operatingSystemName = default;
            string operatingSystemVersion = default;
            GuestOperatingSystemArchitecture? operatingSystemArchitecture = default;
            string description = default;
            float? megabytesOfMemory = default;
            int? numberOfCores = default;
            float? percentageCoresUtilization = default;
            float? percentageMemoryUtilization = default;
            IReadOnlyList<Error> errors = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productSupportStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    productSupportStatus = ProductSupportStatus.DeserializeProductSupportStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("disks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssessedDiskDataV3> array = new List<AssessedDiskDataV3>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssessedDiskDataV3.DeserializeAssessedDiskDataV3(item, options));
                    }
                    disks = array;
                    continue;
                }
                if (property.NameEquals("hostProcessor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostProcessor = ProcessorInfo.DeserializeProcessorInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("networkAdapters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssessedMachineNetworkAdaptersV3> array = new List<AssessedMachineNetworkAdaptersV3>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssessedMachineNetworkAdaptersV3.DeserializeAssessedMachineNetworkAdaptersV3(item, options));
                    }
                    networkAdapters = array;
                    continue;
                }
                if (property.NameEquals("assessedMachineType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    assessedMachineType = new AssessedMachineType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bootType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bootType = new MachineBootType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("operatingSystemType"u8))
                {
                    operatingSystemType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemName"u8))
                {
                    operatingSystemName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemVersion"u8))
                {
                    operatingSystemVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemArchitecture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    operatingSystemArchitecture = new GuestOperatingSystemArchitecture(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("megabytesOfMemory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    megabytesOfMemory = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("numberOfCores"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("percentageCoresUtilization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    percentageCoresUtilization = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("percentageMemoryUtilization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    percentageMemoryUtilization = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Error> array = new List<Error>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Error.DeserializeError(item, options));
                    }
                    errors = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AssessedMachineExtendedDetails(
                displayName,
                productSupportStatus,
                disks ?? new ChangeTrackingList<AssessedDiskDataV3>(),
                hostProcessor,
                networkAdapters ?? new ChangeTrackingList<AssessedMachineNetworkAdaptersV3>(),
                assessedMachineType,
                bootType,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                operatingSystemArchitecture,
                description,
                megabytesOfMemory,
                numberOfCores,
                percentageCoresUtilization,
                percentageMemoryUtilization,
                errors ?? new ChangeTrackingList<Error>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedMachineExtendedDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedMachineExtendedDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AssessedMachineExtendedDetails)} does not support writing '{options.Format}' format.");
            }
        }

        AssessedMachineExtendedDetails IPersistableModel<AssessedMachineExtendedDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedMachineExtendedDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAssessedMachineExtendedDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedMachineExtendedDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedMachineExtendedDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
