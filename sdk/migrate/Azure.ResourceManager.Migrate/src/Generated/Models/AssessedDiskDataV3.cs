// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Assessed disk data for normalized contract. </summary>
    public partial class AssessedDiskDataV3
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessedDiskDataV3"/>. </summary>
        internal AssessedDiskDataV3()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AssessedDiskDataV3"/>. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="displayName"> The disk display name. </param>
        /// <param name="gigabytesProvisioned"> Gets the gigabytes provisioned. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessedDiskDataV3(string name, string displayName, float? gigabytesProvisioned, float? megabytesPerSecondOfRead, float? megabytesPerSecondOfWrite, float? numberOfReadOperationsPerSecond, float? numberOfWriteOperationsPerSecond, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            DisplayName = displayName;
            GigabytesProvisioned = gigabytesProvisioned;
            MegabytesPerSecondOfRead = megabytesPerSecondOfRead;
            MegabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
            NumberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
            NumberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The disk name. </summary>
        public string Name { get; }
        /// <summary> The disk display name. </summary>
        public string DisplayName { get; }
        /// <summary> Gets the gigabytes provisioned. </summary>
        public float? GigabytesProvisioned { get; }
        /// <summary> Gets the megabytes per second of read. </summary>
        public float? MegabytesPerSecondOfRead { get; }
        /// <summary> Gets the megabytes per second of write. </summary>
        public float? MegabytesPerSecondOfWrite { get; }
        /// <summary> Gets the number of read operations per second. </summary>
        public float? NumberOfReadOperationsPerSecond { get; }
        /// <summary> Gets the number of write operations per second. </summary>
        public float? NumberOfWriteOperationsPerSecond { get; }
    }
}
