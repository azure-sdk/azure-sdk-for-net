// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Assessment details class. </summary>
    public partial class AssessmentDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessmentDetails"/>. </summary>
        public AssessmentDetails()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AssessmentDetails"/>. </summary>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesTimestamp"> Last time when rates were queried. </param>
        /// <param name="createdTimestamp"> Date and Time when assessment was created. </param>
        /// <param name="updatedTimestamp"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessmentDetails(float? confidenceRatingInPercentage, DateTimeOffset? pricesTimestamp, DateTimeOffset? createdTimestamp, DateTimeOffset? updatedTimestamp, AssessmentStatus? status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConfidenceRatingInPercentage = confidenceRatingInPercentage;
            PricesTimestamp = pricesTimestamp;
            CreatedTimestamp = createdTimestamp;
            UpdatedTimestamp = updatedTimestamp;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Confidence Rating in Percentage. </summary>
        public float? ConfidenceRatingInPercentage { get; }
        /// <summary> Last time when rates were queried. </summary>
        public DateTimeOffset? PricesTimestamp { get; }
        /// <summary> Date and Time when assessment was created. </summary>
        public DateTimeOffset? CreatedTimestamp { get; }
        /// <summary> Date and Time when assessment was last updated. </summary>
        public DateTimeOffset? UpdatedTimestamp { get; }
        /// <summary> Whether assessment is in valid state and all machines have been assessed. </summary>
        public AssessmentStatus? Status { get; }
    }
}
