// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class MachineAssessmentSettings : IUtf8JsonSerializable, IJsonModel<MachineAssessmentSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineAssessmentSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MachineAssessmentSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentSettings)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(AzureLocation))
            {
                writer.WritePropertyName("azureLocation"u8);
                writer.WriteStringValue(AzureLocation);
            }
            if (Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency.Value.ToString());
            }
            if (Optional.IsDefined(ScalingFactor))
            {
                writer.WritePropertyName("scalingFactor"u8);
                writer.WriteNumberValue(ScalingFactor.Value);
            }
            if (Optional.IsDefined(DiscountPercentage))
            {
                writer.WritePropertyName("discountPercentage"u8);
                writer.WriteNumberValue(DiscountPercentage.Value);
            }
            if (Optional.IsDefined(SizingCriterion))
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (Optional.IsDefined(PerformanceData))
            {
                writer.WritePropertyName("performanceData"u8);
                writer.WriteObjectValue(PerformanceData, options);
            }
            if (Optional.IsDefined(SavingsSettings))
            {
                writer.WritePropertyName("savingsSettings"u8);
                writer.WriteObjectValue(SavingsSettings, options);
            }
            if (Optional.IsDefined(BillingSettings))
            {
                writer.WritePropertyName("billingSettings"u8);
                writer.WriteObjectValue(BillingSettings, options);
            }
            if (Optional.IsDefined(EnvironmentType))
            {
                writer.WritePropertyName("environmentType"u8);
                writer.WriteStringValue(EnvironmentType.Value.ToString());
            }
            if (Optional.IsDefined(AzureSecurityOfferingType))
            {
                writer.WritePropertyName("azureSecurityOfferingType"u8);
                writer.WriteStringValue(AzureSecurityOfferingType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AzureDiskTypes))
            {
                writer.WritePropertyName("azureDiskTypes"u8);
                writer.WriteStartArray();
                foreach (var item in AzureDiskTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AzurePricingTier))
            {
                writer.WritePropertyName("azurePricingTier"u8);
                writer.WriteStringValue(AzurePricingTier.Value.ToString());
            }
            if (Optional.IsDefined(AzureStorageRedundancy))
            {
                writer.WritePropertyName("azureStorageRedundancy"u8);
                writer.WriteStringValue(AzureStorageRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(AzureHybridUseBenefit))
            {
                writer.WritePropertyName("azureHybridUseBenefit"u8);
                writer.WriteStringValue(AzureHybridUseBenefit.Value.ToString());
            }
            if (Optional.IsDefined(LinuxAzureHybridUseBenefit))
            {
                writer.WritePropertyName("linuxAzureHybridUseBenefit"u8);
                writer.WriteStringValue(LinuxAzureHybridUseBenefit.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AzureVmFamilies))
            {
                writer.WritePropertyName("azureVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in AzureVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(VmUptime))
            {
                writer.WritePropertyName("vmUptime"u8);
                writer.WriteObjectValue(VmUptime, options);
            }
            if (Optional.IsCollectionDefined(AzureVmSecurityOptions))
            {
                writer.WritePropertyName("azureVmSecurityOptions"u8);
                writer.WriteStartArray();
                foreach (var item in AzureVmSecurityOptions)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MachineAssessmentSettings IJsonModel<MachineAssessmentSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineAssessmentSettings(document.RootElement, options);
        }

        internal static MachineAssessmentSettings DeserializeMachineAssessmentSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string azureLocation = default;
            AzureCurrency? currency = default;
            float? scalingFactor = default;
            float? discountPercentage = default;
            AssessmentSizingCriterion? sizingCriterion = default;
            PerformanceData performanceData = default;
            SavingsSettings savingsSettings = default;
            BillingSettings billingSettings = default;
            EnvironmentType? environmentType = default;
            AzureSecurityOfferingType? azureSecurityOfferingType = default;
            IList<AzureDiskType> azureDiskTypes = default;
            AzurePricingTier? azurePricingTier = default;
            AzureStorageRedundancy? azureStorageRedundancy = default;
            AzureHybridUseBenefit? azureHybridUseBenefit = default;
            AzureHybridUseBenefit? linuxAzureHybridUseBenefit = default;
            IList<AzureVmFamily> azureVmFamilies = default;
            VmUptime vmUptime = default;
            IList<AzureVmSecurityType> azureVmSecurityOptions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureLocation"u8))
                {
                    azureLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currency = new AzureCurrency(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scalingFactor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scalingFactor = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("discountPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    discountPercentage = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("sizingCriterion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sizingCriterion = new AssessmentSizingCriterion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("performanceData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    performanceData = PerformanceData.DeserializePerformanceData(property.Value, options);
                    continue;
                }
                if (property.NameEquals("savingsSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    savingsSettings = SavingsSettings.DeserializeSavingsSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("billingSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingSettings = BillingSettings.DeserializeBillingSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("environmentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    environmentType = new EnvironmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureSecurityOfferingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureSecurityOfferingType = new AzureSecurityOfferingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureDiskTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureDiskType> array = new List<AzureDiskType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureDiskType(item.GetString()));
                    }
                    azureDiskTypes = array;
                    continue;
                }
                if (property.NameEquals("azurePricingTier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azurePricingTier = new AzurePricingTier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureStorageRedundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureStorageRedundancy = new AzureStorageRedundancy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureHybridUseBenefit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureHybridUseBenefit = new AzureHybridUseBenefit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("linuxAzureHybridUseBenefit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linuxAzureHybridUseBenefit = new AzureHybridUseBenefit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureVmFamilies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureVmFamily> array = new List<AzureVmFamily>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureVmFamily(item.GetString()));
                    }
                    azureVmFamilies = array;
                    continue;
                }
                if (property.NameEquals("vmUptime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmUptime = VmUptime.DeserializeVmUptime(property.Value, options);
                    continue;
                }
                if (property.NameEquals("azureVmSecurityOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureVmSecurityType> array = new List<AzureVmSecurityType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureVmSecurityType(item.GetString()));
                    }
                    azureVmSecurityOptions = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MachineAssessmentSettings(
                azureLocation,
                currency,
                scalingFactor,
                discountPercentage,
                sizingCriterion,
                performanceData,
                savingsSettings,
                billingSettings,
                environmentType,
                azureSecurityOfferingType,
                azureDiskTypes ?? new ChangeTrackingList<AzureDiskType>(),
                azurePricingTier,
                azureStorageRedundancy,
                azureHybridUseBenefit,
                linuxAzureHybridUseBenefit,
                azureVmFamilies ?? new ChangeTrackingList<AzureVmFamily>(),
                vmUptime,
                azureVmSecurityOptions ?? new ChangeTrackingList<AzureVmSecurityType>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MachineAssessmentSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentSettings)} does not support writing '{options.Format}' format.");
            }
        }

        MachineAssessmentSettings IPersistableModel<MachineAssessmentSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMachineAssessmentSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineAssessmentSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
