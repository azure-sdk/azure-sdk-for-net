// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Migration Platform. </summary>
    public readonly partial struct MigrationPlatform : IEquatable<MigrationPlatform>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrationPlatform"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrationPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PaaSValue = "PaaS";
        private const string IaaSValue = "IaaS";
        private const string SaaSValue = "SaaS";

        /// <summary> Unknown - Migration Platform. </summary>
        public static MigrationPlatform Unknown { get; } = new MigrationPlatform(UnknownValue);
        /// <summary> PaaS - Migration Platform. </summary>
        public static MigrationPlatform PaaS { get; } = new MigrationPlatform(PaaSValue);
        /// <summary> IaaS - Migration Platform. </summary>
        public static MigrationPlatform IaaS { get; } = new MigrationPlatform(IaaSValue);
        /// <summary> SaaS - Migration Platform. </summary>
        public static MigrationPlatform SaaS { get; } = new MigrationPlatform(SaaSValue);
        /// <summary> Determines if two <see cref="MigrationPlatform"/> values are the same. </summary>
        public static bool operator ==(MigrationPlatform left, MigrationPlatform right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrationPlatform"/> values are not the same. </summary>
        public static bool operator !=(MigrationPlatform left, MigrationPlatform right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MigrationPlatform"/>. </summary>
        public static implicit operator MigrationPlatform(string value) => new MigrationPlatform(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrationPlatform other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrationPlatform other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
