// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class HyperVNetworkAdapter
    {
        internal static HyperVNetworkAdapter DeserializeHyperVNetworkAdapter(JsonElement element)
        {
            Optional<string> networkId = default;
            Optional<string> subnetName = default;
            Optional<string> staticIPAddress = default;
            Optional<string> nicType = default;
            Optional<string> nicId = default;
            Optional<string> macAddress = default;
            Optional<IReadOnlyList<string>> ipAddressList = default;
            Optional<string> networkName = default;
            Optional<string> ipAddressType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("networkId"))
                {
                    networkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetName"))
                {
                    subnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("staticIpAddress"))
                {
                    staticIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nicType"))
                {
                    nicType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nicId"))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("macAddress"))
                {
                    macAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddressList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipAddressList = array;
                    continue;
                }
                if (property.NameEquals("networkName"))
                {
                    networkName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddressType"))
                {
                    ipAddressType = property.Value.GetString();
                    continue;
                }
            }
            return new HyperVNetworkAdapter(networkId.Value, subnetName.Value, staticIPAddress.Value, nicType.Value, nicId.Value, macAddress.Value, Optional.ToList(ipAddressList), networkName.Value, ipAddressType.Value);
        }
    }
}
