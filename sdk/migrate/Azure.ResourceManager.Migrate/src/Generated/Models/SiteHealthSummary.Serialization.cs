// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class SiteHealthSummary
    {
        internal static SiteHealthSummary DeserializeSiteHealthSummary(JsonElement element)
        {
            Optional<string> applianceName = default;
            Optional<string> errorMessage = default;
            Optional<string> summaryMessage = default;
            Optional<long> errorId = default;
            Optional<string> errorCode = default;
            Optional<long> affectedObjectsCount = default;
            Optional<long> hitCount = default;
            Optional<string> severity = default;
            Optional<string> remediationGuidance = default;
            Optional<string> affectedResourceType = default;
            Optional<IReadOnlyList<string>> affectedResources = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("applianceName"))
                {
                    applianceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("summaryMessage"))
                {
                    summaryMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    errorId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("errorCode"))
                {
                    errorCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("affectedObjectsCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    affectedObjectsCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("hitCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hitCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("severity"))
                {
                    severity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remediationGuidance"))
                {
                    remediationGuidance = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("affectedResourceType"))
                {
                    affectedResourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("affectedResources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    affectedResources = array;
                    continue;
                }
            }
            return new SiteHealthSummary(applianceName.Value, errorMessage.Value, summaryMessage.Value, Optional.ToNullable(errorId), errorCode.Value, Optional.ToNullable(affectedObjectsCount), Optional.ToNullable(hitCount), severity.Value, remediationGuidance.Value, affectedResourceType.Value, Optional.ToList(affectedResources));
        }
    }
}
