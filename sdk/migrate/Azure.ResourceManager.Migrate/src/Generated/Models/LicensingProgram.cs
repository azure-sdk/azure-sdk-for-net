// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The licensing program. </summary>
    public readonly partial struct LicensingProgram : IEquatable<LicensingProgram>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LicensingProgram"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LicensingProgram(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RetailValue = "Retail";
        private const string UnknownValue = "Unknown";
        private const string EAValue = "EA";
        private const string MCAValue = "MCA";

        /// <summary> Retail/Pay as you go. </summary>
        public static LicensingProgram Retail { get; } = new LicensingProgram(RetailValue);
        /// <summary> Not known. </summary>
        public static LicensingProgram Unknown { get; } = new LicensingProgram(UnknownValue);
        /// <summary> Enterprise agreement. </summary>
        public static LicensingProgram EA { get; } = new LicensingProgram(EAValue);
        /// <summary> Microsoft customer agreement. </summary>
        public static LicensingProgram MCA { get; } = new LicensingProgram(MCAValue);
        /// <summary> Determines if two <see cref="LicensingProgram"/> values are the same. </summary>
        public static bool operator ==(LicensingProgram left, LicensingProgram right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LicensingProgram"/> values are not the same. </summary>
        public static bool operator !=(LicensingProgram left, LicensingProgram right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LicensingProgram"/>. </summary>
        public static implicit operator LicensingProgram(string value) => new LicensingProgram(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LicensingProgram other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LicensingProgram other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
