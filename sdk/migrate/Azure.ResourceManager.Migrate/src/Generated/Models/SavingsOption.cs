// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The savings options. </summary>
    public readonly partial struct SavingsOption : IEquatable<SavingsOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SavingsOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SavingsOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string RI1YearValue = "RI1Year";
        private const string RI3YearValue = "RI3Year";
        private const string SavingsPlan1YearValue = "SavingsPlan1Year";
        private const string SavingsPlan3YearValue = "SavingsPlan3Year";
        private const string CustomAzureOfferCodeValue = "CustomAzureOfferCode";

        /// <summary> No savings options. </summary>
        public static SavingsOption None { get; } = new SavingsOption(NoneValue);
        /// <summary> Reserved Instance for 1 year. </summary>
        public static SavingsOption RI1Year { get; } = new SavingsOption(RI1YearValue);
        /// <summary> Reserved Instance for 3 years. </summary>
        public static SavingsOption RI3Year { get; } = new SavingsOption(RI3YearValue);
        /// <summary> The savings plan for 1 year. </summary>
        public static SavingsOption SavingsPlan1Year { get; } = new SavingsOption(SavingsPlan1YearValue);
        /// <summary> The savings plan for 3  years. </summary>
        public static SavingsOption SavingsPlan3Year { get; } = new SavingsOption(SavingsPlan3YearValue);
        /// <summary> Custom azure offer code. </summary>
        public static SavingsOption CustomAzureOfferCode { get; } = new SavingsOption(CustomAzureOfferCodeValue);
        /// <summary> Determines if two <see cref="SavingsOption"/> values are the same. </summary>
        public static bool operator ==(SavingsOption left, SavingsOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SavingsOption"/> values are not the same. </summary>
        public static bool operator !=(SavingsOption left, SavingsOption right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SavingsOption"/>. </summary>
        public static implicit operator SavingsOption(string value) => new SavingsOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SavingsOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SavingsOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
