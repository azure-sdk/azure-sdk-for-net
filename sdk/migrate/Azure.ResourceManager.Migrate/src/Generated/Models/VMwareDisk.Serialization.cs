// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class VMwareDisk
    {
        internal static VMwareDisk DeserializeVMwareDisk(JsonElement element)
        {
            Optional<string> uuid = default;
            Optional<string> label = default;
            Optional<string> diskProvisioningPolicy = default;
            Optional<string> diskScrubbingPolicy = default;
            Optional<VirtualDiskMode> diskMode = default;
            Optional<long> maxSizeInBytes = default;
            Optional<string> name = default;
            Optional<string> diskType = default;
            Optional<int> lun = default;
            Optional<string> path = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("uuid"))
                {
                    uuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskProvisioningPolicy"))
                {
                    diskProvisioningPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskScrubbingPolicy"))
                {
                    diskScrubbingPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskMode = new VirtualDiskMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxSizeInBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxSizeInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskType"))
                {
                    diskType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lun"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lun = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
            }
            return new VMwareDisk(uuid.Value, label.Value, diskProvisioningPolicy.Value, diskScrubbingPolicy.Value, Optional.ToNullable(diskMode), Optional.ToNullable(maxSizeInBytes), name.Value, diskType.Value, Optional.ToNullable(lun), path.Value);
        }
    }
}
