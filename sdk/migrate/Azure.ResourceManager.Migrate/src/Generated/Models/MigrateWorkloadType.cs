// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Migration Workload type. </summary>
    public readonly partial struct MigrateWorkloadType : IEquatable<MigrateWorkloadType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrateWorkloadType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrateWorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string MachineValue = "Machine";
        private const string ServerValue = "Server";
        private const string InstanceValue = "Instance";
        private const string WebServerValue = "WebServer";
        private const string WebApplicationValue = "WebApplication";
        private const string DatabaseValue = "Database";
        private const string HostValue = "Host";
        private const string ManagementServerValue = "ManagementServer";

        /// <summary> Unknown - Migration Workload type. </summary>
        public static MigrateWorkloadType Unknown { get; } = new MigrateWorkloadType(UnknownValue);
        /// <summary> Machine - Migration Workload type. </summary>
        public static MigrateWorkloadType Machine { get; } = new MigrateWorkloadType(MachineValue);
        /// <summary> Server - Migration Workload type. </summary>
        public static MigrateWorkloadType Server { get; } = new MigrateWorkloadType(ServerValue);
        /// <summary> Instance - Migration Workload type. </summary>
        public static MigrateWorkloadType Instance { get; } = new MigrateWorkloadType(InstanceValue);
        /// <summary> WebServer - Migration Workload type. </summary>
        public static MigrateWorkloadType WebServer { get; } = new MigrateWorkloadType(WebServerValue);
        /// <summary> WebApplication - Migration Workload type. </summary>
        public static MigrateWorkloadType WebApplication { get; } = new MigrateWorkloadType(WebApplicationValue);
        /// <summary> Database - Migration Workload type. </summary>
        public static MigrateWorkloadType Database { get; } = new MigrateWorkloadType(DatabaseValue);
        /// <summary> Host - Migration Workload type. </summary>
        public static MigrateWorkloadType Host { get; } = new MigrateWorkloadType(HostValue);
        /// <summary> ManagementServer - Migration Workload type. </summary>
        public static MigrateWorkloadType ManagementServer { get; } = new MigrateWorkloadType(ManagementServerValue);
        /// <summary> Determines if two <see cref="MigrateWorkloadType"/> values are the same. </summary>
        public static bool operator ==(MigrateWorkloadType left, MigrateWorkloadType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrateWorkloadType"/> values are not the same. </summary>
        public static bool operator !=(MigrateWorkloadType left, MigrateWorkloadType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MigrateWorkloadType"/>. </summary>
        public static implicit operator MigrateWorkloadType(string value) => new MigrateWorkloadType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrateWorkloadType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrateWorkloadType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
