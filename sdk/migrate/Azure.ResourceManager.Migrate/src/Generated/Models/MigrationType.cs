// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Migration Type. </summary>
    public readonly partial struct MigrationType : IEquatable<MigrationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string ReplatformValue = "Replatform";
        private const string RehostValue = "Rehost";
        private const string RetainValue = "Retain";
        private const string RearchitectValue = "Rearchitect";

        /// <summary> Unknown - Migration Type. </summary>
        public static MigrationType Unknown { get; } = new MigrationType(UnknownValue);
        /// <summary> Replatform - Migration Type. </summary>
        public static MigrationType Replatform { get; } = new MigrationType(ReplatformValue);
        /// <summary> Rehost - Migration Type. </summary>
        public static MigrationType Rehost { get; } = new MigrationType(RehostValue);
        /// <summary> Retain - Migration Type. </summary>
        public static MigrationType Retain { get; } = new MigrationType(RetainValue);
        /// <summary> Rearchitect - Migration Type. </summary>
        public static MigrationType Rearchitect { get; } = new MigrationType(RearchitectValue);
        /// <summary> Determines if two <see cref="MigrationType"/> values are the same. </summary>
        public static bool operator ==(MigrationType left, MigrationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrationType"/> values are not the same. </summary>
        public static bool operator !=(MigrationType left, MigrationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MigrationType"/>. </summary>
        public static implicit operator MigrationType(string value) => new MigrationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
