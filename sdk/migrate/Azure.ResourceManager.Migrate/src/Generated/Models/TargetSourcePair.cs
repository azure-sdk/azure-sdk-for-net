// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Target source pair. </summary>
    public partial class TargetSourcePair
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TargetSourcePair"/>. </summary>
        internal TargetSourcePair()
        {
            ManagementDetails = new ChangeTrackingList<ManagementDetails>();
            CostDetails = new ChangeTrackingList<CostDetailsCommon>();
            SavingsDetails = new ChangeTrackingList<SavingsDetailsCommon>();
        }

        /// <summary> Initializes a new instance of <see cref="TargetSourcePair"/>. </summary>
        /// <param name="sourceRef"> The source name. </param>
        /// <param name="targetRef"> The target name. </param>
        /// <param name="sourceCount"> The count of a type of source. </param>
        /// <param name="targetCount"> The count of a type of target. </param>
        /// <param name="migrationDetails"> The migration details. </param>
        /// <param name="managementDetails"> The management details. </param>
        /// <param name="costDetails"> The cost details. </param>
        /// <param name="savingsDetails"> The savings details. </param>
        /// <param name="confidenceScore"> The confidence score. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TargetSourcePair(AssessmentSource? sourceRef, AzureTarget? targetRef, int? sourceCount, int? targetCount, MigrationDetails migrationDetails, IReadOnlyList<ManagementDetails> managementDetails, IReadOnlyList<CostDetailsCommon> costDetails, IReadOnlyList<SavingsDetailsCommon> savingsDetails, double? confidenceScore, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourceRef = sourceRef;
            TargetRef = targetRef;
            SourceCount = sourceCount;
            TargetCount = targetCount;
            MigrationDetails = migrationDetails;
            ManagementDetails = managementDetails;
            CostDetails = costDetails;
            SavingsDetails = savingsDetails;
            ConfidenceScore = confidenceScore;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The source name. </summary>
        public AssessmentSource? SourceRef { get; }
        /// <summary> The target name. </summary>
        public AzureTarget? TargetRef { get; }
        /// <summary> The count of a type of source. </summary>
        public int? SourceCount { get; }
        /// <summary> The count of a type of target. </summary>
        public int? TargetCount { get; }
        /// <summary> The migration details. </summary>
        public MigrationDetails MigrationDetails { get; }
        /// <summary> The management details. </summary>
        public IReadOnlyList<ManagementDetails> ManagementDetails { get; }
        /// <summary> The cost details. </summary>
        public IReadOnlyList<CostDetailsCommon> CostDetails { get; }
        /// <summary> The savings details. </summary>
        public IReadOnlyList<SavingsDetailsCommon> SavingsDetails { get; }
        /// <summary> The confidence score. </summary>
        public double? ConfidenceScore { get; }
    }
}
