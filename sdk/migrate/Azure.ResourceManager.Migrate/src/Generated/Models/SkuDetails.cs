// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Sku details. </summary>
    public partial class SkuDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SkuDetails"/>. </summary>
        internal SkuDetails()
        {
            Capabilities = new ChangeTrackingList<NameValuePair>();
            TotalCost = new ChangeTrackingList<CostDetailsCommon>();
            TotalSavings = new ChangeTrackingList<SavingsDetailsCommon>();
        }

        /// <summary> Initializes a new instance of <see cref="SkuDetails"/>. </summary>
        /// <param name="skuType"> The sku type. </param>
        /// <param name="skuName"> The sku name. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="totalCost"> The sku cost details. </param>
        /// <param name="totalSavings"> The sku savings details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SkuDetails(SkuType? skuType, string skuName, IReadOnlyList<NameValuePair> capabilities, IReadOnlyList<CostDetailsCommon> totalCost, IReadOnlyList<SavingsDetailsCommon> totalSavings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SkuType = skuType;
            SkuName = skuName;
            Capabilities = capabilities;
            TotalCost = totalCost;
            TotalSavings = totalSavings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The sku type. </summary>
        public SkuType? SkuType { get; }
        /// <summary> The sku name. </summary>
        public string SkuName { get; }
        /// <summary> The capabilities. </summary>
        public IReadOnlyList<NameValuePair> Capabilities { get; }
        /// <summary> The sku cost details. </summary>
        public IReadOnlyList<CostDetailsCommon> TotalCost { get; }
        /// <summary> The sku savings details. </summary>
        public IReadOnlyList<SavingsDetailsCommon> TotalSavings { get; }
    }
}
