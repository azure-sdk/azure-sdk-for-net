// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class SiteProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ServicePrincipalIdentityDetails))
            {
                writer.WritePropertyName("servicePrincipalIdentityDetails");
                writer.WriteObjectValue(ServicePrincipalIdentityDetails);
            }
            if (Optional.IsDefined(AgentDetails))
            {
                writer.WritePropertyName("agentDetails");
                writer.WriteObjectValue(AgentDetails);
            }
            if (Optional.IsDefined(DiscoverySolutionId))
            {
                writer.WritePropertyName("discoverySolutionId");
                writer.WriteStringValue(DiscoverySolutionId);
            }
            if (Optional.IsDefined(ApplianceName))
            {
                writer.WritePropertyName("applianceName");
                writer.WriteStringValue(ApplianceName);
            }
            writer.WriteEndObject();
        }

        internal static SiteProperties DeserializeSiteProperties(JsonElement element)
        {
            Optional<SiteSpnProperties> servicePrincipalIdentityDetails = default;
            Optional<SiteAgentProperties> agentDetails = default;
            Optional<string> serviceEndpoint = default;
            Optional<string> discoverySolutionId = default;
            Optional<string> applianceName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("servicePrincipalIdentityDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    servicePrincipalIdentityDetails = SiteSpnProperties.DeserializeSiteSpnProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("agentDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentDetails = SiteAgentProperties.DeserializeSiteAgentProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceEndpoint"))
                {
                    serviceEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discoverySolutionId"))
                {
                    discoverySolutionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applianceName"))
                {
                    applianceName = property.Value.GetString();
                    continue;
                }
            }
            return new SiteProperties(servicePrincipalIdentityDetails.Value, agentDetails.Value, serviceEndpoint.Value, discoverySolutionId.Value, applianceName.Value);
        }
    }
}
