// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class VMwareMachineProperties
    {
        internal static VMwareMachineProperties DeserializeVMwareMachineProperties(JsonElement element)
        {
            Optional<string> dataCenterScope = default;
            Optional<string> firmware = default;
            Optional<string> description = default;
            Optional<string> vCenterFQDN = default;
            Optional<string> vCenterId = default;
            Optional<string> vMwareToolsStatus = default;
            Optional<bool> changeTrackingSupported = default;
            Optional<bool> changeTrackingEnabled = default;
            Optional<int> maxSnapshots = default;
            Optional<IReadOnlyList<VMwareDisk>> disks = default;
            Optional<AppsAndRoles> appsAndRoles = default;
            Optional<bool> hostInMaintenanceMode = default;
            Optional<string> hostName = default;
            Optional<string> hostPowerState = default;
            Optional<string> hostVersion = default;
            Optional<IReadOnlyList<VMwareNetworkAdapter>> networkAdapters = default;
            Optional<string> dependencyMapping = default;
            Optional<DateTimeOffset> dependencyMappingStartTime = default;
            Optional<string> displayName = default;
            Optional<int> numberOfProcessorCore = default;
            Optional<double> allocatedMemoryInMB = default;
            Optional<string> vmConfigurationFileLocation = default;
            Optional<OperatingSystem> operatingSystemDetails = default;
            Optional<GuestOSDetails> guestOSDetails = default;
            Optional<int> numberOfApplications = default;
            Optional<DateTimeOffset> guestDetailsDiscoveryTimestamp = default;
            Optional<bool> isGuestDetailsDiscoveryInProgress = default;
            Optional<string> createdTimestamp = default;
            Optional<string> updatedTimestamp = default;
            Optional<string> instanceUuid = default;
            Optional<string> powerStatus = default;
            Optional<string> biosSerialNumber = default;
            Optional<string> biosGuid = default;
            Optional<string> vmFqdn = default;
            Optional<bool> isDeleted = default;
            Optional<IReadOnlyList<HealthErrorDetails>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataCenterScope"))
                {
                    dataCenterScope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmware"))
                {
                    firmware = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vCenterFQDN"))
                {
                    vCenterFQDN = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vCenterId"))
                {
                    vCenterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vMwareToolsStatus"))
                {
                    vMwareToolsStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("changeTrackingSupported"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    changeTrackingSupported = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("changeTrackingEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    changeTrackingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maxSnapshots"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxSnapshots = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("disks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<VMwareDisk> array = new List<VMwareDisk>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareDisk.DeserializeVMwareDisk(item));
                    }
                    disks = array;
                    continue;
                }
                if (property.NameEquals("appsAndRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appsAndRoles = AppsAndRoles.DeserializeAppsAndRoles(property.Value);
                    continue;
                }
                if (property.NameEquals("hostInMaintenanceMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hostInMaintenanceMode = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hostName"))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostPowerState"))
                {
                    hostPowerState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostVersion"))
                {
                    hostVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkAdapters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<VMwareNetworkAdapter> array = new List<VMwareNetworkAdapter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareNetworkAdapter.DeserializeVMwareNetworkAdapter(item));
                    }
                    networkAdapters = array;
                    continue;
                }
                if (property.NameEquals("dependencyMapping"))
                {
                    dependencyMapping = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dependencyMappingStartTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dependencyMappingStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfProcessorCore"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfProcessorCore = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allocatedMemoryInMB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allocatedMemoryInMB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("vmConfigurationFileLocation"))
                {
                    vmConfigurationFileLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operatingSystemDetails = OperatingSystem.DeserializeOperatingSystem(property.Value);
                    continue;
                }
                if (property.NameEquals("guestOSDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    guestOSDetails = GuestOSDetails.DeserializeGuestOSDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("numberOfApplications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfApplications = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("guestDetailsDiscoveryTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    guestDetailsDiscoveryTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isGuestDetailsDiscoveryInProgress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isGuestDetailsDiscoveryInProgress = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createdTimestamp"))
                {
                    createdTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    updatedTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceUuid"))
                {
                    instanceUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerStatus"))
                {
                    powerStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("biosSerialNumber"))
                {
                    biosSerialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("biosGuid"))
                {
                    biosGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmFqdn"))
                {
                    vmFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDeleted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDeleted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthErrorDetails> array = new List<HealthErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorDetails.DeserializeHealthErrorDetails(item));
                    }
                    errors = array;
                    continue;
                }
            }
            return new VMwareMachineProperties(dataCenterScope.Value, firmware.Value, description.Value, vCenterFQDN.Value, vCenterId.Value, vMwareToolsStatus.Value, Optional.ToNullable(changeTrackingSupported), Optional.ToNullable(changeTrackingEnabled), Optional.ToNullable(maxSnapshots), Optional.ToList(disks), appsAndRoles.Value, Optional.ToNullable(hostInMaintenanceMode), hostName.Value, hostPowerState.Value, hostVersion.Value, Optional.ToList(networkAdapters), dependencyMapping.Value, Optional.ToNullable(dependencyMappingStartTime), displayName.Value, Optional.ToNullable(numberOfProcessorCore), Optional.ToNullable(allocatedMemoryInMB), vmConfigurationFileLocation.Value, operatingSystemDetails.Value, guestOSDetails.Value, Optional.ToNullable(numberOfApplications), Optional.ToNullable(guestDetailsDiscoveryTimestamp), Optional.ToNullable(isGuestDetailsDiscoveryInProgress), createdTimestamp.Value, updatedTimestamp.Value, instanceUuid.Value, powerStatus.Value, biosSerialNumber.Value, biosGuid.Value, vmFqdn.Value, Optional.ToNullable(isDeleted), Optional.ToList(errors));
        }
    }
}
