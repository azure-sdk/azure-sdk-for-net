// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class MachineAssessmentRecommendation : IUtf8JsonSerializable, IJsonModel<MachineAssessmentRecommendation>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineAssessmentRecommendation>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MachineAssessmentRecommendation>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentRecommendation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentRecommendation)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Configuration))
            {
                writer.WritePropertyName("configuration"u8);
                writer.WriteObjectValue(Configuration, options);
            }
            if (options.Format != "W" && Optional.IsDefined(RecommendedFor))
            {
                writer.WritePropertyName("recommendedFor"u8);
                writer.WriteObjectValue(RecommendedFor, options);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationPlatform))
            {
                writer.WritePropertyName("migrationPlatform"u8);
                writer.WriteStringValue(MigrationPlatform.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ConfidenceScore))
            {
                writer.WritePropertyName("confidenceScore"u8);
                writer.WriteNumberValue(ConfidenceScore.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationSuitability))
            {
                writer.WritePropertyName("migrationSuitability"u8);
                writer.WriteObjectValue(MigrationSuitability, options);
            }
            if (options.Format != "W" && Optional.IsDefined(SecuritySuitability))
            {
                writer.WritePropertyName("securitySuitability"u8);
                writer.WriteObjectValue(SecuritySuitability, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(TotalCost))
            {
                writer.WritePropertyName("totalCost"u8);
                writer.WriteStartArray();
                foreach (var item in TotalCost)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(TotalSavings))
            {
                writer.WritePropertyName("totalSavings"u8);
                writer.WriteStartArray();
                foreach (var item in TotalSavings)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(MigrationIssues))
            {
                writer.WritePropertyName("migrationIssues"u8);
                writer.WriteStartArray();
                foreach (var item in MigrationIssues)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Skus))
            {
                writer.WritePropertyName("skus"u8);
                writer.WriteStartArray();
                foreach (var item in Skus)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VmSecuritySuitabilityResults))
            {
                writer.WritePropertyName("vmSecuritySuitabilityResults"u8);
                writer.WriteStartArray();
                foreach (var item in VmSecuritySuitabilityResults)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(RecommendedVmSecurityType))
            {
                writer.WritePropertyName("recommendedVmSecurityType"u8);
                writer.WriteStringValue(RecommendedVmSecurityType.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MachineAssessmentRecommendation IJsonModel<MachineAssessmentRecommendation>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentRecommendation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineAssessmentRecommendation)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineAssessmentRecommendation(document.RootElement, options);
        }

        internal static MachineAssessmentRecommendation DeserializeMachineAssessmentRecommendation(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Configuration configuration = default;
            RecommendedFor recommendedFor = default;
            MigrationPlatform? migrationPlatform = default;
            float? confidenceScore = default;
            MigrationSuitability migrationSuitability = default;
            SecuritySuitability securitySuitability = default;
            IReadOnlyList<CostDetailsCommon> totalCost = default;
            IReadOnlyList<SavingsDetailsCommon> totalSavings = default;
            IReadOnlyList<MigrationIssues> migrationIssues = default;
            IReadOnlyList<SkusMigrationSuitability> skus = default;
            IReadOnlyList<VmSecuritySuitability> vmSecuritySuitabilityResults = default;
            AzureVmSecurityType? recommendedVmSecurityType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configuration = Configuration.DeserializeConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("recommendedFor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedFor = RecommendedFor.DeserializeRecommendedFor(property.Value, options);
                    continue;
                }
                if (property.NameEquals("migrationPlatform"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationPlatform = new MigrationPlatform(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("confidenceScore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    confidenceScore = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("migrationSuitability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationSuitability = MigrationSuitability.DeserializeMigrationSuitability(property.Value, options);
                    continue;
                }
                if (property.NameEquals("securitySuitability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securitySuitability = SecuritySuitability.DeserializeSecuritySuitability(property.Value, options);
                    continue;
                }
                if (property.NameEquals("totalCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CostDetailsCommon> array = new List<CostDetailsCommon>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CostDetailsCommon.DeserializeCostDetailsCommon(item, options));
                    }
                    totalCost = array;
                    continue;
                }
                if (property.NameEquals("totalSavings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SavingsDetailsCommon> array = new List<SavingsDetailsCommon>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SavingsDetailsCommon.DeserializeSavingsDetailsCommon(item, options));
                    }
                    totalSavings = array;
                    continue;
                }
                if (property.NameEquals("migrationIssues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MigrationIssues> array = new List<MigrationIssues>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.MigrationIssues.DeserializeMigrationIssues(item, options));
                    }
                    migrationIssues = array;
                    continue;
                }
                if (property.NameEquals("skus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SkusMigrationSuitability> array = new List<SkusMigrationSuitability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkusMigrationSuitability.DeserializeSkusMigrationSuitability(item, options));
                    }
                    skus = array;
                    continue;
                }
                if (property.NameEquals("vmSecuritySuitabilityResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VmSecuritySuitability> array = new List<VmSecuritySuitability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VmSecuritySuitability.DeserializeVmSecuritySuitability(item, options));
                    }
                    vmSecuritySuitabilityResults = array;
                    continue;
                }
                if (property.NameEquals("recommendedVmSecurityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedVmSecurityType = new AzureVmSecurityType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MachineAssessmentRecommendation(
                configuration,
                recommendedFor,
                migrationPlatform,
                confidenceScore,
                migrationSuitability,
                securitySuitability,
                totalCost ?? new ChangeTrackingList<CostDetailsCommon>(),
                totalSavings ?? new ChangeTrackingList<SavingsDetailsCommon>(),
                migrationIssues ?? new ChangeTrackingList<MigrationIssues>(),
                skus ?? new ChangeTrackingList<SkusMigrationSuitability>(),
                vmSecuritySuitabilityResults ?? new ChangeTrackingList<VmSecuritySuitability>(),
                recommendedVmSecurityType,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MachineAssessmentRecommendation>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentRecommendation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentRecommendation)} does not support writing '{options.Format}' format.");
            }
        }

        MachineAssessmentRecommendation IPersistableModel<MachineAssessmentRecommendation>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineAssessmentRecommendation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMachineAssessmentRecommendation(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MachineAssessmentRecommendation)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineAssessmentRecommendation>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
