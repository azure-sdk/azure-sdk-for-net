// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class HyperVMachineProperties
    {
        internal static HyperVMachineProperties DeserializeHyperVMachineProperties(JsonElement element)
        {
            Optional<string> hostFqdn = default;
            Optional<string> hostId = default;
            Optional<string> clusterFqdn = default;
            Optional<string> clusterId = default;
            Optional<string> managementServerType = default;
            Optional<int> generation = default;
            Optional<string> version = default;
            Optional<HighlyAvailable> highAvailability = default;
            Optional<int> maxMemoryMB = default;
            Optional<string> firmware = default;
            Optional<bool> isDynamicMemoryEnabled = default;
            Optional<IReadOnlyList<HyperVDisk>> disks = default;
            Optional<AppsAndRoles> appsAndRoles = default;
            Optional<IReadOnlyList<HyperVNetworkAdapter>> networkAdapters = default;
            Optional<string> displayName = default;
            Optional<int> numberOfProcessorCore = default;
            Optional<double> allocatedMemoryInMB = default;
            Optional<string> vmConfigurationFileLocation = default;
            Optional<OperatingSystem> operatingSystemDetails = default;
            Optional<GuestOSDetails> guestOSDetails = default;
            Optional<int> numberOfApplications = default;
            Optional<DateTimeOffset> guestDetailsDiscoveryTimestamp = default;
            Optional<bool> isGuestDetailsDiscoveryInProgress = default;
            Optional<string> createdTimestamp = default;
            Optional<string> updatedTimestamp = default;
            Optional<string> instanceUuid = default;
            Optional<string> powerStatus = default;
            Optional<string> biosSerialNumber = default;
            Optional<string> biosGuid = default;
            Optional<string> vmFqdn = default;
            Optional<bool> isDeleted = default;
            Optional<IReadOnlyList<HealthErrorDetails>> errors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostFqdn"))
                {
                    hostFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostId"))
                {
                    hostId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterFqdn"))
                {
                    clusterFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterId"))
                {
                    clusterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managementServerType"))
                {
                    managementServerType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("generation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    generation = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highAvailability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    highAvailability = property.Value.GetString().ToHighlyAvailable();
                    continue;
                }
                if (property.NameEquals("maxMemoryMB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxMemoryMB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("firmware"))
                {
                    firmware = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDynamicMemoryEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDynamicMemoryEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("disks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HyperVDisk> array = new List<HyperVDisk>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVDisk.DeserializeHyperVDisk(item));
                    }
                    disks = array;
                    continue;
                }
                if (property.NameEquals("appsAndRoles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appsAndRoles = AppsAndRoles.DeserializeAppsAndRoles(property.Value);
                    continue;
                }
                if (property.NameEquals("networkAdapters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HyperVNetworkAdapter> array = new List<HyperVNetworkAdapter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVNetworkAdapter.DeserializeHyperVNetworkAdapter(item));
                    }
                    networkAdapters = array;
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfProcessorCore"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfProcessorCore = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allocatedMemoryInMB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allocatedMemoryInMB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("vmConfigurationFileLocation"))
                {
                    vmConfigurationFileLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operatingSystemDetails = OperatingSystem.DeserializeOperatingSystem(property.Value);
                    continue;
                }
                if (property.NameEquals("guestOSDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    guestOSDetails = GuestOSDetails.DeserializeGuestOSDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("numberOfApplications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfApplications = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("guestDetailsDiscoveryTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    guestDetailsDiscoveryTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isGuestDetailsDiscoveryInProgress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isGuestDetailsDiscoveryInProgress = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createdTimestamp"))
                {
                    createdTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    updatedTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceUuid"))
                {
                    instanceUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("powerStatus"))
                {
                    powerStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("biosSerialNumber"))
                {
                    biosSerialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("biosGuid"))
                {
                    biosGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmFqdn"))
                {
                    vmFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDeleted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDeleted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthErrorDetails> array = new List<HealthErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorDetails.DeserializeHealthErrorDetails(item));
                    }
                    errors = array;
                    continue;
                }
            }
            return new HyperVMachineProperties(hostFqdn.Value, hostId.Value, clusterFqdn.Value, clusterId.Value, managementServerType.Value, Optional.ToNullable(generation), version.Value, Optional.ToNullable(highAvailability), Optional.ToNullable(maxMemoryMB), firmware.Value, Optional.ToNullable(isDynamicMemoryEnabled), Optional.ToList(disks), appsAndRoles.Value, Optional.ToList(networkAdapters), displayName.Value, Optional.ToNullable(numberOfProcessorCore), Optional.ToNullable(allocatedMemoryInMB), vmConfigurationFileLocation.Value, operatingSystemDetails.Value, guestOSDetails.Value, Optional.ToNullable(numberOfApplications), Optional.ToNullable(guestDetailsDiscoveryTimestamp), Optional.ToNullable(isGuestDetailsDiscoveryInProgress), createdTimestamp.Value, updatedTimestamp.Value, instanceUuid.Value, powerStatus.Value, biosSerialNumber.Value, biosGuid.Value, vmFqdn.Value, Optional.ToNullable(isDeleted), Optional.ToList(errors));
        }
    }
}
