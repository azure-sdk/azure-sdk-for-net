// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Linkages details. </summary>
    public partial class Linkages
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Linkages"/>. </summary>
        internal Linkages()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Linkages"/>. </summary>
        /// <param name="workloadName"> The workload name. </param>
        /// <param name="linkageType"> The linkage type. </param>
        /// <param name="kind"> The linkage kind. </param>
        /// <param name="armId"> The arm id. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Linkages(string workloadName, LinkageType? linkageType, LinkageKind? kind, string armId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkloadName = workloadName;
            LinkageType = linkageType;
            Kind = kind;
            ArmId = armId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The workload name. </summary>
        public string WorkloadName { get; }
        /// <summary> The linkage type. </summary>
        public LinkageType? LinkageType { get; }
        /// <summary> The linkage kind. </summary>
        public LinkageKind? Kind { get; }
        /// <summary> The arm id. </summary>
        public string ArmId { get; }
    }
}
