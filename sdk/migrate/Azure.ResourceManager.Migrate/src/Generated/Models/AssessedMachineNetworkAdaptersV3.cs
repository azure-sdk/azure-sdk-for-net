// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Assessed network adapter data for normalized contract for sql machines. </summary>
    public partial class AssessedMachineNetworkAdaptersV3
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessedMachineNetworkAdaptersV3"/>. </summary>
        internal AssessedMachineNetworkAdaptersV3()
        {
            IPAddresses = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AssessedMachineNetworkAdaptersV3"/>. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="netGigabytesTransmittedPerMonth"> Gets the net gigabytes transmitted per month. </param>
        /// <param name="macAddress"> Gets the mac address. </param>
        /// <param name="ipAddresses"> Gets the ip addresses. </param>
        /// <param name="megabytesPerSecondRecieved"> Gets the megabytes per second received. </param>
        /// <param name="megabytesPerSecondTransmitted"> Gets the megabytes per second transmitted. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessedMachineNetworkAdaptersV3(string name, float? netGigabytesTransmittedPerMonth, string macAddress, IReadOnlyList<string> ipAddresses, float? megabytesPerSecondRecieved, float? megabytesPerSecondTransmitted, string displayName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            NetGigabytesTransmittedPerMonth = netGigabytesTransmittedPerMonth;
            MacAddress = macAddress;
            IPAddresses = ipAddresses;
            MegabytesPerSecondRecieved = megabytesPerSecondRecieved;
            MegabytesPerSecondTransmitted = megabytesPerSecondTransmitted;
            DisplayName = displayName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The disk name. </summary>
        public string Name { get; }
        /// <summary> Gets the net gigabytes transmitted per month. </summary>
        public float? NetGigabytesTransmittedPerMonth { get; }
        /// <summary> Gets the mac address. </summary>
        public string MacAddress { get; }
        /// <summary> Gets the ip addresses. </summary>
        public IReadOnlyList<string> IPAddresses { get; }
        /// <summary> Gets the megabytes per second received. </summary>
        public float? MegabytesPerSecondRecieved { get; }
        /// <summary> Gets the megabytes per second transmitted. </summary>
        public float? MegabytesPerSecondTransmitted { get; }
        /// <summary> Display Name of the Machine. </summary>
        public string DisplayName { get; }
    }
}
