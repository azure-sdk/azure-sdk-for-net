// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> WebApp compound assessment summary properties class. </summary>
    public partial class WebAppCompoundAssessmentSummaryProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WebAppCompoundAssessmentSummaryProperties"/>. </summary>
        internal WebAppCompoundAssessmentSummaryProperties()
        {
            Sources = new ChangeTrackingList<SourceDetails>();
            Targets = new ChangeTrackingList<TargetDetails>();
            TargetSourceMapping = new ChangeTrackingList<TargetSourcePair>();
            CostComponents = new ChangeTrackingList<CostDetailsCommon>();
            SavingsComponents = new ChangeTrackingList<SavingsDetailsCommon>();
        }

        /// <summary> Initializes a new instance of <see cref="WebAppCompoundAssessmentSummaryProperties"/>. </summary>
        /// <param name="summaryType"> The summary type. </param>
        /// <param name="summaryName"> The summary name. </param>
        /// <param name="sources"> The source details list. </param>
        /// <param name="targets"> The target details list. </param>
        /// <param name="targetSourceMapping"> The target source mapping. </param>
        /// <param name="costComponents"> The cost components. </param>
        /// <param name="savingsComponents"> The cost components. </param>
        /// <param name="assessmentName"> Name of the assessment. </param>
        /// <param name="discoveredLightSummary"> Light summary of the compound assessment. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WebAppCompoundAssessmentSummaryProperties(SummaryType? summaryType, string summaryName, IReadOnlyList<SourceDetails> sources, IReadOnlyList<TargetDetails> targets, IReadOnlyList<TargetSourcePair> targetSourceMapping, IReadOnlyList<CostDetailsCommon> costComponents, IReadOnlyList<SavingsDetailsCommon> savingsComponents, string assessmentName, DiscoveredLightSummary discoveredLightSummary, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SummaryType = summaryType;
            SummaryName = summaryName;
            Sources = sources;
            Targets = targets;
            TargetSourceMapping = targetSourceMapping;
            CostComponents = costComponents;
            SavingsComponents = savingsComponents;
            AssessmentName = assessmentName;
            DiscoveredLightSummary = discoveredLightSummary;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The summary type. </summary>
        public SummaryType? SummaryType { get; }
        /// <summary> The summary name. </summary>
        public string SummaryName { get; }
        /// <summary> The source details list. </summary>
        public IReadOnlyList<SourceDetails> Sources { get; }
        /// <summary> The target details list. </summary>
        public IReadOnlyList<TargetDetails> Targets { get; }
        /// <summary> The target source mapping. </summary>
        public IReadOnlyList<TargetSourcePair> TargetSourceMapping { get; }
        /// <summary> The cost components. </summary>
        public IReadOnlyList<CostDetailsCommon> CostComponents { get; }
        /// <summary> The cost components. </summary>
        public IReadOnlyList<SavingsDetailsCommon> SavingsComponents { get; }
        /// <summary> Name of the assessment. </summary>
        public string AssessmentName { get; }
        /// <summary> Light summary of the compound assessment. </summary>
        public DiscoveredLightSummary DiscoveredLightSummary { get; }
    }
}
