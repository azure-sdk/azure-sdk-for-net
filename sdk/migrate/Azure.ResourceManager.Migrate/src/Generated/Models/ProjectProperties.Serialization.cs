// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class ProjectProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AssessmentSolutionId))
            {
                writer.WritePropertyName("assessmentSolutionId"u8);
                writer.WriteStringValue(AssessmentSolutionId);
            }
            if (Optional.IsDefined(ProjectStatus))
            {
                writer.WritePropertyName("projectStatus"u8);
                writer.WriteStringValue(ProjectStatus.Value.ToString());
            }
            if (Optional.IsDefined(CustomerWorkspaceId))
            {
                writer.WritePropertyName("customerWorkspaceId"u8);
                writer.WriteStringValue(CustomerWorkspaceId);
            }
            if (Optional.IsDefined(CustomerWorkspaceLocation))
            {
                writer.WritePropertyName("customerWorkspaceLocation"u8);
                writer.WriteStringValue(CustomerWorkspaceLocation);
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess);
            }
            if (Optional.IsDefined(CustomerStorageAccountArmId))
            {
                writer.WritePropertyName("customerStorageAccountArmId"u8);
                writer.WriteStringValue(CustomerStorageAccountArmId);
            }
            writer.WriteEndObject();
        }

        internal static ProjectProperties DeserializeProjectProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            Optional<string> serviceEndpoint = default;
            Optional<string> assessmentSolutionId = default;
            Optional<ProjectStatus> projectStatus = default;
            Optional<string> customerWorkspaceId = default;
            Optional<string> customerWorkspaceLocation = default;
            Optional<int> numberOfGroups = default;
            Optional<int> numberOfMachines = default;
            Optional<int> numberOfAssessments = default;
            Optional<DateTimeOffset?> lastAssessmentTimestamp = default;
            Optional<string> publicNetworkAccess = default;
            Optional<IReadOnlyList<MigratePrivateEndpointConnectionData>> privateEndpointConnections = default;
            Optional<string> customerStorageAccountArmId = default;
            Optional<ProvisioningState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("createdTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updatedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("serviceEndpoint"u8))
                {
                    serviceEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assessmentSolutionId"u8))
                {
                    assessmentSolutionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    projectStatus = new ProjectStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerWorkspaceId"u8))
                {
                    customerWorkspaceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerWorkspaceLocation"u8))
                {
                    customerWorkspaceLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfGroups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfGroups = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfMachines"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfMachines = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfAssessments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfAssessments = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lastAssessmentTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lastAssessmentTimestamp = null;
                        continue;
                    }
                    lastAssessmentTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    publicNetworkAccess = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MigratePrivateEndpointConnectionData> array = new List<MigratePrivateEndpointConnectionData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MigratePrivateEndpointConnectionData.DeserializeMigratePrivateEndpointConnectionData(item));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
                if (property.NameEquals("customerStorageAccountArmId"u8))
                {
                    customerStorageAccountArmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return new ProjectProperties(Optional.ToNullable(createdTimestamp), Optional.ToNullable(updatedTimestamp), serviceEndpoint.Value, assessmentSolutionId.Value, Optional.ToNullable(projectStatus), customerWorkspaceId.Value, customerWorkspaceLocation.Value, Optional.ToNullable(numberOfGroups), Optional.ToNullable(numberOfMachines), Optional.ToNullable(numberOfAssessments), Optional.ToNullable(lastAssessmentTimestamp), publicNetworkAccess.Value, Optional.ToList(privateEndpointConnections), customerStorageAccountArmId.Value, Optional.ToNullable(provisioningState));
        }
    }
}
