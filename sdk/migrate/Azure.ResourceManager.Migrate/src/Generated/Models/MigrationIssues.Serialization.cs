// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class MigrationIssues : IUtf8JsonSerializable, IJsonModel<MigrationIssues>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrationIssues>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MigrationIssues>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationIssues>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationIssues)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(IssueCode))
            {
                writer.WritePropertyName("issueCode"u8);
                writer.WriteStringValue(IssueCode);
            }
            if (options.Format != "W" && Optional.IsDefined(IssueCategory))
            {
                writer.WritePropertyName("issueCategory"u8);
                writer.WriteStringValue(IssueCategory.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(IssueDescription))
            {
                writer.WritePropertyName("issueDescription"u8);
                writer.WriteStringValue(IssueDescription);
            }
            if (options.Format != "W" && Optional.IsDefined(PossibleCause))
            {
                writer.WritePropertyName("possibleCause"u8);
                writer.WriteStringValue(PossibleCause);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RecommendedActions))
            {
                writer.WritePropertyName("recommendedActions"u8);
                writer.WriteStartArray();
                foreach (var item in RecommendedActions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(MoreInformation))
            {
                writer.WritePropertyName("moreInformation"u8);
                writer.WriteStartArray();
                foreach (var item in MoreInformation)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MigrationIssues IJsonModel<MigrationIssues>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationIssues>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrationIssues)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrationIssues(document.RootElement, options);
        }

        internal static MigrationIssues DeserializeMigrationIssues(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string issueCode = default;
            MigrationIssuesCategory? issueCategory = default;
            string issueDescription = default;
            string possibleCause = default;
            IReadOnlyList<string> recommendedActions = default;
            IReadOnlyList<MoreInformation> moreInformation = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("issueCode"u8))
                {
                    issueCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("issueCategory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    issueCategory = new MigrationIssuesCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("issueDescription"u8))
                {
                    issueDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("possibleCause"u8))
                {
                    possibleCause = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendedActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    recommendedActions = array;
                    continue;
                }
                if (property.NameEquals("moreInformation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MoreInformation> array = new List<MoreInformation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.MoreInformation.DeserializeMoreInformation(item, options));
                    }
                    moreInformation = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MigrationIssues(
                issueCode,
                issueCategory,
                issueDescription,
                possibleCause,
                recommendedActions ?? new ChangeTrackingList<string>(),
                moreInformation ?? new ChangeTrackingList<MoreInformation>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrationIssues>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationIssues>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrationIssues)} does not support writing '{options.Format}' format.");
            }
        }

        MigrationIssues IPersistableModel<MigrationIssues>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrationIssues>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMigrationIssues(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrationIssues)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrationIssues>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
