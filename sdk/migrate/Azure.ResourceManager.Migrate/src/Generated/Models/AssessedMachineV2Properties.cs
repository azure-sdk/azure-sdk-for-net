// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Assessed machine properties class. </summary>
    public partial class AssessedMachineV2Properties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssessedMachineV2Properties"/>. </summary>
        internal AssessedMachineV2Properties()
        {
            Linkages = new ChangeTrackingList<Linkages>();
            Recommendations = new ChangeTrackingList<MachineAssessmentRecommendation>();
        }

        /// <summary> Initializes a new instance of <see cref="AssessedMachineV2Properties"/>. </summary>
        /// <param name="workloadType"> The workload type. </param>
        /// <param name="linkages"> The linkages list. </param>
        /// <param name="recommendations"> The recommendation list. </param>
        /// <param name="extendedDetails"> The assessed machine extended details. </param>
        /// <param name="createdTimestamp"> When was machine first created. </param>
        /// <param name="updatedTimestamp"> When was machine last updated. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssessedMachineV2Properties(MigrateWorkloadType? workloadType, IReadOnlyList<Linkages> linkages, IReadOnlyList<MachineAssessmentRecommendation> recommendations, AssessedMachineExtendedDetails extendedDetails, DateTimeOffset? createdTimestamp, DateTimeOffset? updatedTimestamp, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WorkloadType = workloadType;
            Linkages = linkages;
            Recommendations = recommendations;
            ExtendedDetails = extendedDetails;
            CreatedTimestamp = createdTimestamp;
            UpdatedTimestamp = updatedTimestamp;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The workload type. </summary>
        public MigrateWorkloadType? WorkloadType { get; }
        /// <summary> The linkages list. </summary>
        public IReadOnlyList<Linkages> Linkages { get; }
        /// <summary> The recommendation list. </summary>
        public IReadOnlyList<MachineAssessmentRecommendation> Recommendations { get; }
        /// <summary> The assessed machine extended details. </summary>
        public AssessedMachineExtendedDetails ExtendedDetails { get; }
        /// <summary> When was machine first created. </summary>
        public DateTimeOffset? CreatedTimestamp { get; }
        /// <summary> When was machine last updated. </summary>
        public DateTimeOffset? UpdatedTimestamp { get; }
    }
}
