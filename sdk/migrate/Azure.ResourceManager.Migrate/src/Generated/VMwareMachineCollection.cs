// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing a collection of <see cref="VMwareMachineResource" /> and their operations.
    /// Each <see cref="VMwareMachineResource" /> in the collection will belong to the same instance of <see cref="VMwareSiteResource" />.
    /// To get a <see cref="VMwareMachineCollection" /> instance call the GetVMwareMachines method from an instance of <see cref="VMwareSiteResource" />.
    /// </summary>
    public partial class VMwareMachineCollection : ArmCollection, IEnumerable<VMwareMachineResource>, IAsyncEnumerable<VMwareMachineResource>
    {
        private readonly ClientDiagnostics _vMwareMachineMachinesClientDiagnostics;
        private readonly MachinesRestOperations _vMwareMachineMachinesRestClient;

        /// <summary> Initializes a new instance of the <see cref="VMwareMachineCollection"/> class for mocking. </summary>
        protected VMwareMachineCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VMwareMachineCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal VMwareMachineCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _vMwareMachineMachinesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", VMwareMachineResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(VMwareMachineResource.ResourceType, out string vMwareMachineMachinesApiVersion);
            _vMwareMachineMachinesRestClient = new MachinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, vMwareMachineMachinesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != VMwareSiteResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, VMwareSiteResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Method to get machine.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetMachine</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public virtual async Task<Response<VMwareMachineResource>> GetAsync(string machineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(machineName, nameof(machineName));

            using var scope = _vMwareMachineMachinesClientDiagnostics.CreateScope("VMwareMachineCollection.Get");
            scope.Start();
            try
            {
                var response = await _vMwareMachineMachinesRestClient.GetMachineAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, machineName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VMwareMachineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Method to get machine.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetMachine</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public virtual Response<VMwareMachineResource> Get(string machineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(machineName, nameof(machineName));

            using var scope = _vMwareMachineMachinesClientDiagnostics.CreateScope("VMwareMachineCollection.Get");
            scope.Start();
            try
            {
                var response = _vMwareMachineMachinesRestClient.GetMachine(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, machineName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VMwareMachineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Method to get machine.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetAllMachinesInSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="continuationToken"> Optional parameter for continuation token. </param>
        /// <param name="totalRecordCount"> Total count of machines in the given site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareMachineResource> GetAllAsync(string filter = null, int? top = null, string continuationToken = null, int? totalRecordCount = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _vMwareMachineMachinesRestClient.CreateGetAllMachinesInSiteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, continuationToken, totalRecordCount);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _vMwareMachineMachinesRestClient.CreateGetAllMachinesInSiteNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, continuationToken, totalRecordCount);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new VMwareMachineResource(Client, VMwareMachineData.DeserializeVMwareMachineData(e)), _vMwareMachineMachinesClientDiagnostics, Pipeline, "VMwareMachineCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Method to get machine.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetAllMachinesInSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The String to use. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="continuationToken"> Optional parameter for continuation token. </param>
        /// <param name="totalRecordCount"> Total count of machines in the given site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareMachineResource> GetAll(string filter = null, int? top = null, string continuationToken = null, int? totalRecordCount = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _vMwareMachineMachinesRestClient.CreateGetAllMachinesInSiteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, continuationToken, totalRecordCount);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _vMwareMachineMachinesRestClient.CreateGetAllMachinesInSiteNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, continuationToken, totalRecordCount);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new VMwareMachineResource(Client, VMwareMachineData.DeserializeVMwareMachineData(e)), _vMwareMachineMachinesClientDiagnostics, Pipeline, "VMwareMachineCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetMachine</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string machineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(machineName, nameof(machineName));

            using var scope = _vMwareMachineMachinesClientDiagnostics.CreateScope("VMwareMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = await _vMwareMachineMachinesRestClient.GetMachineAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, machineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Machines_GetMachine</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public virtual Response<bool> Exists(string machineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(machineName, nameof(machineName));

            using var scope = _vMwareMachineMachinesClientDiagnostics.CreateScope("VMwareMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = _vMwareMachineMachinesRestClient.GetMachine(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, machineName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<VMwareMachineResource> IEnumerable<VMwareMachineResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<VMwareMachineResource> IAsyncEnumerable<VMwareMachineResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
