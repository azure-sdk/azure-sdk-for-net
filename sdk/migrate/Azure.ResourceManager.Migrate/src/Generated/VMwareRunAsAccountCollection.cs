// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing a collection of <see cref="VMwareRunAsAccountResource" /> and their operations.
    /// Each <see cref="VMwareRunAsAccountResource" /> in the collection will belong to the same instance of <see cref="VMwareSiteResource" />.
    /// To get a <see cref="VMwareRunAsAccountCollection" /> instance call the GetVMwareRunAsAccounts method from an instance of <see cref="VMwareSiteResource" />.
    /// </summary>
    public partial class VMwareRunAsAccountCollection : ArmCollection, IEnumerable<VMwareRunAsAccountResource>, IAsyncEnumerable<VMwareRunAsAccountResource>
    {
        private readonly ClientDiagnostics _vMwareRunAsAccountRunAsAccountsClientDiagnostics;
        private readonly RunAsAccountsRestOperations _vMwareRunAsAccountRunAsAccountsRestClient;

        /// <summary> Initializes a new instance of the <see cref="VMwareRunAsAccountCollection"/> class for mocking. </summary>
        protected VMwareRunAsAccountCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VMwareRunAsAccountCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal VMwareRunAsAccountCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _vMwareRunAsAccountRunAsAccountsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", VMwareRunAsAccountResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(VMwareRunAsAccountResource.ResourceType, out string vMwareRunAsAccountRunAsAccountsApiVersion);
            _vMwareRunAsAccountRunAsAccountsRestClient = new RunAsAccountsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, vMwareRunAsAccountRunAsAccountsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != VMwareSiteResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, VMwareSiteResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Method to get run as account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetRunAsAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Run as account ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public virtual async Task<Response<VMwareRunAsAccountResource>> GetAsync(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = _vMwareRunAsAccountRunAsAccountsClientDiagnostics.CreateScope("VMwareRunAsAccountCollection.Get");
            scope.Start();
            try
            {
                var response = await _vMwareRunAsAccountRunAsAccountsRestClient.GetRunAsAccountAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accountName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VMwareRunAsAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Method to get run as account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetRunAsAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Run as account ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public virtual Response<VMwareRunAsAccountResource> Get(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = _vMwareRunAsAccountRunAsAccountsClientDiagnostics.CreateScope("VMwareRunAsAccountCollection.Get");
            scope.Start();
            try
            {
                var response = _vMwareRunAsAccountRunAsAccountsRestClient.GetRunAsAccount(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accountName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new VMwareRunAsAccountResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Method to get run as accounts.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetAllRunAsAccountsInSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareRunAsAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareRunAsAccountResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _vMwareRunAsAccountRunAsAccountsRestClient.CreateGetAllRunAsAccountsInSiteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _vMwareRunAsAccountRunAsAccountsRestClient.CreateGetAllRunAsAccountsInSiteNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new VMwareRunAsAccountResource(Client, VMwareRunAsAccountData.DeserializeVMwareRunAsAccountData(e)), _vMwareRunAsAccountRunAsAccountsClientDiagnostics, Pipeline, "VMwareRunAsAccountCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Method to get run as accounts.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetAllRunAsAccountsInSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareRunAsAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareRunAsAccountResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _vMwareRunAsAccountRunAsAccountsRestClient.CreateGetAllRunAsAccountsInSiteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _vMwareRunAsAccountRunAsAccountsRestClient.CreateGetAllRunAsAccountsInSiteNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new VMwareRunAsAccountResource(Client, VMwareRunAsAccountData.DeserializeVMwareRunAsAccountData(e)), _vMwareRunAsAccountRunAsAccountsClientDiagnostics, Pipeline, "VMwareRunAsAccountCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetRunAsAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Run as account ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = _vMwareRunAsAccountRunAsAccountsClientDiagnostics.CreateScope("VMwareRunAsAccountCollection.Exists");
            scope.Start();
            try
            {
                var response = await _vMwareRunAsAccountRunAsAccountsRestClient.GetRunAsAccountAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accountName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/runAsAccounts/{accountName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RunAsAccounts_GetRunAsAccount</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountName"> Run as account ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public virtual Response<bool> Exists(string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            using var scope = _vMwareRunAsAccountRunAsAccountsClientDiagnostics.CreateScope("VMwareRunAsAccountCollection.Exists");
            scope.Start();
            try
            {
                var response = _vMwareRunAsAccountRunAsAccountsRestClient.GetRunAsAccount(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accountName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<VMwareRunAsAccountResource> IEnumerable<VMwareRunAsAccountResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<VMwareRunAsAccountResource> IAsyncEnumerable<VMwareRunAsAccountResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
