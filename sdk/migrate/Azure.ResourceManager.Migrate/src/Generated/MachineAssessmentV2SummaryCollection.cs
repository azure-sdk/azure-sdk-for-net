// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing a collection of <see cref="MachineAssessmentV2SummaryResource"/> and their operations.
    /// Each <see cref="MachineAssessmentV2SummaryResource"/> in the collection will belong to the same instance of <see cref="MachineAssessmentV2Resource"/>.
    /// To get a <see cref="MachineAssessmentV2SummaryCollection"/> instance call the GetMachineAssessmentV2Summaries method from an instance of <see cref="MachineAssessmentV2Resource"/>.
    /// </summary>
    public partial class MachineAssessmentV2SummaryCollection : ArmCollection, IEnumerable<MachineAssessmentV2SummaryResource>, IAsyncEnumerable<MachineAssessmentV2SummaryResource>
    {
        private readonly ClientDiagnostics _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics;
        private readonly MachineAssessmentV2SummaryRestOperations _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MachineAssessmentV2SummaryCollection"/> class for mocking. </summary>
        protected MachineAssessmentV2SummaryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MachineAssessmentV2SummaryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal MachineAssessmentV2SummaryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", MachineAssessmentV2SummaryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MachineAssessmentV2SummaryResource.ResourceType, out string machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsApiVersion);
            _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient = new MachineAssessmentV2SummaryRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MachineAssessmentV2Resource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MachineAssessmentV2Resource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a MachineAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual async Task<Response<MachineAssessmentV2SummaryResource>> GetAsync(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.Get");
            scope.Start();
            try
            {
                var response = await _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MachineAssessmentV2SummaryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a MachineAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual Response<MachineAssessmentV2SummaryResource> Get(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.Get");
            scope.Start();
            try
            {
                var response = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MachineAssessmentV2SummaryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List MachineAssessmentV2Summary resources by MachineAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MachineAssessmentV2SummaryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MachineAssessmentV2SummaryResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.CreateListByParentRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MachineAssessmentV2SummaryResource(Client, MachineAssessmentV2SummaryData.DeserializeMachineAssessmentV2SummaryData(e)), _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics, Pipeline, "MachineAssessmentV2SummaryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List MachineAssessmentV2Summary resources by MachineAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MachineAssessmentV2SummaryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MachineAssessmentV2SummaryResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.CreateListByParentRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MachineAssessmentV2SummaryResource(Client, MachineAssessmentV2SummaryData.DeserializeMachineAssessmentV2SummaryData(e)), _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics, Pipeline, "MachineAssessmentV2SummaryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual Response<bool> Exists(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.Exists");
            scope.Start();
            try
            {
                var response = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual async Task<NullableResponse<MachineAssessmentV2SummaryResource>> GetIfExistsAsync(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<MachineAssessmentV2SummaryResource>(response.GetRawResponse());
                return Response.FromValue(new MachineAssessmentV2SummaryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachineAssessmentV2Summary_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MachineAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the Machine Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        public virtual NullableResponse<MachineAssessmentV2SummaryResource> GetIfExists(string summaryName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(summaryName, nameof(summaryName));

            using var scope = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsClientDiagnostics.CreateScope("MachineAssessmentV2SummaryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _machineAssessmentV2SummaryMachineAssessmentV2SummaryOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, summaryName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<MachineAssessmentV2SummaryResource>(response.GetRawResponse());
                return Response.FromValue(new MachineAssessmentV2SummaryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<MachineAssessmentV2SummaryResource> IEnumerable<MachineAssessmentV2SummaryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MachineAssessmentV2SummaryResource> IAsyncEnumerable<MachineAssessmentV2SummaryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
