// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMigrateModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Migrate.CompoundAssessmentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.CompoundAssessmentData"/> instance for mocking. </returns>
        public static CompoundAssessmentData CompoundAssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CompoundAssessmentProperties properties = null)
        {
            return new CompoundAssessmentData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CompoundAssessmentProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="targetAssessmentArmIds"> ARM IDs of the target assessments. </param>
        /// <param name="fallbackMachineAssessmentArmId"> Fallback machine assessment ARM ID. </param>
        /// <param name="details"> Details of the compound assessment. </param>
        /// <returns> A new <see cref="Models.CompoundAssessmentProperties"/> instance for mocking. </returns>
        public static CompoundAssessmentProperties CompoundAssessmentProperties(ProvisioningState? provisioningState = null, TargetAssessmentArmIds targetAssessmentArmIds = null, string fallbackMachineAssessmentArmId = null, CompoundAssessmentDetails details = null)
        {
            return new CompoundAssessmentProperties(provisioningState, targetAssessmentArmIds, fallbackMachineAssessmentArmId, details, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CompoundAssessmentDetails"/>. </summary>
        /// <param name="createdTimestamp"> Timestamp when the assessment was created. </param>
        /// <param name="updatedTimestamp"> Timestamp when the assessment was last updated. </param>
        /// <param name="status"> Status of the assessment. </param>
        /// <returns> A new <see cref="Models.CompoundAssessmentDetails"/> instance for mocking. </returns>
        public static CompoundAssessmentDetails CompoundAssessmentDetails(DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, AssessmentStatus status = default)
        {
            return new CompoundAssessmentDetails(createdTimestamp, updatedTimestamp, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DownloadUri"/>. </summary>
        /// <param name="assessmentReportUri"> Hyperlink to download report. </param>
        /// <param name="expireOn"> Expiry date of download url. </param>
        /// <returns> A new <see cref="Models.DownloadUri"/> instance for mocking. </returns>
        public static DownloadUri DownloadUri(string assessmentReportUri = null, DateTimeOffset expireOn = default)
        {
            return new DownloadUri(assessmentReportUri, expireOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Migrate.WebAppCompoundAssessmentSummaryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.WebAppCompoundAssessmentSummaryData"/> instance for mocking. </returns>
        public static WebAppCompoundAssessmentSummaryData WebAppCompoundAssessmentSummaryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WebAppCompoundAssessmentSummaryProperties properties = null)
        {
            return new WebAppCompoundAssessmentSummaryData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WebAppCompoundAssessmentSummaryProperties"/>. </summary>
        /// <param name="summaryType"> The summary type. </param>
        /// <param name="summaryName"> The summary name. </param>
        /// <param name="sources"> The source details list. </param>
        /// <param name="targets"> The target details list. </param>
        /// <param name="targetSourceMapping"> The target source mapping. </param>
        /// <param name="costComponents"> The cost components. </param>
        /// <param name="savingsComponents"> The cost components. </param>
        /// <param name="assessmentName"> Name of the assessment. </param>
        /// <param name="discoveredLightSummary"> Light summary of the compound assessment. </param>
        /// <returns> A new <see cref="Models.WebAppCompoundAssessmentSummaryProperties"/> instance for mocking. </returns>
        public static WebAppCompoundAssessmentSummaryProperties WebAppCompoundAssessmentSummaryProperties(SummaryType? summaryType = null, string summaryName = null, IEnumerable<SourceDetails> sources = null, IEnumerable<TargetDetails> targets = null, IEnumerable<TargetSourcePair> targetSourceMapping = null, IEnumerable<CostDetailsCommon> costComponents = null, IEnumerable<SavingsDetailsCommon> savingsComponents = null, string assessmentName = null, DiscoveredLightSummary discoveredLightSummary = null)
        {
            sources ??= new List<SourceDetails>();
            targets ??= new List<TargetDetails>();
            targetSourceMapping ??= new List<TargetSourcePair>();
            costComponents ??= new List<CostDetailsCommon>();
            savingsComponents ??= new List<SavingsDetailsCommon>();

            return new WebAppCompoundAssessmentSummaryProperties(
                summaryType,
                summaryName,
                sources?.ToList(),
                targets?.ToList(),
                targetSourceMapping?.ToList(),
                costComponents?.ToList(),
                savingsComponents?.ToList(),
                assessmentName,
                discoveredLightSummary,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SourceDetails"/>. </summary>
        /// <param name="sourceName"> The source name. </param>
        /// <param name="sourceType"> The source type. </param>
        /// <param name="platform"> The migration platform. </param>
        /// <param name="count"> The count of a type of source. </param>
        /// <returns> A new <see cref="Models.SourceDetails"/> instance for mocking. </returns>
        public static SourceDetails SourceDetails(AssessmentSource? sourceName = null, MigrateWorkloadType? sourceType = null, MigrationPlatform? platform = null, int? count = null)
        {
            return new SourceDetails(sourceName, sourceType, platform, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetDetails"/>. </summary>
        /// <param name="targetName"> The target name. </param>
        /// <param name="targetType"> The target type. </param>
        /// <param name="platform"> The migration platform. </param>
        /// <param name="count"> The count of a type of source. </param>
        /// <returns> A new <see cref="Models.TargetDetails"/> instance for mocking. </returns>
        public static TargetDetails TargetDetails(AzureTarget? targetName = null, MigrateWorkloadType? targetType = null, MigrationPlatform? platform = null, int? count = null)
        {
            return new TargetDetails(targetName, targetType, platform, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetSourcePair"/>. </summary>
        /// <param name="sourceRef"> The source name. </param>
        /// <param name="targetRef"> The target name. </param>
        /// <param name="sourceCount"> The count of a type of source. </param>
        /// <param name="targetCount"> The count of a type of target. </param>
        /// <param name="migrationDetails"> The migration details. </param>
        /// <param name="managementDetails"> The management details. </param>
        /// <param name="costDetails"> The cost details. </param>
        /// <param name="savingsDetails"> The savings details. </param>
        /// <param name="confidenceScore"> The confidence score. </param>
        /// <returns> A new <see cref="Models.TargetSourcePair"/> instance for mocking. </returns>
        public static TargetSourcePair TargetSourcePair(AssessmentSource? sourceRef = null, AzureTarget? targetRef = null, int? sourceCount = null, int? targetCount = null, MigrationDetails migrationDetails = null, IEnumerable<ManagementDetails> managementDetails = null, IEnumerable<CostDetailsCommon> costDetails = null, IEnumerable<SavingsDetailsCommon> savingsDetails = null, double? confidenceScore = null)
        {
            managementDetails ??= new List<ManagementDetails>();
            costDetails ??= new List<CostDetailsCommon>();
            savingsDetails ??= new List<SavingsDetailsCommon>();

            return new TargetSourcePair(
                sourceRef,
                targetRef,
                sourceCount,
                targetCount,
                migrationDetails,
                managementDetails?.ToList(),
                costDetails?.ToList(),
                savingsDetails?.ToList(),
                confidenceScore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationDetails"/>. </summary>
        /// <param name="readinessSummary"> The readiness summary. </param>
        /// <param name="migrationType"> The migration type. </param>
        /// <returns> A new <see cref="Models.MigrationDetails"/> instance for mocking. </returns>
        public static MigrationDetails MigrationDetails(IEnumerable<NameValuePairCloudSuitabilityCommon> readinessSummary = null, MigrationType? migrationType = null)
        {
            readinessSummary ??= new List<NameValuePairCloudSuitabilityCommon>();

            return new MigrationDetails(readinessSummary?.ToList(), migrationType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairCloudSuitabilityCommon"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairCloudSuitabilityCommon"/> instance for mocking. </returns>
        public static NameValuePairCloudSuitabilityCommon NameValuePairCloudSuitabilityCommon(CloudSuitabilityCommon? name = null, int? value = null)
        {
            return new NameValuePairCloudSuitabilityCommon(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ManagementDetails"/>. </summary>
        /// <param name="name"> The management summary name. </param>
        /// <param name="readinessSummary"> The management suitability summary. </param>
        /// <returns> A new <see cref="Models.ManagementDetails"/> instance for mocking. </returns>
        public static ManagementDetails ManagementDetails(AzureManagementOfferingType? name = null, IEnumerable<NameValuePairCloudSuitabilityCommon> readinessSummary = null)
        {
            readinessSummary ??= new List<NameValuePairCloudSuitabilityCommon>();

            return new ManagementDetails(name, readinessSummary?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CostDetailsCommon"/>. </summary>
        /// <param name="savingOptions"> The savings options. </param>
        /// <param name="costDetail"> The sku cost details per azure offer type. </param>
        /// <returns> A new <see cref="Models.CostDetailsCommon"/> instance for mocking. </returns>
        public static CostDetailsCommon CostDetailsCommon(SavingsOption? savingOptions = null, IEnumerable<NameValuePairCostType> costDetail = null)
        {
            costDetail ??= new List<NameValuePairCostType>();

            return new CostDetailsCommon(savingOptions, costDetail?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairCostType"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairCostType"/> instance for mocking. </returns>
        public static NameValuePairCostType NameValuePairCostType(CostType? name = null, float? value = null)
        {
            return new NameValuePairCostType(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SavingsDetailsCommon"/>. </summary>
        /// <param name="savingOptions"> The savings options. </param>
        /// <param name="savingsDetail"> The sku cost details per azure offer type. </param>
        /// <returns> A new <see cref="Models.SavingsDetailsCommon"/> instance for mocking. </returns>
        public static SavingsDetailsCommon SavingsDetailsCommon(SavingsOption? savingOptions = null, IEnumerable<NameValuePairSavingsType> savingsDetail = null)
        {
            savingsDetail ??= new List<NameValuePairSavingsType>();

            return new SavingsDetailsCommon(savingOptions, savingsDetail?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairSavingsType"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairSavingsType"/> instance for mocking. </returns>
        public static NameValuePairSavingsType NameValuePairSavingsType(SavingsType? name = null, float? value = null)
        {
            return new NameValuePairSavingsType(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DiscoveredLightSummary"/>. </summary>
        /// <param name="numberOfWebApps"> Number of web apps. </param>
        /// <param name="numberOfWebAppsPerType"> Number of web apps per type. </param>
        /// <param name="numberOfWebServersPerType"> Number of web servers per type. </param>
        /// <param name="numberOfWebServers"> Number of web servers. </param>
        /// <param name="numberOfServers"> Number of servers. </param>
        /// <returns> A new <see cref="Models.DiscoveredLightSummary"/> instance for mocking. </returns>
        public static DiscoveredLightSummary DiscoveredLightSummary(int numberOfWebApps = default, IEnumerable<WebAppsPerType> numberOfWebAppsPerType = null, IEnumerable<WebServersPerType> numberOfWebServersPerType = null, int numberOfWebServers = default, int numberOfServers = default)
        {
            numberOfWebAppsPerType ??= new List<WebAppsPerType>();
            numberOfWebServersPerType ??= new List<WebServersPerType>();

            return new DiscoveredLightSummary(
                numberOfWebApps,
                numberOfWebAppsPerType?.ToList(),
                numberOfWebServersPerType?.ToList(),
                numberOfWebServers,
                numberOfServers,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WebAppsPerType"/>. </summary>
        /// <param name="webAppType"> Name of the web app type. </param>
        /// <param name="count"> Count of the web app type. </param>
        /// <returns> A new <see cref="Models.WebAppsPerType"/> instance for mocking. </returns>
        public static WebAppsPerType WebAppsPerType(WebAppType webAppType = default, int count = default)
        {
            return new WebAppsPerType(webAppType, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WebServersPerType"/>. </summary>
        /// <param name="webServerType"> Name of the web app type. </param>
        /// <param name="count"> Count of the web app type. </param>
        /// <returns> A new <see cref="Models.WebServersPerType"/> instance for mocking. </returns>
        public static WebServersPerType WebServersPerType(WebServerType webServerType = default, int count = default)
        {
            return new WebServersPerType(webServerType, count, serializedAdditionalRawData: null);
        }
    }
}
