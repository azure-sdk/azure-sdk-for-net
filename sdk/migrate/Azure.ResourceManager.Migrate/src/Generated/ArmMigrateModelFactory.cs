// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMigrateModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Migrate.MachineAssessmentV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.MachineAssessmentV2Data"/> instance for mocking. </returns>
        public static MachineAssessmentV2Data MachineAssessmentV2Data(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineAssessmentV2Properties properties = null)
        {
            return new MachineAssessmentV2Data(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MachineAssessmentV2Properties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="scope"> Gets or sets the scope of assessment. </param>
        /// <param name="settings"> Gets or sets the settings for the assessment. </param>
        /// <param name="details"> Gets or sets the details of the assessment. </param>
        /// <returns> A new <see cref="Models.MachineAssessmentV2Properties"/> instance for mocking. </returns>
        public static MachineAssessmentV2Properties MachineAssessmentV2Properties(ProvisioningState? provisioningState = null, Scope scope = null, MachineAssessmentSettings settings = null, AssessmentDetails details = null)
        {
            return new MachineAssessmentV2Properties(provisioningState, scope, settings, details, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentDetails"/>. </summary>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesTimestamp"> Last time when rates were queried. </param>
        /// <param name="createdTimestamp"> Date and Time when assessment was created. </param>
        /// <param name="updatedTimestamp"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <returns> A new <see cref="Models.AssessmentDetails"/> instance for mocking. </returns>
        public static AssessmentDetails AssessmentDetails(float? confidenceRatingInPercentage = null, DateTimeOffset? pricesTimestamp = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, AssessmentStatus? status = null)
        {
            return new AssessmentDetails(
                confidenceRatingInPercentage,
                pricesTimestamp,
                createdTimestamp,
                updatedTimestamp,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DownloadUri"/>. </summary>
        /// <param name="assessmentReportUri"> Hyperlink to download report. </param>
        /// <param name="expireOn"> Expiry date of download url. </param>
        /// <returns> A new <see cref="Models.DownloadUri"/> instance for mocking. </returns>
        public static DownloadUri DownloadUri(string assessmentReportUri = null, DateTimeOffset expireOn = default)
        {
            return new DownloadUri(assessmentReportUri, expireOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Migrate.AssessedMachineV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.AssessedMachineV2Data"/> instance for mocking. </returns>
        public static AssessedMachineV2Data AssessedMachineV2Data(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AssessedMachineV2Properties properties = null)
        {
            return new AssessedMachineV2Data(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedMachineV2Properties"/>. </summary>
        /// <param name="workloadType"> The workload type. </param>
        /// <param name="linkages"> The linkages list. </param>
        /// <param name="recommendations"> The recommendation list. </param>
        /// <param name="extendedDetails"> The assessed machine extended details. </param>
        /// <param name="createdTimestamp"> When was machine first created. </param>
        /// <param name="updatedTimestamp"> When was machine last updated. </param>
        /// <returns> A new <see cref="Models.AssessedMachineV2Properties"/> instance for mocking. </returns>
        public static AssessedMachineV2Properties AssessedMachineV2Properties(MigrateWorkloadType? workloadType = null, IEnumerable<Linkages> linkages = null, IEnumerable<MachineAssessmentRecommendation> recommendations = null, AssessedMachineExtendedDetails extendedDetails = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null)
        {
            linkages ??= new List<Linkages>();
            recommendations ??= new List<MachineAssessmentRecommendation>();

            return new AssessedMachineV2Properties(
                workloadType,
                linkages?.ToList(),
                recommendations?.ToList(),
                extendedDetails,
                createdTimestamp,
                updatedTimestamp,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Linkages"/>. </summary>
        /// <param name="workloadName"> The workload name. </param>
        /// <param name="linkageType"> The linkage type. </param>
        /// <param name="kind"> The linkage kind. </param>
        /// <param name="armId"> The arm id. </param>
        /// <returns> A new <see cref="Models.Linkages"/> instance for mocking. </returns>
        public static Linkages Linkages(string workloadName = null, LinkageType? linkageType = null, LinkageKind? kind = null, string armId = null)
        {
            return new Linkages(workloadName, linkageType, kind, armId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MachineAssessmentRecommendation"/>. </summary>
        /// <param name="configuration"> The configuration data. </param>
        /// <param name="recommendedForStrategies"> The recommended details. </param>
        /// <param name="migrationPlatform"> The migration Platform. </param>
        /// <param name="confidenceScore"> The confidence score. </param>
        /// <param name="migrationSuitabilityReadiness"> The migration suitability. </param>
        /// <param name="securitySuitabilityReadiness"> The security suitability. </param>
        /// <param name="totalCost"> The total cost details. </param>
        /// <param name="totalSavings"> The total cost details. </param>
        /// <param name="migrationIssues"> The migration issues list. </param>
        /// <param name="skus"> The Skus list. </param>
        /// <param name="vmSecuritySuitabilityResults"> VM Security Suitability Results. </param>
        /// <param name="recommendedVmSecurityType"> Recommended security type for the VM. </param>
        /// <returns> A new <see cref="Models.MachineAssessmentRecommendation"/> instance for mocking. </returns>
        public static MachineAssessmentRecommendation MachineAssessmentRecommendation(Configuration configuration = null, IEnumerable<StrategyType> recommendedForStrategies = null, MigrationPlatform? migrationPlatform = null, float? confidenceScore = null, CloudSuitabilityCommon? migrationSuitabilityReadiness = null, CloudSuitabilityCommon? securitySuitabilityReadiness = null, IEnumerable<CostDetailsCommon> totalCost = null, IEnumerable<SavingsDetailsCommon> totalSavings = null, IEnumerable<MigrationIssues> migrationIssues = null, IEnumerable<SkusMigrationSuitability> skus = null, IEnumerable<VmSecuritySuitability> vmSecuritySuitabilityResults = null, AzureVmSecurityType? recommendedVmSecurityType = null)
        {
            recommendedForStrategies ??= new List<StrategyType>();
            totalCost ??= new List<CostDetailsCommon>();
            totalSavings ??= new List<SavingsDetailsCommon>();
            migrationIssues ??= new List<MigrationIssues>();
            skus ??= new List<SkusMigrationSuitability>();
            vmSecuritySuitabilityResults ??= new List<VmSecuritySuitability>();

            return new MachineAssessmentRecommendation(
                configuration,
                recommendedForStrategies != null ? new RecommendedFor(recommendedForStrategies?.ToList(), serializedAdditionalRawData: null) : null,
                migrationPlatform,
                confidenceScore,
                migrationSuitabilityReadiness != null ? new MigrationSuitability(migrationSuitabilityReadiness, serializedAdditionalRawData: null) : null,
                securitySuitabilityReadiness != null ? new SecuritySuitability(securitySuitabilityReadiness, serializedAdditionalRawData: null) : null,
                totalCost?.ToList(),
                totalSavings?.ToList(),
                migrationIssues?.ToList(),
                skus?.ToList(),
                vmSecuritySuitabilityResults?.ToList(),
                recommendedVmSecurityType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Configuration"/>. </summary>
        /// <param name="azureTarget"> The azure target. </param>
        /// <param name="sizingCriterion"> The azure target. </param>
        /// <returns> A new <see cref="Models.Configuration"/> instance for mocking. </returns>
        public static Configuration Configuration(AzureTarget? azureTarget = null, AssessmentSizingCriterion? sizingCriterion = null)
        {
            return new Configuration(azureTarget, sizingCriterion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CostDetailsCommon"/>. </summary>
        /// <param name="savingOptions"> The savings options. </param>
        /// <param name="costDetail"> The sku cost details per azure offer type. </param>
        /// <returns> A new <see cref="Models.CostDetailsCommon"/> instance for mocking. </returns>
        public static CostDetailsCommon CostDetailsCommon(SavingsOption? savingOptions = null, IEnumerable<NameValuePairCostType> costDetail = null)
        {
            costDetail ??= new List<NameValuePairCostType>();

            return new CostDetailsCommon(savingOptions, costDetail?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairCostType"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairCostType"/> instance for mocking. </returns>
        public static NameValuePairCostType NameValuePairCostType(CostType? name = null, float? value = null)
        {
            return new NameValuePairCostType(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SavingsDetailsCommon"/>. </summary>
        /// <param name="savingOptions"> The savings options. </param>
        /// <param name="savingsDetail"> The sku cost details per azure offer type. </param>
        /// <returns> A new <see cref="Models.SavingsDetailsCommon"/> instance for mocking. </returns>
        public static SavingsDetailsCommon SavingsDetailsCommon(SavingsOption? savingOptions = null, IEnumerable<NameValuePairSavingsType> savingsDetail = null)
        {
            savingsDetail ??= new List<NameValuePairSavingsType>();

            return new SavingsDetailsCommon(savingOptions, savingsDetail?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairSavingsType"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairSavingsType"/> instance for mocking. </returns>
        public static NameValuePairSavingsType NameValuePairSavingsType(SavingsType? name = null, float? value = null)
        {
            return new NameValuePairSavingsType(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationIssues"/>. </summary>
        /// <param name="issueCode"> The issue id. </param>
        /// <param name="issueCategory"> The issue category. </param>
        /// <param name="issueDescription"> The issue description. </param>
        /// <param name="possibleCause"> The possible causes. </param>
        /// <param name="recommendedActions"> The recommended action. </param>
        /// <param name="moreInformation"> The more information list. </param>
        /// <returns> A new <see cref="Models.MigrationIssues"/> instance for mocking. </returns>
        public static MigrationIssues MigrationIssues(string issueCode = null, MigrationIssuesCategory? issueCategory = null, string issueDescription = null, string possibleCause = null, IEnumerable<string> recommendedActions = null, IEnumerable<MoreInformation> moreInformation = null)
        {
            recommendedActions ??= new List<string>();
            moreInformation ??= new List<MoreInformation>();

            return new MigrationIssues(
                issueCode,
                issueCategory,
                issueDescription,
                possibleCause,
                recommendedActions?.ToList(),
                moreInformation?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MoreInformation"/>. </summary>
        /// <param name="title"> The title of the information. </param>
        /// <param name="uri"> The URL of the information. </param>
        /// <returns> A new <see cref="Models.MoreInformation"/> instance for mocking. </returns>
        public static MoreInformation MoreInformation(string title = null, string uri = null)
        {
            return new MoreInformation(title, uri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkusMigrationSuitability"/>. </summary>
        /// <param name="kind"> The Sku kind. </param>
        /// <param name="resourceUri"> The resource uri. </param>
        /// <param name="displayName"> The sku name. </param>
        /// <param name="id"> The sku id. </param>
        /// <param name="type"> The sku type. </param>
        /// <param name="sources"> The source name. </param>
        /// <param name="details"> The sku details. </param>
        /// <returns> A new <see cref="Models.SkusMigrationSuitability"/> instance for mocking. </returns>
        public static SkusMigrationSuitability SkusMigrationSuitability(SkuKind? kind = null, string resourceUri = null, string displayName = null, string id = null, SkuType? type = null, IEnumerable<SourceRecommendationMigrationSuitability> sources = null, SkuDetails details = null)
        {
            sources ??= new List<SourceRecommendationMigrationSuitability>();

            return new SkusMigrationSuitability(
                kind,
                resourceUri,
                displayName,
                id,
                type,
                sources?.ToList(),
                details,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SourceRecommendationMigrationSuitability"/>. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="migrationSuitabilityReadiness"> The sku type. </param>
        /// <returns> A new <see cref="Models.SourceRecommendationMigrationSuitability"/> instance for mocking. </returns>
        public static SourceRecommendationMigrationSuitability SourceRecommendationMigrationSuitability(string name = null, CloudSuitabilityCommon? migrationSuitabilityReadiness = null)
        {
            return new SourceRecommendationMigrationSuitability(name, migrationSuitabilityReadiness != null ? new MigrationSuitability(migrationSuitabilityReadiness, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SkuDetails"/>. </summary>
        /// <param name="skuType"> The sku type. </param>
        /// <param name="skuName"> The sku name. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="totalCost"> The sku cost details. </param>
        /// <param name="totalSavings"> The sku savings details. </param>
        /// <returns> A new <see cref="Models.SkuDetails"/> instance for mocking. </returns>
        public static SkuDetails SkuDetails(SkuType? skuType = null, string skuName = null, IEnumerable<NameValuePair> capabilities = null, IEnumerable<CostDetailsCommon> totalCost = null, IEnumerable<SavingsDetailsCommon> totalSavings = null)
        {
            capabilities ??= new List<NameValuePair>();
            totalCost ??= new List<CostDetailsCommon>();
            totalSavings ??= new List<SavingsDetailsCommon>();

            return new SkuDetails(
                skuType,
                skuName,
                capabilities?.ToList(),
                totalCost?.ToList(),
                totalSavings?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePair"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePair"/> instance for mocking. </returns>
        public static NameValuePair NameValuePair(string name = null, string value = null)
        {
            return new NameValuePair(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VmSecuritySuitability"/>. </summary>
        /// <param name="vmSecurityType"> Gets and sets the security type for this secure VM. </param>
        /// <param name="securitySuitability"> Gets the suitability for this secure VM. </param>
        /// <param name="securitySuitabilityDetails"> Gets the security suitability details for this VM. </param>
        /// <returns> A new <see cref="Models.VmSecuritySuitability"/> instance for mocking. </returns>
        public static VmSecuritySuitability VmSecuritySuitability(AzureVmSecurityType vmSecurityType = default, CloudSuitabilityCommon securitySuitability = default, IEnumerable<AzureVmSecuritySuitabilityDetail> securitySuitabilityDetails = null)
        {
            securitySuitabilityDetails ??= new List<AzureVmSecuritySuitabilityDetail>();

            return new VmSecuritySuitability(vmSecurityType, securitySuitability, securitySuitabilityDetails?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedMachineExtendedDetails"/>. </summary>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <param name="productSupportStatus"> Gets the product support status related details. </param>
        /// <param name="disks"> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </param>
        /// <param name="hostProcessor"> Gets or sets the processor details of the host. </param>
        /// <param name="networkAdapters">
        /// List of Network Adapters that were assessed as part of this machine's
        /// assessment.
        /// </param>
        /// <param name="assessedMachineType"> Assessed machine type. </param>
        /// <param name="bootType"> Boot type of machine discovered in private data center. </param>
        /// <param name="operatingSystemType"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemName"> Operating system as reported by datacenter management solution. </param>
        /// <param name="operatingSystemVersion"> Operating system version as reported by datacenter management solution. </param>
        /// <param name="operatingSystemArchitecture"> Operating system architecture as reported by datacenter management solution. </param>
        /// <param name="description"> Description for the machine. </param>
        /// <param name="megabytesOfMemory"> Megabytes of memory found allocated for the machine in private data center. </param>
        /// <param name="numberOfCores"> Number of CPU cores found on the machine. </param>
        /// <param name="percentageCoresUtilization">
        /// Percentile of Percentage of Cores Utilized noted during time period T.
        ///    Here N and T are settings on Assessment.
        /// </param>
        /// <param name="percentageMemoryUtilization">
        /// Percentile of Percentage of Memory Utilized noted during time period T.
        ///     Here N and T are settings on Assessment.
        /// </param>
        /// <param name="errors"> List of errors for this machine. </param>
        /// <returns> A new <see cref="Models.AssessedMachineExtendedDetails"/> instance for mocking. </returns>
        public static AssessedMachineExtendedDetails AssessedMachineExtendedDetails(string displayName = null, ProductSupportStatus productSupportStatus = null, IEnumerable<AssessedDiskDataV3> disks = null, ProcessorInfo hostProcessor = null, IEnumerable<AssessedMachineNetworkAdaptersV3> networkAdapters = null, AssessedMachineType? assessedMachineType = null, MachineBootType? bootType = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, GuestOperatingSystemArchitecture? operatingSystemArchitecture = null, string description = null, float? megabytesOfMemory = null, int? numberOfCores = null, float? percentageCoresUtilization = null, float? percentageMemoryUtilization = null, IEnumerable<Error> errors = null)
        {
            disks ??= new List<AssessedDiskDataV3>();
            networkAdapters ??= new List<AssessedMachineNetworkAdaptersV3>();
            errors ??= new List<Error>();

            return new AssessedMachineExtendedDetails(
                displayName,
                productSupportStatus,
                disks?.ToList(),
                hostProcessor,
                networkAdapters?.ToList(),
                assessedMachineType,
                bootType,
                operatingSystemType,
                operatingSystemName,
                operatingSystemVersion,
                operatingSystemArchitecture,
                description,
                megabytesOfMemory,
                numberOfCores,
                percentageCoresUtilization,
                percentageMemoryUtilization,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProductSupportStatus"/>. </summary>
        /// <param name="currentVersion"> Gets or sets current version of ServicePack. </param>
        /// <param name="servicePackStatus"> Gets or sets ServicePack of the product. </param>
        /// <param name="esuStatus"> Gets or sets the Extended Security Update ESU status. </param>
        /// <param name="supportStatus"> Gets or sets the support status of the product. </param>
        /// <param name="eta"> Gets or sets the ETA. </param>
        /// <param name="currentEsuYear"> Gets or sets the current ESU support year. </param>
        /// <param name="mainstreamEndOn"> Gets or sets the main stream end date of the product. </param>
        /// <param name="extendedSupportEndOn"> Gets or sets the extended support end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear1EndOn"> Gets or sets the extended security update year 1 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear2EndOn"> Gets or sets the extended security update year 2 end date of the product. </param>
        /// <param name="extendedSecurityUpdateYear3EndOn"> Gets or sets the extended security update year 3 end date of the product. </param>
        /// <returns> A new <see cref="Models.ProductSupportStatus"/> instance for mocking. </returns>
        public static ProductSupportStatus ProductSupportStatus(string currentVersion = null, string servicePackStatus = null, string esuStatus = null, string supportStatus = null, int? eta = null, string currentEsuYear = null, DateTimeOffset? mainstreamEndOn = null, DateTimeOffset? extendedSupportEndOn = null, DateTimeOffset? extendedSecurityUpdateYear1EndOn = null, DateTimeOffset? extendedSecurityUpdateYear2EndOn = null, DateTimeOffset? extendedSecurityUpdateYear3EndOn = null)
        {
            return new ProductSupportStatus(
                currentVersion,
                servicePackStatus,
                esuStatus,
                supportStatus,
                eta,
                currentEsuYear,
                mainstreamEndOn,
                extendedSupportEndOn,
                extendedSecurityUpdateYear1EndOn,
                extendedSecurityUpdateYear2EndOn,
                extendedSecurityUpdateYear3EndOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedDiskDataV3"/>. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="displayName"> The disk display name. </param>
        /// <param name="gigabytesProvisioned"> Gets the gigabytes provisioned. </param>
        /// <param name="megabytesPerSecondOfRead"> Gets the megabytes per second of read. </param>
        /// <param name="megabytesPerSecondOfWrite"> Gets the megabytes per second of write. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Gets the number of read operations per second. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Gets the number of write operations per second. </param>
        /// <returns> A new <see cref="Models.AssessedDiskDataV3"/> instance for mocking. </returns>
        public static AssessedDiskDataV3 AssessedDiskDataV3(string name = null, string displayName = null, float? gigabytesProvisioned = null, float? megabytesPerSecondOfRead = null, float? megabytesPerSecondOfWrite = null, float? numberOfReadOperationsPerSecond = null, float? numberOfWriteOperationsPerSecond = null)
        {
            return new AssessedDiskDataV3(
                name,
                displayName,
                gigabytesProvisioned,
                megabytesPerSecondOfRead,
                megabytesPerSecondOfWrite,
                numberOfReadOperationsPerSecond,
                numberOfWriteOperationsPerSecond,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProcessorInfo"/>. </summary>
        /// <param name="name"> Gets or sets the name \ model of a processor. </param>
        /// <param name="numberOfSockets"> Gets or sets the number of sockets. </param>
        /// <param name="numberOfCoresPerSocket"> Gets or sets the number of cores in a socket. </param>
        /// <returns> A new <see cref="Models.ProcessorInfo"/> instance for mocking. </returns>
        public static ProcessorInfo ProcessorInfo(string name = null, int? numberOfSockets = null, int? numberOfCoresPerSocket = null)
        {
            return new ProcessorInfo(name, numberOfSockets, numberOfCoresPerSocket, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessedMachineNetworkAdaptersV3"/>. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="netGigabytesTransmittedPerMonth"> Gets the net gigabytes transmitted per month. </param>
        /// <param name="macAddress"> Gets the mac address. </param>
        /// <param name="ipAddresses"> Gets the ip addresses. </param>
        /// <param name="megabytesPerSecondRecieved"> Gets the megabytes per second received. </param>
        /// <param name="megabytesPerSecondTransmitted"> Gets the megabytes per second transmitted. </param>
        /// <param name="displayName"> Display Name of the Machine. </param>
        /// <returns> A new <see cref="Models.AssessedMachineNetworkAdaptersV3"/> instance for mocking. </returns>
        public static AssessedMachineNetworkAdaptersV3 AssessedMachineNetworkAdaptersV3(string name = null, float? netGigabytesTransmittedPerMonth = null, string macAddress = null, IEnumerable<string> ipAddresses = null, float? megabytesPerSecondRecieved = null, float? megabytesPerSecondTransmitted = null, string displayName = null)
        {
            ipAddresses ??= new List<string>();

            return new AssessedMachineNetworkAdaptersV3(
                name,
                netGigabytesTransmittedPerMonth,
                macAddress,
                ipAddresses?.ToList(),
                megabytesPerSecondRecieved,
                megabytesPerSecondTransmitted,
                displayName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Error"/>. </summary>
        /// <param name="id"> Gets the error ID. </param>
        /// <param name="code"> Gets the error code. </param>
        /// <param name="runAsAccountId"> Gets the Run as account ID. </param>
        /// <param name="applianceName"> Gets the Appliance name. </param>
        /// <param name="message"> Gets the error message. </param>
        /// <param name="summaryMessage"> Gets the error summary message. </param>
        /// <param name="agentScenario"> Gets the agent scenario where this error occurred. </param>
        /// <param name="possibleCauses"> Gets the error possible causes. </param>
        /// <param name="recommendedAction"> Gets the recommended action for the error. </param>
        /// <param name="severity"> Gets the error severity. </param>
        /// <param name="messageParameters"> Gets the error message parameters. </param>
        /// <param name="updatedTimeStamp"> Gets the time stamp when the error was updated. </param>
        /// <param name="impactedAssessmentType"> Gets the type of assessment impacted by this error. </param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(int? id = null, string code = null, string runAsAccountId = null, string applianceName = null, string message = null, string summaryMessage = null, string agentScenario = null, string possibleCauses = null, string recommendedAction = null, string severity = null, IEnumerable<NameValuePair> messageParameters = null, DateTimeOffset? updatedTimeStamp = null, string impactedAssessmentType = null)
        {
            messageParameters ??= new List<NameValuePair>();

            return new Error(
                id,
                code,
                runAsAccountId,
                applianceName,
                message,
                summaryMessage,
                agentScenario,
                possibleCauses,
                recommendedAction,
                severity,
                messageParameters?.ToList(),
                updatedTimeStamp,
                impactedAssessmentType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Migrate.MachineAssessmentV2SummaryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.MachineAssessmentV2SummaryData"/> instance for mocking. </returns>
        public static MachineAssessmentV2SummaryData MachineAssessmentV2SummaryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SummaryProperties properties = null)
        {
            return new MachineAssessmentV2SummaryData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SummaryProperties"/>. </summary>
        /// <param name="summaryType"> The summary type. </param>
        /// <param name="summaryName"> The summary name. </param>
        /// <param name="sources"> The source details list. </param>
        /// <param name="targets"> The target details list. </param>
        /// <param name="targetSourceMapping"> The target source mapping. </param>
        /// <param name="costComponents"> The cost components. </param>
        /// <param name="savingsComponents"> The cost components. </param>
        /// <returns> A new <see cref="Models.SummaryProperties"/> instance for mocking. </returns>
        public static SummaryProperties SummaryProperties(SummaryType? summaryType = null, string summaryName = null, IEnumerable<SourceDetails> sources = null, IEnumerable<TargetDetails> targets = null, IEnumerable<TargetSourcePair> targetSourceMapping = null, IEnumerable<CostDetailsCommon> costComponents = null, IEnumerable<SavingsDetailsCommon> savingsComponents = null)
        {
            sources ??= new List<SourceDetails>();
            targets ??= new List<TargetDetails>();
            targetSourceMapping ??= new List<TargetSourcePair>();
            costComponents ??= new List<CostDetailsCommon>();
            savingsComponents ??= new List<SavingsDetailsCommon>();

            return new SummaryProperties(
                summaryType,
                summaryName,
                sources?.ToList(),
                targets?.ToList(),
                targetSourceMapping?.ToList(),
                costComponents?.ToList(),
                savingsComponents?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SourceDetails"/>. </summary>
        /// <param name="sourceName"> The source name. </param>
        /// <param name="sourceType"> The source type. </param>
        /// <param name="platform"> The migration platform. </param>
        /// <param name="count"> The count of a type of source. </param>
        /// <returns> A new <see cref="Models.SourceDetails"/> instance for mocking. </returns>
        public static SourceDetails SourceDetails(AssessmentSource? sourceName = null, MigrateWorkloadType? sourceType = null, MigrationPlatform? platform = null, int? count = null)
        {
            return new SourceDetails(sourceName, sourceType, platform, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetDetails"/>. </summary>
        /// <param name="targetName"> The target name. </param>
        /// <param name="targetType"> The target type. </param>
        /// <param name="platform"> The migration platform. </param>
        /// <param name="count"> The count of a type of source. </param>
        /// <returns> A new <see cref="Models.TargetDetails"/> instance for mocking. </returns>
        public static TargetDetails TargetDetails(AzureTarget? targetName = null, MigrateWorkloadType? targetType = null, MigrationPlatform? platform = null, int? count = null)
        {
            return new TargetDetails(targetName, targetType, platform, count, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetSourcePair"/>. </summary>
        /// <param name="sourceRef"> The source name. </param>
        /// <param name="targetRef"> The target name. </param>
        /// <param name="sourceCount"> The count of a type of source. </param>
        /// <param name="targetCount"> The count of a type of target. </param>
        /// <param name="migrationDetails"> The migration details. </param>
        /// <param name="managementDetails"> The management details. </param>
        /// <param name="costDetails"> The cost details. </param>
        /// <param name="savingsDetails"> The savings details. </param>
        /// <param name="confidenceScore"> The confidence score. </param>
        /// <returns> A new <see cref="Models.TargetSourcePair"/> instance for mocking. </returns>
        public static TargetSourcePair TargetSourcePair(AssessmentSource? sourceRef = null, AzureTarget? targetRef = null, int? sourceCount = null, int? targetCount = null, MigrationDetails migrationDetails = null, IEnumerable<ManagementDetails> managementDetails = null, IEnumerable<CostDetailsCommon> costDetails = null, IEnumerable<SavingsDetailsCommon> savingsDetails = null, double? confidenceScore = null)
        {
            managementDetails ??= new List<ManagementDetails>();
            costDetails ??= new List<CostDetailsCommon>();
            savingsDetails ??= new List<SavingsDetailsCommon>();

            return new TargetSourcePair(
                sourceRef,
                targetRef,
                sourceCount,
                targetCount,
                migrationDetails,
                managementDetails?.ToList(),
                costDetails?.ToList(),
                savingsDetails?.ToList(),
                confidenceScore,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MigrationDetails"/>. </summary>
        /// <param name="readinessSummary"> The readiness summary. </param>
        /// <param name="migrationType"> The migration type. </param>
        /// <returns> A new <see cref="Models.MigrationDetails"/> instance for mocking. </returns>
        public static MigrationDetails MigrationDetails(IEnumerable<NameValuePairCloudSuitabilityCommon> readinessSummary = null, MigrationType? migrationType = null)
        {
            readinessSummary ??= new List<NameValuePairCloudSuitabilityCommon>();

            return new MigrationDetails(readinessSummary?.ToList(), migrationType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NameValuePairCloudSuitabilityCommon"/>. </summary>
        /// <param name="name"> The name. </param>
        /// <param name="value"> The value. </param>
        /// <returns> A new <see cref="Models.NameValuePairCloudSuitabilityCommon"/> instance for mocking. </returns>
        public static NameValuePairCloudSuitabilityCommon NameValuePairCloudSuitabilityCommon(CloudSuitabilityCommon? name = null, int? value = null)
        {
            return new NameValuePairCloudSuitabilityCommon(name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ManagementDetails"/>. </summary>
        /// <param name="name"> The management summary name. </param>
        /// <param name="readinessSummary"> The management suitability summary. </param>
        /// <returns> A new <see cref="Models.ManagementDetails"/> instance for mocking. </returns>
        public static ManagementDetails ManagementDetails(AzureManagementOfferingType? name = null, IEnumerable<NameValuePairCloudSuitabilityCommon> readinessSummary = null)
        {
            readinessSummary ??= new List<NameValuePairCloudSuitabilityCommon>();

            return new ManagementDetails(name, readinessSummary?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Migrate.MachineGraphAssessmentOptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="machineGraphAssessmentOptionsEdges"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Migrate.MachineGraphAssessmentOptionData"/> instance for mocking. </returns>
        public static MachineGraphAssessmentOptionData MachineGraphAssessmentOptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IReadOnlyDictionary<string, MachineAssessmentOptionsOutboundEdgeGroup> machineGraphAssessmentOptionsEdges = null)
        {
            machineGraphAssessmentOptionsEdges ??= new Dictionary<string, MachineAssessmentOptionsOutboundEdgeGroup>();

            return new MachineGraphAssessmentOptionData(
                id,
                name,
                resourceType,
                systemData,
                machineGraphAssessmentOptionsEdges != null ? new MachineGraphAssessmentOptionsProperties(machineGraphAssessmentOptionsEdges, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MachineAssessmentOptionsOutboundEdgeGroup"/>. </summary>
        /// <param name="targetLocations"> Gets or sets the Azure Locations. </param>
        /// <param name="currencies"> Gets or sets the Azure Currency. </param>
        /// <param name="savingsOptions"> Gets or sets the Assessment Savings Options. </param>
        /// <param name="licensingProgram"> Gets or sets the Licensing Program. </param>
        /// <param name="azureVmFamilies"> Gets or sets the Azure VM families. </param>
        /// <param name="azureVmFamilyCategories"> Gets or sets the Azure VM family categories. </param>
        /// <param name="premiumDiskSupport"> Gets or sets the premium disk support. </param>
        /// <param name="ultraDiskSupport"> Gets or sets the premium disk support. </param>
        /// <param name="azureOfferCode"> Gets or sets the Azure Offer Code. </param>
        /// <param name="azureVmSecurityOptions"> Gets or sets the Azure VM security options. </param>
        /// <returns> A new <see cref="Models.MachineAssessmentOptionsOutboundEdgeGroup"/> instance for mocking. </returns>
        public static MachineAssessmentOptionsOutboundEdgeGroup MachineAssessmentOptionsOutboundEdgeGroup(IEnumerable<AzureLocation> targetLocations = null, IEnumerable<AzureCurrency> currencies = null, IEnumerable<SavingsOption> savingsOptions = null, IEnumerable<LicensingProgram> licensingProgram = null, IEnumerable<AzureVmFamily> azureVmFamilies = null, IEnumerable<VmFamilyCategoryItem> azureVmFamilyCategories = null, IEnumerable<PremiumDiskSupport> premiumDiskSupport = null, IEnumerable<UltraDiskSupport> ultraDiskSupport = null, IEnumerable<AzureOffer> azureOfferCode = null, IEnumerable<AzureVmSecurityType> azureVmSecurityOptions = null)
        {
            targetLocations ??= new List<AzureLocation>();
            currencies ??= new List<AzureCurrency>();
            savingsOptions ??= new List<SavingsOption>();
            licensingProgram ??= new List<LicensingProgram>();
            azureVmFamilies ??= new List<AzureVmFamily>();
            azureVmFamilyCategories ??= new List<VmFamilyCategoryItem>();
            premiumDiskSupport ??= new List<PremiumDiskSupport>();
            ultraDiskSupport ??= new List<UltraDiskSupport>();
            azureOfferCode ??= new List<AzureOffer>();
            azureVmSecurityOptions ??= new List<AzureVmSecurityType>();

            return new MachineAssessmentOptionsOutboundEdgeGroup(
                targetLocations?.ToList(),
                currencies?.ToList(),
                savingsOptions?.ToList(),
                licensingProgram?.ToList(),
                azureVmFamilies?.ToList(),
                azureVmFamilyCategories?.ToList(),
                premiumDiskSupport?.ToList(),
                ultraDiskSupport?.ToList(),
                azureOfferCode?.ToList(),
                azureVmSecurityOptions?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
