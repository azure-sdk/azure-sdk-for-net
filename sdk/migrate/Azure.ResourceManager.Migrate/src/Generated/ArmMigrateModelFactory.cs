// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMigrateModelFactory
    {
        /// <summary> Initializes a new instance of ProjectData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="location"> Azure location in which project is created. </param>
        /// <param name="tags"> Tags provided by Azure Tagging service. </param>
        /// <param name="properties"> Properties of the project. </param>
        /// <returns> A new <see cref="Migrate.ProjectData"/> instance for mocking. </returns>
        public static ProjectData ProjectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, Core.AzureLocation? location = null, BinaryData tags = null, ProjectProperties properties = null)
        {
            return new ProjectData(id, name, resourceType, systemData, eTag, location, tags, properties);
        }

        /// <summary> Initializes a new instance of ProjectProperties. </summary>
        /// <param name="createdTimestamp"> Time when this project was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this project was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="serviceEndpoint"> Endpoint at which the collector agent can call agent REST API. </param>
        /// <param name="assessmentSolutionId"> Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects. </param>
        /// <param name="projectStatus"> Assessment project status. </param>
        /// <param name="customerWorkspaceId"> The ARM id of service map workspace created by customer. </param>
        /// <param name="customerWorkspaceLocation"> Location of service map workspace created by customer. </param>
        /// <param name="numberOfGroups"> Number of groups created in the project. </param>
        /// <param name="numberOfMachines"> Number of machines in the project. </param>
        /// <param name="numberOfAssessments"> Number of assessments created in the project. </param>
        /// <param name="lastAssessmentTimestamp"> Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created. </param>
        /// <param name="publicNetworkAccess"> This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method. </param>
        /// <param name="privateEndpointConnections"> The list of private endpoint connections to the project. </param>
        /// <param name="customerStorageAccountArmId"> The ARM id of the storage account used for interactions when public access is disabled. </param>
        /// <param name="provisioningState"> Provisioning state of the project. </param>
        /// <returns> A new <see cref="Models.ProjectProperties"/> instance for mocking. </returns>
        public static ProjectProperties ProjectProperties(DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, string serviceEndpoint = null, string assessmentSolutionId = null, ProjectStatus? projectStatus = null, string customerWorkspaceId = null, string customerWorkspaceLocation = null, int? numberOfGroups = null, int? numberOfMachines = null, int? numberOfAssessments = null, DateTimeOffset? lastAssessmentTimestamp = null, string publicNetworkAccess = null, IEnumerable<MigratePrivateEndpointConnectionData> privateEndpointConnections = null, string customerStorageAccountArmId = null, ProvisioningState? provisioningState = null)
        {
            privateEndpointConnections ??= new List<MigratePrivateEndpointConnectionData>();

            return new ProjectProperties(createdTimestamp, updatedTimestamp, serviceEndpoint, assessmentSolutionId, projectStatus, customerWorkspaceId, customerWorkspaceLocation, numberOfGroups, numberOfMachines, numberOfAssessments, lastAssessmentTimestamp, publicNetworkAccess, privateEndpointConnections?.ToList(), customerStorageAccountArmId, provisioningState);
        }

        /// <summary> Initializes a new instance of MigratePrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="properties"> Properties of the private endpoint endpoint connection. </param>
        /// <returns> A new <see cref="Migrate.MigratePrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static MigratePrivateEndpointConnectionData MigratePrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new MigratePrivateEndpointConnectionData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionProperties. </summary>
        /// <param name="provisioningState"> Indicates whether there is an ongoing operation on the private endpoint. </param>
        /// <param name="privateEndpointId"> ARM id for the private endpoint resource corresponding to the connection. </param>
        /// <param name="connectionState"> State of the private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(PrivateEndpointConnectionPropertiesProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, MigratePrivateLinkServiceConnectionState connectionState = null)
        {
            return new PrivateEndpointConnectionProperties(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, connectionState);
        }

        /// <summary> Initializes a new instance of AssessmentOptions. </summary>
        /// <param name="name"> Unique name of an assessment options. </param>
        /// <param name="id"> Unique identifier of an assessment options. </param>
        /// <param name="properties"> Properties of the assessment options. </param>
        /// <returns> A new <see cref="Models.AssessmentOptions"/> instance for mocking. </returns>
        public static AssessmentOptions AssessmentOptions(string name = null, string id = null, AssessmentOptionsProperties properties = null)
        {
            return new AssessmentOptions(name, id, properties);
        }

        /// <summary> Initializes a new instance of AssessmentOptionsProperties. </summary>
        /// <param name="vmFamilies"> Dictionary of VM families grouped by vm family name describing the targeted azure locations of VM family and the category of the family. </param>
        /// <param name="reservedInstanceVmFamilies"> List of supported VM Families. </param>
        /// <param name="reservedInstanceSupportedLocations"> List of supported Azure regions for reserved instances. </param>
        /// <param name="reservedInstanceSupportedCurrencies"> List of supported currencies for reserved instances. </param>
        /// <param name="reservedInstanceSupportedOffers"> List of supported Azure offer codes for reserved instances. </param>
        /// <returns> A new <see cref="Models.AssessmentOptionsProperties"/> instance for mocking. </returns>
        public static AssessmentOptionsProperties AssessmentOptionsProperties(IEnumerable<VmFamily> vmFamilies = null, IEnumerable<string> reservedInstanceVmFamilies = null, IEnumerable<string> reservedInstanceSupportedLocations = null, IEnumerable<string> reservedInstanceSupportedCurrencies = null, IEnumerable<string> reservedInstanceSupportedOffers = null)
        {
            vmFamilies ??= new List<VmFamily>();
            reservedInstanceVmFamilies ??= new List<string>();
            reservedInstanceSupportedLocations ??= new List<string>();
            reservedInstanceSupportedCurrencies ??= new List<string>();
            reservedInstanceSupportedOffers ??= new List<string>();

            return new AssessmentOptionsProperties(vmFamilies?.ToList(), reservedInstanceVmFamilies?.ToList(), reservedInstanceSupportedLocations?.ToList(), reservedInstanceSupportedCurrencies?.ToList(), reservedInstanceSupportedOffers?.ToList());
        }

        /// <summary> Initializes a new instance of VmFamily. </summary>
        /// <param name="familyName"> Name of the VM family. </param>
        /// <param name="targetLocations"> List of Azure regions. </param>
        /// <param name="category"> Category of the VM family. </param>
        /// <returns> A new <see cref="Models.VmFamily"/> instance for mocking. </returns>
        public static VmFamily VmFamily(string familyName = null, IEnumerable<string> targetLocations = null, IEnumerable<string> category = null)
        {
            targetLocations ??= new List<string>();
            category ??= new List<string>();

            return new VmFamily(familyName, targetLocations?.ToList(), category?.ToList());
        }

        /// <summary> Initializes a new instance of MachineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="properties"> Properties of the machine. </param>
        /// <returns> A new <see cref="Migrate.MachineData"/> instance for mocking. </returns>
        public static MachineData MachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, MachineProperties properties = null)
        {
            return new MachineData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of MachineProperties. </summary>
        /// <param name="bootType"> Boot type of the machine. </param>
        /// <param name="datacenterManagementServerArmId"> ARM ID of the data center as tracked by the Microsoft.OffAzure. </param>
        /// <param name="discoveryMachineArmId"> ARM ID of the machine as tracked by the Microsoft.OffAzure. </param>
        /// <param name="datacenterManagementServerName"> Name of the server hosting the datacenter management solution. </param>
        /// <param name="displayName"> User readable name of the machine as defined by the user in their private datacenter. </param>
        /// <param name="megabytesOfMemory"> Memory in Megabytes. </param>
        /// <param name="numberOfCores"> Processor count. </param>
        /// <param name="operatingSystemType"> Operating System type of the machine. </param>
        /// <param name="operatingSystemName"> Operating System name of the machine. </param>
        /// <param name="operatingSystemVersion"> Operating System version of the machine. </param>
        /// <param name="description"> Description of the machine. </param>
        /// <param name="groups"> List of references to the groups that the machine is member of. </param>
        /// <param name="createdTimestamp"> Time when this machine was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this machine was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="disks"> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </param>
        /// <param name="networkAdapters"> Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object. </param>
        /// <returns> A new <see cref="Models.MachineProperties"/> instance for mocking. </returns>
        public static MachineProperties MachineProperties(MachineBootType? bootType = null, string datacenterManagementServerArmId = null, string discoveryMachineArmId = null, string datacenterManagementServerName = null, string displayName = null, float? megabytesOfMemory = null, int? numberOfCores = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, string description = null, IEnumerable<string> groups = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, IReadOnlyDictionary<string, Disk> disks = null, IReadOnlyDictionary<string, NetworkAdapter> networkAdapters = null)
        {
            groups ??= new List<string>();
            disks ??= new Dictionary<string, Disk>();
            networkAdapters ??= new Dictionary<string, NetworkAdapter>();

            return new MachineProperties(bootType, datacenterManagementServerArmId, discoveryMachineArmId, datacenterManagementServerName, displayName, megabytesOfMemory, numberOfCores, operatingSystemType, operatingSystemName, operatingSystemVersion, description, groups?.ToList(), createdTimestamp, updatedTimestamp, disks, networkAdapters);
        }

        /// <summary> Initializes a new instance of Disk. </summary>
        /// <param name="gigabytesAllocated"> Gigabytes of storage provisioned for this disk. </param>
        /// <param name="displayName"> User friendly name of the disk. </param>
        /// <returns> A new <see cref="Models.Disk"/> instance for mocking. </returns>
        public static Disk Disk(double? gigabytesAllocated = null, string displayName = null)
        {
            return new Disk(gigabytesAllocated, displayName);
        }

        /// <summary> Initializes a new instance of NetworkAdapter. </summary>
        /// <param name="macAddress"> MAC Address of the network adapter. </param>
        /// <param name="ipAddresses"> List of IP Addresses on the network adapter. </param>
        /// <param name="displayName"> User friendly name of the network adapter. </param>
        /// <returns> A new <see cref="Models.NetworkAdapter"/> instance for mocking. </returns>
        public static NetworkAdapter NetworkAdapter(string macAddress = null, IEnumerable<string> ipAddresses = null, string displayName = null)
        {
            ipAddresses ??= new List<string>();

            return new NetworkAdapter(macAddress, ipAddresses?.ToList(), displayName);
        }

        /// <summary> Initializes a new instance of GroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="properties"> Properties of the group. </param>
        /// <returns> A new <see cref="Migrate.GroupData"/> instance for mocking. </returns>
        public static GroupData GroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, GroupProperties properties = null)
        {
            return new GroupData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of GroupProperties. </summary>
        /// <param name="groupStatus"> Whether the group has been created and is valid. </param>
        /// <param name="machineCount"> Number of machines part of this group. </param>
        /// <param name="assessments"> List of References to Assessments created on this group. </param>
        /// <param name="areAssessmentsRunning"> If the assessments are in running state. </param>
        /// <param name="createdTimestamp"> Time when this group was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this group was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="groupType"> The type of group. </param>
        /// <returns> A new <see cref="Models.GroupProperties"/> instance for mocking. </returns>
        public static GroupProperties GroupProperties(GroupStatus? groupStatus = null, int? machineCount = null, IEnumerable<string> assessments = null, bool? areAssessmentsRunning = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, string groupType = null)
        {
            assessments ??= new List<string>();

            return new GroupProperties(groupStatus, machineCount, assessments?.ToList(), areAssessmentsRunning, createdTimestamp, updatedTimestamp, groupType);
        }

        /// <summary> Initializes a new instance of AssessmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="properties"> Properties of the assessment. </param>
        /// <returns> A new <see cref="Migrate.AssessmentData"/> instance for mocking. </returns>
        public static AssessmentData AssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, AssessmentProperties properties = null)
        {
            return new AssessmentData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of AssessmentProperties. </summary>
        /// <param name="azureLocation"> Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API. </param>
        /// <param name="azureOfferCode"> Offer code according to which cost estimation is done. </param>
        /// <param name="eaSubscriptionId"> Enterprise agreement subscription arm id. </param>
        /// <param name="azurePricingTier"> Pricing tier for Size evaluation. </param>
        /// <param name="azureStorageRedundancy"> Storage Redundancy type offered by Azure. </param>
        /// <param name="scalingFactor"> Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3. </param>
        /// <param name="percentile"> Percentile of performance data used to recommend Azure size. </param>
        /// <param name="timeRange"> Time range of performance data used to recommend a size. </param>
        /// <param name="perfDataStartOn"> Start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> End time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting that describes the status of the assessment. </param>
        /// <param name="currency"> Currency to report prices in. </param>
        /// <param name="azureHybridUseBenefit"> AHUB discount on windows virtual machines. </param>
        /// <param name="discountPercentage"> Custom discount percentage to be applied on final costs. Can be in the range [0, 100]. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence rating percentage for assessment. Can be in the range [0, 100]. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="reservedInstance"> Azure reserved instance. </param>
        /// <param name="azureVmFamilies"> List of azure VM families. </param>
        /// <param name="azureDiskType"> Storage type selected for this disk. </param>
        /// <param name="vmUptime"> Specify the duration for which the VMs are up in the on-premises environment. </param>
        /// <param name="pricesTimestamp"> Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format. </param>
        /// <param name="createdTimestamp"> Time when this project was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this project was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="monthlyComputeCost"> Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month. </param>
        /// <param name="monthlyBandwidthCost"> Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month. </param>
        /// <param name="monthlyStorageCost"> Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month. </param>
        /// <param name="monthlyPremiumStorageCost"> Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month. </param>
        /// <param name="monthlyStandardSSDStorageCost"> Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month. </param>
        /// <param name="status"> Whether the assessment has been created and is valid. </param>
        /// <param name="numberOfMachines"> Number of assessed machines part of this assessment. </param>
        /// <returns> A new <see cref="Models.AssessmentProperties"/> instance for mocking. </returns>
        public static AssessmentProperties AssessmentProperties(AzureLocation azureLocation = default, AzureOfferCode azureOfferCode = default, string eaSubscriptionId = null, AzurePricingTier azurePricingTier = default, AzureStorageRedundancy azureStorageRedundancy = default, double scalingFactor = default, Percentile percentile = default, TimeRange timeRange = default, DateTimeOffset? perfDataStartOn = null, DateTimeOffset? perfDataEndOn = null, AssessmentStage stage = default, Currency currency = default, AzureHybridUseBenefit azureHybridUseBenefit = default, double discountPercentage = default, double? confidenceRatingInPercentage = null, AssessmentSizingCriterion sizingCriterion = default, ReservedInstance reservedInstance = default, IEnumerable<AzureVmFamily> azureVmFamilies = null, AzureDiskType azureDiskType = default, VmUptime vmUptime = null, DateTimeOffset? pricesTimestamp = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null, double? monthlyComputeCost = null, double? monthlyBandwidthCost = null, double? monthlyStorageCost = null, double? monthlyPremiumStorageCost = null, double? monthlyStandardSSDStorageCost = null, AssessmentStatus? status = null, int? numberOfMachines = null)
        {
            azureVmFamilies ??= new List<AzureVmFamily>();

            return new AssessmentProperties(azureLocation, azureOfferCode, eaSubscriptionId, azurePricingTier, azureStorageRedundancy, scalingFactor, percentile, timeRange, perfDataStartOn, perfDataEndOn, stage, currency, azureHybridUseBenefit, discountPercentage, confidenceRatingInPercentage, sizingCriterion, reservedInstance, azureVmFamilies?.ToList(), azureDiskType, vmUptime, pricesTimestamp, createdTimestamp, updatedTimestamp, monthlyComputeCost, monthlyBandwidthCost, monthlyStorageCost, monthlyPremiumStorageCost, monthlyStandardSSDStorageCost, status, numberOfMachines);
        }

        /// <summary> Initializes a new instance of DownloadUri. </summary>
        /// <param name="assessmentReportUri"> Hyperlink to download report. </param>
        /// <param name="expireOn"> Expiry date of download url. </param>
        /// <returns> A new <see cref="Models.DownloadUri"/> instance for mocking. </returns>
        public static DownloadUri DownloadUri(Uri assessmentReportUri = null, DateTimeOffset? expireOn = null)
        {
            return new DownloadUri(assessmentReportUri, expireOn);
        }

        /// <summary> Initializes a new instance of AssessedMachineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"> For optimistic concurrency control. </param>
        /// <param name="properties"> Properties of an assessed machine. </param>
        /// <returns> A new <see cref="Migrate.AssessedMachineData"/> instance for mocking. </returns>
        public static AssessedMachineData AssessedMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, AssessedMachineProperties properties = null)
        {
            return new AssessedMachineData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of AssessedMachineProperties. </summary>
        /// <param name="bootType"> Boot type of the machine. </param>
        /// <param name="datacenterMachineArmId"> ARM ID of the discovered machine. </param>
        /// <param name="datacenterManagementServerArmId"> ARM ID of the discovered datacenter. </param>
        /// <param name="datacenterManagementServerName"> Name of the server hosting the datacenter management solution. </param>
        /// <param name="description"> Description of the machine. </param>
        /// <param name="displayName"> User readable name of the machine as defined by the user in their private datacenter. </param>
        /// <param name="megabytesOfMemory"> Memory in Megabytes. </param>
        /// <param name="numberOfCores"> Processor count. </param>
        /// <param name="operatingSystemType"> Operating System type of the machine. </param>
        /// <param name="operatingSystemName"> Operating System name of the machine. </param>
        /// <param name="operatingSystemVersion"> Operating System version of the machine. </param>
        /// <param name="monthlyBandwidthCost"> Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month. </param>
        /// <param name="monthlyStorageCost"> Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month. </param>
        /// <param name="monthlyPremiumStorageCost"> Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month. </param>
        /// <param name="monthlyStandardSSDStorageCost"> Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence rating of assessed machine. </param>
        /// <param name="disks"> Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object. </param>
        /// <param name="networkAdapters"> Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object. </param>
        /// <param name="recommendedSize"> Recommended Azure size for this machine. </param>
        /// <param name="numberOfCoresForRecommendedSize"> Number of CPU cores in the Recommended Azure VM Size. </param>
        /// <param name="megabytesOfMemoryForRecommendedSize"> Megabytes of memory in the Recommended Azure VM Size. </param>
        /// <param name="monthlyComputeCostForRecommendedSize"> Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size. </param>
        /// <param name="percentageCoresUtilization"> Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment. </param>
        /// <param name="percentageMemoryUtilization"> Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment. </param>
        /// <param name="suitability"> Whether machine is suitable for migration to Azure. </param>
        /// <param name="suitabilityExplanation"> If machine is not ready to be migrated, this explains the reasons and mitigation steps. </param>
        /// <param name="suitabilityDetail"> If machine is not suitable for cloud, this explains the reasons. </param>
        /// <param name="createdTimestamp"> Time when this machine was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this machine was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <returns> A new <see cref="Models.AssessedMachineProperties"/> instance for mocking. </returns>
        public static AssessedMachineProperties AssessedMachineProperties(MachineBootType? bootType = null, string datacenterMachineArmId = null, string datacenterManagementServerArmId = null, string datacenterManagementServerName = null, string description = null, string displayName = null, double? megabytesOfMemory = null, int? numberOfCores = null, string operatingSystemType = null, string operatingSystemName = null, string operatingSystemVersion = null, double? monthlyBandwidthCost = null, double? monthlyStorageCost = null, double? monthlyPremiumStorageCost = null, double? monthlyStandardSSDStorageCost = null, double? confidenceRatingInPercentage = null, IReadOnlyDictionary<string, AssessedDisk> disks = null, IReadOnlyDictionary<string, AssessedNetworkAdapter> networkAdapters = null, AzureVmSize? recommendedSize = null, int? numberOfCoresForRecommendedSize = null, double? megabytesOfMemoryForRecommendedSize = null, double? monthlyComputeCostForRecommendedSize = null, double? percentageCoresUtilization = null, double? percentageMemoryUtilization = null, CloudSuitability? suitability = null, AzureVmSuitabilityExplanation? suitabilityExplanation = null, AzureVmSuitabilityDetail? suitabilityDetail = null, DateTimeOffset? createdTimestamp = null, DateTimeOffset? updatedTimestamp = null)
        {
            disks ??= new Dictionary<string, AssessedDisk>();
            networkAdapters ??= new Dictionary<string, AssessedNetworkAdapter>();

            return new AssessedMachineProperties(bootType, datacenterMachineArmId, datacenterManagementServerArmId, datacenterManagementServerName, description, displayName, megabytesOfMemory, numberOfCores, operatingSystemType, operatingSystemName, operatingSystemVersion, monthlyBandwidthCost, monthlyStorageCost, monthlyPremiumStorageCost, monthlyStandardSSDStorageCost, confidenceRatingInPercentage, disks, networkAdapters, recommendedSize, numberOfCoresForRecommendedSize, megabytesOfMemoryForRecommendedSize, monthlyComputeCostForRecommendedSize, percentageCoresUtilization, percentageMemoryUtilization, suitability, suitabilityExplanation, suitabilityDetail, createdTimestamp, updatedTimestamp);
        }

        /// <summary> Initializes a new instance of AssessedDisk. </summary>
        /// <param name="name"> Name of the assessed disk. </param>
        /// <param name="displayName"> User friendly name of the assessed disk. </param>
        /// <param name="gigabytesProvisioned"> Gigabytes of storage provisioned for this disk. </param>
        /// <param name="megabytesPerSecondOfRead"> Disk throughput in MegaBytes per second. </param>
        /// <param name="megabytesPerSecondOfWrite"> Disk throughput in MegaBytes per second. </param>
        /// <param name="numberOfReadOperationsPerSecond"> Number of read operations per second for the disk. </param>
        /// <param name="numberOfWriteOperationsPerSecond"> Number of read and write operations per second for the disk. </param>
        /// <param name="monthlyStorageCost"> Estimated aggregate storage cost for a 31-day month for this disk. </param>
        /// <param name="recommendedDiskType"> Storage type selected for this disk. </param>
        /// <param name="recommendedDiskSize"> Recommended Azure size for the disk, given utilization data and preferences set on Assessment. </param>
        /// <param name="gigabytesForRecommendedDiskSize"> Gigabytes of storage provided by the recommended Azure disk size. </param>
        /// <param name="suitability"> Whether this disk is suitable for Azure. </param>
        /// <param name="suitabilityExplanation"> If disk is not suitable to be migrated, this explains the reasons and mitigation steps. </param>
        /// <param name="suitabilityDetail"> If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains the details. </param>
        /// <returns> A new <see cref="Models.AssessedDisk"/> instance for mocking. </returns>
        public static AssessedDisk AssessedDisk(string name = null, string displayName = null, double? gigabytesProvisioned = null, double? megabytesPerSecondOfRead = null, double? megabytesPerSecondOfWrite = null, double? numberOfReadOperationsPerSecond = null, double? numberOfWriteOperationsPerSecond = null, double? monthlyStorageCost = null, AzureDiskType? recommendedDiskType = null, AzureDiskSize? recommendedDiskSize = null, int? gigabytesForRecommendedDiskSize = null, CloudSuitability? suitability = null, AzureDiskSuitabilityExplanation? suitabilityExplanation = null, AzureDiskSuitabilityDetail? suitabilityDetail = null)
        {
            return new AssessedDisk(name, displayName, gigabytesProvisioned, megabytesPerSecondOfRead, megabytesPerSecondOfWrite, numberOfReadOperationsPerSecond, numberOfWriteOperationsPerSecond, monthlyStorageCost, recommendedDiskType, recommendedDiskSize, gigabytesForRecommendedDiskSize, suitability, suitabilityExplanation, suitabilityDetail);
        }

        /// <summary> Initializes a new instance of AssessedNetworkAdapter. </summary>
        /// <param name="macAddress"> MAC Address of the network adapter. </param>
        /// <param name="ipAddresses"> List of IP Addresses on the network adapter. </param>
        /// <param name="displayName"> User friendly name of the assessed network adapter. </param>
        /// <param name="monthlyBandwidthCosts"> Monthly cost estimate for network bandwidth used by this network adapter. </param>
        /// <param name="megabytesPerSecondReceived"> Adapter throughput for incoming traffic in MegaBytes per second. </param>
        /// <param name="megabytesPerSecondTransmitted"> Adapter throughput for outgoing traffic in MegaBytes per second. </param>
        /// <param name="netGigabytesTransmittedPerMonth"> Gigabytes transmitted through this adapter each month. </param>
        /// <param name="suitability"> Whether this adapter is suitable for Azure. </param>
        /// <param name="suitabilityExplanation"> If network adapter is suitable, this explains the reasons and mitigation steps. </param>
        /// <param name="suitabilityDetail"> If network adapter is not suitable for cloud, this explains the reasons. </param>
        /// <returns> A new <see cref="Models.AssessedNetworkAdapter"/> instance for mocking. </returns>
        public static AssessedNetworkAdapter AssessedNetworkAdapter(string macAddress = null, IEnumerable<string> ipAddresses = null, string displayName = null, double? monthlyBandwidthCosts = null, double? megabytesPerSecondReceived = null, double? megabytesPerSecondTransmitted = null, double? netGigabytesTransmittedPerMonth = null, CloudSuitability? suitability = null, AzureNetworkAdapterSuitabilityExplanation? suitabilityExplanation = null, AzureNetworkAdapterSuitabilityDetail? suitabilityDetail = null)
        {
            ipAddresses ??= new List<string>();

            return new AssessedNetworkAdapter(macAddress, ipAddresses?.ToList(), displayName, monthlyBandwidthCosts, megabytesPerSecondReceived, megabytesPerSecondTransmitted, netGigabytesTransmittedPerMonth, suitability, suitabilityExplanation, suitabilityDetail);
        }

        /// <summary> Initializes a new instance of HyperVCollectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Migrate.HyperVCollectorData"/> instance for mocking. </returns>
        public static HyperVCollectorData HyperVCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, CollectorProperties properties = null)
        {
            return new HyperVCollectorData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of CollectorProperties. </summary>
        /// <param name="discoverySiteId"> The ARM id of the discovery service site. </param>
        /// <param name="createdTimestamp"> Time when this collector was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedTimestamp"> Time when this collector was updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="agentProperties"></param>
        /// <returns> A new <see cref="Models.CollectorProperties"/> instance for mocking. </returns>
        public static CollectorProperties CollectorProperties(string discoverySiteId = null, string createdTimestamp = null, string updatedTimestamp = null, CollectorAgentProperties agentProperties = null)
        {
            return new CollectorProperties(discoverySiteId, createdTimestamp, updatedTimestamp, agentProperties);
        }

        /// <summary> Initializes a new instance of CollectorAgentProperties. </summary>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="lastHeartbeatUtc"></param>
        /// <param name="spnDetails"></param>
        /// <returns> A new <see cref="Models.CollectorAgentProperties"/> instance for mocking. </returns>
        public static CollectorAgentProperties CollectorAgentProperties(string id = null, string version = null, DateTimeOffset? lastHeartbeatUtc = null, CollectorBodyAgentSpnProperties spnDetails = null)
        {
            return new CollectorAgentProperties(id, version, lastHeartbeatUtc, spnDetails);
        }

        /// <summary> Initializes a new instance of ServerCollectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Migrate.ServerCollectorData"/> instance for mocking. </returns>
        public static ServerCollectorData ServerCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, CollectorProperties properties = null)
        {
            return new ServerCollectorData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of VMwareCollectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Migrate.VMwareCollectorData"/> instance for mocking. </returns>
        public static VMwareCollectorData VMwareCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, CollectorProperties properties = null)
        {
            return new VMwareCollectorData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of ImportCollectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="eTag"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Migrate.ImportCollectorData"/> instance for mocking. </returns>
        public static ImportCollectorData ImportCollectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? eTag = null, ImportCollectorProperties properties = null)
        {
            return new ImportCollectorData(id, name, resourceType, systemData, eTag, properties);
        }

        /// <summary> Initializes a new instance of ImportCollectorProperties. </summary>
        /// <param name="discoverySiteId"></param>
        /// <param name="createdTimestamp"></param>
        /// <param name="updatedTimestamp"></param>
        /// <returns> A new <see cref="Models.ImportCollectorProperties"/> instance for mocking. </returns>
        public static ImportCollectorProperties ImportCollectorProperties(string discoverySiteId = null, string createdTimestamp = null, string updatedTimestamp = null)
        {
            return new ImportCollectorProperties(discoverySiteId, createdTimestamp, updatedTimestamp);
        }

        /// <summary> Initializes a new instance of MigratePrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the private link resource. </param>
        /// <returns> A new <see cref="Migrate.MigratePrivateLinkResourceData"/> instance for mocking. </returns>
        public static MigratePrivateLinkResourceData MigratePrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MigratePrivateLinkResourceProperties properties = null)
        {
            return new MigratePrivateLinkResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MigratePrivateLinkResourceProperties. </summary>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names of the the private link resource. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <returns> A new <see cref="Models.MigratePrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static MigratePrivateLinkResourceProperties MigratePrivateLinkResourceProperties(IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null, string groupId = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new MigratePrivateLinkResourceProperties(requiredMembers?.ToList(), requiredZoneNames?.ToList(), groupId);
        }
    }
}
