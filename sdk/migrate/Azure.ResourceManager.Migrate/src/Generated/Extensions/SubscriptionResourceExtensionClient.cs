// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Migrate
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _hyperVSiteClientDiagnostics;
        private HyperVSitesRestOperations _hyperVSiteRestClient;
        private ClientDiagnostics _masterSiteClientDiagnostics;
        private MasterSitesRestOperations _masterSiteRestClient;
        private ClientDiagnostics _vMwareSiteClientDiagnostics;
        private VMwareSitesRestOperations _vMwareSiteRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics HyperVSiteClientDiagnostics => _hyperVSiteClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Migrate", HyperVSiteResource.ResourceType.Namespace, Diagnostics);
        private HyperVSitesRestOperations HyperVSiteRestClient => _hyperVSiteRestClient ??= new HyperVSitesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(HyperVSiteResource.ResourceType));
        private ClientDiagnostics MasterSiteClientDiagnostics => _masterSiteClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Migrate", MasterSiteResource.ResourceType.Namespace, Diagnostics);
        private MasterSitesRestOperations MasterSiteRestClient => _masterSiteRestClient ??= new MasterSitesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(MasterSiteResource.ResourceType));
        private ClientDiagnostics VMwareSiteClientDiagnostics => _vMwareSiteClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Migrate", VMwareSiteResource.ResourceType.Namespace, Diagnostics);
        private VMwareSitesRestOperations VMwareSiteRestClient => _vMwareSiteRestClient ??= new VMwareSitesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(VMwareSiteResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get all the hyperv sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/HyperVSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HyperVSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HyperVSiteResource> GetHyperVSitesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HyperVSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HyperVSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HyperVSiteResource(Client, HyperVSiteData.DeserializeHyperVSiteData(e)), HyperVSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetHyperVSites", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get all the hyperv sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/HyperVSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HyperVSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HyperVSiteResource> GetHyperVSites(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HyperVSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HyperVSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HyperVSiteResource(Client, HyperVSiteData.DeserializeHyperVSiteData(e)), HyperVSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetHyperVSites", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get all the sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/MasterSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MasterSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MasterSiteResource> GetMasterSitesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MasterSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MasterSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MasterSiteResource(Client, MasterSiteData.DeserializeMasterSiteData(e)), MasterSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetMasterSites", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get all the sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/MasterSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MasterSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MasterSiteResource> GetMasterSites(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MasterSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MasterSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MasterSiteResource(Client, MasterSiteData.DeserializeMasterSiteData(e)), MasterSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetMasterSites", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get all the vmware sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/VMwareSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VMwareSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VMwareSiteResource> GetVMwareSitesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VMwareSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VMwareSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new VMwareSiteResource(Client, VMwareSiteData.DeserializeVMwareSiteData(e)), VMwareSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVMwareSites", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get all the vmware sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/VMwareSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VMwareSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VMwareSiteResource> GetVMwareSites(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VMwareSiteRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VMwareSiteRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new VMwareSiteResource(Client, VMwareSiteData.DeserializeVMwareSiteData(e)), VMwareSiteClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVMwareSites", "value", "nextLink", cancellationToken);
        }
    }
}
