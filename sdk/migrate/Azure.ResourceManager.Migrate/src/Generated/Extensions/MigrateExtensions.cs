// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Migrate
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Migrate. </summary>
    public static partial class MigrateExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Get all the hyperv sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/HyperVSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HyperVSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HyperVSiteResource> GetHyperVSitesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetHyperVSitesAsync(cancellationToken);
        }

        /// <summary>
        /// Get all the hyperv sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/HyperVSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HyperVSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HyperVSiteResource> GetHyperVSites(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetHyperVSites(cancellationToken);
        }

        /// <summary>
        /// Get all the sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/MasterSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MasterSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<MasterSiteResource> GetMasterSitesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetMasterSitesAsync(cancellationToken);
        }

        /// <summary>
        /// Get all the sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/MasterSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MasterSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<MasterSiteResource> GetMasterSites(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetMasterSites(cancellationToken);
        }

        /// <summary>
        /// Get all the vmware sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/VMwareSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VMwareSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VMwareSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VMwareSiteResource> GetVMwareSitesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetVMwareSitesAsync(cancellationToken);
        }

        /// <summary>
        /// Get all the vmware sites in the subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.OffAzure/VMwareSites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VMwareSites_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VMwareSiteResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VMwareSiteResource> GetVMwareSites(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetVMwareSites(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of HyperVSiteResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of HyperVSiteResources and their operations over a HyperVSiteResource. </returns>
        public static HyperVSiteCollection GetHyperVSites(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetHyperVSites();
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> Site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HyperVSiteResource>> GetHyperVSiteAsync(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetHyperVSites().GetAsync(siteName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HyperVSites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> Site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HyperVSiteResource> GetHyperVSite(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetHyperVSites().Get(siteName, cancellationToken);
        }

        /// <summary> Gets a collection of VMwareSiteResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VMwareSiteResources and their operations over a VMwareSiteResource. </returns>
        public static VMwareSiteCollection GetVMwareSites(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetVMwareSites();
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> Site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<VMwareSiteResource>> GetVMwareSiteAsync(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetVMwareSites().GetAsync(siteName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> Site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<VMwareSiteResource> GetVMwareSite(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetVMwareSites().Get(siteName, cancellationToken);
        }

        /// <summary> Gets a collection of MasterSiteResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of MasterSiteResources and their operations over a MasterSiteResource. </returns>
        public static MasterSiteCollection GetMasterSites(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetMasterSites();
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/MasterSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> The site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<MasterSiteResource>> GetMasterSiteAsync(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetMasterSites().GetAsync(siteName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Method to get a site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/MasterSites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MasterSites_GetSite</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="siteName"> The site name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="siteName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="siteName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<MasterSiteResource> GetMasterSite(this ResourceGroupResource resourceGroupResource, string siteName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetMasterSites().Get(siteName, cancellationToken);
        }

        #region HyperVClusterResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVClusterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVClusterResource.CreateResourceIdentifier" /> to create a <see cref="HyperVClusterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVClusterResource" /> object. </returns>
        public static HyperVClusterResource GetHyperVClusterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVClusterResource.ValidateResourceId(id);
                return new HyperVClusterResource(client, id);
            }
            );
        }
        #endregion

        #region HyperVHostResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVHostResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVHostResource.CreateResourceIdentifier" /> to create a <see cref="HyperVHostResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVHostResource" /> object. </returns>
        public static HyperVHostResource GetHyperVHostResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVHostResource.ValidateResourceId(id);
                return new HyperVHostResource(client, id);
            }
            );
        }
        #endregion

        #region HyperVJobResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVJobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVJobResource.CreateResourceIdentifier" /> to create a <see cref="HyperVJobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVJobResource" /> object. </returns>
        public static HyperVJobResource GetHyperVJobResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVJobResource.ValidateResourceId(id);
                return new HyperVJobResource(client, id);
            }
            );
        }
        #endregion

        #region HyperVMachineResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVMachineResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVMachineResource.CreateResourceIdentifier" /> to create a <see cref="HyperVMachineResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVMachineResource" /> object. </returns>
        public static HyperVMachineResource GetHyperVMachineResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVMachineResource.ValidateResourceId(id);
                return new HyperVMachineResource(client, id);
            }
            );
        }
        #endregion

        #region HyperVRunAsAccountResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVRunAsAccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVRunAsAccountResource.CreateResourceIdentifier" /> to create a <see cref="HyperVRunAsAccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVRunAsAccountResource" /> object. </returns>
        public static HyperVRunAsAccountResource GetHyperVRunAsAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVRunAsAccountResource.ValidateResourceId(id);
                return new HyperVRunAsAccountResource(client, id);
            }
            );
        }
        #endregion

        #region HyperVSiteResource
        /// <summary>
        /// Gets an object representing a <see cref="HyperVSiteResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HyperVSiteResource.CreateResourceIdentifier" /> to create a <see cref="HyperVSiteResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HyperVSiteResource" /> object. </returns>
        public static HyperVSiteResource GetHyperVSiteResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HyperVSiteResource.ValidateResourceId(id);
                return new HyperVSiteResource(client, id);
            }
            );
        }
        #endregion

        #region VMwareJobResource
        /// <summary>
        /// Gets an object representing a <see cref="VMwareJobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VMwareJobResource.CreateResourceIdentifier" /> to create a <see cref="VMwareJobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareJobResource" /> object. </returns>
        public static VMwareJobResource GetVMwareJobResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VMwareJobResource.ValidateResourceId(id);
                return new VMwareJobResource(client, id);
            }
            );
        }
        #endregion

        #region VMwareMachineResource
        /// <summary>
        /// Gets an object representing a <see cref="VMwareMachineResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VMwareMachineResource.CreateResourceIdentifier" /> to create a <see cref="VMwareMachineResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareMachineResource" /> object. </returns>
        public static VMwareMachineResource GetVMwareMachineResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VMwareMachineResource.ValidateResourceId(id);
                return new VMwareMachineResource(client, id);
            }
            );
        }
        #endregion

        #region VMwareRunAsAccountResource
        /// <summary>
        /// Gets an object representing a <see cref="VMwareRunAsAccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VMwareRunAsAccountResource.CreateResourceIdentifier" /> to create a <see cref="VMwareRunAsAccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareRunAsAccountResource" /> object. </returns>
        public static VMwareRunAsAccountResource GetVMwareRunAsAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VMwareRunAsAccountResource.ValidateResourceId(id);
                return new VMwareRunAsAccountResource(client, id);
            }
            );
        }
        #endregion

        #region VMwareSiteResource
        /// <summary>
        /// Gets an object representing a <see cref="VMwareSiteResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VMwareSiteResource.CreateResourceIdentifier" /> to create a <see cref="VMwareSiteResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VMwareSiteResource" /> object. </returns>
        public static VMwareSiteResource GetVMwareSiteResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VMwareSiteResource.ValidateResourceId(id);
                return new VMwareSiteResource(client, id);
            }
            );
        }
        #endregion

        #region VCenterResource
        /// <summary>
        /// Gets an object representing a <see cref="VCenterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VCenterResource.CreateResourceIdentifier" /> to create a <see cref="VCenterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VCenterResource" /> object. </returns>
        public static VCenterResource GetVCenterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VCenterResource.ValidateResourceId(id);
                return new VCenterResource(client, id);
            }
            );
        }
        #endregion

        #region MasterSiteResource
        /// <summary>
        /// Gets an object representing a <see cref="MasterSiteResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MasterSiteResource.CreateResourceIdentifier" /> to create a <see cref="MasterSiteResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MasterSiteResource" /> object. </returns>
        public static MasterSiteResource GetMasterSiteResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MasterSiteResource.ValidateResourceId(id);
                return new MasterSiteResource(client, id);
            }
            );
        }
        #endregion

        #region MigratePrivateEndpointConnectionResource
        /// <summary>
        /// Gets an object representing a <see cref="MigratePrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MigratePrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create a <see cref="MigratePrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MigratePrivateEndpointConnectionResource" /> object. </returns>
        public static MigratePrivateEndpointConnectionResource GetMigratePrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MigratePrivateEndpointConnectionResource.ValidateResourceId(id);
                return new MigratePrivateEndpointConnectionResource(client, id);
            }
            );
        }
        #endregion

        #region MigratePrivateLinkResource
        /// <summary>
        /// Gets an object representing a <see cref="MigratePrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MigratePrivateLinkResource.CreateResourceIdentifier" /> to create a <see cref="MigratePrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MigratePrivateLinkResource" /> object. </returns>
        public static MigratePrivateLinkResource GetMigratePrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MigratePrivateLinkResource.ValidateResourceId(id);
                return new MigratePrivateLinkResource(client, id);
            }
            );
        }
        #endregion
    }
}
