// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.Migrate.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Migrate
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Migrate. </summary>
    public static partial class MigrateExtensions
    {
        private static MockableMigrateArmClient GetMockableMigrateArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableMigrateArmClient(client0));
        }

        private static MockableMigrateResourceGroupResource GetMockableMigrateResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableMigrateResourceGroupResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="CompoundAssessmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CompoundAssessmentResource.CreateResourceIdentifier" /> to create a <see cref="CompoundAssessmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMigrateArmClient.GetCompoundAssessmentResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="CompoundAssessmentResource"/> object. </returns>
        public static CompoundAssessmentResource GetCompoundAssessmentResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableMigrateArmClient(client).GetCompoundAssessmentResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="WebAppCompoundAssessmentSummaryResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WebAppCompoundAssessmentSummaryResource.CreateResourceIdentifier" /> to create a <see cref="WebAppCompoundAssessmentSummaryResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMigrateArmClient.GetWebAppCompoundAssessmentSummaryResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="WebAppCompoundAssessmentSummaryResource"/> object. </returns>
        public static WebAppCompoundAssessmentSummaryResource GetWebAppCompoundAssessmentSummaryResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableMigrateArmClient(client).GetWebAppCompoundAssessmentSummaryResource(id);
        }

        /// <summary>
        /// Gets a collection of CompoundAssessmentResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMigrateResourceGroupResource.GetCompoundAssessments(string)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="projectName"> Assessment Project Name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="projectName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> An object representing collection of CompoundAssessmentResources and their operations over a CompoundAssessmentResource. </returns>
        public static CompoundAssessmentCollection GetCompoundAssessments(this ResourceGroupResource resourceGroupResource, string projectName)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableMigrateResourceGroupResource(resourceGroupResource).GetCompoundAssessments(projectName);
        }

        /// <summary>
        /// Get a CompoundAssessment
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/webAppCompoundAssessments/{compoundAssessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CompoundAssessment_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CompoundAssessmentResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMigrateResourceGroupResource.GetCompoundAssessmentAsync(string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="projectName"> Assessment Project Name. </param>
        /// <param name="compoundAssessmentName"> Compound Assessment ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/>, <paramref name="projectName"/> or <paramref name="compoundAssessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="compoundAssessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CompoundAssessmentResource>> GetCompoundAssessmentAsync(this ResourceGroupResource resourceGroupResource, string projectName, string compoundAssessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableMigrateResourceGroupResource(resourceGroupResource).GetCompoundAssessmentAsync(projectName, compoundAssessmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a CompoundAssessment
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/webAppCompoundAssessments/{compoundAssessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CompoundAssessment_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CompoundAssessmentResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMigrateResourceGroupResource.GetCompoundAssessment(string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="projectName"> Assessment Project Name. </param>
        /// <param name="compoundAssessmentName"> Compound Assessment ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/>, <paramref name="projectName"/> or <paramref name="compoundAssessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="compoundAssessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<CompoundAssessmentResource> GetCompoundAssessment(this ResourceGroupResource resourceGroupResource, string projectName, string compoundAssessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableMigrateResourceGroupResource(resourceGroupResource).GetCompoundAssessment(projectName, compoundAssessmentName, cancellationToken);
        }
    }
}
