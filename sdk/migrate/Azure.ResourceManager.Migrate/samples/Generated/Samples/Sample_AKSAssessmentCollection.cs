// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AKSAssessmentCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AksAssessmentOperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AKSAssessmentResource
            string projectName = "testProject";
            AKSAssessmentCollection collection = resourceGroupResource.GetAKSAssessments(projectName);

            // invoke the operation
            string assessmentName = "testaksassessment";
            AKSAssessmentData data = new AKSAssessmentData
            {
                Properties = new AKSAssessmentProperties
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "this-will-be-a-valid-arm-id",
                        AzureResourceGraphQuery = "zyhczkubwaqjqrmyithugmedmtdjxb",
                    },
                    Settings = new AKSAssessmentSettings(AzureVmCategory.All, ConsolidationType.Full, PricingTier.Standard)
                    {
                        AzureLocation = "EastUS",
                        Currency = AzureCurrency.USD,
                        ScalingFactor = 20F,
                        DiscountPercentage = 14F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-14T07:09:09.242Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-14T07:09:09.242Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.EA,
                            SubscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56",
                        },
                        EnvironmentType = EnvironmentType.Production,
                    },
                },
            };
            ArmOperation<AKSAssessmentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, assessmentName, data);
            AKSAssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AKSAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AksAssessmentOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AKSAssessmentResource
            string projectName = "testProject";
            AKSAssessmentCollection collection = resourceGroupResource.GetAKSAssessments(projectName);

            // invoke the operation
            string assessmentName = "testaksassessment";
            AKSAssessmentResource result = await collection.GetAsync(assessmentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AKSAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AksAssessmentOperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AKSAssessmentResource
            string projectName = "testProject";
            AKSAssessmentCollection collection = resourceGroupResource.GetAKSAssessments(projectName);

            // invoke the operation and iterate over the result
            await foreach (AKSAssessmentResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AKSAssessmentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AksAssessmentOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AKSAssessmentResource
            string projectName = "testProject";
            AKSAssessmentCollection collection = resourceGroupResource.GetAKSAssessments(projectName);

            // invoke the operation
            string assessmentName = "testaksassessment";
            bool result = await collection.ExistsAsync(assessmentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AksAssessmentOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AKSAssessmentResource
            string projectName = "testProject";
            AKSAssessmentCollection collection = resourceGroupResource.GetAKSAssessments(projectName);

            // invoke the operation
            string assessmentName = "testaksassessment";
            NullableResponse<AKSAssessmentResource> response = await collection.GetIfExistsAsync(assessmentName);
            AKSAssessmentResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AKSAssessmentData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
