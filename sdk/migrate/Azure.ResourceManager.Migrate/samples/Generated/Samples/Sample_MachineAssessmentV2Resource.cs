// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_MachineAssessmentV2Resource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_MachineAssessmentsV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/MachineAssessmentsV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "MachineAssessmentV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MachineAssessmentV2Resource created on azure
            // for more information of creating MachineAssessmentV2Resource, please refer to the document of MachineAssessmentV2Resource
            string subscriptionId = "AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9";
            string resourceGroupName = "rgmachineAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier machineAssessmentV2ResourceId = MachineAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            MachineAssessmentV2Resource machineAssessmentV2 = client.GetMachineAssessmentV2Resource(machineAssessmentV2ResourceId);

            // invoke the operation
            MachineAssessmentV2Resource result = await machineAssessmentV2.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MachineAssessmentV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_MachineAssessmentsV2OperationsDeleteMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/MachineAssessmentsV2Operations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "MachineAssessmentV2_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MachineAssessmentV2Resource created on azure
            // for more information of creating MachineAssessmentV2Resource, please refer to the document of MachineAssessmentV2Resource
            string subscriptionId = "AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9";
            string resourceGroupName = "rgmachineAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier machineAssessmentV2ResourceId = MachineAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            MachineAssessmentV2Resource machineAssessmentV2 = client.GetMachineAssessmentV2Resource(machineAssessmentV2ResourceId);

            // invoke the operation
            await machineAssessmentV2.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_MachineAssessmentsV2OperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/MachineAssessmentsV2Operations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "MachineAssessmentV2_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MachineAssessmentV2Resource created on azure
            // for more information of creating MachineAssessmentV2Resource, please refer to the document of MachineAssessmentV2Resource
            string subscriptionId = "AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9";
            string resourceGroupName = "rgmachineAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier machineAssessmentV2ResourceId = MachineAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            MachineAssessmentV2Resource machineAssessmentV2 = client.GetMachineAssessmentV2Resource(machineAssessmentV2ResourceId);

            // invoke the operation
            MachineAssessmentV2Data data = new MachineAssessmentV2Data
            {
                Properties = new MachineAssessmentV2Properties
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "f",
                        AzureResourceGraphQuery = "hfhwuqalmenpcttboxvo",
                    },
                    Settings = new MachineAssessmentSettings
                    {
                        AzureLocation = "rsequlcso",
                        Currency = AzureCurrency.Unknown,
                        ScalingFactor = 9F,
                        DiscountPercentage = 5F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-21T05:47:51.336Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-21T05:47:51.336Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.Retail,
                            SubscriptionId = "lee",
                        },
                        EnvironmentType = EnvironmentType.Production,
                        AzureSecurityOfferingType = AzureSecurityOfferingType.NO,
                        AzureDiskTypes = { AzureDiskType.Unknown },
                        AzurePricingTier = AzurePricingTier.Standard,
                        AzureStorageRedundancy = AzureStorageRedundancy.Unknown,
                        AzureHybridUseBenefit = AzureHybridUseBenefit.Unknown,
                        LinuxAzureHybridUseBenefit = AzureHybridUseBenefit.Unknown,
                        AzureVmFamilies = { AzureVmFamily.Unknown },
                        VmUptime = new VmUptime
                        {
                            DaysPerMonth = 9,
                            HoursPerDay = 10,
                        },
                        AzureVmSecurityOptions = { AzureVmSecurityType.TVM },
                    },
                    Details = new AssessmentDetails(),
                },
            };
            ArmOperation<MachineAssessmentV2Resource> lro = await machineAssessmentV2.UpdateAsync(WaitUntil.Completed, data);
            MachineAssessmentV2Resource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MachineAssessmentV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DownloadUrl_GetDownloadURLForTheAssessmentReport()
        {
            // Generated from example definition: 2024-03-03-preview/MachineAssessmentsV2Operations_DownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "MachineAssessmentsV2Operations_DownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MachineAssessmentV2Resource created on azure
            // for more information of creating MachineAssessmentV2Resource, please refer to the document of MachineAssessmentV2Resource
            string subscriptionId = "AEDD0824-BBE9-4E7C-8909-F46C68EA6BB9";
            string resourceGroupName = "rgmachineAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier machineAssessmentV2ResourceId = MachineAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            MachineAssessmentV2Resource machineAssessmentV2 = client.GetMachineAssessmentV2Resource(machineAssessmentV2ResourceId);

            // invoke the operation
            DownloadUrlContent content = new DownloadUrlContent();
            ArmOperation<DownloadUri> lro = await machineAssessmentV2.DownloadUrlAsync(WaitUntil.Completed, content);
            DownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
