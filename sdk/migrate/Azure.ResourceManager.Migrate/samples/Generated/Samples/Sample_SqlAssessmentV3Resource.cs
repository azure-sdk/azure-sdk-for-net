// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_SqlAssessmentV3Resource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SqlAssessmentV3OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlAssessmentV3Resource created on azure
            // for more information of creating SqlAssessmentV3Resource, please refer to the document of SqlAssessmentV3Resource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier sqlAssessmentV3ResourceId = SqlAssessmentV3Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            SqlAssessmentV3Resource sqlAssessmentV3 = client.GetSqlAssessmentV3Resource(sqlAssessmentV3ResourceId);

            // invoke the operation
            SqlAssessmentV3Resource result = await sqlAssessmentV3.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlAssessmentV3Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SqlAssessmentV3OperationsDeleteMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlAssessmentV3Resource created on azure
            // for more information of creating SqlAssessmentV3Resource, please refer to the document of SqlAssessmentV3Resource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier sqlAssessmentV3ResourceId = SqlAssessmentV3Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            SqlAssessmentV3Resource sqlAssessmentV3 = client.GetSqlAssessmentV3Resource(sqlAssessmentV3ResourceId);

            // invoke the operation
            await sqlAssessmentV3.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SqlAssessmentV3OperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlAssessmentV3Resource created on azure
            // for more information of creating SqlAssessmentV3Resource, please refer to the document of SqlAssessmentV3Resource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier sqlAssessmentV3ResourceId = SqlAssessmentV3Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            SqlAssessmentV3Resource sqlAssessmentV3 = client.GetSqlAssessmentV3Resource(sqlAssessmentV3ResourceId);

            // invoke the operation
            SqlAssessmentV3Data data = new SqlAssessmentV3Data
            {
                Properties = new SqlAssessmentV3Properties
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "ppxcjyrxfmpm",
                        AzureResourceGraphQuery = "ddqs",
                    },
                    Settings = new SqlAssessmentSettings
                    {
                        AzureLocation = "vtpazagckatiezkiwol",
                        Currency = AzureCurrency.Unknown,
                        ScalingFactor = 27F,
                        DiscountPercentage = 8F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-21T05:15:28.133Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-21T05:15:28.133Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.Retail,
                            SubscriptionId = "sp",
                        },
                        EnvironmentType = EnvironmentType.Production,
                        OSLicense = OSLicense.Unknown,
                        EntityUptime = new EntityUptime
                        {
                            DaysPerMonth = 2,
                            HoursPerDay = 28,
                        },
                        PreferredTargets = { AzureTarget.Unknown },
                        AzureSqlManagedInstanceSettings = new SqlMiSettingsV3
                        {
                            AzureSqlServiceTier = AzureSqlServiceTierV3.SqlServiceUnknown,
                            AzureSqlInstanceType = AzureSqlInstanceType.Unknown,
                        },
                        AzureSqlDatabaseSettings = new SqlDbSettingsV3
                        {
                            AzureSqlServiceTier = AzureSqlServiceTierV3.SqlServiceUnknown,
                            AzureSqlDataBaseType = AzureSqlDataBaseType.Unknown,
                            AzureSqlComputeTier = ComputeTier.Unknown,
                            AzureSqlPurchaseModel = AzureSqlPurchaseModel.Unknown,
                        },
                        AzureSqlVmInstanceSeries = { AzureVmFamily.Unknown },
                        MultiSubnetIntent = MultiSubnetIntent.None,
                        AsyncCommitModeIntent = AsyncCommitModeIntent.None,
                        IsInternetAccessAvailable = true,
                        DisasterRecoveryLocation = Models.AzureLocation.Unknown,
                        EnableHadrAssessment = true,
                        AzureSecurityOfferingType = AzureSecurityOfferingType.NO,
                        SqlServerLicense = SqlServerLicense.Unknown,
                    },
                    Details = new AssessmentDetails(),
                    FallbackMachineAssessmentArmId = "jfwkifsuigza",
                },
            };
            ArmOperation<SqlAssessmentV3Resource> lro = await sqlAssessmentV3.UpdateAsync(WaitUntil.Completed, data);
            SqlAssessmentV3Resource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlAssessmentV3Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DownloadUrl_GetDownloadURLForTheAssessmentReport()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_DownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3Operations_DownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlAssessmentV3Resource created on azure
            // for more information of creating SqlAssessmentV3Resource, please refer to the document of SqlAssessmentV3Resource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier sqlAssessmentV3ResourceId = SqlAssessmentV3Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            SqlAssessmentV3Resource sqlAssessmentV3 = client.GetSqlAssessmentV3Resource(sqlAssessmentV3ResourceId);

            // invoke the operation
            DownloadUrlContent content = new DownloadUrlContent();
            ArmOperation<DownloadUri> lro = await sqlAssessmentV3.DownloadUrlAsync(WaitUntil.Completed, content);
            DownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
