// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AKSSummaryCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AksSummaryOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksSummaryOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSSummary_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // get the collection of this AKSSummaryResource
            AKSSummaryCollection collection = aksAssessment.GetAKSSummaries();

            // invoke the operation
            string summaryName = "AKS";
            AKSSummaryResource result = await collection.GetAsync(summaryName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AKSSummaryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AksSummaryOperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksSummaryOperations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSSummary_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // get the collection of this AKSSummaryResource
            AKSSummaryCollection collection = aksAssessment.GetAKSSummaries();

            // invoke the operation and iterate over the result
            await foreach (AKSSummaryResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AKSSummaryData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AksSummaryOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksSummaryOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSSummary_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // get the collection of this AKSSummaryResource
            AKSSummaryCollection collection = aksAssessment.GetAKSSummaries();

            // invoke the operation
            string summaryName = "AKS";
            bool result = await collection.ExistsAsync(summaryName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AksSummaryOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksSummaryOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSSummary_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // get the collection of this AKSSummaryResource
            AKSSummaryCollection collection = aksAssessment.GetAKSSummaries();

            // invoke the operation
            string summaryName = "AKS";
            NullableResponse<AKSSummaryResource> response = await collection.GetIfExistsAsync(summaryName);
            AKSSummaryResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AKSSummaryData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
