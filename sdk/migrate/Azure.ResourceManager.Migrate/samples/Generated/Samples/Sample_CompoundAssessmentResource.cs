// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_CompoundAssessmentResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CompoundAssessmentOperationsGet()
        {
            // Generated from example definition: 2024-03-03-preview/CompoundAssessmentOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CompoundAssessment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CompoundAssessmentResource created on azure
            // for more information of creating CompoundAssessmentResource, please refer to the document of CompoundAssessmentResource
            string subscriptionId = "6898488D-BBF0-40FC-A5E3-3DF2C00C5F21";
            string resourceGroupName = "rgwebAppCompoundAssessments";
            string projectName = "contosoProject";
            string compoundAssessmentName = "assessmentName";
            ResourceIdentifier compoundAssessmentResourceId = CompoundAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, compoundAssessmentName);
            CompoundAssessmentResource compoundAssessment = client.GetCompoundAssessmentResource(compoundAssessmentResourceId);

            // invoke the operation
            CompoundAssessmentResource result = await compoundAssessment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CompoundAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_CompoundAssessmentOperationsDelete()
        {
            // Generated from example definition: 2024-03-03-preview/CompoundAssessmentOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "CompoundAssessment_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CompoundAssessmentResource created on azure
            // for more information of creating CompoundAssessmentResource, please refer to the document of CompoundAssessmentResource
            string subscriptionId = "6898488D-BBF0-40FC-A5E3-3DF2C00C5F21";
            string resourceGroupName = "rgwebAppCompoundAssessments";
            string projectName = "contosoProject";
            string compoundAssessmentName = "assessmentName";
            ResourceIdentifier compoundAssessmentResourceId = CompoundAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, compoundAssessmentName);
            CompoundAssessmentResource compoundAssessment = client.GetCompoundAssessmentResource(compoundAssessmentResourceId);

            // invoke the operation
            await compoundAssessment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_CompoundAssessmentOperationsCreate()
        {
            // Generated from example definition: 2024-03-03-preview/CompoundAssessmentOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "CompoundAssessment_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CompoundAssessmentResource created on azure
            // for more information of creating CompoundAssessmentResource, please refer to the document of CompoundAssessmentResource
            string subscriptionId = "6898488D-BBF0-40FC-A5E3-3DF2C00C5F21";
            string resourceGroupName = "rgwebAppCompoundAssessments";
            string projectName = "contosoProject";
            string compoundAssessmentName = "assessmentName";
            ResourceIdentifier compoundAssessmentResourceId = CompoundAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, compoundAssessmentName);
            CompoundAssessmentResource compoundAssessment = client.GetCompoundAssessmentResource(compoundAssessmentResourceId);

            // invoke the operation
            CompoundAssessmentData data = new CompoundAssessmentData
            {
                Properties = new CompoundAssessmentProperties(new TargetAssessmentArmIds
                {
                    Aks = "/subscriptions/6898488D-BBF0-40FC-A5E3-3DF2C00C5F21/resourceGroups/rgwebAppCompoundAssessments/providers/Microsoft.Migrate/assessmentprojects/contosoProject/aksAssessments/nameOfAssessment",
                    AzureAppService = "/subscriptions/6898488D-BBF0-40FC-A5E3-3DF2C00C5F21/resourceGroups/rgwebAppCompoundAssessments/providers/Microsoft.Migrate/assessmentprojects/contosoProject/webAppAssessments/nameOfAssessment",
                    AzureAppServiceContainer = "/subscriptions/6898488D-BBF0-40FC-A5E3-3DF2C00C5F21/resourceGroups/rgwebAppCompoundAssessments/providers/Microsoft.Migrate/assessmentprojects/contosoProject/webAppAssessments/nameOfAssessment",
                })
                {
                    FallbackMachineAssessmentArmId = "/subscriptions/6898488D-BBF0-40FC-A5E3-3DF2C00C5F21/resourceGroups/rgwebAppCompoundAssessments/providers/Microsoft.Migrate/assessmentprojects/contosoProject/assessments/nameOfAssessment",
                },
            };
            ArmOperation<CompoundAssessmentResource> lro = await compoundAssessment.UpdateAsync(WaitUntil.Completed, data);
            CompoundAssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CompoundAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DownloadUrl_CompoundAssessmentOperationsDownloadUrl()
        {
            // Generated from example definition: 2024-03-03-preview/CompoundAssessmentOperations_DownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "CompoundAssessmentOperations_DownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this CompoundAssessmentResource created on azure
            // for more information of creating CompoundAssessmentResource, please refer to the document of CompoundAssessmentResource
            string subscriptionId = "6898488D-BBF0-40FC-A5E3-3DF2C00C5F21";
            string resourceGroupName = "rgwebAppCompoundAssessments";
            string projectName = "contosoProject";
            string compoundAssessmentName = "assessmentName";
            ResourceIdentifier compoundAssessmentResourceId = CompoundAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, compoundAssessmentName);
            CompoundAssessmentResource compoundAssessment = client.GetCompoundAssessmentResource(compoundAssessmentResourceId);

            // invoke the operation
            DownloadUrlContent content = new DownloadUrlContent();
            ArmOperation<DownloadUri> lro = await compoundAssessment.DownloadUrlAsync(WaitUntil.Completed, content);
            DownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
