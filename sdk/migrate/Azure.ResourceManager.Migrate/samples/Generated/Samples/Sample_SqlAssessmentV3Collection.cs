// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_SqlAssessmentV3Collection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_SqlAssessmentV3OperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SqlAssessmentV3Resource
            string projectName = "contosoProject";
            SqlAssessmentV3Collection collection = resourceGroupResource.GetSqlAssessmentV3s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            SqlAssessmentV3Data data = new SqlAssessmentV3Data
            {
                Properties = new SqlAssessmentV3Properties
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "ppxcjyrxfmpm",
                        AzureResourceGraphQuery = "ddqs",
                    },
                    Settings = new SqlAssessmentSettings
                    {
                        AzureLocation = "vtpazagckatiezkiwol",
                        Currency = AzureCurrency.Unknown,
                        ScalingFactor = 27F,
                        DiscountPercentage = 8F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-21T05:15:28.133Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-21T05:15:28.133Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.Retail,
                            SubscriptionId = "sp",
                        },
                        EnvironmentType = EnvironmentType.Production,
                        OSLicense = OSLicense.Unknown,
                        EntityUptime = new EntityUptime
                        {
                            DaysPerMonth = 2,
                            HoursPerDay = 28,
                        },
                        PreferredTargets = { AzureTarget.Unknown },
                        AzureSqlManagedInstanceSettings = new SqlMiSettingsV3
                        {
                            AzureSqlServiceTier = AzureSqlServiceTierV3.SqlServiceUnknown,
                            AzureSqlInstanceType = AzureSqlInstanceType.Unknown,
                        },
                        AzureSqlDatabaseSettings = new SqlDbSettingsV3
                        {
                            AzureSqlServiceTier = AzureSqlServiceTierV3.SqlServiceUnknown,
                            AzureSqlDataBaseType = AzureSqlDataBaseType.Unknown,
                            AzureSqlComputeTier = ComputeTier.Unknown,
                            AzureSqlPurchaseModel = AzureSqlPurchaseModel.Unknown,
                        },
                        AzureSqlVmInstanceSeries = { AzureVmFamily.Unknown },
                        MultiSubnetIntent = MultiSubnetIntent.None,
                        AsyncCommitModeIntent = AsyncCommitModeIntent.None,
                        IsInternetAccessAvailable = true,
                        DisasterRecoveryLocation = Models.AzureLocation.Unknown,
                        EnableHadrAssessment = true,
                        AzureSecurityOfferingType = AzureSecurityOfferingType.NO,
                        SqlServerLicense = SqlServerLicense.Unknown,
                    },
                    Details = new AssessmentDetails(),
                    FallbackMachineAssessmentArmId = "jfwkifsuigza",
                },
            };
            ArmOperation<SqlAssessmentV3Resource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, assessmentName, data);
            SqlAssessmentV3Resource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlAssessmentV3Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SqlAssessmentV3OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SqlAssessmentV3Resource
            string projectName = "contosoProject";
            SqlAssessmentV3Collection collection = resourceGroupResource.GetSqlAssessmentV3s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            SqlAssessmentV3Resource result = await collection.GetAsync(assessmentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlAssessmentV3Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SqlAssessmentV3OperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SqlAssessmentV3Resource
            string projectName = "contosoProject";
            SqlAssessmentV3Collection collection = resourceGroupResource.GetSqlAssessmentV3s(projectName);

            // invoke the operation and iterate over the result
            await foreach (SqlAssessmentV3Resource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlAssessmentV3Data resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SqlAssessmentV3OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SqlAssessmentV3Resource
            string projectName = "contosoProject";
            SqlAssessmentV3Collection collection = resourceGroupResource.GetSqlAssessmentV3s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            bool result = await collection.ExistsAsync(assessmentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SqlAssessmentV3OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlAssessmentV3Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlAssessmentV3_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "C9266982-8528-4ED9-B481-C264A7164AB9";
            string resourceGroupName = "rgsqlAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SqlAssessmentV3Resource
            string projectName = "contosoProject";
            SqlAssessmentV3Collection collection = resourceGroupResource.GetSqlAssessmentV3s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            NullableResponse<SqlAssessmentV3Resource> response = await collection.GetIfExistsAsync(assessmentName);
            SqlAssessmentV3Resource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlAssessmentV3Data resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
