// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AKSAssessmentResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AksAssessmentOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // invoke the operation
            AKSAssessmentResource result = await aksAssessment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AKSAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AksAssessmentOperationsDeleteMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // invoke the operation
            await aksAssessment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AksAssessmentOperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessment_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // invoke the operation
            AKSAssessmentData data = new AKSAssessmentData
            {
                Properties = new AKSAssessmentProperties
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "this-will-be-a-valid-arm-id",
                        AzureResourceGraphQuery = "zyhczkubwaqjqrmyithugmedmtdjxb",
                    },
                    Settings = new AKSAssessmentSettings(AzureVmCategory.All, ConsolidationType.Full, PricingTier.Standard)
                    {
                        AzureLocation = "EastUS",
                        Currency = AzureCurrency.USD,
                        ScalingFactor = 20F,
                        DiscountPercentage = 14F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-14T07:09:09.242Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-14T07:09:09.242Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.EA,
                            SubscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56",
                        },
                        EnvironmentType = EnvironmentType.Production,
                    },
                },
            };
            ArmOperation<AKSAssessmentResource> lro = await aksAssessment.UpdateAsync(WaitUntil.Completed, data);
            AKSAssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AKSAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DownloadUrl_AksAssessmentOperationsDownloadUrlMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksAssessmentOperations_DownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSAssessmentOperations_DownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // invoke the operation
            DownloadUrlContent content = new DownloadUrlContent();
            ArmOperation<DownloadUri> lro = await aksAssessment.DownloadUrlAsync(WaitUntil.Completed, content);
            DownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAKSCostDetailOperationsByParent_AksCostDetailOperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AksCostDetailOperations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "AKSCostDetail_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AKSAssessmentResource created on azure
            // for more information of creating AKSAssessmentResource, please refer to the document of AKSAssessmentResource
            string subscriptionId = "572C3D3F-425D-4AE8-A935-72631EADDE56";
            string resourceGroupName = "rgaksAssessments";
            string projectName = "testProject";
            string assessmentName = "testaksassessment";
            ResourceIdentifier aksAssessmentResourceId = AKSAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AKSAssessmentResource aksAssessment = client.GetAKSAssessmentResource(aksAssessmentResourceId);

            // invoke the operation and iterate over the result
            await foreach (AKSCostDetail item in aksAssessment.GetAKSCostDetailOperationsByParentAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}
