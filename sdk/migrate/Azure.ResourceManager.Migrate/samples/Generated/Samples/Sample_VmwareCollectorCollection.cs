// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_VmwareCollectorCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_VmwareCollectorsOperationsCreate()
        {
            // Generated from example definition: 2024-03-03-preview/VmwareCollectorsOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "VmwareCollector_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawRG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VmwareCollectorResource
            string projectName = "app18700project";
            VmwareCollectorCollection collection = resourceGroupResource.GetVmwareCollectors(projectName);

            // invoke the operation
            string vmWareCollectorName = "Vmware2258collector";
            VmwareCollectorData data = new VmwareCollectorData
            {
                Properties = new CollectorPropertiesBaseWithAgent
                {
                    AgentProperties = new CollectorAgentPropertiesBase
                    {
                        Id = "fe243486-3318-41fa-aaba-c48b5df75308",
                        Version = "1.0.8.383",
                        LastHeartbeatUtc = DateTimeOffset.Parse("2022-03-29T12:10:08.9167289Z"),
                        SpnDetails = new CollectorAgentSpnPropertiesBase
                        {
                            Authority = "https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47",
                            ApplicationId = "82b3e452-c0e8-4662-8347-58282925ae84",
                            Audience = "82b3e452-c0e8-4662-8347-58282925ae84",
                            ObjectId = "3fc89111-1405-4938-9214-37aa4739401d",
                            TenantId = "72f988bf-86f1-41af-91ab-2d7cd011db47",
                        },
                    },
                    DiscoverySiteId = "/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/ayagrawRG/providers/Microsoft.OffAzure/VMwareSites/Vmware2744site",
                },
            };
            ArmOperation<VmwareCollectorResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, vmWareCollectorName, data);
            VmwareCollectorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VmwareCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_VmwareCollectorsOperationsGet()
        {
            // Generated from example definition: 2024-03-03-preview/VmwareCollectorsOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "VmwareCollector_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawRG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VmwareCollectorResource
            string projectName = "app18700project";
            VmwareCollectorCollection collection = resourceGroupResource.GetVmwareCollectors(projectName);

            // invoke the operation
            string vmWareCollectorName = "Vmware2258collector";
            VmwareCollectorResource result = await collection.GetAsync(vmWareCollectorName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VmwareCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_VmwareCollectorsOperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/VmwareCollectorsOperations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "VmwareCollector_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawRG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VmwareCollectorResource
            string projectName = "app18700project";
            VmwareCollectorCollection collection = resourceGroupResource.GetVmwareCollectors(projectName);

            // invoke the operation and iterate over the result
            await foreach (VmwareCollectorResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VmwareCollectorData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_VmwareCollectorsOperationsGet()
        {
            // Generated from example definition: 2024-03-03-preview/VmwareCollectorsOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "VmwareCollector_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawRG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VmwareCollectorResource
            string projectName = "app18700project";
            VmwareCollectorCollection collection = resourceGroupResource.GetVmwareCollectors(projectName);

            // invoke the operation
            string vmWareCollectorName = "Vmware2258collector";
            bool result = await collection.ExistsAsync(vmWareCollectorName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_VmwareCollectorsOperationsGet()
        {
            // Generated from example definition: 2024-03-03-preview/VmwareCollectorsOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "VmwareCollector_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawRG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this VmwareCollectorResource
            string projectName = "app18700project";
            VmwareCollectorCollection collection = resourceGroupResource.GetVmwareCollectors(projectName);

            // invoke the operation
            string vmWareCollectorName = "Vmware2258collector";
            NullableResponse<VmwareCollectorResource> response = await collection.GetIfExistsAsync(vmWareCollectorName);
            VmwareCollectorResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                VmwareCollectorData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
