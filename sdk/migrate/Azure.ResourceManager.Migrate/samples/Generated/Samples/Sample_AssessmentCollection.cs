// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AssessmentCollection
    {
        // Assessments_ListByGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_AssessmentsListByGroup()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/Assessments_ListByGroup.json
            // this example is just showing the usage of "Assessments_ListByGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GroupResource created on azure
            // for more information of creating GroupResource, please refer to the document of GroupResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string groupName = "Test1";
            ResourceIdentifier groupResourceId = GroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            GroupResource group = client.GetGroupResource(groupResourceId);

            // get the collection of this AssessmentResource
            AssessmentCollection collection = group.GetAssessments();

            // invoke the operation and iterate over the result
            await foreach (AssessmentResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AssessmentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Assessments_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_AssessmentsGet()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/Assessments_Get.json
            // this example is just showing the usage of "Assessments_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GroupResource created on azure
            // for more information of creating GroupResource, please refer to the document of GroupResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string groupName = "Test1";
            ResourceIdentifier groupResourceId = GroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            GroupResource group = client.GetGroupResource(groupResourceId);

            // get the collection of this AssessmentResource
            AssessmentCollection collection = group.GetAssessments();

            // invoke the operation
            string assessmentName = "assessment_5_9_2019_16_22_14";
            AssessmentResource result = await collection.GetAsync(assessmentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Assessments_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_AssessmentsGet()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/Assessments_Get.json
            // this example is just showing the usage of "Assessments_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GroupResource created on azure
            // for more information of creating GroupResource, please refer to the document of GroupResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string groupName = "Test1";
            ResourceIdentifier groupResourceId = GroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            GroupResource group = client.GetGroupResource(groupResourceId);

            // get the collection of this AssessmentResource
            AssessmentCollection collection = group.GetAssessments();

            // invoke the operation
            string assessmentName = "assessment_5_9_2019_16_22_14";
            bool result = await collection.ExistsAsync(assessmentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Assessments_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_AssessmentsCreate()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/Assessments_Create.json
            // this example is just showing the usage of "Assessments_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GroupResource created on azure
            // for more information of creating GroupResource, please refer to the document of GroupResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string groupName = "Group2";
            ResourceIdentifier groupResourceId = GroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            GroupResource group = client.GetGroupResource(groupResourceId);

            // get the collection of this AssessmentResource
            AssessmentCollection collection = group.GetAssessments();

            // invoke the operation
            string assessmentName = "assessment_5_14_2019_16_48_47";
            AssessmentData data = new AssessmentData(new AssessmentProperties(AzureLocation.NorthEurope, AzureOfferCode.Msazr0003P, AzurePricingTier.Standard, AzureStorageRedundancy.LocallyRedundant, 1, Percentile.Percentile95, TimeRange.Day, AssessmentStage.InProgress, Currency.USD, AzureHybridUseBenefit.Yes, 100, AssessmentSizingCriterion.PerformanceBased, ReservedInstance.RI3Year, new AzureVmFamily[]
            {
AzureVmFamily.Dv2Series,AzureVmFamily.FSeries,AzureVmFamily.Dv3Series,AzureVmFamily.DSSeries,AzureVmFamily.DSv2Series,AzureVmFamily.FsSeries,AzureVmFamily.Dsv3Series,AzureVmFamily.Ev3Series,AzureVmFamily.Esv3Series,AzureVmFamily.DSeries,AzureVmFamily.MSeries,AzureVmFamily.Fsv2Series,AzureVmFamily.HSeries
            }, AzureDiskType.StandardOrPremium, new VmUptime()
            {
                DaysPerMonth = 31,
                HoursPerDay = 24,
            }))
            {
                ETag = new ETag("\"1e000c2c-0000-0d00-0000-5cdaa4190000\""),
            };
            ArmOperation<AssessmentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, assessmentName, data);
            AssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
