// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_MigratePrivateEndpointConnectionResource
    {
        // PrivateEndpointConnections_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_PrivateEndpointConnectionsGet()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/PrivateEndpointConnections_Get.json
            // this example is just showing the usage of "PrivateEndpointConnection_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigratePrivateEndpointConnectionResource created on azure
            // for more information of creating MigratePrivateEndpointConnectionResource, please refer to the document of MigratePrivateEndpointConnectionResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string privateEndpointConnectionName = "custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43";
            ResourceIdentifier migratePrivateEndpointConnectionResourceId = MigratePrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, privateEndpointConnectionName);
            MigratePrivateEndpointConnectionResource migratePrivateEndpointConnection = client.GetMigratePrivateEndpointConnectionResource(migratePrivateEndpointConnectionResourceId);

            // invoke the operation
            MigratePrivateEndpointConnectionResource result = await migratePrivateEndpointConnection.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigratePrivateEndpointConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PrivateEndpointConnections_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PrivateEndpointConnectionsCreate()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/PrivateEndpointConnections_Create.json
            // this example is just showing the usage of "PrivateEndpointConnection_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigratePrivateEndpointConnectionResource created on azure
            // for more information of creating MigratePrivateEndpointConnectionResource, please refer to the document of MigratePrivateEndpointConnectionResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string privateEndpointConnectionName = "custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43";
            ResourceIdentifier migratePrivateEndpointConnectionResourceId = MigratePrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, privateEndpointConnectionName);
            MigratePrivateEndpointConnectionResource migratePrivateEndpointConnection = client.GetMigratePrivateEndpointConnectionResource(migratePrivateEndpointConnectionResourceId);

            // invoke the operation
            MigratePrivateEndpointConnectionData data = new MigratePrivateEndpointConnectionData(new PrivateEndpointConnectionProperties()
            {
                ConnectionState = new MigratePrivateLinkServiceConnectionState()
                {
                    Status = PrivateLinkServiceConnectionStateStatus.Approved,
                    Description = null,
                    ActionsRequired = "",
                },
            })
            {
                ETag = new ETag("\"00009300-0000-0300-0000-602b967b0000\""),
            };
            ArmOperation<MigratePrivateEndpointConnectionResource> lro = await migratePrivateEndpointConnection.UpdateAsync(WaitUntil.Completed, data);
            MigratePrivateEndpointConnectionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigratePrivateEndpointConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PrivateEndpointConnections_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_PrivateEndpointConnectionsDelete()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/PrivateEndpointConnections_Delete.json
            // this example is just showing the usage of "PrivateEndpointConnection_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigratePrivateEndpointConnectionResource created on azure
            // for more information of creating MigratePrivateEndpointConnectionResource, please refer to the document of MigratePrivateEndpointConnectionResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string privateEndpointConnectionName = "custestpece80project3980pe.7e35576b-3df4-478e-9759-f64351cf4f43";
            ResourceIdentifier migratePrivateEndpointConnectionResourceId = MigratePrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, privateEndpointConnectionName);
            MigratePrivateEndpointConnectionResource migratePrivateEndpointConnection = client.GetMigratePrivateEndpointConnectionResource(migratePrivateEndpointConnectionResourceId);

            // invoke the operation
            await migratePrivateEndpointConnection.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
