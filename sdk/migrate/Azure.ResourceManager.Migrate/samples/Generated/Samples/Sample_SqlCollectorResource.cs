// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_SqlCollectorResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SqlCollectorOperationsGet()
        {
            // Generated from example definition: 2024-03-03-preview/SqlCollectorOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlCollector_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlCollectorResource created on azure
            // for more information of creating SqlCollectorResource, please refer to the document of SqlCollectorResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string collectorName = "fci-test0c1esqlsitecollector";
            ResourceIdentifier sqlCollectorResourceId = SqlCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, collectorName);
            SqlCollectorResource sqlCollector = client.GetSqlCollectorResource(sqlCollectorResourceId);

            // invoke the operation
            SqlCollectorResource result = await sqlCollector.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SqlCollectorOperationsDelete()
        {
            // Generated from example definition: 2024-03-03-preview/SqlCollectorOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlCollector_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlCollectorResource created on azure
            // for more information of creating SqlCollectorResource, please refer to the document of SqlCollectorResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string collectorName = "fci-test0c1esqlsitecollector";
            ResourceIdentifier sqlCollectorResourceId = SqlCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, collectorName);
            SqlCollectorResource sqlCollector = client.GetSqlCollectorResource(sqlCollectorResourceId);

            // invoke the operation
            await sqlCollector.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SqlCollectorOperationsCreate()
        {
            // Generated from example definition: 2024-03-03-preview/SqlCollectorOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "SqlCollector_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlCollectorResource created on azure
            // for more information of creating SqlCollectorResource, please refer to the document of SqlCollectorResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string collectorName = "fci-test0c1esqlsitecollector";
            ResourceIdentifier sqlCollectorResourceId = SqlCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, collectorName);
            SqlCollectorResource sqlCollector = client.GetSqlCollectorResource(sqlCollectorResourceId);

            // invoke the operation
            SqlCollectorData data = new SqlCollectorData
            {
                Properties = new CollectorPropertiesBaseWithAgent
                {
                    AgentProperties = new CollectorAgentPropertiesBase
                    {
                        Id = "630da710-4d44-41f7-a189-72fe3db5502b-agent",
                        SpnDetails = new CollectorAgentSpnPropertiesBase
                        {
                            Authority = "https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47",
                            ApplicationId = "db9c4c3d-477c-4d5a-817b-318276713565",
                            Audience = "db9c4c3d-477c-4d5a-817b-318276713565",
                            ObjectId = "e50236ad-ad07-47d4-af71-ed7b52d200d5",
                            TenantId = "72f988bf-86f1-41af-91ab-2d7cd011db47",
                        },
                    },
                    DiscoverySiteId = "/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/bansalankit-rg/providers/Microsoft.OffAzure/MasterSites/fci-ankit-test6065mastersite/SqlSites/fci-ankit-test6065sqlsites",
                },
            };
            ArmOperation<SqlCollectorResource> lro = await sqlCollector.UpdateAsync(WaitUntil.Completed, data);
            SqlCollectorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
