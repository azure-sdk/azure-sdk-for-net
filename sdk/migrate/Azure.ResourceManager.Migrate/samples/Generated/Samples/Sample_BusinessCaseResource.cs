// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_BusinessCaseResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_BusinessCaseOperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/BusinessCaseOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "BusinessCase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BusinessCaseResource created on azure
            // for more information of creating BusinessCaseResource, please refer to the document of BusinessCaseResource
            string subscriptionId = "ADC896AD-6A38-454E-9A62-AFC618F5F4BC";
            string resourceGroupName = "rgbusinessCases";
            string projectName = "MyMigrateProject";
            string businessCaseName = "MyBusinessCase";
            ResourceIdentifier businessCaseResourceId = BusinessCaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, businessCaseName);
            BusinessCaseResource businessCase = client.GetBusinessCaseResource(businessCaseResourceId);

            // invoke the operation
            BusinessCaseResource result = await businessCase.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BusinessCaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_BusinessCaseOperationsDeleteMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-03-03-preview/BusinessCaseOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "BusinessCase_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BusinessCaseResource created on azure
            // for more information of creating BusinessCaseResource, please refer to the document of BusinessCaseResource
            string subscriptionId = "ADC896AD-6A38-454E-9A62-AFC618F5F4BC";
            string resourceGroupName = "rgbusinessCases";
            string projectName = "MyMigrateProject";
            string businessCaseName = "MyBusinessCase";
            ResourceIdentifier businessCaseResourceId = BusinessCaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, businessCaseName);
            BusinessCaseResource businessCase = client.GetBusinessCaseResource(businessCaseResourceId);

            // invoke the operation
            await businessCase.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_BusinessCaseOperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/BusinessCaseOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "BusinessCase_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BusinessCaseResource created on azure
            // for more information of creating BusinessCaseResource, please refer to the document of BusinessCaseResource
            string subscriptionId = "ADC896AD-6A38-454E-9A62-AFC618F5F4BC";
            string resourceGroupName = "rgbusinessCases";
            string projectName = "MyMigrateProject";
            string businessCaseName = "MyBusinessCase";
            ResourceIdentifier businessCaseResourceId = BusinessCaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, businessCaseName);
            BusinessCaseResource businessCase = client.GetBusinessCaseResource(businessCaseResourceId);

            // invoke the operation
            BusinessCaseData data = new BusinessCaseData
            {
                Properties = new BusinessCaseProperties
                {
                    Settings = new Settings(new AzureSettings("hpocokeckktxpzilk", BusinessCaseCurrency.Unknown)
                    {
                        DiscountPercentage = 48F,
                        BusinessCaseType = MigrationStrategy.Unknown,
                        WorkloadDiscoverySource = DiscoverySource.Unknown,
                        PerformanceDataStartOn = DateTimeOffset.Parse("2024-11-14T10:27:58.436Z"),
                        PerformanceDataEndOn = DateTimeOffset.Parse("2024-11-14T10:27:58.436Z"),
                        ComfortFactor = 19F,
                        PerformanceUtilizationPercentile = 93F,
                        PerYearMigrationCompletionPercentage = {new NameValuePair
{
Name = "cthxvjhedpsnbddvyghswtgp",
Value = 13F,
}},
                        InfrastructureGrowthRate = 79F,
                        Wacc = 43F,
                        NetworkCostPercentage = 81F,
                        IaasLaborCostPercentage = 51F,
                        PaasLaborCostPercentage = 13F,
                        AvsLaborCostPercentage = 2F,
                        SavingsOption = SavingsOption.Unknown,
                    })
                    {
                        OnPremiseSettings = new OnPremiseSettings(
                new ComputeSettings(
                26F,
                8F,
                1F,
                10F,
                10F,
                new SqlServerLicensingSettings[]
            {
new SqlServerLicensingSettings(SqlServerLicenseType.Unknown, 28F, 27F)
            },
                new WindowsServerLicensingSettings(2F, 6F, 21),
                new LinuxServerLicensingSettings(7F),
                new LinuxServerLicensingSettings(7F),
                new VirtualizationSoftwareSettings(23F)),
                new StorageSettings(12F, 5F),
                new NetworkSettings(84F, 18, 27F),
                new FacilitySettings(25F)
                {
                    FacilitiesCostPerKwh = 1F,
                },
                new LaborSettings(16, 18, 22F),
                new SecuritySettings(6F, 10F))
                        {
                            ManagementSettings = new ManagementSettings(new HypervVirtualizationManagementSettings(8, 15F, new HypervLicense[]
            {
new HypervLicense(1F, HyperVLicenseType.Unknown)
            }), new ThirdPartyManagementSettings(1F, 13F), new OtherManagementCostsSettings(2F, 28F, 4F)),
                        },
                        AzureArcSettings = new AzureArcSettings(AzureArcState.Disabled)
                        {
                            LaborCostPercentage = 46F,
                            ManagementMonitoringSettings = new AzureArcMonitoringSettings(17F, 19),
                        },
                    },
                },
            };
            ArmOperation<BusinessCaseResource> lro = await businessCase.UpdateAsync(WaitUntil.Completed, data);
            BusinessCaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BusinessCaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CompareSummary_GetCompareSummaryReportForBusinessCase()
        {
            // Generated from example definition: 2024-03-03-preview/BusinessCaseOperations_CompareSummary_MaximumSet_Gen.json
            // this example is just showing the usage of "BusinessCaseOperations_CompareSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BusinessCaseResource created on azure
            // for more information of creating BusinessCaseResource, please refer to the document of BusinessCaseResource
            string subscriptionId = "ADC896AD-6A38-454E-9A62-AFC618F5F4BC";
            string resourceGroupName = "rgbusinessCases";
            string projectName = "MyMigrateProject";
            string businessCaseName = "MyBusinessCase";
            ResourceIdentifier businessCaseResourceId = BusinessCaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, businessCaseName);
            BusinessCaseResource businessCase = client.GetBusinessCaseResource(businessCaseResourceId);

            // invoke the operation
            CompareSummaryContent content = new CompareSummaryContent();
            ArmOperation<CompareSummary> lro = await businessCase.CompareSummaryAsync(WaitUntil.Completed, content);
            CompareSummary result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetReportDownloadUrl_GetDownloadURLForTheBusinessCaseReportGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-03-03-preview/BusinessCaseOperations_GetReportDownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "BusinessCaseOperations_GetReportDownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BusinessCaseResource created on azure
            // for more information of creating BusinessCaseResource, please refer to the document of BusinessCaseResource
            string subscriptionId = "ADC896AD-6A38-454E-9A62-AFC618F5F4BC";
            string resourceGroupName = "rgbusinessCases";
            string projectName = "MyMigrateProject";
            string businessCaseName = "MyBusinessCase";
            ResourceIdentifier businessCaseResourceId = BusinessCaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, businessCaseName);
            BusinessCaseResource businessCase = client.GetBusinessCaseResource(businessCaseResourceId);

            // invoke the operation
            GetReportDownloadUrlContent content = new GetReportDownloadUrlContent();
            ArmOperation<ReportDownloadUri> lro = await businessCase.GetReportDownloadUrlAsync(WaitUntil.Completed, content);
            ReportDownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
