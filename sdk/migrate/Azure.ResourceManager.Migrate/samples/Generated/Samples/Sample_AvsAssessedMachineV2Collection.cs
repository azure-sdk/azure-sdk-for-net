// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AvsAssessedMachineV2Collection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AvsAssessedMachinesV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessedMachinesV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessedMachineV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AvsAssessmentV2Resource created on azure
            // for more information of creating AvsAssessmentV2Resource, please refer to the document of AvsAssessmentV2Resource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier avsAssessmentV2ResourceId = AvsAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AvsAssessmentV2Resource avsAssessmentV2 = client.GetAvsAssessmentV2Resource(avsAssessmentV2ResourceId);

            // get the collection of this AvsAssessedMachineV2Resource
            AvsAssessedMachineV2Collection collection = avsAssessmentV2.GetAvsAssessedMachineV2s();

            // invoke the operation
            string avsAssessedMachineName = "machine1";
            AvsAssessedMachineV2Resource result = await collection.GetAsync(avsAssessedMachineName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AvsAssessedMachineV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AvsAssessedMachinesV2OperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessedMachinesV2Operations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessedMachineV2_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AvsAssessmentV2Resource created on azure
            // for more information of creating AvsAssessmentV2Resource, please refer to the document of AvsAssessmentV2Resource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier avsAssessmentV2ResourceId = AvsAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AvsAssessmentV2Resource avsAssessmentV2 = client.GetAvsAssessmentV2Resource(avsAssessmentV2ResourceId);

            // get the collection of this AvsAssessedMachineV2Resource
            AvsAssessedMachineV2Collection collection = avsAssessmentV2.GetAvsAssessedMachineV2s();

            // invoke the operation and iterate over the result
            int? pageSize = 26;
            string continuationToken = "vhdrqptyyromhgz";
            int? totalRecordCount = 7;
            await foreach (AvsAssessedMachineV2Resource item in collection.GetAllAsync(pageSize: pageSize, continuationToken: continuationToken, totalRecordCount: totalRecordCount))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsAssessedMachineV2Data resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AvsAssessedMachinesV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessedMachinesV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessedMachineV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AvsAssessmentV2Resource created on azure
            // for more information of creating AvsAssessmentV2Resource, please refer to the document of AvsAssessmentV2Resource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier avsAssessmentV2ResourceId = AvsAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AvsAssessmentV2Resource avsAssessmentV2 = client.GetAvsAssessmentV2Resource(avsAssessmentV2ResourceId);

            // get the collection of this AvsAssessedMachineV2Resource
            AvsAssessedMachineV2Collection collection = avsAssessmentV2.GetAvsAssessedMachineV2s();

            // invoke the operation
            string avsAssessedMachineName = "machine1";
            bool result = await collection.ExistsAsync(avsAssessedMachineName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AvsAssessedMachinesV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessedMachinesV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessedMachineV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AvsAssessmentV2Resource created on azure
            // for more information of creating AvsAssessmentV2Resource, please refer to the document of AvsAssessmentV2Resource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            string projectName = "contosoProject";
            string assessmentName = "assessmentName";
            ResourceIdentifier avsAssessmentV2ResourceId = AvsAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, assessmentName);
            AvsAssessmentV2Resource avsAssessmentV2 = client.GetAvsAssessmentV2Resource(avsAssessmentV2ResourceId);

            // get the collection of this AvsAssessedMachineV2Resource
            AvsAssessedMachineV2Collection collection = avsAssessmentV2.GetAvsAssessedMachineV2s();

            // invoke the operation
            string avsAssessedMachineName = "machine1";
            NullableResponse<AvsAssessedMachineV2Resource> response = await collection.GetIfExistsAsync(avsAssessedMachineName);
            AvsAssessedMachineV2Resource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsAssessedMachineV2Data resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
