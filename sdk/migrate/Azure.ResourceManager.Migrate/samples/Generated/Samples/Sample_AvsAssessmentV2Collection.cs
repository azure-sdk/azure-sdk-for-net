// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AvsAssessmentV2Collection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AvsAssessmentsV2OperationsCreateMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessmentsV2Operations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessmentV2_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AvsAssessmentV2Resource
            string projectName = "contosoProject";
            AvsAssessmentV2Collection collection = resourceGroupResource.GetAvsAssessmentV2s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            AvsAssessmentV2Data data = new AvsAssessmentV2Data
            {
                Properties = new AvsAssessmentPropertiesV2
                {
                    Scope = new Scope
                    {
                        ScopeType = ScopeType.ServerGroupId,
                        ServerGroupId = "fxonspfmzfuiaepr",
                        AzureResourceGraphQuery = "ylnfwgptlyzwzkotmunbx",
                    },
                    Settings = new AvsAssessmentSettings
                    {
                        AzureLocation = "actuloeieva",
                        Currency = AzureCurrency.Unknown,
                        ScalingFactor = 28F,
                        DiscountPercentage = 27F,
                        SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
                        PerformanceData = new PerformanceData
                        {
                            Percentile = new Percentile("Unknown"),
                            TimeRange = TimeRange.Day,
                            PerfDataStartOn = DateTimeOffset.Parse("2025-02-21T05:36:34.751Z"),
                            PerfDataEndOn = DateTimeOffset.Parse("2025-02-21T05:36:34.751Z"),
                        },
                        SavingsSettings = new SavingsSettings
                        {
                            SavingsOptions = SavingsOption.None,
                            AzureOfferCode = AzureOffer.Unknown,
                        },
                        BillingSettings = new BillingSettings
                        {
                            LicensingProgram = LicensingProgram.Retail,
                            SubscriptionId = "xvtuenxmmjuqlhgmvev",
                        },
                        EnvironmentType = EnvironmentType.Production,
                        FailuresToTolerateAndRaidLevelList = { FttAndRaidLevel.Unknown },
                        VcpuOversubscription = 25F,
                        NodeTypes = { AzureAvsNodeType.Unknown },
                        AvsAssessmentScenario = AvsAssessmentScenario.Unknown,
                        ExternalStorageTypes = { ExternalStorageType.Unknown },
                        CpuHeadroom = 27F,
                        IsVcfByolEnabled = true,
                        MemOvercommit = 11F,
                        DedupeCompression = 26F,
                        IsStretchClusterEnabled = true,
                    },
                    Details = new AssessmentDetails(),
                    FallbackMachineAssessmentArmId = "tpjvxfcyxsgngqdxyrrfh",
                },
            };
            ArmOperation<AvsAssessmentV2Resource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, assessmentName, data);
            AvsAssessmentV2Resource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AvsAssessmentV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AvsAssessmentsV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessmentsV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessmentV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AvsAssessmentV2Resource
            string projectName = "contosoProject";
            AvsAssessmentV2Collection collection = resourceGroupResource.GetAvsAssessmentV2s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            AvsAssessmentV2Resource result = await collection.GetAsync(assessmentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AvsAssessmentV2Data resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AvsAssessmentsV2OperationsListByParentMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessmentsV2Operations_ListByParent_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessmentV2_ListByParent" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AvsAssessmentV2Resource
            string projectName = "contosoProject";
            AvsAssessmentV2Collection collection = resourceGroupResource.GetAvsAssessmentV2s(projectName);

            // invoke the operation and iterate over the result
            await foreach (AvsAssessmentV2Resource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsAssessmentV2Data resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AvsAssessmentsV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessmentsV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessmentV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AvsAssessmentV2Resource
            string projectName = "contosoProject";
            AvsAssessmentV2Collection collection = resourceGroupResource.GetAvsAssessmentV2s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            bool result = await collection.ExistsAsync(assessmentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AvsAssessmentsV2OperationsGetMaximumSet()
        {
            // Generated from example definition: 2024-03-03-preview/AvsAssessmentsV2Operations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AvsAssessmentV2_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "BF03674C-B4D0-4FC9-B964-175F4C6CBFDD";
            string resourceGroupName = "rgavsAssessments";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AvsAssessmentV2Resource
            string projectName = "contosoProject";
            AvsAssessmentV2Collection collection = resourceGroupResource.GetAvsAssessmentV2s(projectName);

            // invoke the operation
            string assessmentName = "assessmentName";
            NullableResponse<AvsAssessmentV2Resource> response = await collection.GetIfExistsAsync(assessmentName);
            AvsAssessmentV2Resource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AvsAssessmentV2Data resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
