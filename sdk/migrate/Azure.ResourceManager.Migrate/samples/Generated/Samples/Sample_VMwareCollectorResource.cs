// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_VMwareCollectorResource
    {
        // VMwareCollectors_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_VMwareCollectorsGet()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/VMwareCollectors_Get.json
            // this example is just showing the usage of "VMwareCollectors_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VMwareCollectorResource created on azure
            // for more information of creating VMwareCollectorResource, please refer to the document of VMwareCollectorResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string vmWareCollectorName = "PortalvCenterbc2fcollector";
            ResourceIdentifier vMwareCollectorResourceId = VMwareCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, vmWareCollectorName);
            VMwareCollectorResource vMwareCollector = client.GetVMwareCollectorResource(vMwareCollectorResourceId);

            // invoke the operation
            VMwareCollectorResource result = await vMwareCollector.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VMwareCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // VMwareCollectors_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_VMwareCollectorsCreate()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/VMwareCollectors_Create.json
            // this example is just showing the usage of "VMwareCollectors_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VMwareCollectorResource created on azure
            // for more information of creating VMwareCollectorResource, please refer to the document of VMwareCollectorResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string vmWareCollectorName = "PortalvCenterbc2fcollector";
            ResourceIdentifier vMwareCollectorResourceId = VMwareCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, vmWareCollectorName);
            VMwareCollectorResource vMwareCollector = client.GetVMwareCollectorResource(vMwareCollectorResourceId);

            // invoke the operation
            VMwareCollectorData data = new VMwareCollectorData()
            {
                ETag = new ETag("\"01003d32-0000-0d00-0000-5d74d2e50000\""),
                Properties = new CollectorProperties()
                {
                    DiscoverySiteId = "/subscriptions/6393a73f-8d55-47ef-b6dd-179b3e0c7910/resourceGroups/abgoyal-westEurope/providers/Microsoft.OffAzure/VMwareSites/PortalvCenterbc2fsite",
                    AgentProperties = new CollectorAgentProperties()
                    {
                        SpnDetails = new CollectorBodyAgentSpnProperties()
                        {
                            Authority = "https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47",
                            ApplicationId = "fc717575-8173-4b21-92a5-658b655e613e",
                            Audience = "https://72f988bf-86f1-41af-91ab-2d7cd011db47/PortalvCenterbc2fagentauthaadapp",
                            ObjectId = "29d94f38-db94-4980-aec0-0cfd55ab1cd0",
                            TenantId = Guid.Parse("72f988bf-86f1-41af-91ab-2d7cd011db47"),
                        },
                    },
                },
            };
            ArmOperation<VMwareCollectorResource> lro = await vMwareCollector.UpdateAsync(WaitUntil.Completed, data);
            VMwareCollectorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VMwareCollectorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // VMwareCollectors_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_VMwareCollectorsDelete()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2019-10-01/examples/VMwareCollectors_Delete.json
            // this example is just showing the usage of "VMwareCollectors_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VMwareCollectorResource created on azure
            // for more information of creating VMwareCollectorResource, please refer to the document of VMwareCollectorResource
            string subscriptionId = "6393a73f-8d55-47ef-b6dd-179b3e0c7910";
            string resourceGroupName = "abgoyal-westEurope";
            string projectName = "abgoyalWEselfhostb72bproject";
            string vmWareCollectorName = "PortalvCenterbc2fcollector";
            ResourceIdentifier vMwareCollectorResourceId = VMwareCollectorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, vmWareCollectorName);
            VMwareCollectorResource vMwareCollector = client.GetVMwareCollectorResource(vMwareCollectorResourceId);

            // invoke the operation
            await vMwareCollector.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
