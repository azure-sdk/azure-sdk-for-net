// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.ResourceManager.Marketplace.Mocking;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Marketplace. </summary>
    public static partial class MarketplaceExtensions
    {
        private static MockableMarketplaceTenantResource GetMockableMarketplaceTenantResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableMarketplaceTenantResource(client, resource.Id));
        }

        /// <summary>
        /// Check user has review.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RatingAndReviewsOperations_CheckUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-01-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMarketplaceTenantResource.CheckUserHasReviewRatingAndReviewsOperation(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="uniqueProductId"> Unique Product Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="uniqueProductId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="uniqueProductId"/> is null. </exception>
        public static async Task<Response<UserHasReview>> CheckUserHasReviewRatingAndReviewsOperationAsync(this TenantResource tenantResource, string uniqueProductId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableMarketplaceTenantResource(tenantResource).CheckUserHasReviewRatingAndReviewsOperationAsync(uniqueProductId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check user has review.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RatingAndReviewsOperations_CheckUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-01-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableMarketplaceTenantResource.CheckUserHasReviewRatingAndReviewsOperation(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="uniqueProductId"> Unique Product Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="uniqueProductId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="uniqueProductId"/> is null. </exception>
        public static Response<UserHasReview> CheckUserHasReviewRatingAndReviewsOperation(this TenantResource tenantResource, string uniqueProductId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableMarketplaceTenantResource(tenantResource).CheckUserHasReviewRatingAndReviewsOperation(uniqueProductId, cancellationToken);
        }
    }
}
