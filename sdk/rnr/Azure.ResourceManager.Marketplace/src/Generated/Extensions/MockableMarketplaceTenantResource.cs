// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace.Mocking
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class MockableMarketplaceTenantResource : ArmResource
    {
        private ClientDiagnostics _ratingAndReviewsOperationsClientDiagnostics;
        private RatingAndReviewsRestOperations _ratingAndReviewsOperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableMarketplaceTenantResource"/> class for mocking. </summary>
        protected MockableMarketplaceTenantResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableMarketplaceTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMarketplaceTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics RatingAndReviewsOperationsClientDiagnostics => _ratingAndReviewsOperationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Marketplace", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private RatingAndReviewsRestOperations RatingAndReviewsOperationsRestClient => _ratingAndReviewsOperationsRestClient ??= new RatingAndReviewsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Check user has review.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RatingAndReviewsOperations_CheckUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-01-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="uniqueProductId"> Unique Product Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="uniqueProductId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueProductId"/> is null. </exception>
        public virtual async Task<Response<UserHasReview>> CheckUserHasReviewRatingAndReviewsOperationAsync(string uniqueProductId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uniqueProductId, nameof(uniqueProductId));

            using var scope = RatingAndReviewsOperationsClientDiagnostics.CreateScope("MockableMarketplaceTenantResource.CheckUserHasReviewRatingAndReviewsOperation");
            scope.Start();
            try
            {
                var response = await RatingAndReviewsOperationsRestClient.CheckUserHasReviewAsync(uniqueProductId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check user has review.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Marketplace/products/{uniqueProductId}/checkUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RatingAndReviewsOperations_CheckUserHasReview</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-01-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="uniqueProductId"> Unique Product Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="uniqueProductId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueProductId"/> is null. </exception>
        public virtual Response<UserHasReview> CheckUserHasReviewRatingAndReviewsOperation(string uniqueProductId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uniqueProductId, nameof(uniqueProductId));

            using var scope = RatingAndReviewsOperationsClientDiagnostics.CreateScope("MockableMarketplaceTenantResource.CheckUserHasReviewRatingAndReviewsOperation");
            scope.Start();
            try
            {
                var response = RatingAndReviewsOperationsRestClient.CheckUserHasReview(uniqueProductId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
