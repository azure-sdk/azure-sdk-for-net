// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Marketplace.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMarketplaceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.UserHasReview"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Models.UserHasReview"/> instance for mocking. </returns>
        public static UserHasReview UserHasReview(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, UserHasReviewProperties properties = null)
        {
            return new UserHasReview(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UserHasReviewProperties"/>. </summary>
        /// <param name="hasReview"> Indicates whether user has already submitted a review. </param>
        /// <param name="updatedAt"> The date and time when the review was last updated. </param>
        /// <returns> A new <see cref="Models.UserHasReviewProperties"/> instance for mocking. </returns>
        public static UserHasReviewProperties UserHasReviewProperties(bool hasReview = default, string updatedAt = null)
        {
            return new UserHasReviewProperties(hasReview, updatedAt, serializedAdditionalRawData: null);
        }
    }
}
