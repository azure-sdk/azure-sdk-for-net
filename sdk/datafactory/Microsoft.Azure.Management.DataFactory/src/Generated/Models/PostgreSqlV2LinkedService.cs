// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Linked service for PostgreSQLV2 data source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("PostgreSqlV2")]
    [Rest.Serialization.JsonTransformation]
    public partial class PostgreSqlV2LinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the PostgreSqlV2LinkedService class.
        /// </summary>
        public PostgreSqlV2LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PostgreSqlV2LinkedService class.
        /// </summary>
        /// <param name="server">Server name for connection. Type:
        /// string.</param>
        /// <param name="username">Username for authentication. Type:
        /// string.</param>
        /// <param name="database">Database name for connection. Type:
        /// string.</param>
        /// <param name="authenticationType">The authentication type to use.
        /// Type: string.</param>
        /// <param name="sslMode">SSL mode for connection. Type: integer. 0:
        /// disable, 1:allow, 2: prefer, 3: require, 4: verify-ca, 5:
        /// verify-full. Type: integer.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="version">Version of the linked service.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="port">The port for the connection. Type:
        /// integer.</param>
        /// <param name="schema">Sets the schema search path. Type:
        /// string.</param>
        /// <param name="pooling">Whether connection pooling should be used.
        /// Type: boolean.</param>
        /// <param name="connectionTimeout">The time to wait (in seconds) while
        /// trying to establish a connection before terminating the attempt and
        /// generating an error. Type: integer.</param>
        /// <param name="commandTimeout">The time to wait (in seconds) while
        /// trying to execute a command before terminating the attempt and
        /// generating an error. Set to zero for infinity. Type:
        /// integer.</param>
        /// <param name="trustServerCertificate">Whether to trust the server
        /// certificate without validating it. Type: boolean.</param>
        /// <param name="sslCertificate">Location of a client certificate to be
        /// sent to the server. Type: string.</param>
        /// <param name="sslKey">Location of a client key for a client
        /// certificate to be sent to the server. Type: string.</param>
        /// <param name="sslPassword">Password for a key for a client
        /// certificate. Type: string.</param>
        /// <param name="readBufferSize">Determines the size of the internal
        /// buffer uses when reading. Increasing may improve performance if
        /// transferring large values from the database. Type: integer.</param>
        /// <param name="logParameters">When enabled, parameter values are
        /// logged when commands are executed. Type: boolean.</param>
        /// <param name="timezone">Gets or sets the session timezone. Type:
        /// string.</param>
        /// <param name="encoding">Gets or sets the .NET encoding that will be
        /// used to encode/decode PostgreSQL string data. Type: string</param>
        /// <param name="password">The Azure key vault secret reference of
        /// password in connection string. Type: string.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        public PostgreSqlV2LinkedService(object server, object username, object database, object authenticationType, object sslMode, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object port = default(object), object schema = default(object), object pooling = default(object), object connectionTimeout = default(object), object commandTimeout = default(object), object trustServerCertificate = default(object), object sslCertificate = default(object), object sslKey = default(object), object sslPassword = default(object), object readBufferSize = default(object), object logParameters = default(object), object timezone = default(object), object encoding = default(object), AzureKeyVaultSecretReference password = default(AzureKeyVaultSecretReference), string encryptedCredential = default(string))
            : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            Server = server;
            Port = port;
            Username = username;
            Database = database;
            AuthenticationType = authenticationType;
            SslMode = sslMode;
            Schema = schema;
            Pooling = pooling;
            ConnectionTimeout = connectionTimeout;
            CommandTimeout = commandTimeout;
            TrustServerCertificate = trustServerCertificate;
            SslCertificate = sslCertificate;
            SslKey = sslKey;
            SslPassword = sslPassword;
            ReadBufferSize = readBufferSize;
            LogParameters = logParameters;
            Timezone = timezone;
            Encoding = encoding;
            Password = password;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets server name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.server")]
        public object Server { get; set; }

        /// <summary>
        /// Gets or sets the port for the connection. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.port")]
        public object Port { get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.username")]
        public object Username { get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.database")]
        public object Database { get; set; }

        /// <summary>
        /// Gets or sets the authentication type to use. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public object AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets SSL mode for connection. Type: integer. 0: disable,
        /// 1:allow, 2: prefer, 3: require, 4: verify-ca, 5: verify-full. Type:
        /// integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslMode")]
        public object SslMode { get; set; }

        /// <summary>
        /// Gets or sets sets the schema search path. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.schema")]
        public object Schema { get; set; }

        /// <summary>
        /// Gets or sets whether connection pooling should be used. Type:
        /// boolean.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.pooling")]
        public object Pooling { get; set; }

        /// <summary>
        /// Gets or sets the time to wait (in seconds) while trying to
        /// establish a connection before terminating the attempt and
        /// generating an error. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionTimeout")]
        public object ConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or sets the time to wait (in seconds) while trying to execute
        /// a command before terminating the attempt and generating an error.
        /// Set to zero for infinity. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.commandTimeout")]
        public object CommandTimeout { get; set; }

        /// <summary>
        /// Gets or sets whether to trust the server certificate without
        /// validating it. Type: boolean.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.trustServerCertificate")]
        public object TrustServerCertificate { get; set; }

        /// <summary>
        /// Gets or sets location of a client certificate to be sent to the
        /// server. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslCertificate")]
        public object SslCertificate { get; set; }

        /// <summary>
        /// Gets or sets location of a client key for a client certificate to
        /// be sent to the server. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslKey")]
        public object SslKey { get; set; }

        /// <summary>
        /// Gets or sets password for a key for a client certificate. Type:
        /// string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslPassword")]
        public object SslPassword { get; set; }

        /// <summary>
        /// Gets or sets determines the size of the internal buffer uses when
        /// reading. Increasing may improve performance if transferring large
        /// values from the database. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.readBufferSize")]
        public object ReadBufferSize { get; set; }

        /// <summary>
        /// Gets or sets when enabled, parameter values are logged when
        /// commands are executed. Type: boolean.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.logParameters")]
        public object LogParameters { get; set; }

        /// <summary>
        /// Gets or sets the session timezone. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.timezone")]
        public object Timezone { get; set; }

        /// <summary>
        /// Gets or sets the .NET encoding that will be used to encode/decode
        /// PostgreSQL string data. Type: string
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encoding")]
        public object Encoding { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in
        /// connection string. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public AzureKeyVaultSecretReference Password { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Server == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Server");
            }
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (Database == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Database");
            }
            if (AuthenticationType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthenticationType");
            }
            if (SslMode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SslMode");
            }
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
