// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// MariaDB server linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MariaDB")]
    [Rest.Serialization.JsonTransformation]
    public partial class MariaDBLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the MariaDBLinkedService class.
        /// </summary>
        public MariaDBLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MariaDBLinkedService class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="version">Version of the linked service.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="driverVersion">The version of the MariaDB driver.
        /// Type: string. V1 or empty for legacy driver, V2 for new driver. V1
        /// can support connection string and property bag, V2 can only support
        /// connection string. The legacy driver is scheduled for deprecation
        /// by October 2024.</param>
        /// <param name="connectionString">An ODBC connection string. Type:
        /// string, SecureString or AzureKeyVaultSecretReference.</param>
        /// <param name="server">Server name for connection. Type:
        /// string.</param>
        /// <param name="port">The port for the connection. Type:
        /// integer.</param>
        /// <param name="username">Username for authentication. Type:
        /// string.</param>
        /// <param name="database">Database name for connection. Type:
        /// string.</param>
        /// <param name="sslMode">This option specifies whether the driver uses
        /// TLS encryption and verification when connecting to MariaDB. E.g.,
        /// SSLMode=&lt;0/1/2/3/4&gt;. Options: DISABLED (0) / PREFERRED (1)
        /// (Default) / REQUIRED (2) / VERIFY_CA (3) / VERIFY_IDENTITY (4),
        /// REQUIRED (2) is recommended to only allow connections encrypted
        /// with SSL/TLS.</param>
        /// <param name="useSystemTrustStore">This option specifies whether to
        /// use a CA certificate from the system trust store, or from a
        /// specified PEM file. E.g. UseSystemTrustStore=&lt;0/1&gt;; Options:
        /// Enabled (1) / Disabled (0) (Default)</param>
        /// <param name="password">The Azure key vault secret reference of
        /// password in connection string.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        public MariaDBLinkedService(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object driverVersion = default(object), object connectionString = default(object), object server = default(object), object port = default(object), object username = default(object), object database = default(object), object sslMode = default(object), object useSystemTrustStore = default(object), AzureKeyVaultSecretReference password = default(AzureKeyVaultSecretReference), string encryptedCredential = default(string))
            : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            DriverVersion = driverVersion;
            ConnectionString = connectionString;
            Server = server;
            Port = port;
            Username = username;
            Database = database;
            SslMode = sslMode;
            UseSystemTrustStore = useSystemTrustStore;
            Password = password;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the version of the MariaDB driver. Type: string. V1 or
        /// empty for legacy driver, V2 for new driver. V1 can support
        /// connection string and property bag, V2 can only support connection
        /// string. The legacy driver is scheduled for deprecation by October
        /// 2024.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.driverVersion")]
        public object DriverVersion { get; set; }

        /// <summary>
        /// Gets or sets an ODBC connection string. Type: string, SecureString
        /// or AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString { get; set; }

        /// <summary>
        /// Gets or sets server name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.server")]
        public object Server { get; set; }

        /// <summary>
        /// Gets or sets the port for the connection. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.port")]
        public object Port { get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.username")]
        public object Username { get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.database")]
        public object Database { get; set; }

        /// <summary>
        /// Gets or sets this option specifies whether the driver uses TLS
        /// encryption and verification when connecting to MariaDB. E.g.,
        /// SSLMode=&amp;lt;0/1/2/3/4&amp;gt;. Options: DISABLED (0) /
        /// PREFERRED (1) (Default) / REQUIRED (2) / VERIFY_CA (3) /
        /// VERIFY_IDENTITY (4), REQUIRED (2) is recommended to only allow
        /// connections encrypted with SSL/TLS.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslMode")]
        public object SslMode { get; set; }

        /// <summary>
        /// Gets or sets this option specifies whether to use a CA certificate
        /// from the system trust store, or from a specified PEM file. E.g.
        /// UseSystemTrustStore=&amp;lt;0/1&amp;gt;; Options: Enabled (1) /
        /// Disabled (0) (Default)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.useSystemTrustStore")]
        public object UseSystemTrustStore { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in
        /// connection string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public AzureKeyVaultSecretReference Password { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
