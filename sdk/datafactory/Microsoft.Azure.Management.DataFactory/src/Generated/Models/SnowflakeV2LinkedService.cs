// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Snowflake linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SnowflakeV2")]
    [Rest.Serialization.JsonTransformation]
    public partial class SnowflakeV2LinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the SnowflakeV2LinkedService class.
        /// </summary>
        public SnowflakeV2LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SnowflakeV2LinkedService class.
        /// </summary>
        /// <param name="accountIdentifier">The account identifier of your
        /// Snowflake account, e.g. xy12345.east-us-2.azure</param>
        /// <param name="database">The name of the Snowflake database.</param>
        /// <param name="warehouse">The name of the Snowflake
        /// warehouse.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="version">Version of the linked service.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="user">The name of the Snowflake user.</param>
        /// <param name="password">The Azure key vault secret reference of
        /// password in connection string.</param>
        /// <param name="authenticationType">The type used for authentication.
        /// Type: string. Possible values include: 'Basic', 'KeyPair',
        /// 'AADServicePrincipal'</param>
        /// <param name="clientId">The client ID of the application registered
        /// in Azure Active Directory for AADServicePrincipal
        /// authentication.</param>
        /// <param name="clientSecret">The Azure key vault secret reference of
        /// client secret for AADServicePrincipal authentication.</param>
        /// <param name="tenantId">The tenant ID of the application registered
        /// in Azure Active Directory for AADServicePrincipal
        /// authentication.</param>
        /// <param name="scope">The scope of the application registered in
        /// Azure Active Directory for AADServicePrincipal
        /// authentication.</param>
        /// <param name="privateKey">The Azure key vault secret reference of
        /// privateKey for KeyPair auth.</param>
        /// <param name="privateKeyPassphrase">The Azure key vault secret
        /// reference of private key password for KeyPair auth with encrypted
        /// private key.</param>
        /// <param name="host">The host name of the Snowflake account.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        public SnowflakeV2LinkedService(object accountIdentifier, object database, object warehouse, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object user = default(object), SecretBase password = default(SecretBase), string authenticationType = default(string), object clientId = default(object), SecretBase clientSecret = default(SecretBase), object tenantId = default(object), object scope = default(object), SecretBase privateKey = default(SecretBase), SecretBase privateKeyPassphrase = default(SecretBase), object host = default(object), string encryptedCredential = default(string))
            : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            AccountIdentifier = accountIdentifier;
            User = user;
            Password = password;
            Database = database;
            Warehouse = warehouse;
            AuthenticationType = authenticationType;
            ClientId = clientId;
            ClientSecret = clientSecret;
            TenantId = tenantId;
            Scope = scope;
            PrivateKey = privateKey;
            PrivateKeyPassphrase = privateKeyPassphrase;
            Host = host;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the account identifier of your Snowflake account, e.g.
        /// xy12345.east-us-2.azure
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accountIdentifier")]
        public object AccountIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake user.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.user")]
        public object User { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in
        /// connection string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password { get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake database.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.database")]
        public object Database { get; set; }

        /// <summary>
        /// Gets or sets the name of the Snowflake warehouse.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.warehouse")]
        public object Warehouse { get; set; }

        /// <summary>
        /// Gets or sets the type used for authentication. Type: string.
        /// Possible values include: 'Basic', 'KeyPair', 'AADServicePrincipal'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application registered in Azure
        /// Active Directory for AADServicePrincipal authentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientId")]
        public object ClientId { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of client secret
        /// for AADServicePrincipal authentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientSecret")]
        public SecretBase ClientSecret { get; set; }

        /// <summary>
        /// Gets or sets the tenant ID of the application registered in Azure
        /// Active Directory for AADServicePrincipal authentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenantId")]
        public object TenantId { get; set; }

        /// <summary>
        /// Gets or sets the scope of the application registered in Azure
        /// Active Directory for AADServicePrincipal authentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.scope")]
        public object Scope { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of privateKey for
        /// KeyPair auth.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.privateKey")]
        public SecretBase PrivateKey { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of private key
        /// password for KeyPair auth with encrypted private key.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.privateKeyPassphrase")]
        public SecretBase PrivateKeyPassphrase { get; set; }

        /// <summary>
        /// Gets or sets the host name of the Snowflake account.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.host")]
        public object Host { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (AccountIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountIdentifier");
            }
            if (Database == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Database");
            }
            if (Warehouse == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Warehouse");
            }
        }
    }
}
