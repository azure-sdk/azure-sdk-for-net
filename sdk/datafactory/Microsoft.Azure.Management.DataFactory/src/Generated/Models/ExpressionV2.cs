// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Nested representation of a complex expression.
    /// </summary>
    public partial class ExpressionV2
    {
        /// <summary>
        /// Initializes a new instance of the ExpressionV2 class.
        /// </summary>
        public ExpressionV2()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressionV2 class.
        /// </summary>
        /// <param name="type">Type of expressions supported by the system.
        /// Type: string. Possible values include: 'Constant', 'Field',
        /// 'Unary', 'Binary', 'NAry'</param>
        /// <param name="value">Value for Constant/Field Type: string.</param>
        /// <param name="operators">Expression operator value Type: list of
        /// strings.</param>
        /// <param name="operands">List of nested expressions.</param>
        public ExpressionV2(string type = default(string), string value = default(string), IList<string> operators = default(IList<string>), IList<ExpressionV2> operands = default(IList<ExpressionV2>))
        {
            Type = type;
            Value = value;
            Operators = operators;
            Operands = operands;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of expressions supported by the system. Type:
        /// string. Possible values include: 'Constant', 'Field', 'Unary',
        /// 'Binary', 'NAry'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets value for Constant/Field Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets expression operator value Type: list of strings.
        /// </summary>
        [JsonProperty(PropertyName = "operators")]
        public IList<string> Operators { get; set; }

        /// <summary>
        /// Gets or sets list of nested expressions.
        /// </summary>
        [JsonProperty(PropertyName = "operands")]
        public IList<ExpressionV2> Operands { get; set; }

    }
}
