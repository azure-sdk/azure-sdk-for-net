// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Google BigQuery service linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("GoogleBigQueryV2")]
    [Rest.Serialization.JsonTransformation]
    public partial class GoogleBigQueryV2LinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryV2LinkedService
        /// class.
        /// </summary>
        public GoogleBigQueryV2LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GoogleBigQueryV2LinkedService
        /// class.
        /// </summary>
        /// <param name="projectId">The default BigQuery project id to query
        /// against. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="authenticationType">The OAuth 2.0 authentication
        /// mechanism used for authentication. Possible values include:
        /// 'ServiceAuthentication', 'UserAuthentication'</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="version">Version of the linked service.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="clientId">The client id of the google application used
        /// to acquire the refresh token. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="clientSecret">The client secret of the google
        /// application used to acquire the refresh token.</param>
        /// <param name="refreshToken">The refresh token obtained from Google
        /// for authorizing access to BigQuery for UserAuthentication.</param>
        /// <param name="keyFileContent">The content of the .json key file that
        /// is used to authenticate the service account. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        public GoogleBigQueryV2LinkedService(object projectId, string authenticationType, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object clientId = default(object), SecretBase clientSecret = default(SecretBase), SecretBase refreshToken = default(SecretBase), SecretBase keyFileContent = default(SecretBase), string encryptedCredential = default(string))
            : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            ProjectId = projectId;
            AuthenticationType = authenticationType;
            ClientId = clientId;
            ClientSecret = clientSecret;
            RefreshToken = refreshToken;
            KeyFileContent = keyFileContent;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the default BigQuery project id to query against.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.projectId")]
        public object ProjectId { get; set; }

        /// <summary>
        /// Gets or sets the OAuth 2.0 authentication mechanism used for
        /// authentication. Possible values include: 'ServiceAuthentication',
        /// 'UserAuthentication'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets the client id of the google application used to
        /// acquire the refresh token. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientId")]
        public object ClientId { get; set; }

        /// <summary>
        /// Gets or sets the client secret of the google application used to
        /// acquire the refresh token.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientSecret")]
        public SecretBase ClientSecret { get; set; }

        /// <summary>
        /// Gets or sets the refresh token obtained from Google for authorizing
        /// access to BigQuery for UserAuthentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.refreshToken")]
        public SecretBase RefreshToken { get; set; }

        /// <summary>
        /// Gets or sets the content of the .json key file that is used to
        /// authenticate the service account. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.keyFileContent")]
        public SecretBase KeyFileContent { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ProjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectId");
            }
            if (AuthenticationType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthenticationType");
            }
        }
    }
}
