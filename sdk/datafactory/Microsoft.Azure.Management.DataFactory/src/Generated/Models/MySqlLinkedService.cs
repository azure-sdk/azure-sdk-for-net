// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Linked service for MySQL data source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MySql")]
    [Rest.Serialization.JsonTransformation]
    public partial class MySqlLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the MySqlLinkedService class.
        /// </summary>
        public MySqlLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MySqlLinkedService class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="version">Version of the linked service.</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="driverVersion">The version of the MySQL driver. Type:
        /// string. V1 or empty for legacy driver, V2 for new driver. V1 can
        /// support connection string and property bag, V2 can only support
        /// connection string.</param>
        /// <param name="connectionString">The connection string. Type: string,
        /// SecureString or AzureKeyVaultSecretReference.</param>
        /// <param name="server">Server name for connection. Type:
        /// string.</param>
        /// <param name="port">The port for the connection. Type:
        /// integer.</param>
        /// <param name="username">Username for authentication. Type:
        /// string.</param>
        /// <param name="database">Database name for connection. Type:
        /// string.</param>
        /// <param name="sslMode">SSL mode for connection. Type: integer. 0:
        /// disable, 1: prefer, 2: require, 3: verify-ca, 4:
        /// verify-full.</param>
        /// <param name="useSystemTrustStore">Use system trust store for
        /// connection. Type: integer. 0: enable, 1: disable.</param>
        /// <param name="password">The Azure key vault secret reference of
        /// password in connection string.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string.</param>
        /// <param name="allowZeroDateTime">This allows the special “zero” date
        /// value 0000-00-00 to be retrieved from the database. Type:
        /// boolean.</param>
        /// <param name="connectionTimeout">The length of time (in seconds) to
        /// wait for a connection to the server before terminating the attempt
        /// and generating an error. Type: integer.</param>
        /// <param name="convertZeroDateTime">True to return DateTime.MinValue
        /// for date or datetime columns that have disallowed values. Type:
        /// boolean.</param>
        /// <param name="guidFormat">Determines which column type (if any)
        /// should be read as a GUID. Type: string. None: No column types are
        /// automatically read as a Guid; Char36: All CHAR(36) columns are
        /// read/written as a Guid using lowercase hex with hyphens, which
        /// matches UUID.</param>
        /// <param name="sslCert">The path to the client’s SSL certificate file
        /// in PEM format. SslKey must also be specified. Type: string.</param>
        /// <param name="sslKey">The path to the client’s SSL private key in
        /// PEM format. SslCert must also be specified. Type: string.</param>
        /// <param name="treatTinyAsBoolean">When set to true, TINYINT(1)
        /// values are returned as booleans. Type: bool.</param>
        public MySqlLinkedService(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string version = default(string), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object driverVersion = default(object), object connectionString = default(object), object server = default(object), object port = default(object), object username = default(object), object database = default(object), object sslMode = default(object), object useSystemTrustStore = default(object), AzureKeyVaultSecretReference password = default(AzureKeyVaultSecretReference), string encryptedCredential = default(string), object allowZeroDateTime = default(object), object connectionTimeout = default(object), object convertZeroDateTime = default(object), object guidFormat = default(object), object sslCert = default(object), object sslKey = default(object), object treatTinyAsBoolean = default(object))
            : base(additionalProperties, version, connectVia, description, parameters, annotations)
        {
            DriverVersion = driverVersion;
            ConnectionString = connectionString;
            Server = server;
            Port = port;
            Username = username;
            Database = database;
            SslMode = sslMode;
            UseSystemTrustStore = useSystemTrustStore;
            Password = password;
            EncryptedCredential = encryptedCredential;
            AllowZeroDateTime = allowZeroDateTime;
            ConnectionTimeout = connectionTimeout;
            ConvertZeroDateTime = convertZeroDateTime;
            GuidFormat = guidFormat;
            SslCert = sslCert;
            SslKey = sslKey;
            TreatTinyAsBoolean = treatTinyAsBoolean;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the version of the MySQL driver. Type: string. V1 or
        /// empty for legacy driver, V2 for new driver. V1 can support
        /// connection string and property bag, V2 can only support connection
        /// string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.driverVersion")]
        public object DriverVersion { get; set; }

        /// <summary>
        /// Gets or sets the connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString { get; set; }

        /// <summary>
        /// Gets or sets server name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.server")]
        public object Server { get; set; }

        /// <summary>
        /// Gets or sets the port for the connection. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.port")]
        public object Port { get; set; }

        /// <summary>
        /// Gets or sets username for authentication. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.username")]
        public object Username { get; set; }

        /// <summary>
        /// Gets or sets database name for connection. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.database")]
        public object Database { get; set; }

        /// <summary>
        /// Gets or sets SSL mode for connection. Type: integer. 0: disable, 1:
        /// prefer, 2: require, 3: verify-ca, 4: verify-full.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslMode")]
        public object SslMode { get; set; }

        /// <summary>
        /// Gets or sets use system trust store for connection. Type: integer.
        /// 0: enable, 1: disable.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.useSystemTrustStore")]
        public object UseSystemTrustStore { get; set; }

        /// <summary>
        /// Gets or sets the Azure key vault secret reference of password in
        /// connection string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public AzureKeyVaultSecretReference Password { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public string EncryptedCredential { get; set; }

        /// <summary>
        /// Gets or sets this allows the special “zero” date value 0000-00-00
        /// to be retrieved from the database. Type: boolean.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.allowZeroDateTime")]
        public object AllowZeroDateTime { get; set; }

        /// <summary>
        /// Gets or sets the length of time (in seconds) to wait for a
        /// connection to the server before terminating the attempt and
        /// generating an error. Type: integer.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionTimeout")]
        public object ConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or sets true to return DateTime.MinValue for date or datetime
        /// columns that have disallowed values. Type: boolean.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.convertZeroDateTime")]
        public object ConvertZeroDateTime { get; set; }

        /// <summary>
        /// Gets or sets determines which column type (if any) should be read
        /// as a GUID. Type: string. None: No column types are automatically
        /// read as a Guid; Char36: All CHAR(36) columns are read/written as a
        /// Guid using lowercase hex with hyphens, which matches UUID.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.guidFormat")]
        public object GuidFormat { get; set; }

        /// <summary>
        /// Gets or sets the path to the client’s SSL certificate file in PEM
        /// format. SslKey must also be specified. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslCert")]
        public object SslCert { get; set; }

        /// <summary>
        /// Gets or sets the path to the client’s SSL private key in PEM
        /// format. SslCert must also be specified. Type: string.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sslKey")]
        public object SslKey { get; set; }

        /// <summary>
        /// Gets or sets when set to true, TINYINT(1) values are returned as
        /// booleans. Type: bool.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.treatTinyAsBoolean")]
        public object TreatTinyAsBoolean { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
