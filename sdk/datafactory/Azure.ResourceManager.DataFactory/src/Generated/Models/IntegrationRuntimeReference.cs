// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Integration runtime reference type. </summary>
    public partial class IntegrationRuntimeReference : Reference
    {
        /// <summary> Initializes a new instance of IntegrationRuntimeReference. </summary>
        /// <param name="referenceName"> Reference integration runtime name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="referenceName"/> is null. </exception>
        public IntegrationRuntimeReference(string referenceName)
        {
            Argument.AssertNotNull(referenceName, nameof(referenceName));

            ReferenceName = referenceName;
            Parameters = new ChangeTrackingDictionary<string, BinaryData>();
            ReferenceType = "IntegrationRuntimeReference";
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeReference. </summary>
        /// <param name="referenceType"> Type of reference. </param>
        /// <param name="referenceName"> Reference integration runtime name. </param>
        /// <param name="parameters"> Arguments for integration runtime. </param>
        internal IntegrationRuntimeReference(string referenceType, string referenceName, IDictionary<string, BinaryData> parameters) : base(referenceType)
        {
            ReferenceName = referenceName;
            Parameters = parameters;
            ReferenceType = referenceType ?? "IntegrationRuntimeReference";
        }

        /// <summary> Reference integration runtime name. </summary>
        public string ReferenceName { get; set; }
        /// <summary>
        /// Arguments for integration runtime.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Parameters { get; }
    }
}
