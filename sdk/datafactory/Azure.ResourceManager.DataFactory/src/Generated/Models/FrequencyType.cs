// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Frequency of period in terms of 'Hour', 'Minute' or 'Second'. </summary>
    public readonly partial struct FrequencyType : IEquatable<FrequencyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FrequencyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FrequencyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HourValue = "Hour";
        private const string MinuteValue = "Minute";
        private const string SecondValue = "Second";

        /// <summary> Hour. </summary>
        public static FrequencyType Hour { get; } = new FrequencyType(HourValue);
        /// <summary> Minute. </summary>
        public static FrequencyType Minute { get; } = new FrequencyType(MinuteValue);
        /// <summary> Second. </summary>
        public static FrequencyType Second { get; } = new FrequencyType(SecondValue);
        /// <summary> Determines if two <see cref="FrequencyType"/> values are the same. </summary>
        public static bool operator ==(FrequencyType left, FrequencyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FrequencyType"/> values are not the same. </summary>
        public static bool operator !=(FrequencyType left, FrequencyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FrequencyType"/>. </summary>
        public static implicit operator FrequencyType(string value) => new FrequencyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FrequencyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FrequencyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
