// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class ExpressionV2 : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(V2Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(V2Type.Value.ToString());
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Operator))
            {
                writer.WritePropertyName("operator"u8);
                writer.WriteStringValue(Operator);
            }
            if (Optional.IsCollectionDefined(Operands))
            {
                writer.WritePropertyName("operands"u8);
                writer.WriteStartArray();
                foreach (var item in Operands)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ExpressionV2 DeserializeExpressionV2(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ExpressionV2Type> type = default;
            Optional<string> value = default;
            Optional<string> @operator = default;
            Optional<IList<ExpressionV2>> operands = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new ExpressionV2Type(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operator"u8))
                {
                    @operator = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operands"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ExpressionV2> array = new List<ExpressionV2>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeExpressionV2(item));
                    }
                    operands = array;
                    continue;
                }
            }
            return new ExpressionV2(Optional.ToNullable(type), value.Value, @operator.Value, Optional.ToList(operands));
        }
    }
}
