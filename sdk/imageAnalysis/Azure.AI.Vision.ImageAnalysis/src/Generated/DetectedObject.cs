// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Describes a detected object in an image. </summary>
    public partial class DetectedObject
    {
        /// <summary> Initializes a new instance of DetectedObject. </summary>
        /// <param name="boundingBox"> Gets a rectangular boundary within which the object was detected. </param>
        /// <param name="id"> Id of the detected objet. </param>
        /// <param name="tags"> Classification confidences of the detected object. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="boundingBox"/>, <paramref name="id"/> or <paramref name="tags"/> is null. </exception>
        internal DetectedObject(BoundingBox boundingBox, string id, IEnumerable<Tag> tags)
        {
            Argument.AssertNotNull(boundingBox, nameof(boundingBox));
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(tags, nameof(tags));

            BoundingBox = boundingBox;
            Id = id;
            Tags = tags.ToList();
        }

        /// <summary> Initializes a new instance of DetectedObject. </summary>
        /// <param name="boundingBox"> Gets a rectangular boundary within which the object was detected. </param>
        /// <param name="id"> Id of the detected objet. </param>
        /// <param name="tags"> Classification confidences of the detected object. </param>
        internal DetectedObject(BoundingBox boundingBox, string id, IReadOnlyList<Tag> tags)
        {
            BoundingBox = boundingBox;
            Id = id;
            Tags = tags;
        }

        /// <summary> Gets a rectangular boundary within which the object was detected. </summary>
        public BoundingBox BoundingBox { get; }
        /// <summary> Id of the detected objet. </summary>
        public string Id { get; }
        /// <summary> Classification confidences of the detected object. </summary>
        public IReadOnlyList<Tag> Tags { get; }
    }
}
