// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Vision.ImageAnalysis
{
    /// <summary> Model factory for models. </summary>
    public static partial class AIVisionImageAnalysisModelFactory
    {
        /// <summary> Initializes a new instance of ImageAnalysisResult. </summary>
        /// <param name="adultResult"> An AdultResult for the immage. </param>
        /// <param name="captionResult"> A CaptionResult for the image. </param>
        /// <param name="customModelResult"> A list of categories for the image. </param>
        /// <param name="denseCaptionsResult"> A denseCaptionsResult for the image. </param>
        /// <param name="metadata"> The model used for the analysis. </param>
        /// <param name="modelVersion"> The model used for the analysis. </param>
        /// <param name="objectsResult"> A list of objects for the image. </param>
        /// <param name="peopleResult"> A list of people for the image. </param>
        /// <param name="readResult"> A readResult for the image. </param>
        /// <param name="smartCropsResult"> A list of regions for the image. </param>
        /// <param name="tagsResult"> A list of tags for the image. </param>
        /// <returns> A new <see cref="ImageAnalysis.ImageAnalysisResult"/> instance for mocking. </returns>
        public static ImageAnalysisResult ImageAnalysisResult(AdultResult adultResult = null, CaptionResult captionResult = null, ImagePredictionResult customModelResult = null, DenseCaptionsResult denseCaptionsResult = null, ImageMetadataApiModel metadata = null, string modelVersion = null, ObjectsResult objectsResult = null, PeopleResult peopleResult = null, ReadResult readResult = null, SmartCropsResult smartCropsResult = null, TagsResult tagsResult = null)
        {
            return new ImageAnalysisResult(adultResult, captionResult, customModelResult, denseCaptionsResult, metadata, modelVersion, objectsResult, peopleResult, readResult, smartCropsResult, tagsResult);
        }

        /// <summary> Initializes a new instance of AdultResult. </summary>
        /// <param name="adult"> Gets a value indicating if the image is adult-oriented content. </param>
        /// <param name="gore"> Gets a value indicating if the image is gorey content. </param>
        /// <param name="racy"> Gets a value indicating if the image is racy content. </param>
        /// <returns> A new <see cref="ImageAnalysis.AdultResult"/> instance for mocking. </returns>
        public static AdultResult AdultResult(AdultMatch adult = null, AdultMatch gore = null, AdultMatch racy = null)
        {
            return new AdultResult(adult, gore, racy);
        }

        /// <summary> Initializes a new instance of AdultMatch. </summary>
        /// <param name="confidence"> Gets the confidence score of whether the image contains adult content. </param>
        /// <param name="isMatch"> A value indicating if the image is matched adult content. </param>
        /// <returns> A new <see cref="ImageAnalysis.AdultMatch"/> instance for mocking. </returns>
        public static AdultMatch AdultMatch(double confidence = default, bool isMatch = default)
        {
            return new AdultMatch(confidence, isMatch);
        }

        /// <summary> Initializes a new instance of CaptionResult. </summary>
        /// <param name="confidence"> The level of confidence the service has in the caption. </param>
        /// <param name="text"> The text of the caption. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.CaptionResult"/> instance for mocking. </returns>
        public static CaptionResult CaptionResult(double confidence = default, string text = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CaptionResult(confidence, text);
        }

        /// <summary> Initializes a new instance of ImagePredictionResult. </summary>
        /// <param name="objectsResult"> The list of predicted objects. </param>
        /// <param name="tagsResult"> The list of predicted tags. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="objectsResult"/> or <paramref name="tagsResult"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.ImagePredictionResult"/> instance for mocking. </returns>
        public static ImagePredictionResult ImagePredictionResult(ObjectsResult objectsResult = null, TagsResult tagsResult = null)
        {
            if (objectsResult == null)
            {
                throw new ArgumentNullException(nameof(objectsResult));
            }
            if (tagsResult == null)
            {
                throw new ArgumentNullException(nameof(tagsResult));
            }

            return new ImagePredictionResult(objectsResult, tagsResult);
        }

        /// <summary> Initializes a new instance of ObjectsResult. </summary>
        /// <param name="values"> An array of detected objects. </param>
        /// <returns> A new <see cref="ImageAnalysis.ObjectsResult"/> instance for mocking. </returns>
        public static ObjectsResult ObjectsResult(IEnumerable<DetectedObject> values = null)
        {
            values ??= new List<DetectedObject>();

            return new ObjectsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of DetectedObject. </summary>
        /// <param name="boundingBox"> Gets a rectangular boundary within which the object was detected. </param>
        /// <param name="id"> Id of the detected objet. </param>
        /// <param name="tags"> Classification confidences of the detected object. </param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedObject"/> instance for mocking. </returns>
        public static DetectedObject DetectedObject(BoundingBox boundingBox = null, string id = null, IEnumerable<Tag> tags = null)
        {
            tags ??= new List<Tag>();

            return new DetectedObject(boundingBox, id, tags?.ToList());
        }

        /// <summary> Initializes a new instance of BoundingBox. </summary>
        /// <param name="x"> X coordinate. </param>
        /// <param name="y"> Y coordinate. </param>
        /// <param name="w"> Width of the box. </param>
        /// <param name="h"> Height of the box. </param>
        /// <returns> A new <see cref="ImageAnalysis.BoundingBox"/> instance for mocking. </returns>
        public static BoundingBox BoundingBox(long x = default, long y = default, long w = default, long h = default)
        {
            return new BoundingBox(x, y, w, h);
        }

        /// <summary> Initializes a new instance of Tag. </summary>
        /// <param name="confidence"> The level of confidence that the entity was observed. </param>
        /// <param name="name"> Name of the entity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.Tag"/> instance for mocking. </returns>
        public static Tag Tag(double confidence = default, string name = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new Tag(confidence, name);
        }

        /// <summary> Initializes a new instance of TagsResult. </summary>
        /// <param name="values"> A list of tags with confidence level. </param>
        /// <returns> A new <see cref="ImageAnalysis.TagsResult"/> instance for mocking. </returns>
        public static TagsResult TagsResult(IEnumerable<Tag> values = null)
        {
            values ??= new List<Tag>();

            return new TagsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of DenseCaptionsResult. </summary>
        /// <param name="values"> The list of captions. </param>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaptionsResult"/> instance for mocking. </returns>
        public static DenseCaptionsResult DenseCaptionsResult(IEnumerable<DenseCaption> values = null)
        {
            values ??= new List<DenseCaption>();

            return new DenseCaptionsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of DenseCaption. </summary>
        /// <param name="confidence"> The level of confidence the service has in the caption. </param>
        /// <param name="text"> The text of the caption. </param>
        /// <param name="boundingBox"> The bounding box of the caption. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="boundingBox"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.DenseCaption"/> instance for mocking. </returns>
        public static DenseCaption DenseCaption(double confidence = default, string text = null, BoundingBox boundingBox = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }
            if (boundingBox == null)
            {
                throw new ArgumentNullException(nameof(boundingBox));
            }

            return new DenseCaption(confidence, text, boundingBox);
        }

        /// <summary> Initializes a new instance of ImageMetadataApiModel. </summary>
        /// <param name="height"> The height of the image in pixels. </param>
        /// <param name="width"> The width of the image in pixels. </param>
        /// <returns> A new <see cref="ImageAnalysis.ImageMetadataApiModel"/> instance for mocking. </returns>
        public static ImageMetadataApiModel ImageMetadataApiModel(long height = default, long width = default)
        {
            return new ImageMetadataApiModel(height, width);
        }

        /// <summary> Initializes a new instance of PeopleResult. </summary>
        /// <param name="values"> An array of detected people. </param>
        /// <returns> A new <see cref="ImageAnalysis.PeopleResult"/> instance for mocking. </returns>
        public static PeopleResult PeopleResult(IEnumerable<DetectedPerson> values = null)
        {
            values ??= new List<DetectedPerson>();

            return new PeopleResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of DetectedPerson. </summary>
        /// <param name="boundingBox"> Gets a rectangular boundary within which the person was detected. </param>
        /// <param name="confidence"> Gets the confidence value of the detected person. </param>
        /// <returns> A new <see cref="ImageAnalysis.DetectedPerson"/> instance for mocking. </returns>
        public static DetectedPerson DetectedPerson(BoundingBox boundingBox = null, double confidence = default)
        {
            return new DetectedPerson(boundingBox, confidence);
        }

        /// <summary> Initializes a new instance of ReadResult. </summary>
        /// <param name="content"> Concatenate string representation of all textual and visual elements in reading order. </param>
        /// <param name="pages"> A list of analyzed pages. </param>
        /// <param name="stringIndexType"> The method used to compute string offset and length, possible values include: 'textElements', 'unicodeCodePoint', 'utf16CodeUnit' etc. </param>
        /// <param name="styles"> Extracted font styles. </param>
        /// <returns> A new <see cref="ImageAnalysis.ReadResult"/> instance for mocking. </returns>
        public static ReadResult ReadResult(string content = null, IEnumerable<DocumentPage> pages = null, string stringIndexType = null, IEnumerable<DocumentStyle> styles = null)
        {
            pages ??= new List<DocumentPage>();
            styles ??= new List<DocumentStyle>();

            return new ReadResult(content, pages?.ToList(), stringIndexType, styles?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentPage"/> instance for mocking. </returns>
        public static DocumentPage DocumentPage(double angle = default, double height = default, IEnumerable<DocumentLine> lines = null, long pageNumber = default, IEnumerable<DocumentSpan> spans = null, double width = default, IEnumerable<DocumentWord> words = null)
        {
            lines ??= new List<DocumentLine>();
            spans ??= new List<DocumentSpan>();
            words ??= new List<DocumentWord>();

            return new DocumentPage(angle, height, lines?.ToList(), pageNumber, spans?.ToList(), width, words?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentLine. </summary>
        /// <param name="boundingBox"> The bounding box of the line. </param>
        /// <param name="content"> Concatenated content of the contained elements in reading order. </param>
        /// <param name="spans"> Location of the line in the reading order concatenated content. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentLine"/> instance for mocking. </returns>
        public static DocumentLine DocumentLine(IEnumerable<double> boundingBox = null, string content = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingBox ??= new List<double>();
            spans ??= new List<DocumentSpan>();

            return new DocumentLine(boundingBox?.ToList(), content, spans?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentSpan. </summary>
        /// <param name="length"> Number of characters in the content represented by the span. </param>
        /// <param name="offset"> Zero-based index of the content represented by the span. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentSpan"/> instance for mocking. </returns>
        public static DocumentSpan DocumentSpan(long length = default, long offset = default)
        {
            return new DocumentSpan(length, offset);
        }

        /// <summary> Initializes a new instance of DocumentWord. </summary>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentWord"/> instance for mocking. </returns>
        public static DocumentWord DocumentWord(IEnumerable<double> boundingBox = null, double confidence = default, string content = null, DocumentSpan span = null)
        {
            boundingBox ??= new List<double>();

            return new DocumentWord(boundingBox?.ToList(), confidence, content, span);
        }

        /// <summary> Initializes a new instance of DocumentStyle. </summary>
        /// <param name="confidence"> Confidence of correctly identifying the style. </param>
        /// <param name="isHandwritten"> Is content handwritten or not. </param>
        /// <param name="spans"> Location of the text elements in the concatenated content the style applies to. </param>
        /// <returns> A new <see cref="ImageAnalysis.DocumentStyle"/> instance for mocking. </returns>
        public static DocumentStyle DocumentStyle(double confidence = default, bool isHandwritten = default, IEnumerable<DocumentSpan> spans = null)
        {
            spans ??= new List<DocumentSpan>();

            return new DocumentStyle(confidence, isHandwritten, spans?.ToList());
        }

        /// <summary> Initializes a new instance of SmartCropsResult. </summary>
        /// <param name="values"> Recommended regions for cropping the image. </param>
        /// <returns> A new <see cref="ImageAnalysis.SmartCropsResult"/> instance for mocking. </returns>
        public static SmartCropsResult SmartCropsResult(IEnumerable<CropRegion> values = null)
        {
            values ??= new List<CropRegion>();

            return new SmartCropsResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of CropRegion. </summary>
        /// <param name="aspectRatio"> The aspect ratio of the crop region. </param>
        /// <param name="boundingBox"> The bounding box of the crop region. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="boundingBox"/> is null. </exception>
        /// <returns> A new <see cref="ImageAnalysis.CropRegion"/> instance for mocking. </returns>
        public static CropRegion CropRegion(double aspectRatio = default, BoundingBox boundingBox = null)
        {
            if (boundingBox == null)
            {
                throw new ArgumentNullException(nameof(boundingBox));
            }

            return new CropRegion(aspectRatio, boundingBox);
        }
    }
}
