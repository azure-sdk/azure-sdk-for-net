// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Vision.ImageAnalysis;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.ImageAnalysis.Samples
{
    public class Samples_ImageAnalysisClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeStream()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.AnalyzeStream(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeStream_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.AnalyzeStreamAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeStream_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            Response<ImageAnalysisResult> response = client.AnalyzeStream(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeStream_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            Response<ImageAnalysisResult> response = await client.AnalyzeStreamAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeStream_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.AnalyzeStream(content, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("angle").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("pageNumber").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("aspectRatio").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeStream_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.AnalyzeStreamAsync(content, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("angle").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("pageNumber").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("aspectRatio").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeStream_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            Response<ImageAnalysisResult> response = client.AnalyzeStream(BinaryData.FromObjectAsJson(new object()), visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeStream_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            Response<ImageAnalysisResult> response = await client.AnalyzeStreamAsync(BinaryData.FromObjectAsJson(new object()), visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeUrl()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AnalyzeUrl(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeUrl_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AnalyzeUrlAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeUrl_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            ImageUrl imageContents = new ImageUrl(new Uri("http://localhost:3000"));
            Response<ImageAnalysisResult> response = client.AnalyzeUrl(imageContents);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeUrl_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            ImageUrl imageContents = new ImageUrl(new Uri("http://localhost:3000"));
            Response<ImageAnalysisResult> response = await client.AnalyzeUrlAsync(imageContents);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeUrl_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = client.AnalyzeUrl(content, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("angle").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("pageNumber").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("aspectRatio").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeUrl_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                url = "http://localhost:3000",
            });
            Response response = await client.AnalyzeUrlAsync(content, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("adult").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("gore").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("adultResult").GetProperty("racy").GetProperty("isMatch").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("captionResult").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("customModelResult").GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("denseCaptionsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("objectsResult").GetProperty("values")[0].GetProperty("tags")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("peopleResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("angle").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("height").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("pageNumber").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("width").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("boundingBox")[0].ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("readResult").GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("aspectRatio").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("x").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("y").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("w").ToString());
            Console.WriteLine(result.GetProperty("smartCropsResult").GetProperty("values")[0].GetProperty("boundingBox").GetProperty("h").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result.GetProperty("tagsResult").GetProperty("values")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeUrl_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            ImageUrl imageContents = new ImageUrl(new Uri("http://localhost:3000"));
            Response<ImageAnalysisResult> response = client.AnalyzeUrl(imageContents, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeUrl_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ImageAnalysisClient client = new ImageAnalysisClient(endpoint, credential);

            ImageUrl imageContents = new ImageUrl(new Uri("http://localhost:3000"));
            Response<ImageAnalysisResult> response = await client.AnalyzeUrlAsync(imageContents, visualFeatures: new List<VisualFeatures>()
{
VisualFeatures.Tags
}, modelName: "<modelName>", language: "<language>", smartCropsAspectRatios: "<smartCropsAspectRatios>", genderNeutralCaption: true);
        }
    }
}
