// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Microsoft.Security.Copilot.SkillsetAuthoring;
using Microsoft.Security.Copilot.SkillsetAuthoring.Models;
using NUnit.Framework;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Samples
{
    public partial class Samples_SkillContextClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillContext_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillContext("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillContext_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillContextAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillContext_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<SkillContextResponse> response = client.GetSkillContext("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillContext_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<SkillContextResponse> response = await client.GetSkillContextAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillContext_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillContext("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillContext_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillContextAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillContext_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<SkillContextResponse> response = client.GetSkillContext("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillContext_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<SkillContextResponse> response = await client.GetSkillContextAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_InvokeSkill_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        valueStoredAsJson = true,
                    },
                },
            });
            Response response = client.InvokeSkill("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_InvokeSkill_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        valueStoredAsJson = true,
                    },
                },
            });
            Response response = await client.InvokeSkillAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_InvokeSkill_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
            {
                ["key"] = new SkillVariable(true)
            });
            Response<OutputSkillVariable> response = client.InvokeSkill("<evaluationToken>", invokeSkill);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_InvokeSkill_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
            {
                ["key"] = new SkillVariable(true)
            });
            Response<OutputSkillVariable> response = await client.InvokeSkillAsync("<evaluationToken>", invokeSkill);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_InvokeSkill_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                skillsetName = "<skillsetName>",
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        type = "<type>",
                        value = "<value>",
                        valueStoredAsJson = true,
                    },
                },
            });
            Response response = client.InvokeSkill("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_InvokeSkill_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                skillsetName = "<skillsetName>",
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        type = "<type>",
                        value = "<value>",
                        valueStoredAsJson = true,
                    },
                },
            });
            Response response = await client.InvokeSkillAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_InvokeSkill_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
            {
                ["key"] = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                }
            })
            {
                SkillsetName = "<skillsetName>",
            };
            Response<OutputSkillVariable> response = client.InvokeSkill("<evaluationToken>", invokeSkill);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_InvokeSkill_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
            {
                ["key"] = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                }
            })
            {
                SkillsetName = "<skillsetName>",
            };
            Response<OutputSkillVariable> response = await client.InvokeSkillAsync("<evaluationToken>", invokeSkill);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetPromptHistory_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetPromptHistory("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetPromptHistory_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetPromptHistoryAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetPromptHistory_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<PromptHistoryResponse> response = client.GetPromptHistory("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetPromptHistory_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<PromptHistoryResponse> response = await client.GetPromptHistoryAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetPromptHistory_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetPromptHistory("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetPromptHistory_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetPromptHistoryAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetPromptHistory_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<PromptHistoryResponse> response = client.GetPromptHistory("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetPromptHistory_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<PromptHistoryResponse> response = await client.GetPromptHistoryAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_LogProgress_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = client.LogProgress("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_LogProgress_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.LogProgressAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_LogProgress_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            LogProgressRequest logProgressRequest = new LogProgressRequest("<message>");
            Response response = client.LogProgress("<evaluationToken>", logProgressRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_LogProgress_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            LogProgressRequest logProgressRequest = new LogProgressRequest("<message>");
            Response response = await client.LogProgressAsync("<evaluationToken>", logProgressRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_LogProgress_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = "Error",
                message = "<message>",
            });
            Response response = client.LogProgress("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_LogProgress_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = "Error",
                message = "<message>",
            });
            Response response = await client.LogProgressAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_LogProgress_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            LogProgressRequest logProgressRequest = new LogProgressRequest("<message>")
            {
                Level = ProgressLogLevel.Error,
            };
            Response response = client.LogProgress("<evaluationToken>", logProgressRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_LogProgress_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            LogProgressRequest logProgressRequest = new LogProgressRequest("<message>")
            {
                Level = ProgressLogLevel.Error,
            };
            Response response = await client.LogProgressAsync("<evaluationToken>", logProgressRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillOutput_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
}
            },
                valueStoredAsJson = true,
            });
            Response response = client.SetSkillOutput("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillOutput_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
}
            },
                valueStoredAsJson = true,
            });
            Response response = await client.SetSkillOutputAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillOutput_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
            });
            Response response = client.SetSkillOutput("<evaluationToken>", outputSkillVariable);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillOutput_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
            });
            Response response = await client.SetSkillOutputAsync("<evaluationToken>", outputSkillVariable);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillOutput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
sourceSerializedData = "<sourceSerializedData>",
}
            },
                type = "<type>",
                value = "<value>",
                valueStoredAsJson = true,
            });
            Response response = client.SetSkillOutput("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillOutput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
sourceSerializedData = "<sourceSerializedData>",
}
            },
                type = "<type>",
                value = "<value>",
                valueStoredAsJson = true,
            });
            Response response = await client.SetSkillOutputAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillOutput_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
SourceSerializedData = "<sourceSerializedData>",
}
            })
            {
                Type = "<type>",
                Value = "<value>",
            };
            Response response = client.SetSkillOutput("<evaluationToken>", outputSkillVariable);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillOutput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
SourceSerializedData = "<sourceSerializedData>",
}
            })
            {
                Type = "<type>",
                Value = "<value>",
            };
            Response response = await client.SetSkillOutputAsync("<evaluationToken>", outputSkillVariable);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetSettings_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillsetSettings("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetSettings_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetSettings_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<IReadOnlyDictionary<string, string>> response = client.GetSkillsetSettings("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetSettings_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<IReadOnlyDictionary<string, string>> response = await client.GetSkillsetSettingsAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetSettings_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillsetSettings("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetSettings_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetSettings_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<IReadOnlyDictionary<string, string>> response = client.GetSkillsetSettings("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetSettings_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<IReadOnlyDictionary<string, string>> response = await client.GetSkillsetSettingsAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillInvocationStarted_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.SetSkillInvocationStarted("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillInvocationStarted_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillInvocationStarted_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.SetSkillInvocationStarted("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillInvocationStarted_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillInvocationCompleted_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.SetSkillInvocationCompleted("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillInvocationCompleted_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetSkillInvocationCompleted_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.SetSkillInvocationCompleted("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetSkillInvocationCompleted_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetAuthInfo_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillsetAuthInfo("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetAuthInfo_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetAuthInfo_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<AuthDetails> response = client.GetSkillsetAuthInfo("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetAuthInfo_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<AuthDetails> response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetAuthInfo_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = client.GetSkillsetAuthInfo("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetAuthInfo_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetSkillsetAuthInfo_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<AuthDetails> response = client.GetSkillsetAuthInfo("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetSkillsetAuthInfo_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            Response<AuthDetails> response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetTokenCredential_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scopes = new object[]
            {
"<scopes>"
            },
                tokenCredentialType = "None",
            });
            Response response = client.GetTokenCredential("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetTokenCredential_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scopes = new object[]
            {
"<scopes>"
            },
                tokenCredentialType = "None",
            });
            Response response = await client.GetTokenCredentialAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetTokenCredential_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None);
            Response<Models.AccessToken> response = client.GetTokenCredential("<evaluationToken>", getTokenCredentialRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetTokenCredential_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None);
            Response<Models.AccessToken> response = await client.GetTokenCredentialAsync("<evaluationToken>", getTokenCredentialRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetTokenCredential_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scopes = new object[]
            {
"<scopes>"
            },
                tokenCredentialType = "None",
                tenantId = "<tenantId>",
            });
            Response response = client.GetTokenCredential("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetTokenCredential_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                scopes = new object[]
            {
"<scopes>"
            },
                tokenCredentialType = "None",
                tenantId = "<tenantId>",
            });
            Response response = await client.GetTokenCredentialAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetTokenCredential_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None)
            {
                TenantId = "<tenantId>",
            };
            Response<Models.AccessToken> response = client.GetTokenCredential("<evaluationToken>", getTokenCredentialRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetTokenCredential_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None)
            {
                TenantId = "<tenantId>",
            };
            Response<Models.AccessToken> response = await client.GetTokenCredentialAsync("<evaluationToken>", getTokenCredentialRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetInput_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            Response response = client.GetInput("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetInput_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            Response response = await client.GetInputAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetInput_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetInputRequest getInputRequest = new GetInputRequest("<inputName>");
            Response<SkillVariable> response = client.GetInput("<evaluationToken>", getInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetInput_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetInputRequest getInputRequest = new GetInputRequest("<inputName>");
            Response<SkillVariable> response = await client.GetInputAsync("<evaluationToken>", getInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetInput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            });
            Response response = client.GetInput("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetInput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            });
            Response response = await client.GetInputAsync("<evaluationToken>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_GetInput_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetInputRequest getInputRequest = new GetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                },
            };
            Response<SkillVariable> response = client.GetInput("<evaluationToken>", getInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_GetInput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            GetInputRequest getInputRequest = new GetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                },
            };
            Response<SkillVariable> response = await client.GetInputAsync("<evaluationToken>", getInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetInput_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            Response response = client.SetInput("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetInput_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
            });
            Response response = await client.SetInputAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetInput_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            SetInputRequest setInputRequest = new SetInputRequest("<inputName>");
            Response response = client.SetInput("<evaluationToken>", setInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetInput_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            SetInputRequest setInputRequest = new SetInputRequest("<inputName>");
            Response response = await client.SetInputAsync("<evaluationToken>", setInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetInput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            });
            Response response = client.SetInput("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetInput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            });
            Response response = await client.SetInputAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_SetInput_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            SetInputRequest setInputRequest = new SetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                },
            };
            Response response = client.SetInput("<evaluationToken>", setInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_SetInput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            SetInputRequest setInputRequest = new SetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<type>",
                    Value = "<value>",
                },
            };
            Response response = await client.SetInputAsync("<evaluationToken>", setInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_AddSources_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
}
            },
            });
            Response response = client.AddSources("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_AddSources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
}
            },
            });
            Response response = await client.AddSourcesAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_AddSources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
            });
            Response response = client.AddSources("<evaluationToken>", addSourcesRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_AddSources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
            });
            Response response = await client.AddSourcesAsync("<evaluationToken>", addSourcesRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_AddSources_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
sourceSerializedData = "<sourceSerializedData>",
}
            },
            });
            Response response = client.AddSources("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_AddSources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sources = new object[]
            {
new
{
displayName = "<displayName>",
sourceContent = "<sourceContent>",
sourceType = "Uri",
sourceSerializedData = "<sourceSerializedData>",
}
            },
            });
            Response response = await client.AddSourcesAsync("<evaluationToken>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkillContext_AddSources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
SourceSerializedData = "<sourceSerializedData>",
}
            });
            Response response = client.AddSources("<evaluationToken>", addSourcesRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkillContext_AddSources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SkillContextClient client = new SkillContextClient(endpoint, credential);

            AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
            {
new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
SourceSerializedData = "<sourceSerializedData>",
}
            });
            Response response = await client.AddSourcesAsync("<evaluationToken>", addSourcesRequest);
        }
    }
}
