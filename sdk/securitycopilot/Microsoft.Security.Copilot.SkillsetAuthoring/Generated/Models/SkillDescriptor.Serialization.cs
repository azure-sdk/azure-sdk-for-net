// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class SkillDescriptor
    {
        internal static SkillDescriptor DeserializeSkillDescriptor(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SkillsetDescriptor skillset = default;
            string name = default;
            string format = default;
            string displayName = default;
            string altName = default;
            IReadOnlyList<SkillDependencyDescriptor> dependencies = default;
            string description = default;
            IReadOnlyList<string> examplePrompts = default;
            bool hidden = default;
            IReadOnlyList<SkillInputDescriptor> inputs = default;
            IReadOnlyList<SkillOutputDescriptor> outputs = default;
            string promptAlignedName = default;
            IReadOnlyList<string> userVisibilityFeatureFlags = default;
            SkillVisibility userVisibility = default;
            IReadOnlyList<string> plannerVisibilityFeatureFlags = default;
            SkillVisibility plannerVisibility = default;
            IReadOnlyDictionary<string, string> settings = default;
            SkillSummaryDescriptor skillSummaryMetadata = default;
            bool enableVariableSubstitutionInCompose = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("skillset"u8))
                {
                    skillset = SkillsetDescriptor.DeserializeSkillsetDescriptor(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("format"u8))
                {
                    format = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("altName"u8))
                {
                    altName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dependencies"u8))
                {
                    List<SkillDependencyDescriptor> array = new List<SkillDependencyDescriptor>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillDependencyDescriptor.DeserializeSkillDependencyDescriptor(item));
                    }
                    dependencies = array;
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("examplePrompts"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    examplePrompts = array;
                    continue;
                }
                if (property.NameEquals("hidden"u8))
                {
                    hidden = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    List<SkillInputDescriptor> array = new List<SkillInputDescriptor>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillInputDescriptor.DeserializeSkillInputDescriptor(item));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("outputs"u8))
                {
                    List<SkillOutputDescriptor> array = new List<SkillOutputDescriptor>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillOutputDescriptor.DeserializeSkillOutputDescriptor(item));
                    }
                    outputs = array;
                    continue;
                }
                if (property.NameEquals("promptAlignedName"u8))
                {
                    promptAlignedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userVisibilityFeatureFlags"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    userVisibilityFeatureFlags = array;
                    continue;
                }
                if (property.NameEquals("userVisibility"u8))
                {
                    userVisibility = new SkillVisibility(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("plannerVisibilityFeatureFlags"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    plannerVisibilityFeatureFlags = array;
                    continue;
                }
                if (property.NameEquals("plannerVisibility"u8))
                {
                    plannerVisibility = new SkillVisibility(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("settings"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    settings = dictionary;
                    continue;
                }
                if (property.NameEquals("skillSummaryMetadata"u8))
                {
                    skillSummaryMetadata = SkillSummaryDescriptor.DeserializeSkillSummaryDescriptor(property.Value);
                    continue;
                }
                if (property.NameEquals("enableVariableSubstitutionInCompose"u8))
                {
                    enableVariableSubstitutionInCompose = property.Value.GetBoolean();
                    continue;
                }
            }
            return new SkillDescriptor(skillset, name, format, displayName, altName, dependencies, description, examplePrompts, hidden, inputs, outputs, promptAlignedName, userVisibilityFeatureFlags, userVisibility, plannerVisibilityFeatureFlags, plannerVisibility, settings, skillSummaryMetadata, enableVariableSubstitutionInCompose);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SkillDescriptor FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSkillDescriptor(document.RootElement);
        }
    }
}
