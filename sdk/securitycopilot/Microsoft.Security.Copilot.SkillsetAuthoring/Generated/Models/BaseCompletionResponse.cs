// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Represents the base completion response. </summary>
    public partial class BaseCompletionResponse
    {
        /// <summary> Initializes a new instance of BaseCompletionResponse. </summary>
        /// <param name="id"> The unique identifier for the response. </param>
        /// <param name="object"> The object type. </param>
        /// <param name="created"> The creation timestamp. </param>
        /// <param name="model"> The model used for completion. </param>
        /// <param name="usage"> The usage statistics for the response. </param>
        /// <param name="promptFilterResults"> The results of prompt filtering. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="object"/>, <paramref name="model"/>, <paramref name="usage"/> or <paramref name="promptFilterResults"/> is null. </exception>
        internal BaseCompletionResponse(string id, string @object, DateTimeOffset created, string model, BinaryData usage, IEnumerable<BinaryData> promptFilterResults)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(@object, nameof(@object));
            Argument.AssertNotNull(model, nameof(model));
            Argument.AssertNotNull(usage, nameof(usage));
            Argument.AssertNotNull(promptFilterResults, nameof(promptFilterResults));

            Id = id;
            Object = @object;
            Created = created;
            Model = model;
            Usage = usage;
            PromptFilterResults = promptFilterResults.ToList();
        }

        /// <summary> Initializes a new instance of BaseCompletionResponse. </summary>
        /// <param name="id"> The unique identifier for the response. </param>
        /// <param name="object"> The object type. </param>
        /// <param name="created"> The creation timestamp. </param>
        /// <param name="model"> The model used for completion. </param>
        /// <param name="usage"> The usage statistics for the response. </param>
        /// <param name="promptFilterResults"> The results of prompt filtering. </param>
        internal BaseCompletionResponse(string id, string @object, DateTimeOffset created, string model, BinaryData usage, IReadOnlyList<BinaryData> promptFilterResults)
        {
            Id = id;
            Object = @object;
            Created = created;
            Model = model;
            Usage = usage;
            PromptFilterResults = promptFilterResults;
        }

        /// <summary> The unique identifier for the response. </summary>
        public string Id { get; }
        /// <summary> The object type. </summary>
        public string Object { get; }
        /// <summary> The creation timestamp. </summary>
        public DateTimeOffset Created { get; }
        /// <summary> The model used for completion. </summary>
        public string Model { get; }
        /// <summary>
        /// The usage statistics for the response.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Usage { get; }
        /// <summary>
        /// The results of prompt filtering.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> PromptFilterResults { get; }
    }
}
