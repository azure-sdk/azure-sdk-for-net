// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Represents the Azure OpenAI execution context. </summary>
    public partial class AzureOpenAIExecutionContext
    {
        /// <summary> Initializes a new instance of AzureOpenAIExecutionContext. </summary>
        /// <param name="apiVersion"> The API version. </param>
        /// <param name="environment"> The environment where the request is being made. </param>
        /// <param name="isGPUProxyEnabled"> Determines if the GPU proxy is enabled. </param>
        /// <param name="customerAllowCrossGeoCompute"> Whether the customer allows cross-geo compute in their workspace capacity. </param>
        /// <param name="ecsAllowCrossGeoCompute"> ECS controlled flag to allow cross-geo compute. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> or <paramref name="environment"/> is null. </exception>
        public AzureOpenAIExecutionContext(string apiVersion, string environment, bool isGPUProxyEnabled, bool customerAllowCrossGeoCompute, bool ecsAllowCrossGeoCompute)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(environment, nameof(environment));

            ApiVersion = apiVersion;
            Environment = environment;
            IsGPUProxyEnabled = isGPUProxyEnabled;
            CustomerAllowCrossGeoCompute = customerAllowCrossGeoCompute;
            EcsAllowCrossGeoCompute = ecsAllowCrossGeoCompute;
            ContentFilterProperties = new ChangeTrackingDictionary<string, string>();
            ReportingProperties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of AzureOpenAIExecutionContext. </summary>
        /// <param name="apiVersion"> The API version. </param>
        /// <param name="environment"> The environment where the request is being made. </param>
        /// <param name="isGPUProxyEnabled"> Determines if the GPU proxy is enabled. </param>
        /// <param name="gpuProcessingGeo"> The geographic location where the GPU processing is being done. </param>
        /// <param name="customerAllowCrossGeoCompute"> Whether the customer allows cross-geo compute in their workspace capacity. </param>
        /// <param name="ecsAllowCrossGeoCompute"> ECS controlled flag to allow cross-geo compute. </param>
        /// <param name="contentFilterProperties"> Properties used to add content prompt and content filter details from the response. </param>
        /// <param name="reportingProperties"> Properties used to report information about the skill invocation. Must not contain customer content. </param>
        internal AzureOpenAIExecutionContext(string apiVersion, string environment, bool isGPUProxyEnabled, string gpuProcessingGeo, bool customerAllowCrossGeoCompute, bool ecsAllowCrossGeoCompute, IDictionary<string, string> contentFilterProperties, IDictionary<string, string> reportingProperties)
        {
            ApiVersion = apiVersion;
            Environment = environment;
            IsGPUProxyEnabled = isGPUProxyEnabled;
            GpuProcessingGeo = gpuProcessingGeo;
            CustomerAllowCrossGeoCompute = customerAllowCrossGeoCompute;
            EcsAllowCrossGeoCompute = ecsAllowCrossGeoCompute;
            ContentFilterProperties = contentFilterProperties;
            ReportingProperties = reportingProperties;
        }

        /// <summary> The API version. </summary>
        public string ApiVersion { get; set; }
        /// <summary> The environment where the request is being made. </summary>
        public string Environment { get; set; }
        /// <summary> Determines if the GPU proxy is enabled. </summary>
        public bool IsGPUProxyEnabled { get; set; }
        /// <summary> The geographic location where the GPU processing is being done. </summary>
        public string GpuProcessingGeo { get; set; }
        /// <summary> Whether the customer allows cross-geo compute in their workspace capacity. </summary>
        public bool CustomerAllowCrossGeoCompute { get; set; }
        /// <summary> ECS controlled flag to allow cross-geo compute. </summary>
        public bool EcsAllowCrossGeoCompute { get; set; }
        /// <summary> Properties used to add content prompt and content filter details from the response. </summary>
        public IDictionary<string, string> ContentFilterProperties { get; }
        /// <summary> Properties used to report information about the skill invocation. Must not contain customer content. </summary>
        public IDictionary<string, string> ReportingProperties { get; }
    }
}
