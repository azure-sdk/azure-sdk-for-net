// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> The desciptor of a skill. </summary>
    public partial class SkillDescriptor
    {
        /// <summary> Initializes a new instance of SkillDescriptor. </summary>
        /// <param name="skillset"> The skillset descriptor. </param>
        /// <param name="name"> The name of the skill. </param>
        /// <param name="format"> The format of the skill. </param>
        /// <param name="displayName"> The display name of the skill. </param>
        /// <param name="altName"> An alternative name for the skill as some planners follow different naming convensions. This is set by the planner to map the name back to the skill. </param>
        /// <param name="dependencies"> The dependencies of the skill. </param>
        /// <param name="description"> The description of the skill. </param>
        /// <param name="examplePrompts"> A list of example prompts for the skill. </param>
        /// <param name="hidden"> Whether the skill is hidden TODO what does this mean. </param>
        /// <param name="inputs"> The inputs required for the skill. </param>
        /// <param name="outputs"> The outputs of the skill. </param>
        /// <param name="promptAlignedName"> The prompt aligned name of the skill TODO what does this mean. </param>
        /// <param name="userVisibilityFeatureFlags"> A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order for the skillset to be available. </param>
        /// <param name="userVisibility"> Controls the conditions under which the users can see or use this skillset. </param>
        /// <param name="plannerVisibilityFeatureFlags"> Visibility flags required for the planner to user the skillset TODO confirm what this does. </param>
        /// <param name="plannerVisibility"> Controls the conditions under a prompt can use this skillset. </param>
        /// <param name="settings"> The settings of the skill. </param>
        /// <param name="skillSummaryMetadata"> skillSummaryMetadata. </param>
        /// <param name="enableVariableSubstitutionInCompose"> EnableVariableSubstitutionInCompose. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skillset"/>, <paramref name="name"/>, <paramref name="format"/>, <paramref name="displayName"/>, <paramref name="altName"/>, <paramref name="dependencies"/>, <paramref name="description"/>, <paramref name="examplePrompts"/>, <paramref name="inputs"/>, <paramref name="outputs"/>, <paramref name="promptAlignedName"/>, <paramref name="userVisibilityFeatureFlags"/>, <paramref name="plannerVisibilityFeatureFlags"/>, <paramref name="settings"/> or <paramref name="skillSummaryMetadata"/> is null. </exception>
        internal SkillDescriptor(SkillsetDescriptor skillset, string name, string format, string displayName, string altName, IEnumerable<SkillDependencyDescriptor> dependencies, string description, IEnumerable<string> examplePrompts, bool hidden, IEnumerable<SkillInputDescriptor> inputs, IEnumerable<SkillOutputDescriptor> outputs, string promptAlignedName, IEnumerable<string> userVisibilityFeatureFlags, SkillVisibility userVisibility, IEnumerable<string> plannerVisibilityFeatureFlags, SkillVisibility plannerVisibility, IReadOnlyDictionary<string, string> settings, SkillSummaryDescriptor skillSummaryMetadata, bool enableVariableSubstitutionInCompose)
        {
            Argument.AssertNotNull(skillset, nameof(skillset));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(format, nameof(format));
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(altName, nameof(altName));
            Argument.AssertNotNull(dependencies, nameof(dependencies));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(examplePrompts, nameof(examplePrompts));
            Argument.AssertNotNull(inputs, nameof(inputs));
            Argument.AssertNotNull(outputs, nameof(outputs));
            Argument.AssertNotNull(promptAlignedName, nameof(promptAlignedName));
            Argument.AssertNotNull(userVisibilityFeatureFlags, nameof(userVisibilityFeatureFlags));
            Argument.AssertNotNull(plannerVisibilityFeatureFlags, nameof(plannerVisibilityFeatureFlags));
            Argument.AssertNotNull(settings, nameof(settings));
            Argument.AssertNotNull(skillSummaryMetadata, nameof(skillSummaryMetadata));

            Skillset = skillset;
            Name = name;
            Format = format;
            DisplayName = displayName;
            AltName = altName;
            Dependencies = dependencies.ToList();
            Description = description;
            ExamplePrompts = examplePrompts.ToList();
            Hidden = hidden;
            Inputs = inputs.ToList();
            Outputs = outputs.ToList();
            PromptAlignedName = promptAlignedName;
            UserVisibilityFeatureFlags = userVisibilityFeatureFlags.ToList();
            UserVisibility = userVisibility;
            PlannerVisibilityFeatureFlags = plannerVisibilityFeatureFlags.ToList();
            PlannerVisibility = plannerVisibility;
            Settings = settings;
            SkillSummaryMetadata = skillSummaryMetadata;
            EnableVariableSubstitutionInCompose = enableVariableSubstitutionInCompose;
        }

        /// <summary> Initializes a new instance of SkillDescriptor. </summary>
        /// <param name="skillset"> The skillset descriptor. </param>
        /// <param name="name"> The name of the skill. </param>
        /// <param name="format"> The format of the skill. </param>
        /// <param name="displayName"> The display name of the skill. </param>
        /// <param name="altName"> An alternative name for the skill as some planners follow different naming convensions. This is set by the planner to map the name back to the skill. </param>
        /// <param name="dependencies"> The dependencies of the skill. </param>
        /// <param name="description"> The description of the skill. </param>
        /// <param name="examplePrompts"> A list of example prompts for the skill. </param>
        /// <param name="hidden"> Whether the skill is hidden TODO what does this mean. </param>
        /// <param name="inputs"> The inputs required for the skill. </param>
        /// <param name="outputs"> The outputs of the skill. </param>
        /// <param name="promptAlignedName"> The prompt aligned name of the skill TODO what does this mean. </param>
        /// <param name="userVisibilityFeatureFlags"> A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order for the skillset to be available. </param>
        /// <param name="userVisibility"> Controls the conditions under which the users can see or use this skillset. </param>
        /// <param name="plannerVisibilityFeatureFlags"> Visibility flags required for the planner to user the skillset TODO confirm what this does. </param>
        /// <param name="plannerVisibility"> Controls the conditions under a prompt can use this skillset. </param>
        /// <param name="settings"> The settings of the skill. </param>
        /// <param name="skillSummaryMetadata"> skillSummaryMetadata. </param>
        /// <param name="enableVariableSubstitutionInCompose"> EnableVariableSubstitutionInCompose. </param>
        internal SkillDescriptor(SkillsetDescriptor skillset, string name, string format, string displayName, string altName, IReadOnlyList<SkillDependencyDescriptor> dependencies, string description, IReadOnlyList<string> examplePrompts, bool hidden, IReadOnlyList<SkillInputDescriptor> inputs, IReadOnlyList<SkillOutputDescriptor> outputs, string promptAlignedName, IReadOnlyList<string> userVisibilityFeatureFlags, SkillVisibility userVisibility, IReadOnlyList<string> plannerVisibilityFeatureFlags, SkillVisibility plannerVisibility, IReadOnlyDictionary<string, string> settings, SkillSummaryDescriptor skillSummaryMetadata, bool enableVariableSubstitutionInCompose)
        {
            Skillset = skillset;
            Name = name;
            Format = format;
            DisplayName = displayName;
            AltName = altName;
            Dependencies = dependencies;
            Description = description;
            ExamplePrompts = examplePrompts;
            Hidden = hidden;
            Inputs = inputs;
            Outputs = outputs;
            PromptAlignedName = promptAlignedName;
            UserVisibilityFeatureFlags = userVisibilityFeatureFlags;
            UserVisibility = userVisibility;
            PlannerVisibilityFeatureFlags = plannerVisibilityFeatureFlags;
            PlannerVisibility = plannerVisibility;
            Settings = settings;
            SkillSummaryMetadata = skillSummaryMetadata;
            EnableVariableSubstitutionInCompose = enableVariableSubstitutionInCompose;
        }

        /// <summary> The skillset descriptor. </summary>
        public SkillsetDescriptor Skillset { get; }
        /// <summary> The name of the skill. </summary>
        public string Name { get; }
        /// <summary> The format of the skill. </summary>
        public string Format { get; }
        /// <summary> The display name of the skill. </summary>
        public string DisplayName { get; }
        /// <summary> An alternative name for the skill as some planners follow different naming convensions. This is set by the planner to map the name back to the skill. </summary>
        public string AltName { get; }
        /// <summary> The dependencies of the skill. </summary>
        public IReadOnlyList<SkillDependencyDescriptor> Dependencies { get; }
        /// <summary> The description of the skill. </summary>
        public string Description { get; }
        /// <summary> A list of example prompts for the skill. </summary>
        public IReadOnlyList<string> ExamplePrompts { get; }
        /// <summary> Whether the skill is hidden TODO what does this mean. </summary>
        public bool Hidden { get; }
        /// <summary> The inputs required for the skill. </summary>
        public IReadOnlyList<SkillInputDescriptor> Inputs { get; }
        /// <summary> The outputs of the skill. </summary>
        public IReadOnlyList<SkillOutputDescriptor> Outputs { get; }
        /// <summary> The prompt aligned name of the skill TODO what does this mean. </summary>
        public string PromptAlignedName { get; }
        /// <summary> A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order for the skillset to be available. </summary>
        public IReadOnlyList<string> UserVisibilityFeatureFlags { get; }
        /// <summary> Controls the conditions under which the users can see or use this skillset. </summary>
        public SkillVisibility UserVisibility { get; }
        /// <summary> Visibility flags required for the planner to user the skillset TODO confirm what this does. </summary>
        public IReadOnlyList<string> PlannerVisibilityFeatureFlags { get; }
        /// <summary> Controls the conditions under a prompt can use this skillset. </summary>
        public SkillVisibility PlannerVisibility { get; }
        /// <summary> The settings of the skill. </summary>
        public IReadOnlyDictionary<string, string> Settings { get; }
        /// <summary> skillSummaryMetadata. </summary>
        public SkillSummaryDescriptor SkillSummaryMetadata { get; }
        /// <summary> EnableVariableSubstitutionInCompose. </summary>
        public bool EnableVariableSubstitutionInCompose { get; }
    }
}
