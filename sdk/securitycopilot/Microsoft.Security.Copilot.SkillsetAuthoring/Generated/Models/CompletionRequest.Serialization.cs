// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class CompletionRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Prompt"u8);
            writer.WriteStringValue(Prompt);
            if (Optional.IsDefined(MaxTokens))
            {
                writer.WritePropertyName("MaxTokens"u8);
                writer.WriteNumberValue(MaxTokens.Value);
            }
            if (Optional.IsDefined(Temperature))
            {
                writer.WritePropertyName("Temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(TopP))
            {
                writer.WritePropertyName("TopP"u8);
                writer.WriteNumberValue(TopP.Value);
            }
            if (Optional.IsDefined(N))
            {
                writer.WritePropertyName("N"u8);
                writer.WriteNumberValue(N.Value);
            }
            if (Optional.IsDefined(Stream))
            {
                writer.WritePropertyName("Stream"u8);
                writer.WriteBooleanValue(Stream.Value);
            }
            if (Optional.IsDefined(Logprobs))
            {
                writer.WritePropertyName("Logprobs"u8);
                writer.WriteNumberValue(Logprobs.Value);
            }
            if (Optional.IsDefined(Echo))
            {
                writer.WritePropertyName("Echo"u8);
                writer.WriteBooleanValue(Echo.Value);
            }
            writer.WritePropertyName("Stop"u8);
            writer.WriteStartArray();
            foreach (var item in Stop)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(PresencePenalty))
            {
                writer.WritePropertyName("PresencePenalty"u8);
                writer.WriteNumberValue(PresencePenalty.Value);
            }
            if (Optional.IsDefined(FrequencyPenalty))
            {
                writer.WritePropertyName("FrequencyPenalty"u8);
                writer.WriteNumberValue(FrequencyPenalty.Value);
            }
            if (Optional.IsDefined(BestOf))
            {
                writer.WritePropertyName("BestOf"u8);
                writer.WriteNumberValue(BestOf.Value);
            }
            writer.WritePropertyName("LogitBias"u8);
            writer.WriteStartObject();
            foreach (var item in LogitBias)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteNumberValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("ResponseFormat"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(ResponseFormat);
#else
            JsonSerializer.Serialize(writer, JsonDocument.Parse(ResponseFormat.ToString()).RootElement);
#endif
            writer.WriteEndObject();
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
