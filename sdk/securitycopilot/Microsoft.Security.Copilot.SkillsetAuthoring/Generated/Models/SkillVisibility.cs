// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Defines the conditions under which the users can see or use a skillset. </summary>
    public readonly partial struct SkillVisibility : IEquatable<SkillVisibility>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillVisibility"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlwaysValue = "Always";
        private const string NeverValue = "Never";
        private const string IfFeatureFlagEnabledValue = "IfFeatureFlagEnabled";

        /// <summary> Always visible. </summary>
        public static SkillVisibility Always { get; } = new SkillVisibility(AlwaysValue);
        /// <summary> Never visible. </summary>
        public static SkillVisibility Never { get; } = new SkillVisibility(NeverValue);
        /// <summary> Visible when any of an associated list of feature flags are enabled. </summary>
        public static SkillVisibility IfFeatureFlagEnabled { get; } = new SkillVisibility(IfFeatureFlagEnabledValue);
        /// <summary> Determines if two <see cref="SkillVisibility"/> values are the same. </summary>
        public static bool operator ==(SkillVisibility left, SkillVisibility right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillVisibility"/> values are not the same. </summary>
        public static bool operator !=(SkillVisibility left, SkillVisibility right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillVisibility"/>. </summary>
        public static implicit operator SkillVisibility(string value) => new SkillVisibility(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillVisibility other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillVisibility other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
