// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Defines the authentication types supported by a skillset. </summary>
    public readonly partial struct SkillsetAuthType : IEquatable<SkillsetAuthType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillsetAuthType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillsetAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string BasicValue = "Basic";
        private const string ApiKeyValue = "ApiKey";
        private const string OAuthAuthorizationCodeFlowValue = "OAuthAuthorizationCodeFlow";
        private const string OAuthClientCredentialsFlowValue = "OAuthClientCredentialsFlow";
        private const string AADValue = "AAD";
        private const string ServiceHttpValue = "ServiceHttp";
        private const string AADDelegatedValue = "AADDelegated";

        /// <summary> The skillset supports no authentication. </summary>
        public static SkillsetAuthType None { get; } = new SkillsetAuthType(NoneValue);
        /// <summary> The skillset supports basic authentication TODO what does this mean. </summary>
        public static SkillsetAuthType Basic { get; } = new SkillsetAuthType(BasicValue);
        /// <summary> The skillset supports API key authentication TO what does this mean. </summary>
        public static SkillsetAuthType ApiKey { get; } = new SkillsetAuthType(ApiKeyValue);
        /// <summary> The skillset supports OAuth authorization code flow authentication TODO what does this mean. </summary>
        public static SkillsetAuthType OAuthAuthorizationCodeFlow { get; } = new SkillsetAuthType(OAuthAuthorizationCodeFlowValue);
        /// <summary> The skillset supports OAuth client credentials flow TODO what does this mean. </summary>
        public static SkillsetAuthType OAuthClientCredentialsFlow { get; } = new SkillsetAuthType(OAuthClientCredentialsFlowValue);
        /// <summary> The skillset supports AAD authentication. </summary>
        public static SkillsetAuthType AAD { get; } = new SkillsetAuthType(AADValue);
        /// <summary> The skillset supports service HTTP authentication TODO what does this mean. </summary>
        public static SkillsetAuthType ServiceHttp { get; } = new SkillsetAuthType(ServiceHttpValue);
        /// <summary> The skillset supports AAD delegated authentication TODO what does this mean. </summary>
        public static SkillsetAuthType AADDelegated { get; } = new SkillsetAuthType(AADDelegatedValue);
        /// <summary> Determines if two <see cref="SkillsetAuthType"/> values are the same. </summary>
        public static bool operator ==(SkillsetAuthType left, SkillsetAuthType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillsetAuthType"/> values are not the same. </summary>
        public static bool operator !=(SkillsetAuthType left, SkillsetAuthType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillsetAuthType"/>. </summary>
        public static implicit operator SkillsetAuthType(string value) => new SkillsetAuthType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillsetAuthType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillsetAuthType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
