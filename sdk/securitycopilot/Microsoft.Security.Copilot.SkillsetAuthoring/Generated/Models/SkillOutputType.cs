// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Skill Output type enum. Supports StructuredOutput and Primitive. </summary>
    public readonly partial struct SkillOutputType : IEquatable<SkillOutputType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillOutputType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillOutputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimitiveValue = "Primitive";
        private const string StructuredComponentsValue = "StructuredComponents";

        /// <summary> Primitive. </summary>
        public static SkillOutputType Primitive { get; } = new SkillOutputType(PrimitiveValue);
        /// <summary> Structured Components. </summary>
        public static SkillOutputType StructuredComponents { get; } = new SkillOutputType(StructuredComponentsValue);
        /// <summary> Determines if two <see cref="SkillOutputType"/> values are the same. </summary>
        public static bool operator ==(SkillOutputType left, SkillOutputType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillOutputType"/> values are not the same. </summary>
        public static bool operator !=(SkillOutputType left, SkillOutputType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillOutputType"/>. </summary>
        public static implicit operator SkillOutputType(string value) => new SkillOutputType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillOutputType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillOutputType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
