// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class AzureOpenAIExecutionContext : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("ApiVersion"u8);
            writer.WriteStringValue(ApiVersion);
            writer.WritePropertyName("Environment"u8);
            writer.WriteStringValue(Environment);
            writer.WritePropertyName("IsGPUProxyEnabled"u8);
            writer.WriteBooleanValue(IsGPUProxyEnabled);
            if (Optional.IsDefined(GpuProcessingGeo))
            {
                writer.WritePropertyName("GpuProcessingGeo"u8);
                writer.WriteStringValue(GpuProcessingGeo);
            }
            writer.WritePropertyName("CustomerAllowCrossGeoCompute"u8);
            writer.WriteBooleanValue(CustomerAllowCrossGeoCompute);
            writer.WritePropertyName("EcsAllowCrossGeoCompute"u8);
            writer.WriteBooleanValue(EcsAllowCrossGeoCompute);
            if (Optional.IsCollectionDefined(ContentFilterProperties))
            {
                writer.WritePropertyName("ContentFilterProperties"u8);
                writer.WriteStartObject();
                foreach (var item in ContentFilterProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(ReportingProperties))
            {
                writer.WritePropertyName("ReportingProperties"u8);
                writer.WriteStartObject();
                foreach (var item in ReportingProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static AzureOpenAIExecutionContext DeserializeAzureOpenAIExecutionContext(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string apiVersion = default;
            string environment = default;
            bool isGPUProxyEnabled = default;
            Optional<string> gpuProcessingGeo = default;
            bool customerAllowCrossGeoCompute = default;
            bool ecsAllowCrossGeoCompute = default;
            Optional<IDictionary<string, string>> contentFilterProperties = default;
            Optional<IDictionary<string, string>> reportingProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ApiVersion"u8))
                {
                    apiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Environment"u8))
                {
                    environment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("IsGPUProxyEnabled"u8))
                {
                    isGPUProxyEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("GpuProcessingGeo"u8))
                {
                    gpuProcessingGeo = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("CustomerAllowCrossGeoCompute"u8))
                {
                    customerAllowCrossGeoCompute = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("EcsAllowCrossGeoCompute"u8))
                {
                    ecsAllowCrossGeoCompute = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ContentFilterProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    contentFilterProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("ReportingProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    reportingProperties = dictionary;
                    continue;
                }
            }
            return new AzureOpenAIExecutionContext(apiVersion, environment, isGPUProxyEnabled, gpuProcessingGeo.Value, customerAllowCrossGeoCompute, ecsAllowCrossGeoCompute, Optional.ToDictionary(contentFilterProperties), Optional.ToDictionary(reportingProperties));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AzureOpenAIExecutionContext FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAzureOpenAIExecutionContext(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
