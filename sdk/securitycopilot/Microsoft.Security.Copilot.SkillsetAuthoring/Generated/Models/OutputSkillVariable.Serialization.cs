// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class OutputSkillVariable : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Sources != null && Optional.IsCollectionDefined(Sources))
            {
                writer.WritePropertyName("sources"u8);
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNull("sources");
            }
            if (SuggestedPrompts != null && Optional.IsCollectionDefined(SuggestedPrompts))
            {
                writer.WritePropertyName("suggestedPrompts"u8);
                writer.WriteStartArray();
                foreach (var item in SuggestedPrompts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNull("suggestedPrompts");
            }
            if (SkillName != null)
            {
                writer.WritePropertyName("skillName"u8);
                writer.WriteStringValue(SkillName);
            }
            else
            {
                writer.WriteNull("skillName");
            }
            if (SkillInputs != null && Optional.IsCollectionDefined(SkillInputs))
            {
                writer.WritePropertyName("skillInputs"u8);
                writer.WriteStartObject();
                foreach (var item in SkillInputs)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNull("skillInputs");
            }
            if (OutputLanguage != null)
            {
                writer.WritePropertyName("outputLanguage"u8);
                writer.WriteStringValue(OutputLanguage);
            }
            else
            {
                writer.WriteNull("outputLanguage");
            }
            writer.WritePropertyName("outputType"u8);
            writer.WriteStringValue(OutputType.ToString());
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteStringValue(Value);
            }
            writer.WritePropertyName("valueStoredAsJson"u8);
            writer.WriteBooleanValue(ValueStoredAsJson);
            writer.WriteEndObject();
        }

        internal static OutputSkillVariable DeserializeOutputSkillVariable(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<SkillSource> sources = default;
            IList<SuggestedPrompt> suggestedPrompts = default;
            string skillName = default;
            IDictionary<string, string> skillInputs = default;
            string outputLanguage = default;
            SkillOutputType outputType = default;
            Optional<string> type = default;
            Optional<string> value = default;
            bool valueStoredAsJson = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sources = new ChangeTrackingList<SkillSource>();
                        continue;
                    }
                    List<SkillSource> array = new List<SkillSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillSource.DeserializeSkillSource(item));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("suggestedPrompts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        suggestedPrompts = new ChangeTrackingList<SuggestedPrompt>();
                        continue;
                    }
                    List<SuggestedPrompt> array = new List<SuggestedPrompt>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SuggestedPrompt.DeserializeSuggestedPrompt(item));
                    }
                    suggestedPrompts = array;
                    continue;
                }
                if (property.NameEquals("skillName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        skillName = null;
                        continue;
                    }
                    skillName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("skillInputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        skillInputs = new ChangeTrackingDictionary<string, string>();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    skillInputs = dictionary;
                    continue;
                }
                if (property.NameEquals("outputLanguage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        outputLanguage = null;
                        continue;
                    }
                    outputLanguage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outputType"u8))
                {
                    outputType = new SkillOutputType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valueStoredAsJson"u8))
                {
                    valueStoredAsJson = property.Value.GetBoolean();
                    continue;
                }
            }
            return new OutputSkillVariable(type.Value, value.Value, valueStoredAsJson, sources, suggestedPrompts, skillName, skillInputs, outputLanguage, outputType);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new OutputSkillVariable FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeOutputSkillVariable(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
