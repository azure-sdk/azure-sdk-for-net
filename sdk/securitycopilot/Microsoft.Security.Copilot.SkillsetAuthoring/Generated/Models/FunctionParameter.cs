// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Represents parameters for a function. </summary>
    public partial class FunctionParameter
    {
        /// <summary> Initializes a new instance of FunctionParameter. </summary>
        /// <param name="type"> The type of the parameter. </param>
        /// <param name="properties"> The properties of the parameter. </param>
        /// <param name="required"> The list of required properties. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/>, <paramref name="properties"/> or <paramref name="required"/> is null. </exception>
        public FunctionParameter(string type, IDictionary<string, FunctionParameterProperty> properties, IEnumerable<string> required)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(properties, nameof(properties));
            Argument.AssertNotNull(required, nameof(required));

            Type = type;
            Properties = properties;
            Required = required.ToList();
        }

        /// <summary> Initializes a new instance of FunctionParameter. </summary>
        /// <param name="type"> The type of the parameter. </param>
        /// <param name="properties"> The properties of the parameter. </param>
        /// <param name="required"> The list of required properties. </param>
        internal FunctionParameter(string type, IDictionary<string, FunctionParameterProperty> properties, IList<string> required)
        {
            Type = type;
            Properties = properties;
            Required = required;
        }

        /// <summary> The type of the parameter. </summary>
        public string Type { get; }
        /// <summary> The properties of the parameter. </summary>
        public IDictionary<string, FunctionParameterProperty> Properties { get; }
        /// <summary> The list of required properties. </summary>
        public IList<string> Required { get; }
    }
}
