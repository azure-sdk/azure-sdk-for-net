// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> TokenCredentialRequest. </summary>
    public partial class GetTokenCredentialRequest
    {
        /// <summary> Initializes a new instance of GetTokenCredentialRequest. </summary>
        /// <param name="scopes"> Scopes. </param>
        /// <param name="tokenCredentialType"> TokenCredential Type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scopes"/> is null. </exception>
        public GetTokenCredentialRequest(IEnumerable<string> scopes, TokenCredentialEnum tokenCredentialType)
        {
            Argument.AssertNotNull(scopes, nameof(scopes));

            Scopes = scopes.ToList();
            TokenCredentialType = tokenCredentialType;
        }

        /// <summary> Initializes a new instance of GetTokenCredentialRequest. </summary>
        /// <param name="scopes"> Scopes. </param>
        /// <param name="tokenCredentialType"> TokenCredential Type. </param>
        /// <param name="tenantId"> TenantId. </param>
        internal GetTokenCredentialRequest(IList<string> scopes, TokenCredentialEnum tokenCredentialType, string tenantId)
        {
            Scopes = scopes;
            TokenCredentialType = tokenCredentialType;
            TenantId = tenantId;
        }

        /// <summary> Scopes. </summary>
        public IList<string> Scopes { get; }
        /// <summary> TokenCredential Type. </summary>
        public TokenCredentialEnum TokenCredentialType { get; }
        /// <summary> TenantId. </summary>
        public string TenantId { get; set; }
    }
}
