// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> The BaseChoice. </summary>
    public partial class BaseChoice
    {
        /// <summary> Initializes a new instance of BaseChoice. </summary>
        /// <param name="index"></param>
        /// <param name="logProbs"> Log probabilities for this choice. </param>
        /// <param name="finishReason"> The reason why the operation finished. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logProbs"/> or <paramref name="finishReason"/> is null. </exception>
        internal BaseChoice(int index, BinaryData logProbs, string finishReason)
        {
            Argument.AssertNotNull(logProbs, nameof(logProbs));
            Argument.AssertNotNull(finishReason, nameof(finishReason));

            Index = index;
            LogProbs = logProbs;
            FinishReason = finishReason;
        }

        /// <summary> Initializes a new instance of BaseChoice. </summary>
        /// <param name="index"></param>
        /// <param name="logProbs"> Log probabilities for this choice. </param>
        /// <param name="finishReason"> The reason why the operation finished. </param>
        /// <param name="contentFilterResults"> This object contains the list of content filter annotations. </param>
        /// <param name="contentFilterError"> This indicates when the content filtering system does not run on the chat completion. </param>
        internal BaseChoice(int index, BinaryData logProbs, string finishReason, BinaryData contentFilterResults, BinaryData contentFilterError)
        {
            Index = index;
            LogProbs = logProbs;
            FinishReason = finishReason;
            ContentFilterResults = contentFilterResults;
            ContentFilterError = contentFilterError;
        }

        /// <summary> Gets the index. </summary>
        public int Index { get; }
        /// <summary>
        /// Log probabilities for this choice.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData LogProbs { get; }
        /// <summary> The reason why the operation finished. </summary>
        public string FinishReason { get; }
        /// <summary>
        /// This object contains the list of content filter annotations.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ContentFilterResults { get; }
        /// <summary>
        /// This indicates when the content filtering system does not run on the chat completion.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ContentFilterError { get; }
    }
}
