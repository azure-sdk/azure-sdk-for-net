// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Auth Location. </summary>
    public readonly partial struct AuthLocationEnum : IEquatable<AuthLocationEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthLocationEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthLocationEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HeaderValue = "Header";
        private const string QueryParamsValue = "QueryParams";

        /// <summary> Using Header. </summary>
        public static AuthLocationEnum Header { get; } = new AuthLocationEnum(HeaderValue);
        /// <summary> Using QueryParams. </summary>
        public static AuthLocationEnum QueryParams { get; } = new AuthLocationEnum(QueryParamsValue);
        /// <summary> Determines if two <see cref="AuthLocationEnum"/> values are the same. </summary>
        public static bool operator ==(AuthLocationEnum left, AuthLocationEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthLocationEnum"/> values are not the same. </summary>
        public static bool operator !=(AuthLocationEnum left, AuthLocationEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AuthLocationEnum"/>. </summary>
        public static implicit operator AuthLocationEnum(string value) => new AuthLocationEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthLocationEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthLocationEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
