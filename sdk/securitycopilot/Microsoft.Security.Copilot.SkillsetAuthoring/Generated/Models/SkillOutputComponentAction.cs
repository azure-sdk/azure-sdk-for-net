// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public readonly partial struct SkillOutputComponentAction : IEquatable<SkillOutputComponentAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillOutputComponentAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillOutputComponentAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string SummarizeValue = "Summarize";
        private const string SubstituteValue = "Substitute";

        /// <summary> None. </summary>
        public static SkillOutputComponentAction None { get; } = new SkillOutputComponentAction(NoneValue);
        /// <summary> Summarize. </summary>
        public static SkillOutputComponentAction Summarize { get; } = new SkillOutputComponentAction(SummarizeValue);
        /// <summary> Substitute. </summary>
        public static SkillOutputComponentAction Substitute { get; } = new SkillOutputComponentAction(SubstituteValue);
        /// <summary> Determines if two <see cref="SkillOutputComponentAction"/> values are the same. </summary>
        public static bool operator ==(SkillOutputComponentAction left, SkillOutputComponentAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillOutputComponentAction"/> values are not the same. </summary>
        public static bool operator !=(SkillOutputComponentAction left, SkillOutputComponentAction right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillOutputComponentAction"/>. </summary>
        public static implicit operator SkillOutputComponentAction(string value) => new SkillOutputComponentAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillOutputComponentAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillOutputComponentAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
