// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Represents the execution context for the current session. </summary>
    public partial class MedeinaExecutionContext
    {
        /// <summary> Initializes a new instance of MedeinaExecutionContext. </summary>
        /// <param name="sessionId"> The session id. </param>
        /// <param name="promptId"> The prompt id. </param>
        /// <param name="evaluationId"> The evaluation id. </param>
        /// <param name="tenantId"> The tenant id. </param>
        /// <param name="accountId"> The account id. </param>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="userName"> The display name of the user. </param>
        /// <param name="source"> The Source tag i.e. 'immersive'. </param>
        /// <param name="unauthenticatedSourceApplicationId"> The source application ID. </param>
        /// <param name="selectedSkills"> The selected skills. </param>
        /// <param name="selectedSkillsets"> The skillsets identified for execution during the evaluation process post skill selection. </param>
        /// <param name="isFidelisUser"> Indicates whether the context is for a user onboarded to Fidelis. </param>
        /// <param name="invocationType"> Indicates whether the evaluation is manually generated or user driven. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="encryptedUserAccessToken"> The encrypted token used to authenticate the user. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="azureOpenAIExecutionContext"> Contains the context for the Azure OpenAI requests such as the deployment id. </param>
        /// <param name="previewState"> Preview state of the execution context. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sessionId"/>, <paramref name="promptId"/>, <paramref name="evaluationId"/>, <paramref name="tenantId"/>, <paramref name="accountId"/>, <paramref name="workspaceId"/>, <paramref name="userName"/>, <paramref name="source"/>, <paramref name="unauthenticatedSourceApplicationId"/>, <paramref name="selectedSkills"/>, <paramref name="selectedSkillsets"/>, <paramref name="encryptedUserAccessToken"/>, <paramref name="complianceFlags"/> or <paramref name="azureOpenAIExecutionContext"/> is null. </exception>
        internal MedeinaExecutionContext(string sessionId, string promptId, string evaluationId, string tenantId, string accountId, string workspaceId, string userName, string source, string unauthenticatedSourceApplicationId, string selectedSkills, IEnumerable<string> selectedSkillsets, bool isFidelisUser, EvaluationInvocationType invocationType, EvaluationInvocationCategory invocationCategory, string encryptedUserAccessToken, ComplianceFlags complianceFlags, AzureOpenAIExecutionContext azureOpenAIExecutionContext, SkillPreviewState previewState)
        {
            Argument.AssertNotNull(sessionId, nameof(sessionId));
            Argument.AssertNotNull(promptId, nameof(promptId));
            Argument.AssertNotNull(evaluationId, nameof(evaluationId));
            Argument.AssertNotNull(tenantId, nameof(tenantId));
            Argument.AssertNotNull(accountId, nameof(accountId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));
            Argument.AssertNotNull(userName, nameof(userName));
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(unauthenticatedSourceApplicationId, nameof(unauthenticatedSourceApplicationId));
            Argument.AssertNotNull(selectedSkills, nameof(selectedSkills));
            Argument.AssertNotNull(selectedSkillsets, nameof(selectedSkillsets));
            Argument.AssertNotNull(encryptedUserAccessToken, nameof(encryptedUserAccessToken));
            Argument.AssertNotNull(complianceFlags, nameof(complianceFlags));
            Argument.AssertNotNull(azureOpenAIExecutionContext, nameof(azureOpenAIExecutionContext));

            SessionId = sessionId;
            PromptId = promptId;
            EvaluationId = evaluationId;
            TenantId = tenantId;
            AccountId = accountId;
            WorkspaceId = workspaceId;
            UserName = userName;
            Source = source;
            UnauthenticatedSourceApplicationId = unauthenticatedSourceApplicationId;
            SelectedSkills = selectedSkills;
            SelectedSkillsets = selectedSkillsets.ToList();
            IsFidelisUser = isFidelisUser;
            InvocationType = invocationType;
            InvocationCategory = invocationCategory;
            EncryptedUserAccessToken = encryptedUserAccessToken;
            ComplianceFlags = complianceFlags;
            AzureOpenAIExecutionContext = azureOpenAIExecutionContext;
            PreviewState = previewState;
        }

        /// <summary> Initializes a new instance of MedeinaExecutionContext. </summary>
        /// <param name="sessionId"> The session id. </param>
        /// <param name="promptId"> The prompt id. </param>
        /// <param name="evaluationId"> The evaluation id. </param>
        /// <param name="tenantId"> The tenant id. </param>
        /// <param name="accountId"> The account id. </param>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="userName"> The display name of the user. </param>
        /// <param name="applicationId"> The Application Id that created the Session. </param>
        /// <param name="source"> The Source tag i.e. 'immersive'. </param>
        /// <param name="unauthenticatedSourceApplicationId"> The source application ID. </param>
        /// <param name="selectedSkills"> The selected skills. </param>
        /// <param name="selectedSkillsets"> The skillsets identified for execution during the evaluation process post skill selection. </param>
        /// <param name="isFidelisUser"> Indicates whether the context is for a user onboarded to Fidelis. </param>
        /// <param name="invocationType"> Indicates whether the evaluation is manually generated or user driven. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="encryptedUserAccessToken"> The encrypted token used to authenticate the user. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="azureOpenAIExecutionContext"> Contains the context for the Azure OpenAI requests such as the deployment id. </param>
        /// <param name="previewState"> Preview state of the execution context. </param>
        internal MedeinaExecutionContext(string sessionId, string promptId, string evaluationId, string tenantId, string accountId, string workspaceId, string userName, string applicationId, string source, string unauthenticatedSourceApplicationId, string selectedSkills, IReadOnlyList<string> selectedSkillsets, bool isFidelisUser, EvaluationInvocationType invocationType, EvaluationInvocationCategory invocationCategory, string encryptedUserAccessToken, ComplianceFlags complianceFlags, AzureOpenAIExecutionContext azureOpenAIExecutionContext, SkillPreviewState previewState)
        {
            SessionId = sessionId;
            PromptId = promptId;
            EvaluationId = evaluationId;
            TenantId = tenantId;
            AccountId = accountId;
            WorkspaceId = workspaceId;
            UserName = userName;
            ApplicationId = applicationId;
            Source = source;
            UnauthenticatedSourceApplicationId = unauthenticatedSourceApplicationId;
            SelectedSkills = selectedSkills;
            SelectedSkillsets = selectedSkillsets;
            IsFidelisUser = isFidelisUser;
            InvocationType = invocationType;
            InvocationCategory = invocationCategory;
            EncryptedUserAccessToken = encryptedUserAccessToken;
            ComplianceFlags = complianceFlags;
            AzureOpenAIExecutionContext = azureOpenAIExecutionContext;
            PreviewState = previewState;
        }

        /// <summary> The session id. </summary>
        public string SessionId { get; }
        /// <summary> The prompt id. </summary>
        public string PromptId { get; }
        /// <summary> The evaluation id. </summary>
        public string EvaluationId { get; }
        /// <summary> The tenant id. </summary>
        public string TenantId { get; }
        /// <summary> The account id. </summary>
        public string AccountId { get; }
        /// <summary> The workspace id. </summary>
        public string WorkspaceId { get; }
        /// <summary> The display name of the user. </summary>
        public string UserName { get; }
        /// <summary> The Application Id that created the Session. </summary>
        public string ApplicationId { get; }
        /// <summary> The Source tag i.e. 'immersive'. </summary>
        public string Source { get; }
        /// <summary> The source application ID. </summary>
        public string UnauthenticatedSourceApplicationId { get; }
        /// <summary> The selected skills. </summary>
        public string SelectedSkills { get; }
        /// <summary> The skillsets identified for execution during the evaluation process post skill selection. </summary>
        public IReadOnlyList<string> SelectedSkillsets { get; }
        /// <summary> Indicates whether the context is for a user onboarded to Fidelis. </summary>
        public bool IsFidelisUser { get; }
        /// <summary> Indicates whether the evaluation is manually generated or user driven. </summary>
        public EvaluationInvocationType InvocationType { get; }
        /// <summary> Indicates whether the evaluation is from a Prompt or a Promptbook. </summary>
        public EvaluationInvocationCategory InvocationCategory { get; }
        /// <summary> The encrypted token used to authenticate the user. </summary>
        public string EncryptedUserAccessToken { get; }
        /// <summary> Compliance flags for logging. </summary>
        public ComplianceFlags ComplianceFlags { get; }
        /// <summary> Contains the context for the Azure OpenAI requests such as the deployment id. </summary>
        public AzureOpenAIExecutionContext AzureOpenAIExecutionContext { get; }
        /// <summary> Preview state of the execution context. </summary>
        public SkillPreviewState PreviewState { get; }
    }
}
