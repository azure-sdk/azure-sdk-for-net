// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class MedeinaExecutionContext
    {
        internal static MedeinaExecutionContext DeserializeMedeinaExecutionContext(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string sessionId = default;
            string promptId = default;
            string evaluationId = default;
            string tenantId = default;
            string accountId = default;
            string workspaceId = default;
            string userName = default;
            Optional<string> applicationId = default;
            string source = default;
            string unauthenticatedSourceApplicationId = default;
            string selectedSkills = default;
            IReadOnlyList<string> selectedSkillsets = default;
            bool isFidelisUser = default;
            EvaluationInvocationType invocationType = default;
            EvaluationInvocationCategory invocationCategory = default;
            string encryptedUserAccessToken = default;
            ComplianceFlags complianceFlags = default;
            AzureOpenAIExecutionContext azureOpenAIExecutionContext = default;
            SkillPreviewState previewState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("SessionId"u8))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("PromptId"u8))
                {
                    promptId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("EvaluationId"u8))
                {
                    evaluationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("TenantId"u8))
                {
                    tenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("AccountId"u8))
                {
                    accountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("WorkspaceId"u8))
                {
                    workspaceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("UserName"u8))
                {
                    userName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ApplicationId"u8))
                {
                    applicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Source"u8))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("UnauthenticatedSourceApplicationId"u8))
                {
                    unauthenticatedSourceApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("SelectedSkills"u8))
                {
                    selectedSkills = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("SelectedSkillsets"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    selectedSkillsets = array;
                    continue;
                }
                if (property.NameEquals("IsFidelisUser"u8))
                {
                    isFidelisUser = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("InvocationType"u8))
                {
                    invocationType = new EvaluationInvocationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("InvocationCategory"u8))
                {
                    invocationCategory = new EvaluationInvocationCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("EncryptedUserAccessToken"u8))
                {
                    encryptedUserAccessToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ComplianceFlags"u8))
                {
                    complianceFlags = ComplianceFlags.DeserializeComplianceFlags(property.Value);
                    continue;
                }
                if (property.NameEquals("AzureOpenAIExecutionContext"u8))
                {
                    azureOpenAIExecutionContext = AzureOpenAIExecutionContext.DeserializeAzureOpenAIExecutionContext(property.Value);
                    continue;
                }
                if (property.NameEquals("PreviewState"u8))
                {
                    previewState = new SkillPreviewState(property.Value.GetString());
                    continue;
                }
            }
            return new MedeinaExecutionContext(sessionId, promptId, evaluationId, tenantId, accountId, workspaceId, userName, applicationId.Value, source, unauthenticatedSourceApplicationId, selectedSkills, selectedSkillsets, isFidelisUser, invocationType, invocationCategory, encryptedUserAccessToken, complianceFlags, azureOpenAIExecutionContext, previewState);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MedeinaExecutionContext FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMedeinaExecutionContext(document.RootElement);
        }
    }
}
