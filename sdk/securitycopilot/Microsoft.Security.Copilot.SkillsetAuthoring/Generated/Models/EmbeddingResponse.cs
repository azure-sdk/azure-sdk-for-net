// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> The EmbeddingResponse. </summary>
    public partial class EmbeddingResponse
    {
        /// <summary> Initializes a new instance of EmbeddingResponse. </summary>
        /// <param name="data"></param>
        /// <param name="model"></param>
        /// <param name="object"></param>
        /// <param name="usage"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/>, <paramref name="model"/>, <paramref name="object"/> or <paramref name="usage"/> is null. </exception>
        internal EmbeddingResponse(IEnumerable<EmbeddingData> data, string model, string @object, BinaryData usage)
        {
            Argument.AssertNotNull(data, nameof(data));
            Argument.AssertNotNull(model, nameof(model));
            Argument.AssertNotNull(@object, nameof(@object));
            Argument.AssertNotNull(usage, nameof(usage));

            Data = data.ToList();
            Model = model;
            Object = @object;
            Usage = usage;
        }

        /// <summary> Initializes a new instance of EmbeddingResponse. </summary>
        /// <param name="data"></param>
        /// <param name="model"></param>
        /// <param name="object"></param>
        /// <param name="usage"></param>
        internal EmbeddingResponse(IReadOnlyList<EmbeddingData> data, string model, string @object, BinaryData usage)
        {
            Data = data;
            Model = model;
            Object = @object;
            Usage = usage;
        }

        /// <summary> Gets the data. </summary>
        public IReadOnlyList<EmbeddingData> Data { get; }
        /// <summary> Gets the model. </summary>
        public string Model { get; }
        /// <summary> Gets the object. </summary>
        public string Object { get; }
        /// <summary>
        /// Gets the usage
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Usage { get; }
    }
}
