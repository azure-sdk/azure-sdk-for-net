// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class SkillsetDescriptor
    {
        internal static SkillsetDescriptor DeserializeSkillsetDescriptor(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string @namespace = default;
            string name = default;
            string description = default;
            string descriptionDisplay = default;
            string disaplyName = default;
            string icon = default;
            SkillsetCategory category = default;
            SkillsetCatalogScope catalogScope = default;
            bool enabled = default;
            bool hidden = default;
            IReadOnlyList<string> prerequisites = default;
            IReadOnlyList<SkillsetSetting> settings = default;
            SkillsetAuth authorization = default;
            IReadOnlyList<SkillsetAuthType> supportedAuthTypes = default;
            IReadOnlyList<string> userVisibilityFeatureFlags = default;
            SkillVisibility userVisibility = default;
            IReadOnlyList<string> plannerVisibilityFeatureFlags = default;
            SkillVisibility plannerVisibility = default;
            string creatorUserId = default;
            string ownersGroupId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("descriptionDisplay"u8))
                {
                    descriptionDisplay = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disaplyName"u8))
                {
                    disaplyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("icon"u8))
                {
                    icon = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = new SkillsetCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("catalogScope"u8))
                {
                    catalogScope = new SkillsetCatalogScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enabled"u8))
                {
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hidden"u8))
                {
                    hidden = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("prerequisites"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        prerequisites = new ChangeTrackingList<string>();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    prerequisites = array;
                    continue;
                }
                if (property.NameEquals("settings"u8))
                {
                    List<SkillsetSetting> array = new List<SkillsetSetting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkillsetSetting.DeserializeSkillsetSetting(item));
                    }
                    settings = array;
                    continue;
                }
                if (property.NameEquals("authorization"u8))
                {
                    authorization = SkillsetAuth.DeserializeSkillsetAuth(property.Value);
                    continue;
                }
                if (property.NameEquals("supportedAuthTypes"u8))
                {
                    List<SkillsetAuthType> array = new List<SkillsetAuthType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SkillsetAuthType(item.GetString()));
                    }
                    supportedAuthTypes = array;
                    continue;
                }
                if (property.NameEquals("userVisibilityFeatureFlags"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    userVisibilityFeatureFlags = array;
                    continue;
                }
                if (property.NameEquals("userVisibility"u8))
                {
                    userVisibility = new SkillVisibility(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("plannerVisibilityFeatureFlags"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    plannerVisibilityFeatureFlags = array;
                    continue;
                }
                if (property.NameEquals("plannerVisibility"u8))
                {
                    plannerVisibility = new SkillVisibility(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("creatorUserId"u8))
                {
                    creatorUserId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ownersGroupId"u8))
                {
                    ownersGroupId = property.Value.GetString();
                    continue;
                }
            }
            return new SkillsetDescriptor(@namespace, name, description, descriptionDisplay, disaplyName, icon, category, catalogScope, enabled, hidden, prerequisites, settings, authorization, supportedAuthTypes, userVisibilityFeatureFlags, userVisibility, plannerVisibilityFeatureFlags, plannerVisibility, creatorUserId, ownersGroupId);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SkillsetDescriptor FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSkillsetDescriptor(document.RootElement);
        }
    }
}
