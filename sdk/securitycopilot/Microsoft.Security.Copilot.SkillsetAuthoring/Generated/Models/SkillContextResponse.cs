// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> SkillContext object containing properties of the current session relevant to the invoked skill. </summary>
    public partial class SkillContextResponse
    {
        /// <summary> Initializes a new instance of SkillContextResponse. </summary>
        /// <param name="descriptor"> Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute the skill). </param>
        /// <param name="id"> SkillContext Id. </param>
        /// <param name="featureFlags"> Array of feature flags. </param>
        /// <param name="inputs"> Skill Variable Collection. </param>
        /// <param name="properties"> Additional skill specific settings. </param>
        /// <param name="startTime"> TODO. </param>
        /// <param name="tenantId"> Tenant id of tenant in which skill invocation occured. </param>
        /// <param name="userId"> User id of user that invoked the skill. </param>
        /// <param name="sessionId"> Current session ID. </param>
        /// <param name="promptId"> Current prompt ID. </param>
        /// <param name="evaluationId"> Current evaluation ID. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="workspaceId"> Fidelis Workspace Id. </param>
        /// <param name="source"> Originating source tag for the evaluation (i.e. Immersive, Logic Apps, etc.). </param>
        /// <param name="invocationType"> Indicates whether the evaluation is user driven or automated. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="userName"> Username of the user that invoked the skill. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="descriptor"/>, <paramref name="id"/>, <paramref name="featureFlags"/>, <paramref name="inputs"/>, <paramref name="properties"/>, <paramref name="tenantId"/>, <paramref name="userId"/>, <paramref name="sessionId"/>, <paramref name="promptId"/>, <paramref name="evaluationId"/>, <paramref name="complianceFlags"/>, <paramref name="workspaceId"/>, <paramref name="source"/> or <paramref name="userName"/> is null. </exception>
        internal SkillContextResponse(SkillDescriptor descriptor, string id, IEnumerable<string> featureFlags, IReadOnlyDictionary<string, SkillVariable> inputs, IReadOnlyDictionary<string, string> properties, DateTimeOffset startTime, string tenantId, string userId, string sessionId, string promptId, string evaluationId, ComplianceFlags complianceFlags, string workspaceId, string source, EvaluationInvocationType invocationType, EvaluationInvocationCategory invocationCategory, string userName)
        {
            Argument.AssertNotNull(descriptor, nameof(descriptor));
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(featureFlags, nameof(featureFlags));
            Argument.AssertNotNull(inputs, nameof(inputs));
            Argument.AssertNotNull(properties, nameof(properties));
            Argument.AssertNotNull(tenantId, nameof(tenantId));
            Argument.AssertNotNull(userId, nameof(userId));
            Argument.AssertNotNull(sessionId, nameof(sessionId));
            Argument.AssertNotNull(promptId, nameof(promptId));
            Argument.AssertNotNull(evaluationId, nameof(evaluationId));
            Argument.AssertNotNull(complianceFlags, nameof(complianceFlags));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(userName, nameof(userName));

            Descriptor = descriptor;
            Id = id;
            FeatureFlags = featureFlags.ToList();
            Inputs = inputs;
            Properties = properties;
            StartTime = startTime;
            TenantId = tenantId;
            UserId = userId;
            SessionId = sessionId;
            PromptId = promptId;
            EvaluationId = evaluationId;
            ComplianceFlags = complianceFlags;
            WorkspaceId = workspaceId;
            Source = source;
            InvocationType = invocationType;
            InvocationCategory = invocationCategory;
            UserName = userName;
        }

        /// <summary> Initializes a new instance of SkillContextResponse. </summary>
        /// <param name="descriptor"> Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute the skill). </param>
        /// <param name="id"> SkillContext Id. </param>
        /// <param name="featureFlags"> Array of feature flags. </param>
        /// <param name="inputs"> Skill Variable Collection. </param>
        /// <param name="properties"> Additional skill specific settings. </param>
        /// <param name="startTime"> TODO. </param>
        /// <param name="tenantId"> Tenant id of tenant in which skill invocation occured. </param>
        /// <param name="userId"> User id of user that invoked the skill. </param>
        /// <param name="sessionId"> Current session ID. </param>
        /// <param name="promptId"> Current prompt ID. </param>
        /// <param name="evaluationId"> Current evaluation ID. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="workspaceId"> Fidelis Workspace Id. </param>
        /// <param name="source"> Originating source tag for the evaluation (i.e. Immersive, Logic Apps, etc.). </param>
        /// <param name="invocationType"> Indicates whether the evaluation is user driven or automated. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="userName"> Username of the user that invoked the skill. </param>
        internal SkillContextResponse(SkillDescriptor descriptor, string id, IReadOnlyList<string> featureFlags, IReadOnlyDictionary<string, SkillVariable> inputs, IReadOnlyDictionary<string, string> properties, DateTimeOffset startTime, string tenantId, string userId, string sessionId, string promptId, string evaluationId, ComplianceFlags complianceFlags, string workspaceId, string source, EvaluationInvocationType invocationType, EvaluationInvocationCategory invocationCategory, string userName)
        {
            Descriptor = descriptor;
            Id = id;
            FeatureFlags = featureFlags;
            Inputs = inputs;
            Properties = properties;
            StartTime = startTime;
            TenantId = tenantId;
            UserId = userId;
            SessionId = sessionId;
            PromptId = promptId;
            EvaluationId = evaluationId;
            ComplianceFlags = complianceFlags;
            WorkspaceId = workspaceId;
            Source = source;
            InvocationType = invocationType;
            InvocationCategory = invocationCategory;
            UserName = userName;
        }

        /// <summary> Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute the skill). </summary>
        public SkillDescriptor Descriptor { get; }
        /// <summary> SkillContext Id. </summary>
        public string Id { get; }
        /// <summary> Array of feature flags. </summary>
        public IReadOnlyList<string> FeatureFlags { get; }
        /// <summary> Skill Variable Collection. </summary>
        public IReadOnlyDictionary<string, SkillVariable> Inputs { get; }
        /// <summary> Additional skill specific settings. </summary>
        public IReadOnlyDictionary<string, string> Properties { get; }
        /// <summary> TODO. </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary> Tenant id of tenant in which skill invocation occured. </summary>
        public string TenantId { get; }
        /// <summary> User id of user that invoked the skill. </summary>
        public string UserId { get; }
        /// <summary> Current session ID. </summary>
        public string SessionId { get; }
        /// <summary> Current prompt ID. </summary>
        public string PromptId { get; }
        /// <summary> Current evaluation ID. </summary>
        public string EvaluationId { get; }
        /// <summary> Compliance flags for logging. </summary>
        public ComplianceFlags ComplianceFlags { get; }
        /// <summary> Fidelis Workspace Id. </summary>
        public string WorkspaceId { get; }
        /// <summary> Originating source tag for the evaluation (i.e. Immersive, Logic Apps, etc.). </summary>
        public string Source { get; }
        /// <summary> Indicates whether the evaluation is user driven or automated. </summary>
        public EvaluationInvocationType InvocationType { get; }
        /// <summary> Indicates whether the evaluation is from a Prompt or a Promptbook. </summary>
        public EvaluationInvocationCategory InvocationCategory { get; }
        /// <summary> Username of the user that invoked the skill. </summary>
        public string UserName { get; }
    }
}
