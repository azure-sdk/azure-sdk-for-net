// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class Message : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Content))
            {
                writer.WritePropertyName("Content"u8);
                writer.WriteStringValue(Content);
            }
            writer.WritePropertyName("Role"u8);
            writer.WriteStringValue(Role);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("Name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(FunctionCall))
            {
                writer.WritePropertyName("FunctionCall"u8);
                writer.WriteObjectValue(FunctionCall);
            }
            if (Optional.IsCollectionDefined(ToolCalls))
            {
                writer.WritePropertyName("ToolCalls"u8);
                writer.WriteStartArray();
                foreach (var item in ToolCalls)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ToolCallId))
            {
                writer.WritePropertyName("ToolCallId"u8);
                writer.WriteStringValue(ToolCallId);
            }
            writer.WriteEndObject();
        }

        internal static Message DeserializeMessage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> content = default;
            string role = default;
            Optional<string> name = default;
            Optional<FunctionCall> functionCall = default;
            Optional<IList<ToolCall>> toolCalls = default;
            Optional<string> toolCallId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Content"u8))
                {
                    content = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Role"u8))
                {
                    role = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("FunctionCall"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    functionCall = FunctionCall.DeserializeFunctionCall(property.Value);
                    continue;
                }
                if (property.NameEquals("ToolCalls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ToolCall> array = new List<ToolCall>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ToolCall.DeserializeToolCall(item));
                    }
                    toolCalls = array;
                    continue;
                }
                if (property.NameEquals("ToolCallId"u8))
                {
                    toolCallId = property.Value.GetString();
                    continue;
                }
            }
            return new Message(content.Value, role, name.Value, functionCall.Value, Optional.ToList(toolCalls), toolCallId.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Message FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMessage(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
