// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class SkillSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("sourceContent"u8);
            writer.WriteStringValue(SourceContent);
            writer.WritePropertyName("sourceType"u8);
            writer.WriteStringValue(SourceType.ToString());
            if (Optional.IsDefined(SourceSerializedData))
            {
                if (SourceSerializedData != null)
                {
                    writer.WritePropertyName("sourceSerializedData"u8);
                    writer.WriteStringValue(SourceSerializedData);
                }
                else
                {
                    writer.WriteNull("sourceSerializedData");
                }
            }
            writer.WriteEndObject();
        }

        internal static SkillSource DeserializeSkillSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string displayName = default;
            string sourceContent = default;
            SkillSourceType sourceType = default;
            Optional<string> sourceSerializedData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceContent"u8))
                {
                    sourceContent = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceType"u8))
                {
                    sourceType = new SkillSourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceSerializedData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceSerializedData = null;
                        continue;
                    }
                    sourceSerializedData = property.Value.GetString();
                    continue;
                }
            }
            return new SkillSource(displayName, sourceContent, sourceType, sourceSerializedData.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SkillSource FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSkillSource(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
