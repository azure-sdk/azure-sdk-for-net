// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Used to configure the preview state of a skill. </summary>
    public readonly partial struct SkillPreviewState : IEquatable<SkillPreviewState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillPreviewState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillPreviewState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GAValue = "GA";
        private const string PublicValue = "Public";
        private const string PrivateValue = "Private";

        /// <summary> GA. </summary>
        public static SkillPreviewState GA { get; } = new SkillPreviewState(GAValue);
        /// <summary> Public. </summary>
        public static SkillPreviewState Public { get; } = new SkillPreviewState(PublicValue);
        /// <summary> Private. </summary>
        public static SkillPreviewState Private { get; } = new SkillPreviewState(PrivateValue);
        /// <summary> Determines if two <see cref="SkillPreviewState"/> values are the same. </summary>
        public static bool operator ==(SkillPreviewState left, SkillPreviewState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillPreviewState"/> values are not the same. </summary>
        public static bool operator !=(SkillPreviewState left, SkillPreviewState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillPreviewState"/>. </summary>
        public static implicit operator SkillPreviewState(string value) => new SkillPreviewState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillPreviewState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillPreviewState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
