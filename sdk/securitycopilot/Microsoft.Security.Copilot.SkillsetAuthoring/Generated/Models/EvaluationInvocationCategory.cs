// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Evaluation Invocation Category. </summary>
    public readonly partial struct EvaluationInvocationCategory : IEquatable<EvaluationInvocationCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EvaluationInvocationCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EvaluationInvocationCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserPromptValue = "UserPrompt";
        private const string PromptbooksValue = "Promptbooks";

        /// <summary> Generated from a Prompt. </summary>
        public static EvaluationInvocationCategory UserPrompt { get; } = new EvaluationInvocationCategory(UserPromptValue);
        /// <summary> Generated from a Promptbook. </summary>
        public static EvaluationInvocationCategory Promptbooks { get; } = new EvaluationInvocationCategory(PromptbooksValue);
        /// <summary> Determines if two <see cref="EvaluationInvocationCategory"/> values are the same. </summary>
        public static bool operator ==(EvaluationInvocationCategory left, EvaluationInvocationCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EvaluationInvocationCategory"/> values are not the same. </summary>
        public static bool operator !=(EvaluationInvocationCategory left, EvaluationInvocationCategory right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EvaluationInvocationCategory"/>. </summary>
        public static implicit operator EvaluationInvocationCategory(string value) => new EvaluationInvocationCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EvaluationInvocationCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EvaluationInvocationCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
