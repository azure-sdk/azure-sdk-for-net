// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Security.Copilot.SkillsetAuthoring.Models;

namespace Microsoft.Security.Copilot.SkillsetAuthoring
{
    // Data plane generated client.
    /// <summary>
    /// The Skillset Authoring API exposes endpoints allowing a skill to interact with the current session to perform actions such as accessing previous prompts/responses within the current session,
    /// reading the inputs of the skill, invoking other skills, reporting progress of execution, returning results/errors, acquiring tokens to access other resources, and retrieving skill specific settings. It also provides methods to interact with Open
    /// AI client to create chat completion and get embeddings.
    /// </summary>
    public partial class SkillContextClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of SkillContextClient for mocking. </summary>
        protected SkillContextClient()
        {
        }

        /// <summary> Initializes a new instance of SkillContextClient. </summary>
        /// <param name="endpoint">
        /// Supported Security Copilot API endpoints (protocol and host name, such as
        /// https://api.medeina-dev.defender.microsoft.com).
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SkillContextClient(Uri endpoint) : this(endpoint, new SkillContextClientOptions())
        {
        }

        /// <summary> Initializes a new instance of SkillContextClient. </summary>
        /// <param name="endpoint">
        /// Supported Security Copilot API endpoints (protocol and host name, such as
        /// https://api.medeina-dev.defender.microsoft.com).
        /// </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public SkillContextClient(Uri endpoint, SkillContextClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SkillContextClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get the SkillContext for the current skill invocation. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillContextAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<SkillContextResponse>> GetSkillContextAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillContextAsync(evaluationToken, context).ConfigureAwait(false);
            return Response.FromValue(SkillContextResponse.FromResponse(response), response);
        }

        /// <summary> Get the SkillContext for the current skill invocation. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillContext(string,CancellationToken)']/*" />
        public virtual Response<SkillContextResponse> GetSkillContext(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillContext(evaluationToken, context);
            return Response.FromValue(SkillContextResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get the SkillContext for the current skill invocation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillContextAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillContextAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillContextAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillContext");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillContextRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the SkillContext for the current skill invocation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillContext(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillContext(string,RequestContext)']/*" />
        public virtual Response GetSkillContext(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillContext");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillContextRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Invokes a skill. Allows current skill to invoke dependency skills. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="invokeSkill"> The InvokeSkillRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="invokeSkill"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='InvokeSkillAsync(string,InvokeSkillRequest,CancellationToken)']/*" />
        public virtual async Task<Response<OutputSkillVariable>> InvokeSkillAsync(string evaluationToken, InvokeSkillRequest invokeSkill, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(invokeSkill, nameof(invokeSkill));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await InvokeSkillAsync(evaluationToken, invokeSkill.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(OutputSkillVariable.FromResponse(response), response);
        }

        /// <summary> Invokes a skill. Allows current skill to invoke dependency skills. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="invokeSkill"> The InvokeSkillRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="invokeSkill"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='InvokeSkill(string,InvokeSkillRequest,CancellationToken)']/*" />
        public virtual Response<OutputSkillVariable> InvokeSkill(string evaluationToken, InvokeSkillRequest invokeSkill, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(invokeSkill, nameof(invokeSkill));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = InvokeSkill(evaluationToken, invokeSkill.ToRequestContent(), context);
            return Response.FromValue(OutputSkillVariable.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Invokes a skill. Allows current skill to invoke dependency skills.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="InvokeSkillAsync(string,InvokeSkillRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='InvokeSkillAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> InvokeSkillAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.InvokeSkill");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInvokeSkillRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Invokes a skill. Allows current skill to invoke dependency skills.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="InvokeSkill(string,InvokeSkillRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='InvokeSkill(string,RequestContent,RequestContext)']/*" />
        public virtual Response InvokeSkill(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.InvokeSkill");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInvokeSkillRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get skill descriptor. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="skillName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="skillName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="skillName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptorAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<SkillDescriptor>> GetSkillDescriptorAsync(string evaluationToken, string skillName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNullOrEmpty(skillName, nameof(skillName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillDescriptorAsync(evaluationToken, skillName, context).ConfigureAwait(false);
            return Response.FromValue(SkillDescriptor.FromResponse(response), response);
        }

        /// <summary> Get skill descriptor. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="skillName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="skillName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="skillName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptor(string,string,CancellationToken)']/*" />
        public virtual Response<SkillDescriptor> GetSkillDescriptor(string evaluationToken, string skillName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNullOrEmpty(skillName, nameof(skillName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillDescriptor(evaluationToken, skillName, context);
            return Response.FromValue(SkillDescriptor.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get skill descriptor
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillDescriptorAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptorAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillDescriptorAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillDescriptor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillDescriptorRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get skill descriptor
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillDescriptor(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptor(string,RequestContent,RequestContext)']/*" />
        public virtual Response GetSkillDescriptor(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillDescriptor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillDescriptorRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get skill descriptors. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptorsAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<SkillDescriptor>>> GetSkillDescriptorsAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillDescriptorsAsync(evaluationToken, context).ConfigureAwait(false);
            IReadOnlyList<SkillDescriptor> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<SkillDescriptor> array = new List<SkillDescriptor>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(SkillDescriptor.DeserializeSkillDescriptor(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Get skill descriptors. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptors(string,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<SkillDescriptor>> GetSkillDescriptors(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillDescriptors(evaluationToken, context);
            IReadOnlyList<SkillDescriptor> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<SkillDescriptor> array = new List<SkillDescriptor>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(SkillDescriptor.DeserializeSkillDescriptor(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Get skill descriptors
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillDescriptorsAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptorsAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillDescriptorsAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillDescriptors");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillDescriptorsRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get skill descriptors
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillDescriptors(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillDescriptors(string,RequestContext)']/*" />
        public virtual Response GetSkillDescriptors(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillDescriptors");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillDescriptorsRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get skillset descriptors. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetDescriptorsAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyList<SkillsetDescriptor>>> GetSkillsetDescriptorsAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillsetDescriptorsAsync(evaluationToken, context).ConfigureAwait(false);
            IReadOnlyList<SkillsetDescriptor> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            List<SkillsetDescriptor> array = new List<SkillsetDescriptor>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(SkillsetDescriptor.DeserializeSkillsetDescriptor(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary> Get skillset descriptors. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetDescriptors(string,CancellationToken)']/*" />
        public virtual Response<IReadOnlyList<SkillsetDescriptor>> GetSkillsetDescriptors(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillsetDescriptors(evaluationToken, context);
            IReadOnlyList<SkillsetDescriptor> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            List<SkillsetDescriptor> array = new List<SkillsetDescriptor>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(SkillsetDescriptor.DeserializeSkillsetDescriptor(item));
            }
            value = array;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Get skillset descriptors
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetDescriptorsAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetDescriptorsAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillsetDescriptorsAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetDescriptors");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetDescriptorsRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get skillset descriptors
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetDescriptors(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetDescriptors(string,RequestContext)']/*" />
        public virtual Response GetSkillsetDescriptors(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetDescriptors");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetDescriptorsRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get execution context. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetExecutionContextAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<MedeinaExecutionContext>> GetExecutionContextAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetExecutionContextAsync(evaluationToken, context).ConfigureAwait(false);
            return Response.FromValue(MedeinaExecutionContext.FromResponse(response), response);
        }

        /// <summary> Get execution context. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetExecutionContext(string,CancellationToken)']/*" />
        public virtual Response<MedeinaExecutionContext> GetExecutionContext(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetExecutionContext(evaluationToken, context);
            return Response.FromValue(MedeinaExecutionContext.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get execution context
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExecutionContextAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetExecutionContextAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetExecutionContextAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetExecutionContext");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExecutionContextRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get execution context
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExecutionContext(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetExecutionContext(string,RequestContext)']/*" />
        public virtual Response GetExecutionContext(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetExecutionContext");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExecutionContextRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get prompt history. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetPromptHistoryAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<PromptHistoryResponse>> GetPromptHistoryAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPromptHistoryAsync(evaluationToken, context).ConfigureAwait(false);
            return Response.FromValue(PromptHistoryResponse.FromResponse(response), response);
        }

        /// <summary> Get prompt history. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetPromptHistory(string,CancellationToken)']/*" />
        public virtual Response<PromptHistoryResponse> GetPromptHistory(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPromptHistory(evaluationToken, context);
            return Response.FromValue(PromptHistoryResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get prompt history
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPromptHistoryAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetPromptHistoryAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetPromptHistoryAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetPromptHistory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPromptHistoryRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get prompt history
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPromptHistory(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetPromptHistory(string,RequestContext)']/*" />
        public virtual Response GetPromptHistory(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetPromptHistory");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPromptHistoryRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Log a progress message for a skill invocation. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="logProgressRequest"> The LogProgressRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="logProgressRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='LogProgressAsync(string,LogProgressRequest,CancellationToken)']/*" />
        public virtual async Task<Response> LogProgressAsync(string evaluationToken, LogProgressRequest logProgressRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(logProgressRequest, nameof(logProgressRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await LogProgressAsync(evaluationToken, logProgressRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Log a progress message for a skill invocation. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="logProgressRequest"> The LogProgressRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="logProgressRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='LogProgress(string,LogProgressRequest,CancellationToken)']/*" />
        public virtual Response LogProgress(string evaluationToken, LogProgressRequest logProgressRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(logProgressRequest, nameof(logProgressRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = LogProgress(evaluationToken, logProgressRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Log a progress message for a skill invocation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="LogProgressAsync(string,LogProgressRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='LogProgressAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> LogProgressAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.LogProgress");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLogProgressRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Log a progress message for a skill invocation
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="LogProgress(string,LogProgressRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='LogProgress(string,RequestContent,RequestContext)']/*" />
        public virtual Response LogProgress(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.LogProgress");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLogProgressRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sets the skill output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="evaluationResultOutput"> The EvaluationResultOutput to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="evaluationResultOutput"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillOutputAsync(string,EvaluationResultOutput,CancellationToken)']/*" />
        public virtual async Task<Response> SetSkillOutputAsync(string evaluationToken, EvaluationResultOutput evaluationResultOutput, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(evaluationResultOutput, nameof(evaluationResultOutput));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SetSkillOutputAsync(evaluationToken, evaluationResultOutput.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Sets the skill output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="evaluationResultOutput"> The EvaluationResultOutput to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="evaluationResultOutput"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillOutput(string,EvaluationResultOutput,CancellationToken)']/*" />
        public virtual Response SetSkillOutput(string evaluationToken, EvaluationResultOutput evaluationResultOutput, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(evaluationResultOutput, nameof(evaluationResultOutput));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SetSkillOutput(evaluationToken, evaluationResultOutput.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Sets the skill output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetSkillOutputAsync(string,EvaluationResultOutput,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillOutputAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> SetSkillOutputAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillOutput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillOutputRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Sets the skill output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetSkillOutput(string,EvaluationResultOutput,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillOutput(string,RequestContent,RequestContext)']/*" />
        public virtual Response SetSkillOutput(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillOutput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillOutputRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the skillset settings. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetSettingsAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<IReadOnlyDictionary<string, string>>> GetSkillsetSettingsAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillsetSettingsAsync(evaluationToken, context).ConfigureAwait(false);
            IReadOnlyDictionary<string, string> value = default;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            foreach (var property in document.RootElement.EnumerateObject())
            {
                dictionary.Add(property.Name, property.Value.GetString());
            }
            value = dictionary;
            return Response.FromValue(value, response);
        }

        /// <summary> Gets the skillset settings. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetSettings(string,CancellationToken)']/*" />
        public virtual Response<IReadOnlyDictionary<string, string>> GetSkillsetSettings(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillsetSettings(evaluationToken, context);
            IReadOnlyDictionary<string, string> value = default;
            using var document = JsonDocument.Parse(response.ContentStream);
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            foreach (var property in document.RootElement.EnumerateObject())
            {
                dictionary.Add(property.Name, property.Value.GetString());
            }
            value = dictionary;
            return Response.FromValue(value, response);
        }

        /// <summary>
        /// [Protocol Method] Gets the skillset settings
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetSettingsAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetSettingsAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillsetSettingsAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetSettingsRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the skillset settings
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetSettings(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetSettings(string,RequestContext)']/*" />
        public virtual Response GetSkillsetSettings(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetSettingsRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Notifies security copilot backend service that the skill has been invoked
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillInvocationStartedAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> SetSkillInvocationStartedAsync(string evaluationToken, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillInvocationStarted");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillInvocationStartedRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Notifies security copilot backend service that the skill has been invoked
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillInvocationStarted(string,RequestContext)']/*" />
        public virtual Response SetSkillInvocationStarted(string evaluationToken, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillInvocationStarted");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillInvocationStartedRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Notifies security copilot backend service that the skill invocation has completed
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillInvocationCompletedAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> SetSkillInvocationCompletedAsync(string evaluationToken, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillInvocationCompleted");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillInvocationCompletedRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Notifies security copilot backend service that the skill invocation has completed
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetSkillInvocationCompleted(string,RequestContext)']/*" />
        public virtual Response SetSkillInvocationCompleted(string evaluationToken, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetSkillInvocationCompleted");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSkillInvocationCompletedRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the skillset auth related information. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetAuthInfoAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<AuthDetails>> GetSkillsetAuthInfoAsync(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetSkillsetAuthInfoAsync(evaluationToken, context).ConfigureAwait(false);
            return Response.FromValue(AuthDetails.FromResponse(response), response);
        }

        /// <summary> Gets the skillset auth related information. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetAuthInfo(string,CancellationToken)']/*" />
        public virtual Response<AuthDetails> GetSkillsetAuthInfo(string evaluationToken, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetSkillsetAuthInfo(evaluationToken, context);
            return Response.FromValue(AuthDetails.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the skillset auth related information
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetAuthInfoAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetAuthInfoAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetSkillsetAuthInfoAsync(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetAuthInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetAuthInfoRequest(evaluationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the skillset auth related information
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSkillsetAuthInfo(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetSkillsetAuthInfo(string,RequestContext)']/*" />
        public virtual Response GetSkillsetAuthInfo(string evaluationToken, RequestContext context)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetSkillsetAuthInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSkillsetAuthInfoRequest(evaluationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the token credentials. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="getTokenCredentialRequest"> The GetTokenCredentialRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="getTokenCredentialRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetTokenCredentialAsync(string,GetTokenCredentialRequest,CancellationToken)']/*" />
        public virtual async Task<Response<Models.AccessToken>> GetTokenCredentialAsync(string evaluationToken, GetTokenCredentialRequest getTokenCredentialRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(getTokenCredentialRequest, nameof(getTokenCredentialRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTokenCredentialAsync(evaluationToken, getTokenCredentialRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Models.AccessToken.FromResponse(response), response);
        }

        /// <summary> Gets the token credentials. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="getTokenCredentialRequest"> The GetTokenCredentialRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="getTokenCredentialRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetTokenCredential(string,GetTokenCredentialRequest,CancellationToken)']/*" />
        public virtual Response<Models.AccessToken> GetTokenCredential(string evaluationToken, GetTokenCredentialRequest getTokenCredentialRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(getTokenCredentialRequest, nameof(getTokenCredentialRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTokenCredential(evaluationToken, getTokenCredentialRequest.ToRequestContent(), context);
            return Response.FromValue(Models.AccessToken.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the token credentials
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTokenCredentialAsync(string,GetTokenCredentialRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetTokenCredentialAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetTokenCredentialAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetTokenCredential");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTokenCredentialRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the token credentials
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTokenCredential(string,GetTokenCredentialRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetTokenCredential(string,RequestContent,RequestContext)']/*" />
        public virtual Response GetTokenCredential(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetTokenCredential");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTokenCredentialRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the skill input. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="getInputRequest"> The GetInputRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="getInputRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetInputAsync(string,GetInputRequest,CancellationToken)']/*" />
        public virtual async Task<Response<SkillVariable>> GetInputAsync(string evaluationToken, GetInputRequest getInputRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(getInputRequest, nameof(getInputRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetInputAsync(evaluationToken, getInputRequest.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(SkillVariable.FromResponse(response), response);
        }

        /// <summary> Gets the skill input. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="getInputRequest"> The GetInputRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="getInputRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetInput(string,GetInputRequest,CancellationToken)']/*" />
        public virtual Response<SkillVariable> GetInput(string evaluationToken, GetInputRequest getInputRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(getInputRequest, nameof(getInputRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetInput(evaluationToken, getInputRequest.ToRequestContent(), context);
            return Response.FromValue(SkillVariable.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the skill input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetInputAsync(string,GetInputRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetInputAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> GetInputAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetInput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetInputRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the skill input
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetInput(string,GetInputRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='GetInput(string,RequestContent,RequestContext)']/*" />
        public virtual Response GetInput(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.GetInput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetInputRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sets the input for the skill. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="setInputRequest"> The SetInputRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="setInputRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetInputAsync(string,SetInputRequest,CancellationToken)']/*" />
        public virtual async Task<Response> SetInputAsync(string evaluationToken, SetInputRequest setInputRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(setInputRequest, nameof(setInputRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SetInputAsync(evaluationToken, setInputRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Sets the input for the skill. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="setInputRequest"> The SetInputRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="setInputRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetInput(string,SetInputRequest,CancellationToken)']/*" />
        public virtual Response SetInput(string evaluationToken, SetInputRequest setInputRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(setInputRequest, nameof(setInputRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SetInput(evaluationToken, setInputRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Sets the input for the skill
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetInputAsync(string,SetInputRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetInputAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> SetInputAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetInput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetInputRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Sets the input for the skill
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetInput(string,SetInputRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetInput(string,RequestContent,RequestContext)']/*" />
        public virtual Response SetInput(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetInput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetInputRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a list of sources to the output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSourcesRequest"> The AddSourcesRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSourcesRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSourcesAsync(string,AddSourcesRequest,CancellationToken)']/*" />
        public virtual async Task<Response> AddSourcesAsync(string evaluationToken, AddSourcesRequest addSourcesRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSourcesRequest, nameof(addSourcesRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AddSourcesAsync(evaluationToken, addSourcesRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Adds a list of sources to the output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSourcesRequest"> The AddSourcesRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSourcesRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSources(string,AddSourcesRequest,CancellationToken)']/*" />
        public virtual Response AddSources(string evaluationToken, AddSourcesRequest addSourcesRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSourcesRequest, nameof(addSourcesRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AddSources(evaluationToken, addSourcesRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Adds a list of sources to the output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSourcesAsync(string,AddSourcesRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSourcesAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AddSourcesAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSourcesRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Adds a list of sources to the output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSources(string,AddSourcesRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSources(string,RequestContent,RequestContext)']/*" />
        public virtual Response AddSources(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSourcesRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a source to the output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSourceRequest"> The AddSourceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSourceRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSourceAsync(string,AddSourceRequest,CancellationToken)']/*" />
        public virtual async Task<Response> AddSourceAsync(string evaluationToken, AddSourceRequest addSourceRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSourceRequest, nameof(addSourceRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AddSourceAsync(evaluationToken, addSourceRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Adds a source to the output. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSourceRequest"> The AddSourceRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSourceRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSource(string,AddSourceRequest,CancellationToken)']/*" />
        public virtual Response AddSource(string evaluationToken, AddSourceRequest addSourceRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSourceRequest, nameof(addSourceRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AddSource(evaluationToken, addSourceRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Adds a source to the output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSourceAsync(string,AddSourceRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSourceAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AddSourceAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSourceRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Adds a source to the output
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSource(string,AddSourceRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSource(string,RequestContent,RequestContext)']/*" />
        public virtual Response AddSource(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSourceRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a list of suggested prompts to the skill context. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSuggestedPromptsRequest"> The AddSuggestedPromptsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSuggestedPromptsRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSuggestedPromptsAsync(string,AddSuggestedPromptsRequest,CancellationToken)']/*" />
        public virtual async Task<Response> AddSuggestedPromptsAsync(string evaluationToken, AddSuggestedPromptsRequest addSuggestedPromptsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSuggestedPromptsRequest, nameof(addSuggestedPromptsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AddSuggestedPromptsAsync(evaluationToken, addSuggestedPromptsRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Adds a list of suggested prompts to the skill context. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="addSuggestedPromptsRequest"> The AddSuggestedPromptsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="addSuggestedPromptsRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSuggestedPrompts(string,AddSuggestedPromptsRequest,CancellationToken)']/*" />
        public virtual Response AddSuggestedPrompts(string evaluationToken, AddSuggestedPromptsRequest addSuggestedPromptsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(addSuggestedPromptsRequest, nameof(addSuggestedPromptsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AddSuggestedPrompts(evaluationToken, addSuggestedPromptsRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method]  Adds a list of suggested prompts to the skill context
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSuggestedPromptsAsync(string,AddSuggestedPromptsRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSuggestedPromptsAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AddSuggestedPromptsAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSuggestedPrompts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSuggestedPromptsRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]  Adds a list of suggested prompts to the skill context
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="AddSuggestedPrompts(string,AddSuggestedPromptsRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='AddSuggestedPrompts(string,RequestContent,RequestContext)']/*" />
        public virtual Response AddSuggestedPrompts(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.AddSuggestedPrompts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddSuggestedPromptsRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sets the final response settings. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="setFinalResponseSettingsRequest"> The SetFinalResponseSettingsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="setFinalResponseSettingsRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetFinalResponseSettingsAsync(string,SetFinalResponseSettingsRequest,CancellationToken)']/*" />
        public virtual async Task<Response> SetFinalResponseSettingsAsync(string evaluationToken, SetFinalResponseSettingsRequest setFinalResponseSettingsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(setFinalResponseSettingsRequest, nameof(setFinalResponseSettingsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SetFinalResponseSettingsAsync(evaluationToken, setFinalResponseSettingsRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Sets the final response settings. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="setFinalResponseSettingsRequest"> The SetFinalResponseSettingsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="setFinalResponseSettingsRequest"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetFinalResponseSettings(string,SetFinalResponseSettingsRequest,CancellationToken)']/*" />
        public virtual Response SetFinalResponseSettings(string evaluationToken, SetFinalResponseSettingsRequest setFinalResponseSettingsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(setFinalResponseSettingsRequest, nameof(setFinalResponseSettingsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SetFinalResponseSettings(evaluationToken, setFinalResponseSettingsRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Sets the final response settings
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetFinalResponseSettingsAsync(string,SetFinalResponseSettingsRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetFinalResponseSettingsAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> SetFinalResponseSettingsAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetFinalResponseSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetFinalResponseSettingsRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Sets the final response settings
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="SetFinalResponseSettings(string,SetFinalResponseSettingsRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='SetFinalResponseSettings(string,RequestContent,RequestContext)']/*" />
        public virtual Response SetFinalResponseSettings(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.SetFinalResponseSettings");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetFinalResponseSettingsRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes an Open AI Chat completion request. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateChatCompletionRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateChatCompletionAsync(string,CreateChatCompletionRequest,CancellationToken)']/*" />
        public virtual async Task<Response<ChatCompletionResponse>> CreateChatCompletionAsync(string evaluationToken, CreateChatCompletionRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateChatCompletionAsync(evaluationToken, request.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(ChatCompletionResponse.FromResponse(response), response);
        }

        /// <summary> Executes an Open AI Chat completion request. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateChatCompletionRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateChatCompletion(string,CreateChatCompletionRequest,CancellationToken)']/*" />
        public virtual Response<ChatCompletionResponse> CreateChatCompletion(string evaluationToken, CreateChatCompletionRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateChatCompletion(evaluationToken, request.ToRequestContent(), context);
            return Response.FromValue(ChatCompletionResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Executes an Open AI Chat completion request
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateChatCompletionAsync(string,CreateChatCompletionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateChatCompletionAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateChatCompletionAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateChatCompletion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateChatCompletionRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Executes an Open AI Chat completion request
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateChatCompletion(string,CreateChatCompletionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateChatCompletion(string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateChatCompletion(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateChatCompletion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateChatCompletionRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes an Open AI completion request. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateCompletionRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateCompletionAsync(string,CreateCompletionRequest,CancellationToken)']/*" />
        public virtual async Task<Response<CompletionResponse>> CreateCompletionAsync(string evaluationToken, CreateCompletionRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateCompletionAsync(evaluationToken, request.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(CompletionResponse.FromResponse(response), response);
        }

        /// <summary> Executes an Open AI completion request. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateCompletionRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateCompletion(string,CreateCompletionRequest,CancellationToken)']/*" />
        public virtual Response<CompletionResponse> CreateCompletion(string evaluationToken, CreateCompletionRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateCompletion(evaluationToken, request.ToRequestContent(), context);
            return Response.FromValue(CompletionResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Executes an Open AI completion request
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateCompletionAsync(string,CreateCompletionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateCompletionAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateCompletionAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateCompletion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateCompletionRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Executes an Open AI completion request
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateCompletion(string,CreateCompletionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateCompletion(string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateCompletion(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateCompletion");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateCompletionRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates Embedding for a prompt or message. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateEmbeddingRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateEmbeddingAsync(string,CreateEmbeddingRequest,CancellationToken)']/*" />
        public virtual async Task<Response<EmbeddingResponse>> CreateEmbeddingAsync(string evaluationToken, CreateEmbeddingRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateEmbeddingAsync(evaluationToken, request.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(EmbeddingResponse.FromResponse(response), response);
        }

        /// <summary> Creates Embedding for a prompt or message. </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="request"> The CreateEmbeddingRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="request"/> is null. </exception>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateEmbedding(string,CreateEmbeddingRequest,CancellationToken)']/*" />
        public virtual Response<EmbeddingResponse> CreateEmbedding(string evaluationToken, CreateEmbeddingRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateEmbedding(evaluationToken, request.ToRequestContent(), context);
            return Response.FromValue(EmbeddingResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates Embedding for a prompt or message
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateEmbeddingAsync(string,CreateEmbeddingRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateEmbeddingAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateEmbeddingAsync(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateEmbedding");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateEmbeddingRequest(evaluationToken, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates Embedding for a prompt or message
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateEmbedding(string,CreateEmbeddingRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="evaluationToken"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="evaluationToken"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SkillContextClient.xml" path="doc/members/member[@name='CreateEmbedding(string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateEmbedding(string evaluationToken, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(evaluationToken, nameof(evaluationToken));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SkillContextClient.CreateEmbedding");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateEmbeddingRequest(evaluationToken, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSkillContextRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateInvokeSkillRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/invokeSkill", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSkillDescriptorRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/skillDescriptor", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSkillDescriptorsRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/skillDescriptors", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSkillsetDescriptorsRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/skillsetDescriptors", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetExecutionContextRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/executionContext", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPromptHistoryRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/promptHistory", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateLogProgressRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/logProgress", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetSkillOutputRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/setOutputAsync", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSkillsetSettingsRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/skillsetSettings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateSetSkillInvocationStartedRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/setSkillInvocationStarted", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateSetSkillInvocationCompletedRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/setSkillInvocationCompleted", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSkillsetAuthInfoRequest(string evaluationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/getSkillsetAuthInfoAsync", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTokenCredentialRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/getTokenCredentialAsync", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetInputRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/getInputAsync", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetInputRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/setInputAsync", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddSourcesRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/AddSources", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddSourceRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/AddSource", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddSuggestedPromptsRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/AddSuggestedPrompts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSetFinalResponseSettingsRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/skillContext/SetFinalResponseSettings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateChatCompletionRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/medeinaOpenAI/createChatCompletion", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateCompletionRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/medeinaOpenAI/createCompletion", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateEmbeddingRequest(string evaluationToken, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/medeinaOpenAI/CreateEmbedding", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("X-MS-SecurityCopilot-EvaluationToken", evaluationToken);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
