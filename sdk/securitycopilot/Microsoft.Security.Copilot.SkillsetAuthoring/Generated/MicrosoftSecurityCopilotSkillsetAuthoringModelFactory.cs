// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MicrosoftSecurityCopilotSkillsetAuthoringModelFactory
    {
        /// <summary> Initializes a new instance of SkillContextResponse. </summary>
        /// <param name="descriptor"> Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute the skill). </param>
        /// <param name="id"> SkillContext Id. </param>
        /// <param name="featureFlags"> Array of feature flags. </param>
        /// <param name="inputs"> Skill Variable Collection. </param>
        /// <param name="properties"> Additional skill specific settings. </param>
        /// <param name="startTime"> TODO. </param>
        /// <param name="tenantId"> Tenant id of tenant in which skill invocation occured. </param>
        /// <param name="userId"> User id of user that invoked the skill. </param>
        /// <param name="sessionId"> Current session ID. </param>
        /// <param name="promptId"> Current prompt ID. </param>
        /// <param name="evaluationId"> Current evaluation ID. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="workspaceId"> Fidelis Workspace Id. </param>
        /// <param name="source"> Originating source tag for the evaluation (i.e. Immersive, Logic Apps, etc.). </param>
        /// <param name="invocationType"> Indicates whether the evaluation is user driven or automated. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="userName"> Username of the user that invoked the skill. </param>
        /// <returns> A new <see cref="Models.SkillContextResponse"/> instance for mocking. </returns>
        public static SkillContextResponse SkillContextResponse(SkillDescriptor descriptor = null, string id = null, IEnumerable<string> featureFlags = null, IReadOnlyDictionary<string, SkillVariable> inputs = null, IReadOnlyDictionary<string, string> properties = null, DateTimeOffset startTime = default, string tenantId = null, string userId = null, string sessionId = null, string promptId = null, string evaluationId = null, ComplianceFlags complianceFlags = null, string workspaceId = null, string source = null, EvaluationInvocationType invocationType = default, EvaluationInvocationCategory invocationCategory = default, string userName = null)
        {
            featureFlags ??= new List<string>();
            inputs ??= new Dictionary<string, SkillVariable>();
            properties ??= new Dictionary<string, string>();

            return new SkillContextResponse(descriptor, id, featureFlags?.ToList(), inputs, properties, startTime, tenantId, userId, sessionId, promptId, evaluationId, complianceFlags, workspaceId, source, invocationType, invocationCategory, userName);
        }

        /// <summary> Initializes a new instance of SkillDescriptor. </summary>
        /// <param name="skillset"> The skillset descriptor. </param>
        /// <param name="name"> The name of the skill. </param>
        /// <param name="format"> The format of the skill. </param>
        /// <param name="displayName"> The display name of the skill. </param>
        /// <param name="altName"> An alternative name for the skill as some planners follow different naming convensions. This is set by the planner to map the name back to the skill. </param>
        /// <param name="dependencies"> The dependencies of the skill. </param>
        /// <param name="description"> The description of the skill. </param>
        /// <param name="examplePrompts"> A list of example prompts for the skill. </param>
        /// <param name="hidden"> Whether the skill is hidden TODO what does this mean. </param>
        /// <param name="inputs"> The inputs required for the skill. </param>
        /// <param name="outputs"> The outputs of the skill. </param>
        /// <param name="promptAlignedName"> The prompt aligned name of the skill TODO what does this mean. </param>
        /// <param name="userVisibilityFeatureFlags"> A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order for the skillset to be available. </param>
        /// <param name="userVisibility"> Controls the conditions under which the users can see or use this skillset. </param>
        /// <param name="plannerVisibilityFeatureFlags"> Visibility flags required for the planner to user the skillset TODO confirm what this does. </param>
        /// <param name="plannerVisibility"> Controls the conditions under a prompt can use this skillset. </param>
        /// <param name="settings"> The settings of the skill. </param>
        /// <param name="skillSummaryMetadata"> skillSummaryMetadata. </param>
        /// <param name="enableVariableSubstitutionInCompose"> EnableVariableSubstitutionInCompose. </param>
        /// <returns> A new <see cref="Models.SkillDescriptor"/> instance for mocking. </returns>
        public static SkillDescriptor SkillDescriptor(SkillsetDescriptor skillset = null, string name = null, string format = null, string displayName = null, string altName = null, IEnumerable<SkillDependencyDescriptor> dependencies = null, string description = null, IEnumerable<string> examplePrompts = null, bool hidden = default, IEnumerable<SkillInputDescriptor> inputs = null, IEnumerable<SkillOutputDescriptor> outputs = null, string promptAlignedName = null, IEnumerable<string> userVisibilityFeatureFlags = null, SkillVisibility userVisibility = default, IEnumerable<string> plannerVisibilityFeatureFlags = null, SkillVisibility plannerVisibility = default, IReadOnlyDictionary<string, string> settings = null, SkillSummaryDescriptor skillSummaryMetadata = null, bool enableVariableSubstitutionInCompose = default)
        {
            dependencies ??= new List<SkillDependencyDescriptor>();
            examplePrompts ??= new List<string>();
            inputs ??= new List<SkillInputDescriptor>();
            outputs ??= new List<SkillOutputDescriptor>();
            userVisibilityFeatureFlags ??= new List<string>();
            plannerVisibilityFeatureFlags ??= new List<string>();
            settings ??= new Dictionary<string, string>();

            return new SkillDescriptor(skillset, name, format, displayName, altName, dependencies?.ToList(), description, examplePrompts?.ToList(), hidden, inputs?.ToList(), outputs?.ToList(), promptAlignedName, userVisibilityFeatureFlags?.ToList(), userVisibility, plannerVisibilityFeatureFlags?.ToList(), plannerVisibility, settings, skillSummaryMetadata, enableVariableSubstitutionInCompose);
        }

        /// <summary> Initializes a new instance of SkillsetDescriptor. </summary>
        /// <param name="namespace"> Namespace for the skillset. </param>
        /// <param name="name"> The name of the Skillset. </param>
        /// <param name="description"> The description of the Skillset. </param>
        /// <param name="descriptionDisplay"> The description of the skillset that's displayed TODO postman/dev figure out where this is displayed. </param>
        /// <param name="disaplyName"> The Skillset name that's displayed in the portal. </param>
        /// <param name="icon"> The icon displayed for the skillset in the console. </param>
        /// <param name="category"> The category of the Skillset. </param>
        /// <param name="catalogScope"> CatalogScope of the Skillset. </param>
        /// <param name="enabled"> Whether the skillset is enabled TODO how is this different than Hidden. </param>
        /// <param name="hidden"> Whether the skillset is hidden TODO how is this different than enabled. </param>
        /// <param name="prerequisites"> The prerequisites of a skillset TODO what does this mean. </param>
        /// <param name="settings"> The settings of a skillset. </param>
        /// <param name="authorization"> The settings of a skillset. </param>
        /// <param name="supportedAuthTypes"> The types of authentication supported by the skillset. </param>
        /// <param name="userVisibilityFeatureFlags"> A list of feature flags. At least one of the feature flags is required to enabled in the prompt context in order for the skillset to be available. </param>
        /// <param name="userVisibility"> Controls the conditions under which the users can see or use this skillset. </param>
        /// <param name="plannerVisibilityFeatureFlags"> Visibility flags required for the planner to user the skillset TODO confirm what this does. </param>
        /// <param name="plannerVisibility"> Controls the conditions under a prompt can use this skillset. </param>
        /// <param name="creatorUserId"> The user ID of the user who created this skillset. </param>
        /// <param name="ownersGroupId"> The ID of an Entra group that contains the owners for this Skillset. </param>
        /// <returns> A new <see cref="Models.SkillsetDescriptor"/> instance for mocking. </returns>
        public static SkillsetDescriptor SkillsetDescriptor(string @namespace = null, string name = null, string description = null, string descriptionDisplay = null, string disaplyName = null, string icon = null, SkillsetCategory category = default, SkillsetCatalogScope catalogScope = default, bool enabled = default, bool hidden = default, IEnumerable<string> prerequisites = null, IEnumerable<SkillsetSetting> settings = null, SkillsetAuth authorization = null, IEnumerable<SkillsetAuthType> supportedAuthTypes = null, IEnumerable<string> userVisibilityFeatureFlags = null, SkillVisibility userVisibility = default, IEnumerable<string> plannerVisibilityFeatureFlags = null, SkillVisibility plannerVisibility = default, string creatorUserId = null, string ownersGroupId = null)
        {
            prerequisites ??= new List<string>();
            settings ??= new List<SkillsetSetting>();
            supportedAuthTypes ??= new List<SkillsetAuthType>();
            userVisibilityFeatureFlags ??= new List<string>();
            plannerVisibilityFeatureFlags ??= new List<string>();

            return new SkillsetDescriptor(@namespace, name, description, descriptionDisplay, disaplyName, icon, category, catalogScope, enabled, hidden, prerequisites?.ToList(), settings?.ToList(), authorization, supportedAuthTypes?.ToList(), userVisibilityFeatureFlags?.ToList(), userVisibility, plannerVisibilityFeatureFlags?.ToList(), plannerVisibility, creatorUserId, ownersGroupId);
        }

        /// <summary> Initializes a new instance of SkillsetSetting. </summary>
        /// <param name="name"> The name of the skillset setting. </param>
        /// <param name="label"> The label of the skillset setting. </param>
        /// <param name="description"> The description of the skillset setting used to describe the setting to the user in an info text box. </param>
        /// <param name="hintText"> The hint text used to fill in the setting box. </param>
        /// <param name="settingType"> The type of the skillset setting. </param>
        /// <param name="required"> Whether the skillset setting is required. </param>
        /// <param name="defaultValue"> The default value of the skillset setting. </param>
        /// <param name="value"> The value of the skillset setting. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="label"/>, <paramref name="description"/>, <paramref name="hintText"/>, <paramref name="defaultValue"/> or <paramref name="value"/> is null. </exception>
        /// <returns> A new <see cref="Models.SkillsetSetting"/> instance for mocking. </returns>
        public static SkillsetSetting SkillsetSetting(string name = null, string label = null, string description = null, string hintText = null, SkillsetSettingType settingType = default, bool required = default, string defaultValue = null, string value = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (label == null)
            {
                throw new ArgumentNullException(nameof(label));
            }
            if (description == null)
            {
                throw new ArgumentNullException(nameof(description));
            }
            if (hintText == null)
            {
                throw new ArgumentNullException(nameof(hintText));
            }
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            return new SkillsetSetting(name, label, description, hintText, settingType, required, defaultValue, value);
        }

        /// <summary> Initializes a new instance of SkillsetAuth. </summary>
        /// <param name="type"> SkillsetAuth Type. </param>
        /// <returns> A new <see cref="Models.SkillsetAuth"/> instance for mocking. </returns>
        public static SkillsetAuth SkillsetAuth(SkillsetAuthType type = default)
        {
            return new SkillsetAuth(type);
        }

        /// <summary> Initializes a new instance of SkillDependencyDescriptor. </summary>
        /// <param name="skillsetName"> The skillset name. </param>
        /// <param name="skillName"> The name of the skill. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="skillsetName"/> or <paramref name="skillName"/> is null. </exception>
        /// <returns> A new <see cref="Models.SkillDependencyDescriptor"/> instance for mocking. </returns>
        public static SkillDependencyDescriptor SkillDependencyDescriptor(string skillsetName = null, string skillName = null)
        {
            if (skillsetName == null)
            {
                throw new ArgumentNullException(nameof(skillsetName));
            }
            if (skillName == null)
            {
                throw new ArgumentNullException(nameof(skillName));
            }

            return new SkillDependencyDescriptor(skillsetName, skillName);
        }

        /// <summary> Initializes a new instance of SkillInputDescriptor. </summary>
        /// <param name="name"> The name of the skill input. </param>
        /// <param name="type"> The type of the skill input. </param>
        /// <param name="description"> The description of the skill. </param>
        /// <param name="required"> Whether a skill input is required. </param>
        /// <param name="defaultValue"> The default value of the skill input. </param>
        /// <param name="placeholderValue"> The placeholder value of the skill input TODO how is this different than the default. </param>
        /// <param name="enum"> Enum. </param>
        /// <returns> A new <see cref="Models.SkillInputDescriptor"/> instance for mocking. </returns>
        public static SkillInputDescriptor SkillInputDescriptor(string name = null, SkillTypeDescriptor type = null, string description = null, bool required = default, string defaultValue = null, string placeholderValue = null, IEnumerable<string> @enum = null)
        {
            @enum ??= new List<string>();

            return new SkillInputDescriptor(name, type, description, required, defaultValue, placeholderValue, @enum?.ToList());
        }

        /// <summary> Initializes a new instance of SkillTypeDescriptor. </summary>
        /// <param name="name"> The name of the skill type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.SkillTypeDescriptor"/> instance for mocking. </returns>
        public static SkillTypeDescriptor SkillTypeDescriptor(string name = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new SkillTypeDescriptor(name);
        }

        /// <summary> Initializes a new instance of SkillOutputDescriptor. </summary>
        /// <param name="name"> The name of the skill input. </param>
        /// <param name="type"> The type of the skill input. </param>
        /// <param name="description"> The description of the skill. </param>
        /// <returns> A new <see cref="Models.SkillOutputDescriptor"/> instance for mocking. </returns>
        public static SkillOutputDescriptor SkillOutputDescriptor(string name = null, SkillTypeDescriptor type = null, string description = null)
        {
            return new SkillOutputDescriptor(name, type, description);
        }

        /// <summary> Initializes a new instance of SkillSummaryDescriptor. </summary>
        /// <param name="summaryStartMessage"> SummaryStartMessage. </param>
        /// <param name="summaryEndMessage"> SummaryEndMessage. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryStartMessage"/> or <paramref name="summaryEndMessage"/> is null. </exception>
        /// <returns> A new <see cref="Models.SkillSummaryDescriptor"/> instance for mocking. </returns>
        public static SkillSummaryDescriptor SkillSummaryDescriptor(string summaryStartMessage = null, string summaryEndMessage = null)
        {
            if (summaryStartMessage == null)
            {
                throw new ArgumentNullException(nameof(summaryStartMessage));
            }
            if (summaryEndMessage == null)
            {
                throw new ArgumentNullException(nameof(summaryEndMessage));
            }

            return new SkillSummaryDescriptor(summaryStartMessage, summaryEndMessage);
        }

        /// <summary> Initializes a new instance of ComplianceFlags. </summary>
        /// <param name="recordLog"> Whether to record logs in Geneva and Kusto for this user. </param>
        /// <param name="customerOptedInToEyesOnProductImprovement"> Locked down tables not required and non-customer content table does not have to be redacted. </param>
        /// <param name="customerOptedInToModelImprovement"> When this is true, the data may be used for model improvement. This flag does not affect redaction. </param>
        /// <returns> A new <see cref="Models.ComplianceFlags"/> instance for mocking. </returns>
        public static ComplianceFlags ComplianceFlags(bool recordLog = default, bool customerOptedInToEyesOnProductImprovement = default, bool customerOptedInToModelImprovement = default)
        {
            return new ComplianceFlags(recordLog, customerOptedInToEyesOnProductImprovement, customerOptedInToModelImprovement);
        }

        /// <summary> Initializes a new instance of MedeinaExecutionContext. </summary>
        /// <param name="sessionId"> The session id. </param>
        /// <param name="promptId"> The prompt id. </param>
        /// <param name="evaluationId"> The evaluation id. </param>
        /// <param name="tenantId"> The tenant id. </param>
        /// <param name="accountId"> The account id. </param>
        /// <param name="workspaceId"> The workspace id. </param>
        /// <param name="userName"> The display name of the user. </param>
        /// <param name="applicationId"> The Application Id that created the Session. </param>
        /// <param name="source"> The Source tag i.e. 'immersive'. </param>
        /// <param name="unauthenticatedSourceApplicationId"> The source application ID. </param>
        /// <param name="selectedSkills"> The selected skills. </param>
        /// <param name="selectedSkillsets"> The skillsets identified for execution during the evaluation process post skill selection. </param>
        /// <param name="isFidelisUser"> Indicates whether the context is for a user onboarded to Fidelis. </param>
        /// <param name="invocationType"> Indicates whether the evaluation is manually generated or user driven. </param>
        /// <param name="invocationCategory"> Indicates whether the evaluation is from a Prompt or a Promptbook. </param>
        /// <param name="encryptedUserAccessToken"> The encrypted token used to authenticate the user. </param>
        /// <param name="complianceFlags"> Compliance flags for logging. </param>
        /// <param name="azureOpenAIExecutionContext"> Contains the context for the Azure OpenAI requests such as the deployment id. </param>
        /// <param name="previewState"> Preview state of the execution context. </param>
        /// <returns> A new <see cref="Models.MedeinaExecutionContext"/> instance for mocking. </returns>
        public static MedeinaExecutionContext MedeinaExecutionContext(string sessionId = null, string promptId = null, string evaluationId = null, string tenantId = null, string accountId = null, string workspaceId = null, string userName = null, string applicationId = null, string source = null, string unauthenticatedSourceApplicationId = null, string selectedSkills = null, IEnumerable<string> selectedSkillsets = null, bool isFidelisUser = default, EvaluationInvocationType invocationType = default, EvaluationInvocationCategory invocationCategory = default, string encryptedUserAccessToken = null, ComplianceFlags complianceFlags = null, AzureOpenAIExecutionContext azureOpenAIExecutionContext = null, SkillPreviewState previewState = default)
        {
            selectedSkillsets ??= new List<string>();

            return new MedeinaExecutionContext(sessionId, promptId, evaluationId, tenantId, accountId, workspaceId, userName, applicationId, source, unauthenticatedSourceApplicationId, selectedSkills, selectedSkillsets?.ToList(), isFidelisUser, invocationType, invocationCategory, encryptedUserAccessToken, complianceFlags, azureOpenAIExecutionContext, previewState);
        }

        /// <summary> Initializes a new instance of PromptHistoryResponse. </summary>
        /// <param name="prompts"> List of prompts that have been evaluated in the current session. </param>
        /// <returns> A new <see cref="Models.PromptHistoryResponse"/> instance for mocking. </returns>
        public static PromptHistoryResponse PromptHistoryResponse(IEnumerable<SessionPrompt> prompts = null)
        {
            prompts ??= new List<SessionPrompt>();

            return new PromptHistoryResponse(prompts?.ToList());
        }

        /// <summary> Initializes a new instance of SessionPrompt. </summary>
        /// <param name="prompt"> The content of the prompt. </param>
        /// <param name="response"> Prompt response returned by the prompt evaluation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="prompt"/> is null. </exception>
        /// <returns> A new <see cref="Models.SessionPrompt"/> instance for mocking. </returns>
        public static SessionPrompt SessionPrompt(string prompt = null, string response = null)
        {
            if (prompt == null)
            {
                throw new ArgumentNullException(nameof(prompt));
            }

            return new SessionPrompt(prompt, response);
        }

        /// <summary> Initializes a new instance of AuthDetails. </summary>
        /// <param name="authLocation"> Auth Location. </param>
        /// <param name="authInfo"> Auth Info. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="authInfo"/> is null. </exception>
        /// <returns> A new <see cref="Models.AuthDetails"/> instance for mocking. </returns>
        public static AuthDetails AuthDetails(AuthLocationEnum authLocation = default, IReadOnlyDictionary<string, string> authInfo = null)
        {
            authInfo ??= new Dictionary<string, string>();

            return new AuthDetails(authLocation, authInfo);
        }

        /// <summary> Initializes a new instance of AccessToken. </summary>
        /// <param name="token"> Token string. </param>
        /// <param name="expiresOn"> Expiry time. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> is null. </exception>
        /// <returns> A new <see cref="Models.AccessToken"/> instance for mocking. </returns>
        public static AccessToken AccessToken(string token = null, DateTimeOffset expiresOn = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }

            return new AccessToken(token, expiresOn);
        }

        /// <summary> Initializes a new instance of ChatCompletionResponse. </summary>
        /// <param name="id"> The unique identifier for the response. </param>
        /// <param name="object"> The object type. </param>
        /// <param name="created"> The creation timestamp. </param>
        /// <param name="model"> The model used for completion. </param>
        /// <param name="usage"> The usage statistics for the response. </param>
        /// <param name="promptFilterResults"> The results of prompt filtering. </param>
        /// <param name="choices"> List of choices in the chat completion response. </param>
        /// <returns> A new <see cref="Models.ChatCompletionResponse"/> instance for mocking. </returns>
        public static ChatCompletionResponse ChatCompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, BinaryData usage = null, IEnumerable<BinaryData> promptFilterResults = null, IEnumerable<ChatChoice> choices = null)
        {
            promptFilterResults ??= new List<BinaryData>();
            choices ??= new List<ChatChoice>();

            return new ChatCompletionResponse(id, @object, created, model, usage, promptFilterResults?.ToList(), choices?.ToList());
        }

        /// <summary> Initializes a new instance of ChatChoice. </summary>
        /// <param name="index"></param>
        /// <param name="logProbs"> Log probabilities for this choice. </param>
        /// <param name="finishReason"> The reason why the operation finished. </param>
        /// <param name="contentFilterResults"> This object contains the list of content filter annotations. </param>
        /// <param name="contentFilterError"> This indicates when the content filtering system does not run on the chat completion. </param>
        /// <param name="message"> The message associated with the chat choice. </param>
        /// <returns> A new <see cref="Models.ChatChoice"/> instance for mocking. </returns>
        public static ChatChoice ChatChoice(int index = default, BinaryData logProbs = null, string finishReason = null, BinaryData contentFilterResults = null, BinaryData contentFilterError = null, Message message = null)
        {
            return new ChatChoice(index, logProbs, finishReason, contentFilterResults, contentFilterError, message);
        }

        /// <summary> Initializes a new instance of Choice. </summary>
        /// <param name="index"></param>
        /// <param name="logProbs"> Log probabilities for this choice. </param>
        /// <param name="finishReason"> The reason why the operation finished. </param>
        /// <param name="contentFilterResults"> This object contains the list of content filter annotations. </param>
        /// <param name="contentFilterError"> This indicates when the content filtering system does not run on the chat completion. </param>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.Choice"/> instance for mocking. </returns>
        public static Choice Choice(int index = default, BinaryData logProbs = null, string finishReason = null, BinaryData contentFilterResults = null, BinaryData contentFilterError = null, string text = null)
        {
            return new Choice(index, logProbs, finishReason, contentFilterResults, contentFilterError, text);
        }

        /// <summary> Initializes a new instance of CompletionResponse. </summary>
        /// <param name="id"> The unique identifier for the response. </param>
        /// <param name="object"> The object type. </param>
        /// <param name="created"> The creation timestamp. </param>
        /// <param name="model"> The model used for completion. </param>
        /// <param name="usage"> The usage statistics for the response. </param>
        /// <param name="promptFilterResults"> The results of prompt filtering. </param>
        /// <param name="choices"></param>
        /// <returns> A new <see cref="Models.CompletionResponse"/> instance for mocking. </returns>
        public static CompletionResponse CompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, BinaryData usage = null, IEnumerable<BinaryData> promptFilterResults = null, IEnumerable<Choice> choices = null)
        {
            promptFilterResults ??= new List<BinaryData>();
            choices ??= new List<Choice>();

            return new CompletionResponse(id, @object, created, model, usage, promptFilterResults?.ToList(), choices?.ToList());
        }

        /// <summary> Initializes a new instance of EmbeddingResponse. </summary>
        /// <param name="data"></param>
        /// <param name="model"></param>
        /// <param name="object"></param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.EmbeddingResponse"/> instance for mocking. </returns>
        public static EmbeddingResponse EmbeddingResponse(IEnumerable<EmbeddingData> data = null, string model = null, string @object = null, BinaryData usage = null)
        {
            data ??= new List<EmbeddingData>();

            return new EmbeddingResponse(data?.ToList(), model, @object, usage);
        }

        /// <summary> Initializes a new instance of EmbeddingData. </summary>
        /// <param name="embedding"></param>
        /// <param name="index"></param>
        /// <param name="object"></param>
        /// <returns> A new <see cref="Models.EmbeddingData"/> instance for mocking. </returns>
        public static EmbeddingData EmbeddingData(IEnumerable<float> embedding = null, int index = default, string @object = null)
        {
            embedding ??= new List<float>();

            return new EmbeddingData(embedding?.ToList(), index, @object);
        }
    }
}
