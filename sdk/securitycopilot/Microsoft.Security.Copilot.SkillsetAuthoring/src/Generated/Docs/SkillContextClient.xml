<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSkillContextAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillContextAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<SkillContextResponse> response = await client.GetSkillContextAsync("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillContextAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<SkillContextResponse> response = await client.GetSkillContextAsync("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillContext(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillContext.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<SkillContextResponse> response = client.GetSkillContext("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillContext with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<SkillContextResponse> response = client.GetSkillContext("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillContextAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSkillContextAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillContextAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("userId").ToString());
]]></code>
This sample shows how to call GetSkillContextAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillContextAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("userId").ToString());
]]></code></example>
    </member>
    <member name="GetSkillContext(string,RequestContext)">
      <example>
This sample shows how to call GetSkillContext and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillContext("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("userId").ToString());
]]></code>
This sample shows how to call GetSkillContext with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillContext("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("inputs").GetProperty("<key>").GetProperty("valueStoredAsJson").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("userId").ToString());
]]></code></example>
    </member>
    <member name="InvokeSkillAsync(string,InvokeSkillRequest,CancellationToken)">
      <example>
This sample shows how to call InvokeSkillAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
{
    ["key"] = new SkillVariable(true)
});
Response<OutputSkillVariable> response = await client.InvokeSkillAsync("<evaluationToken>", invokeSkill);
]]></code>
This sample shows how to call InvokeSkillAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
{
    ["key"] = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    }
})
{
    SkillsetName = "<skillsetName>",
};
Response<OutputSkillVariable> response = await client.InvokeSkillAsync("<evaluationToken>", invokeSkill);
]]></code></example>
    </member>
    <member name="InvokeSkill(string,InvokeSkillRequest,CancellationToken)">
      <example>
This sample shows how to call InvokeSkill.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
{
    ["key"] = new SkillVariable(true)
});
Response<OutputSkillVariable> response = client.InvokeSkill("<evaluationToken>", invokeSkill);
]]></code>
This sample shows how to call InvokeSkill with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

InvokeSkillRequest invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
{
    ["key"] = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    }
})
{
    SkillsetName = "<skillsetName>",
};
Response<OutputSkillVariable> response = client.InvokeSkill("<evaluationToken>", invokeSkill);
]]></code></example>
    </member>
    <member name="InvokeSkillAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call InvokeSkillAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    skillName = "<skillName>",
    inputs = new
    {
        key = new
        {
            valueStoredAsJson = true,
        },
    },
});
Response response = await client.InvokeSkillAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code>
This sample shows how to call InvokeSkillAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    skillsetName = "<skillsetName>",
    skillName = "<skillName>",
    inputs = new
    {
        key = new
        {
            type = "<type>",
            value = "<value>",
            valueStoredAsJson = true,
        },
    },
});
Response response = await client.InvokeSkillAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code></example>
    </member>
    <member name="InvokeSkill(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call InvokeSkill and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    skillName = "<skillName>",
    inputs = new
    {
        key = new
        {
            valueStoredAsJson = true,
        },
    },
});
Response response = client.InvokeSkill("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code>
This sample shows how to call InvokeSkill with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    skillsetName = "<skillsetName>",
    skillName = "<skillName>",
    inputs = new
    {
        key = new
        {
            type = "<type>",
            value = "<value>",
            valueStoredAsJson = true,
        },
    },
});
Response response = client.InvokeSkill("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code></example>
    </member>
    <member name="GetPromptHistoryAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetPromptHistoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<PromptHistoryResponse> response = await client.GetPromptHistoryAsync("<evaluationToken>");
]]></code>
This sample shows how to call GetPromptHistoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<PromptHistoryResponse> response = await client.GetPromptHistoryAsync("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetPromptHistory(string,CancellationToken)">
      <example>
This sample shows how to call GetPromptHistory.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<PromptHistoryResponse> response = client.GetPromptHistory("<evaluationToken>");
]]></code>
This sample shows how to call GetPromptHistory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<PromptHistoryResponse> response = client.GetPromptHistory("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetPromptHistoryAsync(string,RequestContext)">
      <example>
This sample shows how to call GetPromptHistoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetPromptHistoryAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
]]></code>
This sample shows how to call GetPromptHistoryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetPromptHistoryAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
]]></code></example>
    </member>
    <member name="GetPromptHistory(string,RequestContext)">
      <example>
This sample shows how to call GetPromptHistory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetPromptHistory("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
]]></code>
This sample shows how to call GetPromptHistory with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetPromptHistory("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
]]></code></example>
    </member>
    <member name="LogProgressAsync(string,LogProgressRequest,CancellationToken)">
      <example>
This sample shows how to call LogProgressAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

LogProgressRequest logProgressRequest = new LogProgressRequest("<message>");
Response response = await client.LogProgressAsync("<evaluationToken>", logProgressRequest);
]]></code>
This sample shows how to call LogProgressAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

LogProgressRequest logProgressRequest = new LogProgressRequest("<message>")
{
    Level = ProgressLogLevel.Error,
};
Response response = await client.LogProgressAsync("<evaluationToken>", logProgressRequest);
]]></code></example>
    </member>
    <member name="LogProgress(string,LogProgressRequest,CancellationToken)">
      <example>
This sample shows how to call LogProgress.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

LogProgressRequest logProgressRequest = new LogProgressRequest("<message>");
Response response = client.LogProgress("<evaluationToken>", logProgressRequest);
]]></code>
This sample shows how to call LogProgress with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

LogProgressRequest logProgressRequest = new LogProgressRequest("<message>")
{
    Level = ProgressLogLevel.Error,
};
Response response = client.LogProgress("<evaluationToken>", logProgressRequest);
]]></code></example>
    </member>
    <member name="LogProgressAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call LogProgressAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    message = "<message>",
});
Response response = await client.LogProgressAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call LogProgressAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    level = "Error",
    message = "<message>",
});
Response response = await client.LogProgressAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="LogProgress(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call LogProgress.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    message = "<message>",
});
Response response = client.LogProgress("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call LogProgress with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    level = "Error",
    message = "<message>",
});
Response response = client.LogProgress("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetSkillOutputAsync(string,OutputSkillVariable,CancellationToken)">
      <example>
This sample shows how to call SetSkillOutputAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
});
Response response = await client.SetSkillOutputAsync("<evaluationToken>", outputSkillVariable);
]]></code>
This sample shows how to call SetSkillOutputAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
    {
        SourceSerializedData = "<sourceSerializedData>",
    }
})
{
    Type = "<type>",
    Value = "<value>",
};
Response response = await client.SetSkillOutputAsync("<evaluationToken>", outputSkillVariable);
]]></code></example>
    </member>
    <member name="SetSkillOutput(string,OutputSkillVariable,CancellationToken)">
      <example>
This sample shows how to call SetSkillOutput.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
});
Response response = client.SetSkillOutput("<evaluationToken>", outputSkillVariable);
]]></code>
This sample shows how to call SetSkillOutput with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

OutputSkillVariable outputSkillVariable = new OutputSkillVariable(true, new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
    {
        SourceSerializedData = "<sourceSerializedData>",
    }
})
{
    Type = "<type>",
    Value = "<value>",
};
Response response = client.SetSkillOutput("<evaluationToken>", outputSkillVariable);
]]></code></example>
    </member>
    <member name="SetSkillOutputAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SetSkillOutputAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
    valueStoredAsJson = true,
});
Response response = await client.SetSkillOutputAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillOutputAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
    type = "<type>",
    value = "<value>",
    valueStoredAsJson = true,
});
Response response = await client.SetSkillOutputAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetSkillOutput(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SetSkillOutput.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
    valueStoredAsJson = true,
});
Response response = client.SetSkillOutput("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillOutput with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
    type = "<type>",
    value = "<value>",
    valueStoredAsJson = true,
});
Response response = client.SetSkillOutput("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetSkillsetSettingsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetSettingsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<IReadOnlyDictionary<string, string>> response = await client.GetSkillsetSettingsAsync("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillsetSettingsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<IReadOnlyDictionary<string, string>> response = await client.GetSkillsetSettingsAsync("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillsetSettings(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetSettings.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<IReadOnlyDictionary<string, string>> response = client.GetSkillsetSettings("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillsetSettings with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<IReadOnlyDictionary<string, string>> response = client.GetSkillsetSettings("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillsetSettingsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetSettingsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetSkillsetSettingsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetSkillsetSettings(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetSettings and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillsetSettings("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetSkillsetSettings with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillsetSettings("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="SetSkillInvocationStartedAsync(string,RequestContext)">
      <example>
This sample shows how to call SetSkillInvocationStartedAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillInvocationStartedAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetSkillInvocationStarted(string,RequestContext)">
      <example>
This sample shows how to call SetSkillInvocationStarted.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.SetSkillInvocationStarted("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillInvocationStarted with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.SetSkillInvocationStarted("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetSkillInvocationCompletedAsync(string,RequestContext)">
      <example>
This sample shows how to call SetSkillInvocationCompletedAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillInvocationCompletedAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetSkillInvocationCompleted(string,RequestContext)">
      <example>
This sample shows how to call SetSkillInvocationCompleted.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.SetSkillInvocationCompleted("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetSkillInvocationCompleted with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.SetSkillInvocationCompleted("<evaluationToken>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetSkillsetAuthInfoAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetAuthInfoAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<AuthDetails> response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillsetAuthInfoAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<AuthDetails> response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillsetAuthInfo(string,CancellationToken)">
      <example>
This sample shows how to call GetSkillsetAuthInfo.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<AuthDetails> response = client.GetSkillsetAuthInfo("<evaluationToken>");
]]></code>
This sample shows how to call GetSkillsetAuthInfo with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response<AuthDetails> response = client.GetSkillsetAuthInfo("<evaluationToken>");
]]></code></example>
    </member>
    <member name="GetSkillsetAuthInfoAsync(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetAuthInfoAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authLocation").ToString());
Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetSkillsetAuthInfoAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authLocation").ToString());
Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetSkillsetAuthInfo(string,RequestContext)">
      <example>
This sample shows how to call GetSkillsetAuthInfo and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillsetAuthInfo("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authLocation").ToString());
Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetSkillsetAuthInfo with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

Response response = client.GetSkillsetAuthInfo("<evaluationToken>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("authLocation").ToString());
Console.WriteLine(result.GetProperty("authInfo").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetTokenCredentialAsync(string,GetTokenCredentialRequest,CancellationToken)">
      <example>
This sample shows how to call GetTokenCredentialAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None);
Response<Models.AccessToken> response = await client.GetTokenCredentialAsync("<evaluationToken>", getTokenCredentialRequest);
]]></code>
This sample shows how to call GetTokenCredentialAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None)
{
    TenantId = "<tenantId>",
};
Response<Models.AccessToken> response = await client.GetTokenCredentialAsync("<evaluationToken>", getTokenCredentialRequest);
]]></code></example>
    </member>
    <member name="GetTokenCredential(string,GetTokenCredentialRequest,CancellationToken)">
      <example>
This sample shows how to call GetTokenCredential.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None);
Response<Models.AccessToken> response = client.GetTokenCredential("<evaluationToken>", getTokenCredentialRequest);
]]></code>
This sample shows how to call GetTokenCredential with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetTokenCredentialRequest getTokenCredentialRequest = new GetTokenCredentialRequest(new string[] { "<scopes>" }, TokenCredentialEnum.None)
{
    TenantId = "<tenantId>",
};
Response<Models.AccessToken> response = client.GetTokenCredential("<evaluationToken>", getTokenCredentialRequest);
]]></code></example>
    </member>
    <member name="GetTokenCredentialAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetTokenCredentialAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    scopes = new object[]
    {
        "<scopes>"
    },
    tokenCredentialType = "None",
});
Response response = await client.GetTokenCredentialAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("expiresOn").ToString());
]]></code>
This sample shows how to call GetTokenCredentialAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    scopes = new object[]
    {
        "<scopes>"
    },
    tokenCredentialType = "None",
    tenantId = "<tenantId>",
});
Response response = await client.GetTokenCredentialAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("expiresOn").ToString());
]]></code></example>
    </member>
    <member name="GetTokenCredential(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetTokenCredential and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    scopes = new object[]
    {
        "<scopes>"
    },
    tokenCredentialType = "None",
});
Response response = client.GetTokenCredential("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("expiresOn").ToString());
]]></code>
This sample shows how to call GetTokenCredential with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    scopes = new object[]
    {
        "<scopes>"
    },
    tokenCredentialType = "None",
    tenantId = "<tenantId>",
});
Response response = client.GetTokenCredential("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
Console.WriteLine(result.GetProperty("expiresOn").ToString());
]]></code></example>
    </member>
    <member name="GetInputAsync(string,GetInputRequest,CancellationToken)">
      <example>
This sample shows how to call GetInputAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetInputRequest getInputRequest = new GetInputRequest("<inputName>");
Response<SkillVariable> response = await client.GetInputAsync("<evaluationToken>", getInputRequest);
]]></code>
This sample shows how to call GetInputAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetInputRequest getInputRequest = new GetInputRequest("<inputName>")
{
    DefaultValue = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    },
};
Response<SkillVariable> response = await client.GetInputAsync("<evaluationToken>", getInputRequest);
]]></code></example>
    </member>
    <member name="GetInput(string,GetInputRequest,CancellationToken)">
      <example>
This sample shows how to call GetInput.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetInputRequest getInputRequest = new GetInputRequest("<inputName>");
Response<SkillVariable> response = client.GetInput("<evaluationToken>", getInputRequest);
]]></code>
This sample shows how to call GetInput with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

GetInputRequest getInputRequest = new GetInputRequest("<inputName>")
{
    DefaultValue = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    },
};
Response<SkillVariable> response = client.GetInput("<evaluationToken>", getInputRequest);
]]></code></example>
    </member>
    <member name="GetInputAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetInputAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
});
Response response = await client.GetInputAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code>
This sample shows how to call GetInputAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
    defaultValue = new
    {
        type = "<type>",
        value = "<value>",
        valueStoredAsJson = true,
    },
});
Response response = await client.GetInputAsync("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code></example>
    </member>
    <member name="GetInput(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call GetInput and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
});
Response response = client.GetInput("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code>
This sample shows how to call GetInput with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
    defaultValue = new
    {
        type = "<type>",
        value = "<value>",
        valueStoredAsJson = true,
    },
});
Response response = client.GetInput("<evaluationToken>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
]]></code></example>
    </member>
    <member name="SetInputAsync(string,SetInputRequest,CancellationToken)">
      <example>
This sample shows how to call SetInputAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

SetInputRequest setInputRequest = new SetInputRequest("<inputName>");
Response response = await client.SetInputAsync("<evaluationToken>", setInputRequest);
]]></code>
This sample shows how to call SetInputAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

SetInputRequest setInputRequest = new SetInputRequest("<inputName>")
{
    DefaultValue = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    },
};
Response response = await client.SetInputAsync("<evaluationToken>", setInputRequest);
]]></code></example>
    </member>
    <member name="SetInput(string,SetInputRequest,CancellationToken)">
      <example>
This sample shows how to call SetInput.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

SetInputRequest setInputRequest = new SetInputRequest("<inputName>");
Response response = client.SetInput("<evaluationToken>", setInputRequest);
]]></code>
This sample shows how to call SetInput with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

SetInputRequest setInputRequest = new SetInputRequest("<inputName>")
{
    DefaultValue = new SkillVariable(true)
    {
        Type = "<type>",
        Value = "<value>",
    },
};
Response response = client.SetInput("<evaluationToken>", setInputRequest);
]]></code></example>
    </member>
    <member name="SetInputAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SetInputAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
});
Response response = await client.SetInputAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetInputAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
    defaultValue = new
    {
        type = "<type>",
        value = "<value>",
        valueStoredAsJson = true,
    },
});
Response response = await client.SetInputAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SetInput(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SetInput.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
});
Response response = client.SetInput("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SetInput with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    inputName = "<inputName>",
    defaultValue = new
    {
        type = "<type>",
        value = "<value>",
        valueStoredAsJson = true,
    },
});
Response response = client.SetInput("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddSourcesAsync(string,AddSourcesRequest,CancellationToken)">
      <example>
This sample shows how to call AddSourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
});
Response response = await client.AddSourcesAsync("<evaluationToken>", addSourcesRequest);
]]></code>
This sample shows how to call AddSourcesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
    {
        SourceSerializedData = "<sourceSerializedData>",
    }
});
Response response = await client.AddSourcesAsync("<evaluationToken>", addSourcesRequest);
]]></code></example>
    </member>
    <member name="AddSources(string,AddSourcesRequest,CancellationToken)">
      <example>
This sample shows how to call AddSources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
});
Response response = client.AddSources("<evaluationToken>", addSourcesRequest);
]]></code>
This sample shows how to call AddSources with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

AddSourcesRequest addSourcesRequest = new AddSourcesRequest(new SkillSource[]
{
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
    {
        SourceSerializedData = "<sourceSerializedData>",
    }
});
Response response = client.AddSources("<evaluationToken>", addSourcesRequest);
]]></code></example>
    </member>
    <member name="AddSourcesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AddSourcesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
});
Response response = await client.AddSourcesAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddSourcesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
});
Response response = await client.AddSourcesAsync("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddSources(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AddSources.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
});
Response response = client.AddSources("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddSources with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SkillContextClient client = new SkillContextClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    sources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
});
Response response = client.AddSources("<evaluationToken>", content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
  </members>
</doc>