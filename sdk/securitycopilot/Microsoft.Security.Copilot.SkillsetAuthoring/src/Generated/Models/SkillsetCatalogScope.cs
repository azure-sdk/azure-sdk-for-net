// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> The scope of a skillset in the skillset catalog. </summary>
    public readonly partial struct SkillsetCatalogScope : IEquatable<SkillsetCatalogScope>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillsetCatalogScope"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillsetCatalogScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string UserValue = "User";
        private const string WorkspaceValue = "Workspace";
        private const string TenantValue = "Tenant";
        private const string GlobalValue = "Global";

        /// <summary> No scope specified. </summary>
        public static SkillsetCatalogScope None { get; } = new SkillsetCatalogScope(NoneValue);
        /// <summary> The skillset is scoped to the calling user. </summary>
        public static SkillsetCatalogScope User { get; } = new SkillsetCatalogScope(UserValue);
        /// <summary> The skillset is scoped to the calling user's workspace TODO what does this mean. </summary>
        public static SkillsetCatalogScope Workspace { get; } = new SkillsetCatalogScope(WorkspaceValue);
        /// <summary> The skillset is scoped to the calling user's tenant. </summary>
        public static SkillsetCatalogScope Tenant { get; } = new SkillsetCatalogScope(TenantValue);
        /// <summary> The skillset is available globally. </summary>
        public static SkillsetCatalogScope Global { get; } = new SkillsetCatalogScope(GlobalValue);
        /// <summary> Determines if two <see cref="SkillsetCatalogScope"/> values are the same. </summary>
        public static bool operator ==(SkillsetCatalogScope left, SkillsetCatalogScope right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillsetCatalogScope"/> values are not the same. </summary>
        public static bool operator !=(SkillsetCatalogScope left, SkillsetCatalogScope right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillsetCatalogScope"/>. </summary>
        public static implicit operator SkillsetCatalogScope(string value) => new SkillsetCatalogScope(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillsetCatalogScope other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillsetCatalogScope other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
