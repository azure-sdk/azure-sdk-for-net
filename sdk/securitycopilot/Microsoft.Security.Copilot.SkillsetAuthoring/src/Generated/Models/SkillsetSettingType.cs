// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Defines the type of a skillset setting. </summary>
    public readonly partial struct SkillsetSettingType : IEquatable<SkillsetSettingType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillsetSettingType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillsetSettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SecretStringValue = "SecretString";
        private const string StringValue = "String";

        /// <summary> The skillset setting is a secret string TODO what does this mean. </summary>
        public static SkillsetSettingType SecretString { get; } = new SkillsetSettingType(SecretStringValue);
        /// <summary> The skillset setting is a string. </summary>
        public static SkillsetSettingType String { get; } = new SkillsetSettingType(StringValue);
        /// <summary> Determines if two <see cref="SkillsetSettingType"/> values are the same. </summary>
        public static bool operator ==(SkillsetSettingType left, SkillsetSettingType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillsetSettingType"/> values are not the same. </summary>
        public static bool operator !=(SkillsetSettingType left, SkillsetSettingType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillsetSettingType"/>. </summary>
        public static implicit operator SkillsetSettingType(string value) => new SkillsetSettingType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillsetSettingType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillsetSettingType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
