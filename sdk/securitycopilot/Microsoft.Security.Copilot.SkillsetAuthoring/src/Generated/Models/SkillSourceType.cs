// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> The type for a source that was used in generating the output of a skill. </summary>
    public readonly partial struct SkillSourceType : IEquatable<SkillSourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillSourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UriValue = "Uri";
        private const string StringTypeValue = "StringType";

        /// <summary> Uri. </summary>
        public static SkillSourceType Uri { get; } = new SkillSourceType(UriValue);
        /// <summary> StringType. </summary>
        public static SkillSourceType StringType { get; } = new SkillSourceType(StringTypeValue);
        /// <summary> Determines if two <see cref="SkillSourceType"/> values are the same. </summary>
        public static bool operator ==(SkillSourceType left, SkillSourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillSourceType"/> values are not the same. </summary>
        public static bool operator !=(SkillSourceType left, SkillSourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillSourceType"/>. </summary>
        public static implicit operator SkillSourceType(string value) => new SkillSourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillSourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
