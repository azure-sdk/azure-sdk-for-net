// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    /// <summary> Defines the category of the data source/API that the skillset interacts with. </summary>
    public readonly partial struct SkillsetCategory : IEquatable<SkillsetCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkillsetCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkillsetCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HiddenValue = "Hidden";
        private const string MicrosoftValue = "Microsoft";
        private const string OtherValue = "Other";
        private const string WebValue = "Web";
        private const string TestingValue = "Testing";
        private const string PluginValue = "Plugin";

        /// <summary> Default value if a category is not specified. The skillset willnot appear in the UI. </summary>
        public static SkillsetCategory Hidden { get; } = new SkillsetCategory(HiddenValue);
        /// <summary> The skillset interacts with Microsoft services only. </summary>
        public static SkillsetCategory Microsoft { get; } = new SkillsetCategory(MicrosoftValue);
        /// <summary> The skillset interacts with 3rd party service. </summary>
        public static SkillsetCategory Other { get; } = new SkillsetCategory(OtherValue);
        /// <summary> The skillset interacts with public facing web services. </summary>
        public static SkillsetCategory Web { get; } = new SkillsetCategory(WebValue);
        /// <summary> The skillset is used for testing and debugging purposes. </summary>
        public static SkillsetCategory Testing { get; } = new SkillsetCategory(TestingValue);
        /// <summary> THe skillset of of a plugin format, such as ChatGPT or LogicApp plugins. </summary>
        public static SkillsetCategory Plugin { get; } = new SkillsetCategory(PluginValue);
        /// <summary> Determines if two <see cref="SkillsetCategory"/> values are the same. </summary>
        public static bool operator ==(SkillsetCategory left, SkillsetCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkillsetCategory"/> values are not the same. </summary>
        public static bool operator !=(SkillsetCategory left, SkillsetCategory right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkillsetCategory"/>. </summary>
        public static implicit operator SkillsetCategory(string value) => new SkillsetCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkillsetCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkillsetCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
