// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Models
{
    public partial class SkillsetSetting
    {
        internal static SkillsetSetting DeserializeSkillsetSetting(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string label = default;
            string description = default;
            string hintText = default;
            SkillsetSettingType settingType = default;
            bool required = default;
            string defaultValue = default;
            string value = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"u8))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hintText"u8))
                {
                    hintText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("settingType"u8))
                {
                    settingType = new SkillsetSettingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("required"u8))
                {
                    required = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultValue"u8))
                {
                    defaultValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
            }
            return new SkillsetSetting(name, label, description, hintText, settingType, required, defaultValue, value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static SkillsetSetting FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSkillsetSetting(document.RootElement);
        }
    }
}
