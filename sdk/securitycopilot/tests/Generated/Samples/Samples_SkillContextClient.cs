// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Microsoft.Security.Copilot.SkillsetAuthoring.Models;
using NUnit.Framework;

namespace Microsoft.Security.Copilot.SkillsetAuthoring.Samples
{
    public class Samples_SkillContextClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillContext()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillContext("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("promptId").ToString());
            Console.WriteLine(result.GetProperty("evaluationId").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("workspaceId").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("invocationType").ToString());
            Console.WriteLine(result.GetProperty("invocationCategory").ToString());
            Console.WriteLine(result.GetProperty("userName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillContext_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillContext("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("promptId").ToString());
            Console.WriteLine(result.GetProperty("evaluationId").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("workspaceId").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("invocationType").ToString());
            Console.WriteLine(result.GetProperty("invocationCategory").ToString());
            Console.WriteLine(result.GetProperty("userName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillContext_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillContextAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("promptId").ToString());
            Console.WriteLine(result.GetProperty("evaluationId").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("workspaceId").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("invocationType").ToString());
            Console.WriteLine(result.GetProperty("invocationCategory").ToString());
            Console.WriteLine(result.GetProperty("userName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillContext_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillContextAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("descriptor").GetProperty("enableVariableSubstitutionInCompose").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("featureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("inputs").GetProperty("<test>").GetProperty("valueStoredAsJson").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            Console.WriteLine(result.GetProperty("sessionId").ToString());
            Console.WriteLine(result.GetProperty("promptId").ToString());
            Console.WriteLine(result.GetProperty("evaluationId").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("complianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("workspaceId").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("invocationType").ToString());
            Console.WriteLine(result.GetProperty("invocationCategory").ToString());
            Console.WriteLine(result.GetProperty("userName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillContext_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetSkillContextAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InvokeSkill()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        sources = new[] {
                new {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                }
            },
                        suggestedPrompts = new[] {
                new {
                    prompt = "<prompt>",
                }
            },
                        skillName = "<skillName>",
                        skillInputs = new
                        {
                            key = "<String>",
                        },
                        outputLanguage = "<outputLanguage>",
                        outputType = "Primitive",
                        valueStoredAsJson = true,
                    },
                },
            };

            Response response = client.InvokeSkill("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("suggestedPrompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("skillInputs").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("outputLanguage").ToString());
            Console.WriteLine(result.GetProperty("outputType").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InvokeSkill_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillsetName = "<skillsetName>",
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        sources = new[] {
                new {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                    sourceSerializedData = "<sourceSerializedData>",
                }
            },
                        suggestedPrompts = new[] {
                new {
                    prompt = "<prompt>",
                }
            },
                        skillName = "<skillName>",
                        skillInputs = new
                        {
                            key = "<String>",
                        },
                        outputLanguage = "<outputLanguage>",
                        outputType = "Primitive",
                        type = "<type>",
                        value = "<value>",
                        valueStoredAsJson = true,
                    },
                },
            };

            Response response = client.InvokeSkill("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
            Console.WriteLine(result.GetProperty("suggestedPrompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("skillInputs").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("outputLanguage").ToString());
            Console.WriteLine(result.GetProperty("outputType").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InvokeSkill_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        sources = new[] {
                new {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                }
            },
                        suggestedPrompts = new[] {
                new {
                    prompt = "<prompt>",
                }
            },
                        skillName = "<skillName>",
                        skillInputs = new
                        {
                            key = "<String>",
                        },
                        outputLanguage = "<outputLanguage>",
                        outputType = "Primitive",
                        valueStoredAsJson = true,
                    },
                },
            };

            Response response = await client.InvokeSkillAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("suggestedPrompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("skillInputs").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("outputLanguage").ToString());
            Console.WriteLine(result.GetProperty("outputType").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InvokeSkill_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillsetName = "<skillsetName>",
                skillName = "<skillName>",
                inputs = new
                {
                    key = new
                    {
                        sources = new[] {
                new {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                    sourceSerializedData = "<sourceSerializedData>",
                }
            },
                        suggestedPrompts = new[] {
                new {
                    prompt = "<prompt>",
                }
            },
                        skillName = "<skillName>",
                        skillInputs = new
                        {
                            key = "<String>",
                        },
                        outputLanguage = "<outputLanguage>",
                        outputType = "Primitive",
                        type = "<type>",
                        value = "<value>",
                        valueStoredAsJson = true,
                    },
                },
            };

            Response response = await client.InvokeSkillAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceContent").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceType").ToString());
            Console.WriteLine(result.GetProperty("sources")[0].GetProperty("sourceSerializedData").ToString());
            Console.WriteLine(result.GetProperty("suggestedPrompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("skillInputs").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("outputLanguage").ToString());
            Console.WriteLine(result.GetProperty("outputType").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InvokeSkill_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var invokeSkill = new InvokeSkillRequest("<skillName>", new Dictionary<string, SkillVariable>
            {
                ["key"] = new SkillVariable(true)
                {
                    Type = "<Type>",
                    Value = "<Value>",
                },
            })
            {
                SkillsetName = "<SkillsetName>",
            };
            var result = await client.InvokeSkillAsync("<evaluationToken>", invokeSkill);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillDescriptor()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = "<String>";

            Response response = client.GetSkillDescriptor("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillDescriptor_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = "<String>";

            Response response = client.GetSkillDescriptor("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptor_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = "<String>";

            Response response = await client.GetSkillDescriptorAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptor_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = "<String>";

            Response response = await client.GetSkillDescriptorAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result.GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("altName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result.GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result.GetProperty("hidden").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result.GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("userVisibility").ToString());
            Console.WriteLine(result.GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result.GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result.GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result.GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptor_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var skillName = "<null>";
            var result = await client.GetSkillDescriptorAsync("<evaluationToken>", skillName);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillDescriptors()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillDescriptors("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("format").ToString());
            Console.WriteLine(result[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("altName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result[0].GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillDescriptors_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillDescriptors("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("format").ToString());
            Console.WriteLine(result[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("altName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result[0].GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptors_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillDescriptorsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("format").ToString());
            Console.WriteLine(result[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("altName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result[0].GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptors_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillDescriptorsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("skillset").GetProperty("ownersGroupId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("format").ToString());
            Console.WriteLine(result[0].GetProperty("displayName").ToString());
            Console.WriteLine(result[0].GetProperty("altName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillsetName").ToString());
            Console.WriteLine(result[0].GetProperty("dependencies")[0].GetProperty("skillName").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("examplePrompts")[0].ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("placeholderValue").ToString());
            Console.WriteLine(result[0].GetProperty("inputs")[0].GetProperty("enum")[0].ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("type").GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("outputs")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("promptAlignedName").ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("settings").GetProperty("<test>").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryStartMessage").ToString());
            Console.WriteLine(result[0].GetProperty("skillSummaryMetadata").GetProperty("summaryEndMessage").ToString());
            Console.WriteLine(result[0].GetProperty("enableVariableSubstitutionInCompose").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillDescriptors_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetSkillDescriptorsAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetDescriptors()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetDescriptors("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("ownersGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetDescriptors_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetDescriptors("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("ownersGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetDescriptors_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetDescriptorsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("ownersGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetDescriptors_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetDescriptorsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("namespace").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("descriptionDisplay").ToString());
            Console.WriteLine(result[0].GetProperty("disaplyName").ToString());
            Console.WriteLine(result[0].GetProperty("icon").ToString());
            Console.WriteLine(result[0].GetProperty("category").ToString());
            Console.WriteLine(result[0].GetProperty("catalogScope").ToString());
            Console.WriteLine(result[0].GetProperty("enabled").ToString());
            Console.WriteLine(result[0].GetProperty("hidden").ToString());
            Console.WriteLine(result[0].GetProperty("prerequisites")[0].ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("label").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("description").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("hintText").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("settingType").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("required").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result[0].GetProperty("settings")[0].GetProperty("value").ToString());
            Console.WriteLine(result[0].GetProperty("authorization").GetProperty("type").ToString());
            Console.WriteLine(result[0].GetProperty("supportedAuthTypes")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("userVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibilityFeatureFlags")[0].ToString());
            Console.WriteLine(result[0].GetProperty("plannerVisibility").ToString());
            Console.WriteLine(result[0].GetProperty("creatorUserId").ToString());
            Console.WriteLine(result[0].GetProperty("ownersGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetDescriptors_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetSkillsetDescriptorsAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExecutionContext()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetExecutionContext("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("SessionId").ToString());
            Console.WriteLine(result.GetProperty("PromptId").ToString());
            Console.WriteLine(result.GetProperty("EvaluationId").ToString());
            Console.WriteLine(result.GetProperty("TenantId").ToString());
            Console.WriteLine(result.GetProperty("AccountId").ToString());
            Console.WriteLine(result.GetProperty("WorkspaceId").ToString());
            Console.WriteLine(result.GetProperty("UserName").ToString());
            Console.WriteLine(result.GetProperty("Source").ToString());
            Console.WriteLine(result.GetProperty("UnauthenticatedSourceApplicationId").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkills").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkillsets")[0].ToString());
            Console.WriteLine(result.GetProperty("IsFidelisUser").ToString());
            Console.WriteLine(result.GetProperty("InvocationType").ToString());
            Console.WriteLine(result.GetProperty("InvocationCategory").ToString());
            Console.WriteLine(result.GetProperty("EncryptedUserAccessToken").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ApiVersion").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("Environment").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("IsGPUProxyEnabled").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("CustomerAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("EcsAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("PreviewState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetExecutionContext_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetExecutionContext("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("SessionId").ToString());
            Console.WriteLine(result.GetProperty("PromptId").ToString());
            Console.WriteLine(result.GetProperty("EvaluationId").ToString());
            Console.WriteLine(result.GetProperty("TenantId").ToString());
            Console.WriteLine(result.GetProperty("AccountId").ToString());
            Console.WriteLine(result.GetProperty("WorkspaceId").ToString());
            Console.WriteLine(result.GetProperty("UserName").ToString());
            Console.WriteLine(result.GetProperty("ApplicationId").ToString());
            Console.WriteLine(result.GetProperty("Source").ToString());
            Console.WriteLine(result.GetProperty("UnauthenticatedSourceApplicationId").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkills").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkillsets")[0].ToString());
            Console.WriteLine(result.GetProperty("IsFidelisUser").ToString());
            Console.WriteLine(result.GetProperty("InvocationType").ToString());
            Console.WriteLine(result.GetProperty("InvocationCategory").ToString());
            Console.WriteLine(result.GetProperty("EncryptedUserAccessToken").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ApiVersion").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("Environment").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("IsGPUProxyEnabled").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("GpuProcessingGeo").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("CustomerAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("EcsAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ContentFilterProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ReportingProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("PreviewState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExecutionContext_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetExecutionContextAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("SessionId").ToString());
            Console.WriteLine(result.GetProperty("PromptId").ToString());
            Console.WriteLine(result.GetProperty("EvaluationId").ToString());
            Console.WriteLine(result.GetProperty("TenantId").ToString());
            Console.WriteLine(result.GetProperty("AccountId").ToString());
            Console.WriteLine(result.GetProperty("WorkspaceId").ToString());
            Console.WriteLine(result.GetProperty("UserName").ToString());
            Console.WriteLine(result.GetProperty("Source").ToString());
            Console.WriteLine(result.GetProperty("UnauthenticatedSourceApplicationId").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkills").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkillsets")[0].ToString());
            Console.WriteLine(result.GetProperty("IsFidelisUser").ToString());
            Console.WriteLine(result.GetProperty("InvocationType").ToString());
            Console.WriteLine(result.GetProperty("InvocationCategory").ToString());
            Console.WriteLine(result.GetProperty("EncryptedUserAccessToken").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ApiVersion").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("Environment").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("IsGPUProxyEnabled").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("CustomerAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("EcsAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("PreviewState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExecutionContext_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetExecutionContextAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("SessionId").ToString());
            Console.WriteLine(result.GetProperty("PromptId").ToString());
            Console.WriteLine(result.GetProperty("EvaluationId").ToString());
            Console.WriteLine(result.GetProperty("TenantId").ToString());
            Console.WriteLine(result.GetProperty("AccountId").ToString());
            Console.WriteLine(result.GetProperty("WorkspaceId").ToString());
            Console.WriteLine(result.GetProperty("UserName").ToString());
            Console.WriteLine(result.GetProperty("ApplicationId").ToString());
            Console.WriteLine(result.GetProperty("Source").ToString());
            Console.WriteLine(result.GetProperty("UnauthenticatedSourceApplicationId").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkills").ToString());
            Console.WriteLine(result.GetProperty("SelectedSkillsets")[0].ToString());
            Console.WriteLine(result.GetProperty("IsFidelisUser").ToString());
            Console.WriteLine(result.GetProperty("InvocationType").ToString());
            Console.WriteLine(result.GetProperty("InvocationCategory").ToString());
            Console.WriteLine(result.GetProperty("EncryptedUserAccessToken").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("recordLog").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToEyesOnProductImprovement").ToString());
            Console.WriteLine(result.GetProperty("ComplianceFlags").GetProperty("customerOptedInToModelImprovement").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ApiVersion").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("Environment").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("IsGPUProxyEnabled").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("GpuProcessingGeo").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("CustomerAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("EcsAllowCrossGeoCompute").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ContentFilterProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("AzureOpenAIExecutionContext").GetProperty("ReportingProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("PreviewState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetExecutionContext_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetExecutionContextAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPromptHistory()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetPromptHistory("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPromptHistory_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetPromptHistory("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPromptHistory_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetPromptHistoryAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPromptHistory_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetPromptHistoryAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("prompt").ToString());
            Console.WriteLine(result.GetProperty("prompts")[0].GetProperty("response").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPromptHistory_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetPromptHistoryAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LogProgress()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                message = "<message>",
            };

            Response response = client.LogProgress("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LogProgress_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                level = "Error",
                message = "<message>",
            };

            Response response = client.LogProgress("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LogProgress_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                message = "<message>",
            };

            Response response = await client.LogProgressAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LogProgress_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                level = "Error",
                message = "<message>",
            };

            Response response = await client.LogProgressAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LogProgress_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var logProgressRequest = new LogProgressRequest("<message>")
            {
                Level = ProgressLogLevel.Error,
            };
            var result = await client.LogProgressAsync("<evaluationToken>", logProgressRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillOutput()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillOutputType = "Primitive",
            };

            Response response = client.SetSkillOutput("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillOutput_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillOutputType = "Primitive",
                primitiveOutput = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
                structuredOutput = new
                {
                    components = new[] {
            new {
                action = "None",
                includeInEvalResultAsRawComponent = true,
                name = "<name>",
                content = "<content>",
                description = "<description>",
                type = "GptOutput",
            }
        },
                },
                primitiveOutputValue = "<primitiveOutputValue>",
            };

            Response response = client.SetSkillOutput("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillOutput_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillOutputType = "Primitive",
            };

            Response response = await client.SetSkillOutputAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillOutput_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                skillOutputType = "Primitive",
                primitiveOutput = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
                structuredOutput = new
                {
                    components = new[] {
            new {
                action = "None",
                includeInEvalResultAsRawComponent = true,
                name = "<name>",
                content = "<content>",
                description = "<description>",
                type = "GptOutput",
            }
        },
                },
                primitiveOutputValue = "<primitiveOutputValue>",
            };

            Response response = await client.SetSkillOutputAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillOutput_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var evaluationResultOutput = new EvaluationResultOutput(SkillOutputType.Primitive)
            {
                PrimitiveOutput = new OutputSkillVariable(true, new SkillSource[]
            {
        new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
            SourceSerializedData = "<SourceSerializedData>",
        }
                }, new SuggestedPrompt[]
            {
        new SuggestedPrompt("<prompt>")
                }, "<skillName>", new Dictionary<string, string>
                {
                    ["key"] = "<null>",
                }, "<outputLanguage>", SkillOutputType.Primitive)
                {
                    Type = "<Type>",
                    Value = "<Value>",
                },
                StructuredOutput = new SkillStructuredOutput(new SkillOutputComponent[]
            {
        new SkillOutputComponent("<name>", "<content>", "<type>", SkillOutputComponentAction.None, true)
                }),
                PrimitiveOutputValue = "<PrimitiveOutputValue>",
            };
            var result = await client.SetSkillOutputAsync("<evaluationToken>", evaluationResultOutput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetSettings()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetSettings("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetSettings_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetSettings("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetSettings_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetSettings_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetSettingsAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetSettings_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetSkillsetSettingsAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillInvocationStarted()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.SetSkillInvocationStarted("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillInvocationStarted_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.SetSkillInvocationStarted("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillInvocationStarted_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillInvocationStarted_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.SetSkillInvocationStartedAsync("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillInvocationCompleted()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.SetSkillInvocationCompleted("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetSkillInvocationCompleted_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.SetSkillInvocationCompleted("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillInvocationCompleted_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetSkillInvocationCompleted_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.SetSkillInvocationCompletedAsync("<evaluationToken>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetAuthInfo()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetAuthInfo("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSkillsetAuthInfo_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = client.GetSkillsetAuthInfo("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetAuthInfo_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetAuthInfo_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            Response response = await client.GetSkillsetAuthInfoAsync("<evaluationToken>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("authLocation").ToString());
            Console.WriteLine(result.GetProperty("authInfo").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSkillsetAuthInfo_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var result = await client.GetSkillsetAuthInfoAsync("<evaluationToken>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTokenCredential()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                scopes = new[] {
        "<String>"
    },
                tokenCredentialType = "None",
            };

            Response response = client.GetTokenCredential("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTokenCredential_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                scopes = new[] {
        "<String>"
    },
                tokenCredentialType = "None",
                tenantId = "<tenantId>",
            };

            Response response = client.GetTokenCredential("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTokenCredential_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                scopes = new[] {
        "<String>"
    },
                tokenCredentialType = "None",
            };

            Response response = await client.GetTokenCredentialAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTokenCredential_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                scopes = new[] {
        "<String>"
    },
                tokenCredentialType = "None",
                tenantId = "<tenantId>",
            };

            Response response = await client.GetTokenCredentialAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("token").ToString());
            Console.WriteLine(result.GetProperty("expiresOn").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTokenCredential_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var getTokenCredentialRequest = new GetTokenCredentialRequest(new string[]
            {
    "<null>"
            }, TokenCredentialEnum.None)
            {
                TenantId = "<TenantId>",
            };
            var result = await client.GetTokenCredentialAsync("<evaluationToken>", getTokenCredentialRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInput()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
            };

            Response response = client.GetInput("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInput_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            };

            Response response = client.GetInput("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInput_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
            };

            Response response = await client.GetInputAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInput_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            };

            Response response = await client.GetInputAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("valueStoredAsJson").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInput_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var getInputRequest = new GetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<Type>",
                    Value = "<Value>",
                },
            };
            var result = await client.GetInputAsync("<evaluationToken>", getInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetInput()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
            };

            Response response = client.SetInput("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetInput_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            };

            Response response = client.SetInput("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetInput_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
            };

            Response response = await client.SetInputAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetInput_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                inputName = "<inputName>",
                defaultValue = new
                {
                    sources = new[] {
            new {
                displayName = "<displayName>",
                sourceContent = "<sourceContent>",
                sourceType = "Uri",
                sourceSerializedData = "<sourceSerializedData>",
            }
        },
                    suggestedPrompts = new[] {
            new {
                prompt = "<prompt>",
            }
        },
                    skillName = "<skillName>",
                    skillInputs = new
                    {
                        key = "<String>",
                    },
                    outputLanguage = "<outputLanguage>",
                    outputType = "Primitive",
                    type = "<type>",
                    value = "<value>",
                    valueStoredAsJson = true,
                },
            };

            Response response = await client.SetInputAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetInput_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var setInputRequest = new SetInputRequest("<inputName>")
            {
                DefaultValue = new SkillVariable(true)
                {
                    Type = "<Type>",
                    Value = "<Value>",
                },
            };
            var result = await client.SetInputAsync("<evaluationToken>", setInputRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSources()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                sources = new[] {
        new {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
            };

            Response response = client.AddSources("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSources_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                sources = new[] {
        new {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
            };

            Response response = client.AddSources("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSources_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                sources = new[] {
        new {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
        }
    },
            };

            Response response = await client.AddSourcesAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSources_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                sources = new[] {
        new {
            displayName = "<displayName>",
            sourceContent = "<sourceContent>",
            sourceType = "Uri",
            sourceSerializedData = "<sourceSerializedData>",
        }
    },
            };

            Response response = await client.AddSourcesAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSources_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var addSourcesRequest = new AddSourcesRequest(new SkillSource[]
            {
    new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
{
        SourceSerializedData = "<SourceSerializedData>",
    }
            });
            var result = await client.AddSourcesAsync("<evaluationToken>", addSourcesRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSource()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                SkillSource = new
                {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                },
            };

            Response response = client.AddSource("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSource_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                SkillSource = new
                {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                    sourceSerializedData = "<sourceSerializedData>",
                },
            };

            Response response = client.AddSource("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSource_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                SkillSource = new
                {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                },
            };

            Response response = await client.AddSourceAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSource_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                SkillSource = new
                {
                    displayName = "<displayName>",
                    sourceContent = "<sourceContent>",
                    sourceType = "Uri",
                    sourceSerializedData = "<sourceSerializedData>",
                },
            };

            Response response = await client.AddSourceAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSource_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var addSourceRequest = new AddSourceRequest(new SkillSource("<displayName>", "<sourceContent>", SkillSourceType.Uri)
            {
                SourceSerializedData = "<SourceSerializedData>",
            });
            var result = await client.AddSourceAsync("<evaluationToken>", addSourceRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSuggestedPrompts()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                suggestedPrompts = new[] {
        new {
            prompt = "<prompt>",
        }
    },
            };

            Response response = client.AddSuggestedPrompts("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddSuggestedPrompts_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                suggestedPrompts = new[] {
        new {
            prompt = "<prompt>",
        }
    },
            };

            Response response = client.AddSuggestedPrompts("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSuggestedPrompts_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                suggestedPrompts = new[] {
        new {
            prompt = "<prompt>",
        }
    },
            };

            Response response = await client.AddSuggestedPromptsAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSuggestedPrompts_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                suggestedPrompts = new[] {
        new {
            prompt = "<prompt>",
        }
    },
            };

            Response response = await client.AddSuggestedPromptsAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddSuggestedPrompts_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var addSuggestedPromptsRequest = new AddSuggestedPromptsRequest(new SuggestedPrompt[]
            {
    new SuggestedPrompt("<prompt>")
            });
            var result = await client.AddSuggestedPromptsAsync("<evaluationToken>", addSuggestedPromptsRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetFinalResponseSettings()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                finalResponseBehavior = "<finalResponseBehavior>",
            };

            Response response = client.SetFinalResponseSettings("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SetFinalResponseSettings_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                finalResponseBehavior = "<finalResponseBehavior>",
                finalResponseFormat = "<finalResponseFormat>",
                finalResponsePersona = "<finalResponsePersona>",
                finalResponseFallback = "<finalResponseFallback>",
            };

            Response response = client.SetFinalResponseSettings("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetFinalResponseSettings_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                finalResponseBehavior = "<finalResponseBehavior>",
            };

            Response response = await client.SetFinalResponseSettingsAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetFinalResponseSettings_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                finalResponseBehavior = "<finalResponseBehavior>",
                finalResponseFormat = "<finalResponseFormat>",
                finalResponsePersona = "<finalResponsePersona>",
                finalResponseFallback = "<finalResponseFallback>",
            };

            Response response = await client.SetFinalResponseSettingsAsync("<evaluationToken>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SetFinalResponseSettings_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var setFinalResponseSettingsRequest = new SetFinalResponseSettingsRequest("<finalResponseBehavior>")
            {
                FinalResponseFormat = "<FinalResponseFormat>",
                FinalResponsePersona = "<FinalResponsePersona>",
                FinalResponseFallback = "<FinalResponseFallback>",
            };
            var result = await client.SetFinalResponseSettingsAsync("<evaluationToken>", setFinalResponseSettingsRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                chatCompletionRequest = new
                {
                    Messages = new[] {
            new {
                Role = "<Role>",
            }
        },
                    Functions = new[] {
            new {
                Name = "<Name>",
                Description = "<Description>",
                Parameters = new {
                    Type = "<Type>",
                    Properties = new {
                        key = new {
                            Type = "<Type>",
                            Description = "<Description>",
                            Enum = new[] {
                                "<String>"
                            },
                        },
                    },
                    Required = new[] {
                        "<String>"
                    },
                },
                Result = new {
                    Type = "<Type>",
                },
            }
        },
                    FunctionCall = "<FunctionCall>",
                    Stop = new[] {
            "<String>"
        },
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
            };

            Response response = client.CreateChatCompletion("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Role").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                chatCompletionRequest = new
                {
                    Messages = new[] {
            new {
                Content = "<Content>",
                Role = "<Role>",
                Name = "<Name>",
                FunctionCall = new {
                    Name = "<Name>",
                    Arguments = new {
                        key = "<String>",
                    },
                },
                ToolCalls = new[] {
                    new {
                        Id = "<Id>",
                        Type = "<Type>",
                        Function = new {
                            Name = "<Name>",
                            Arguments = "<Arguments>",
                        },
                    }
                },
                ToolCallId = "<ToolCallId>",
            }
        },
                    Functions = new[] {
            new {
                Name = "<Name>",
                Description = "<Description>",
                Parameters = new {
                    Type = "<Type>",
                    Properties = new {
                        key = new {
                            Type = "<Type>",
                            Description = "<Description>",
                            Enum = new[] {
                                "<String>"
                            },
                        },
                    },
                    Required = new[] {
                        "<String>"
                    },
                },
                Result = new {
                    Type = "<Type>",
                },
            }
        },
                    FunctionCall = "<FunctionCall>",
                    Tools = new[] {
            new {
                Type = "<Type>",
                Function = new {
                    Description = "<Description>",
                    Name = "<Name>",
                    Parameters = new {},
                },
            }
        },
                    ToolChoice = "<ToolChoice>",
                    ParallelToolCalls = true,
                    MaxTokens = 1234,
                    Temperature = 123.45d,
                    TopP = 123.45d,
                    N = 1234,
                    Stream = true,
                    Logprobs = 1234,
                    Echo = true,
                    Stop = new[] {
            "<String>"
        },
                    PresencePenalty = 123.45d,
                    FrequencyPenalty = 123.45d,
                    BestOf = 1234,
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = client.CreateChatCompletion("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Content").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Role").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("FunctionCall").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("FunctionCall").GetProperty("Arguments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Type").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Function").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Function").GetProperty("Arguments").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCallId").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterResults").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterError").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                chatCompletionRequest = new
                {
                    Messages = new[] {
            new {
                Role = "<Role>",
            }
        },
                    Functions = new[] {
            new {
                Name = "<Name>",
                Description = "<Description>",
                Parameters = new {
                    Type = "<Type>",
                    Properties = new {
                        key = new {
                            Type = "<Type>",
                            Description = "<Description>",
                            Enum = new[] {
                                "<String>"
                            },
                        },
                    },
                    Required = new[] {
                        "<String>"
                    },
                },
                Result = new {
                    Type = "<Type>",
                },
            }
        },
                    FunctionCall = "<FunctionCall>",
                    Stop = new[] {
            "<String>"
        },
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
            };

            Response response = await client.CreateChatCompletionAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Role").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                chatCompletionRequest = new
                {
                    Messages = new[] {
            new {
                Content = "<Content>",
                Role = "<Role>",
                Name = "<Name>",
                FunctionCall = new {
                    Name = "<Name>",
                    Arguments = new {
                        key = "<String>",
                    },
                },
                ToolCalls = new[] {
                    new {
                        Id = "<Id>",
                        Type = "<Type>",
                        Function = new {
                            Name = "<Name>",
                            Arguments = "<Arguments>",
                        },
                    }
                },
                ToolCallId = "<ToolCallId>",
            }
        },
                    Functions = new[] {
            new {
                Name = "<Name>",
                Description = "<Description>",
                Parameters = new {
                    Type = "<Type>",
                    Properties = new {
                        key = new {
                            Type = "<Type>",
                            Description = "<Description>",
                            Enum = new[] {
                                "<String>"
                            },
                        },
                    },
                    Required = new[] {
                        "<String>"
                    },
                },
                Result = new {
                    Type = "<Type>",
                },
            }
        },
                    FunctionCall = "<FunctionCall>",
                    Tools = new[] {
            new {
                Type = "<Type>",
                Function = new {
                    Description = "<Description>",
                    Name = "<Name>",
                    Parameters = new {},
                },
            }
        },
                    ToolChoice = "<ToolChoice>",
                    ParallelToolCalls = true,
                    MaxTokens = 1234,
                    Temperature = 123.45d,
                    TopP = 123.45d,
                    N = 1234,
                    Stream = true,
                    Logprobs = 1234,
                    Echo = true,
                    Stop = new[] {
            "<String>"
        },
                    PresencePenalty = 123.45d,
                    FrequencyPenalty = 123.45d,
                    BestOf = 1234,
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = await client.CreateChatCompletionAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Content").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Role").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("FunctionCall").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("FunctionCall").GetProperty("Arguments").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Type").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Function").GetProperty("Name").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCalls")[0].GetProperty("Function").GetProperty("Arguments").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Message").GetProperty("ToolCallId").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterResults").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterError").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var request = new CreateChatCompletionRequest(new ChatCompletionRequest(new string[]
            {
    "<null>"
            }, null, BinaryData.FromString("<your binary data content>"), new Message[]
            {
    new Message("<role>")
{
        Content = "<Content>",
        Name = "<Name>",
        FunctionCall = new FunctionCall("<name>")
{
            Arguments =
{
                ["key"] = "<null>",
            },
        },
        ToolCalls =
{
            new ToolCall("<id>", "<type>", new ToolFunctionCall("<name>", "<arguments>"))
        },
        ToolCallId = "<ToolCallId>",
    }
            }, new GPTFunction[]
            {
    new GPTFunction("<name>", "<description>", new FunctionParameter("<type>", new Dictionary<string, FunctionParameterProperty>
{
        ["key"] = new FunctionParameterProperty("<type>", "<description>", new string[]
{
            "<null>"
        }),
    }, new string[]
{
        "<null>"
    }), new FunctionResult("<type>"))
            }, "<functionCall>")
            {
                Tools =
{
        new Tools("<type>", new FunctionDefinition("<description>", "<name>", BinaryData.FromString("<your binary data content>")))
    },
                ToolChoice = "<ToolChoice>",
                ParallelToolCalls = true,
            })
            {
                DeploymentId = "<DeploymentId>",
                OpenAiExecutionContext = new AzureOpenAIExecutionContext("<apiVersion>", "<environment>", true, true, true)
                {
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    ContentFilterProperties =
{
            ["key"] = "<null>",
        },
                    ReportingProperties =
{
            ["key"] = "<null>",
        },
                },
            };
            var result = await client.CreateChatCompletionAsync("<evaluationToken>", request);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                completionRequest = new
                {
                    Prompt = "<Prompt>",
                    Stop = new[] {
            "<String>"
        },
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
            };

            Response response = client.CreateCompletion("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Text").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                completionRequest = new
                {
                    Prompt = "<Prompt>",
                    MaxTokens = 1234,
                    Temperature = 123.45d,
                    TopP = 123.45d,
                    N = 1234,
                    Stream = true,
                    Logprobs = 1234,
                    Echo = true,
                    Stop = new[] {
            "<String>"
        },
                    PresencePenalty = 123.45d,
                    FrequencyPenalty = 123.45d,
                    BestOf = 1234,
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = client.CreateCompletion("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Text").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterResults").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterError").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                completionRequest = new
                {
                    Prompt = "<Prompt>",
                    Stop = new[] {
            "<String>"
        },
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
            };

            Response response = await client.CreateCompletionAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Text").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                completionRequest = new
                {
                    Prompt = "<Prompt>",
                    MaxTokens = 1234,
                    Temperature = 123.45d,
                    TopP = 123.45d,
                    N = 1234,
                    Stream = true,
                    Logprobs = 1234,
                    Echo = true,
                    Stop = new[] {
            "<String>"
        },
                    PresencePenalty = 123.45d,
                    FrequencyPenalty = 123.45d,
                    BestOf = 1234,
                    LogitBias = new
                    {
                        key = 1234,
                    },
                    ResponseFormat = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = await client.CreateCompletionAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Text").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("LogProbs").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("FinishReason").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterResults").ToString());
            Console.WriteLine(result.GetProperty("Choices")[0].GetProperty("ContentFilterError").ToString());
            Console.WriteLine(result.GetProperty("Id").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Created").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
            Console.WriteLine(result.GetProperty("PromptFilterResults")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var request = new CreateCompletionRequest(new CompletionRequest(new string[]
            {
    "<null>"
            }, null, BinaryData.FromString("<your binary data content>"), "<prompt>"))
            {
                DeploymentId = "<DeploymentId>",
                OpenAiExecutionContext = new AzureOpenAIExecutionContext("<apiVersion>", "<environment>", true, true, true)
                {
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    ContentFilterProperties =
{
            ["key"] = "<null>",
        },
                    ReportingProperties =
{
            ["key"] = "<null>",
        },
                },
            };
            var result = await client.CreateCompletionAsync("<evaluationToken>", request);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                embeddingRequest = new
                {
                    Input = new { },
                },
            };

            Response response = client.CreateEmbedding("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                embeddingRequest = new
                {
                    Input = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = client.CreateEmbedding("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                embeddingRequest = new
                {
                    Input = new { },
                },
            };

            Response response = await client.CreateEmbeddingAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var data = new
            {
                deploymentId = "<deploymentId>",
                embeddingRequest = new
                {
                    Input = new { },
                },
                openAiExecutionContext = new
                {
                    ApiVersion = "<ApiVersion>",
                    Environment = "<Environment>",
                    IsGPUProxyEnabled = true,
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    CustomerAllowCrossGeoCompute = true,
                    EcsAllowCrossGeoCompute = true,
                    ContentFilterProperties = new
                    {
                        key = "<String>",
                    },
                    ReportingProperties = new
                    {
                        key = "<String>",
                    },
                },
            };

            Response response = await client.CreateEmbeddingAsync("<evaluationToken>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Embedding")[0].ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Index").ToString());
            Console.WriteLine(result.GetProperty("Data")[0].GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Model").ToString());
            Console.WriteLine(result.GetProperty("Object").ToString());
            Console.WriteLine(result.GetProperty("Usage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new SkillContextClient(endpoint);

            var request = new CreateEmbeddingRequest(new EmbeddingRequest(BinaryData.FromString("<your binary data content>")))
            {
                DeploymentId = "<DeploymentId>",
                OpenAiExecutionContext = new AzureOpenAIExecutionContext("<apiVersion>", "<environment>", true, true, true)
                {
                    GpuProcessingGeo = "<GpuProcessingGeo>",
                    ContentFilterProperties =
{
            ["key"] = "<null>",
        },
                    ReportingProperties =
{
            ["key"] = "<null>",
        },
                },
            };
            var result = await client.CreateEmbeddingAsync("<evaluationToken>", request);
        }
    }
}
