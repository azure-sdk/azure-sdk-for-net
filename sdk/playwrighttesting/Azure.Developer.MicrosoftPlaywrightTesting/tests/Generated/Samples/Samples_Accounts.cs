// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.MicrosoftPlaywrightTesting.Samples
{
    public partial class Samples_Accounts
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Account_GetAccount_AccountsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = client.GetAccount("sampleAccountId_00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("subscriptionId").ToString());
            Console.WriteLine(result.GetProperty("subscriptionState").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Account_GetAccount_AccountsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = await client.GetAccountAsync("sampleAccountId_00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("subscriptionId").ToString());
            Console.WriteLine(result.GetProperty("subscriptionState").ToString());
            Console.WriteLine(result.GetProperty("tenantId").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Account_GetAccount_AccountsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response<Account> response = client.GetAccount("sampleAccountId_00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Account_GetAccount_AccountsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response<Account> response = await client.GetAccountAsync("sampleAccountId_00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetBrowsers_AccountsGetBrowsers()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = client.GetBrowsers("sampleAccountId_00000000-0000-0000-0000-000000000000", null, "Linux", null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetBrowsers_AccountsGetBrowsers_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = await client.GetBrowsersAsync("sampleAccountId_00000000-0000-0000-0000-000000000000", null, "Linux", null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Accounts_GetBrowsers_AccountsGetBrowsers_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = client.GetBrowsers("sampleAccountId_00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Accounts_GetBrowsers_AccountsGetBrowsers_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Accounts client = new AuthManagerClient(endpoint, credential).GetAccountsClient(apiVersion: "2024-12-01");

            Response response = await client.GetBrowsersAsync("sampleAccountId_00000000-0000-0000-0000-000000000000");
        }
    }
}
