// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.MicrosoftPlaywrightTesting.Samples
{
    public partial class Samples_TestRuns
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_CreateOrUpdate_TestRunsCreateOrUpdateTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Sample Test Run",
                creationTime = "2024-09-28T12:32:33Z",
                ciConfig = new
                {
                    branch = "main",
                    author = "John Doe",
                    revisionUrl = "https://github.com/azure-rest-api-specs/1234",
                },
                testRunConfig = new
                {
                    retryCount = 3,
                    repeatEach = 5000,
                    testFramework = new
                    {
                        name = "Playwright",
                        version = "3.1.0",
                        runnerType = "Nunit",
                    },
                    shardDetails = new
                    {
                        total = 5,
                    },
                    timeoutInMs = 60000L,
                    testType = "WebTest",
                    testSdkLanguage = "JavaScript",
                    servicePackageVersion = "1.0.0-beta.4",
                },
                cloudReportingEnabled = false,
            });
            Response response = client.CreateOrUpdate("4eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
            Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_CreateOrUpdate_TestRunsCreateOrUpdateTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Sample Test Run",
                creationTime = "2024-09-28T12:32:33Z",
                ciConfig = new
                {
                    branch = "main",
                    author = "John Doe",
                    revisionUrl = "https://github.com/azure-rest-api-specs/1234",
                },
                testRunConfig = new
                {
                    retryCount = 3,
                    repeatEach = 5000,
                    testFramework = new
                    {
                        name = "Playwright",
                        version = "3.1.0",
                        runnerType = "Nunit",
                    },
                    shardDetails = new
                    {
                        total = 5,
                    },
                    timeoutInMs = 60000L,
                    testType = "WebTest",
                    testSdkLanguage = "JavaScript",
                    servicePackageVersion = "1.0.0-beta.4",
                },
                cloudReportingEnabled = false,
            });
            Response response = await client.CreateOrUpdateAsync("4eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
            Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRun_TestRunsGetTestRun()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = client.GetTestRun("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
            Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRun_TestRunsGetTestRun_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = await client.GetTestRunAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("testRunId").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("creatorId").ToString());
            Console.WriteLine(result.GetProperty("creatorName").ToString());
            Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
            Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRun_TestRunsGetTestRun_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestRun> response = client.GetTestRun("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRun_TestRunsGetTestRun_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestRun> response = await client.GetTestRunAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_CreateArtifactsUploadBaseUrl_TestRunsCreateArtifactsUploadBaseUrl()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = client.CreateArtifactsUploadBaseUrl("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("accessLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_CreateArtifactsUploadBaseUrl_TestRunsCreateArtifactsUploadBaseUrl_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = await client.CreateArtifactsUploadBaseUrlAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("expiresAt").ToString());
            Console.WriteLine(result.GetProperty("accessLevel").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_CreateArtifactsUploadBaseUrl_TestRunsCreateArtifactsUploadBaseUrl_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestResultsUrl> response = client.CreateArtifactsUploadBaseUrl("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_CreateArtifactsUploadBaseUrl_TestRunsCreateArtifactsUploadBaseUrl_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestResultsUrl> response = await client.CreateArtifactsUploadBaseUrlAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_UpdateShardExecutionStatus_TestRunsUpdateShardExecutionStatus()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                shardId = 1,
                workersCount = 5,
                uploadCompleted = true,
                summary = new
                {
                    startTime = "8819-10-30T18:52:21Z",
                    endTime = "6230-12-03T14:22:58Z",
                    uploadMetadata = new
                    {
                        testResultsCount = 100,
                        totalAttachmentsCount = 100,
                        totalAttachmentsSize = 48200L,
                    },
                },
            });
            Response response = client.UpdateShardExecutionStatus("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_UpdateShardExecutionStatus_TestRunsUpdateShardExecutionStatus_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                shardId = 1,
                workersCount = 5,
                uploadCompleted = true,
                summary = new
                {
                    startTime = "8819-10-30T18:52:21Z",
                    endTime = "6230-12-03T14:22:58Z",
                    uploadMetadata = new
                    {
                        testResultsCount = 100,
                        totalAttachmentsCount = 100,
                        totalAttachmentsSize = 48200L,
                    },
                },
            });
            Response response = await client.UpdateShardExecutionStatusAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_UpdateShardExecutionStatus_TestRunsUpdateShardExecutionStatus_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            UpdateShardExecutionSummary summary = new UpdateShardExecutionSummary(DateTimeOffset.Parse("8819-10-30T18:52:21Z"), DateTimeOffset.Parse("6230-12-03T14:22:58Z"))
            {
                UploadMetadata = new UploadMetadata(100, 100, 48200L),
            };
            Response response = client.UpdateShardExecutionStatus("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", 1, summary, 5);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_UpdateShardExecutionStatus_TestRunsUpdateShardExecutionStatus_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            UpdateShardExecutionSummary summary = new UpdateShardExecutionSummary(DateTimeOffset.Parse("8819-10-30T18:52:21Z"), DateTimeOffset.Parse("6230-12-03T14:22:58Z"))
            {
                UploadMetadata = new UploadMetadata(100, 100, 48200L),
            };
            Response response = await client.UpdateShardExecutionStatusAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "123e4567-e89b-12d3-a456-426614174000", 1, summary, 5);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_ComputeAccountRunStats_TestRunsComputeAccountRunStats()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = client.ComputeAccountRunStats("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", 10, 0, 50, "status eq 'FAILED'", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
            Console.WriteLine(result.GetProperty("all").ToString());
            Console.WriteLine(result.GetProperty("cloudExecutionRuns").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_ComputeAccountRunStats_TestRunsComputeAccountRunStats_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = await client.ComputeAccountRunStatsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", 10, 0, 50, "status eq 'FAILED'", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
            Console.WriteLine(result.GetProperty("all").ToString());
            Console.WriteLine(result.GetProperty("cloudExecutionRuns").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_ComputeAccountRunStats_TestRunsComputeAccountRunStats_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<AccountTestRunStats> response = client.ComputeAccountRunStats("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_ComputeAccountRunStats_TestRunsComputeAccountRunStats_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<AccountTestRunStats> response = await client.ComputeAccountRunStatsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_ComputeMetadata_TestRunsComputeTestRunMetadata()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = client.ComputeMetadata("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("branches")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_ComputeMetadata_TestRunsComputeTestRunMetadata_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response response = await client.ComputeMetadataAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("branches")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRuns_ComputeMetadata_TestRunsComputeTestRunMetadata_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestRunsMetadata> response = client.ComputeMetadata("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRuns_ComputeMetadata_TestRunsComputeTestRunMetadata_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            Response<TestRunsMetadata> response = await client.ComputeMetadataAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRuns_TestRunsListTestRuns()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            foreach (BinaryData item in client.GetTestRuns("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, 0, null, "status eq 'Passed'", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testRunId").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("creatorId").ToString());
                Console.WriteLine(result.GetProperty("creatorName").ToString());
                Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
                Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRuns_TestRunsListTestRuns_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            await foreach (BinaryData item in client.GetTestRunsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, 0, null, "status eq 'Passed'", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testRunId").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("creatorId").ToString());
                Console.WriteLine(result.GetProperty("creatorName").ToString());
                Console.WriteLine(result.GetProperty("cloudRunEnabled").ToString());
                Console.WriteLine(result.GetProperty("cloudReportingEnabled").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestRun_GetTestRuns_TestRunsListTestRuns_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            foreach (TestRun item in client.GetTestRuns("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestRun_GetTestRuns_TestRunsListTestRuns_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestRuns client = new ReportingClient(endpoint, credential).GetTestRunsClient(apiVersion: "2025-02-24");

            await foreach (TestRun item in client.GetTestRunsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a"))
            {
            }
        }
    }
}
