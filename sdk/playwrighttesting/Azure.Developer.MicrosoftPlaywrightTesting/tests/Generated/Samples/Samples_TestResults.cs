// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.MicrosoftPlaywrightTesting.Samples
{
    public partial class Samples_TestResults
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResults_UploadBatch_TestResultsUploadBatch()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                values = new object[]
            {
new
{
testExecutionId = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
testId = "216f18b4-7fd4-3292-2fbe-b1630c317160",
testCombinationId = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
shardId = 1,
suiteId = "3dd73f57a76177b79e47c6e948989a31837b5fde",
testTitle = "HasTitle",
suiteTitle = "PlaywrightTests.ExampleTest",
fileName = "PlaywrightTests.dll",
lineNumber = 0,
retryCount = 0,
status = "Passed",
webTestConfig = new
{
jobName = "",
projectName = "",
os = "Windows",
},
durationInMs = 15531L,
startTime = "2025-01-09T12:20:20Z",
attachmentsMetadata = new object[]
{
"Image",
"Video"
},
ciConfig = new
{
ciProviderName = "Default",
},
artifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
},
new
{
testExecutionId = "f062a075-652d-4ef2-badc-24a1dbc307fb",
testId = "61a30792-6ba0-6b29-4561-0637526eba2d",
testCombinationId = "f062a075-652d-4ef2-badc-24a1dbc307fb",
shardId = 1,
suiteId = "3dd73f57a76177b79e47c6e948989a31837b5fde",
testTitle = "GetStartedLink",
suiteTitle = "PlaywrightTests.ExampleTest",
fileName = "PlaywrightTests.dll",
lineNumber = 0,
retryCount = 0,
status = "Passed",
webTestConfig = new
{
jobName = "",
projectName = "",
os = "Windows",
},
ciConfig = new
{
ciProviderName = "Default",
},
durationInMs = 15531L,
startTime = "2025-01-09T12:20:20Z",
attachmentsMetadata = new object[]
{
"Image",
"Video"
},
artifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
}
            },
            });
            Response response = client.UploadBatch("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "4c57e3a2-8a9c-4659-91f3-30ff4115f212", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResults_UploadBatch_TestResultsUploadBatch_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            using RequestContent content = RequestContent.Create(new
            {
                values = new object[]
            {
new
{
testExecutionId = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
testId = "216f18b4-7fd4-3292-2fbe-b1630c317160",
testCombinationId = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
shardId = 1,
suiteId = "3dd73f57a76177b79e47c6e948989a31837b5fde",
testTitle = "HasTitle",
suiteTitle = "PlaywrightTests.ExampleTest",
fileName = "PlaywrightTests.dll",
lineNumber = 0,
retryCount = 0,
status = "Passed",
webTestConfig = new
{
jobName = "",
projectName = "",
os = "Windows",
},
durationInMs = 15531L,
startTime = "2025-01-09T12:20:20Z",
attachmentsMetadata = new object[]
{
"Image",
"Video"
},
ciConfig = new
{
ciProviderName = "Default",
},
artifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
},
new
{
testExecutionId = "f062a075-652d-4ef2-badc-24a1dbc307fb",
testId = "61a30792-6ba0-6b29-4561-0637526eba2d",
testCombinationId = "f062a075-652d-4ef2-badc-24a1dbc307fb",
shardId = 1,
suiteId = "3dd73f57a76177b79e47c6e948989a31837b5fde",
testTitle = "GetStartedLink",
suiteTitle = "PlaywrightTests.ExampleTest",
fileName = "PlaywrightTests.dll",
lineNumber = 0,
retryCount = 0,
status = "Passed",
webTestConfig = new
{
jobName = "",
projectName = "",
os = "Windows",
},
ciConfig = new
{
ciProviderName = "Default",
},
durationInMs = 15531L,
startTime = "2025-01-09T12:20:20Z",
attachmentsMetadata = new object[]
{
"Image",
"Video"
},
artifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
}
            },
            });
            Response response = await client.UploadBatchAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "4c57e3a2-8a9c-4659-91f3-30ff4115f212", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResults_UploadBatch_TestResultsUploadBatch_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response response = client.UploadBatch("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "4c57e3a2-8a9c-4659-91f3-30ff4115f212", new TestResultDetails[]
            {
new TestResultDetails(
    "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
    "216f18b4-7fd4-3292-2fbe-b1630c317160",
    "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
    1,
    "3dd73f57a76177b79e47c6e948989a31837b5fde",
    "HasTitle",
    "PlaywrightTests.ExampleTest",
    "PlaywrightTests.dll",
    0,
    0,
    TestStatus.Passed,
    15531L,
    DateTimeOffset.Parse("2025-01-09T12:20:20Z"))
{
WebTestConfig = new WebTestConfig("", "", default, OsType.Windows),
AttachmentsMetadata = {AttachmentKind.Image, AttachmentKind.Video},
ArtifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
},
new TestResultDetails(
    "f062a075-652d-4ef2-badc-24a1dbc307fb",
    "61a30792-6ba0-6b29-4561-0637526eba2d",
    "f062a075-652d-4ef2-badc-24a1dbc307fb",
    1,
    "3dd73f57a76177b79e47c6e948989a31837b5fde",
    "GetStartedLink",
    "PlaywrightTests.ExampleTest",
    "PlaywrightTests.dll",
    0,
    0,
    TestStatus.Passed,
    15531L,
    DateTimeOffset.Parse("2025-01-09T12:20:20Z"))
{
WebTestConfig = new WebTestConfig("", "", default, OsType.Windows),
AttachmentsMetadata = {AttachmentKind.Image, AttachmentKind.Video},
ArtifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResults_UploadBatch_TestResultsUploadBatch_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response response = await client.UploadBatchAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", "4c57e3a2-8a9c-4659-91f3-30ff4115f212", new TestResultDetails[]
            {
new TestResultDetails(
    "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
    "216f18b4-7fd4-3292-2fbe-b1630c317160",
    "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
    1,
    "3dd73f57a76177b79e47c6e948989a31837b5fde",
    "HasTitle",
    "PlaywrightTests.ExampleTest",
    "PlaywrightTests.dll",
    0,
    0,
    TestStatus.Passed,
    15531L,
    DateTimeOffset.Parse("2025-01-09T12:20:20Z"))
{
WebTestConfig = new WebTestConfig("", "", default, OsType.Windows),
AttachmentsMetadata = {AttachmentKind.Image, AttachmentKind.Video},
ArtifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
},
new TestResultDetails(
    "f062a075-652d-4ef2-badc-24a1dbc307fb",
    "61a30792-6ba0-6b29-4561-0637526eba2d",
    "f062a075-652d-4ef2-badc-24a1dbc307fb",
    1,
    "3dd73f57a76177b79e47c6e948989a31837b5fde",
    "GetStartedLink",
    "PlaywrightTests.ExampleTest",
    "PlaywrightTests.dll",
    0,
    0,
    TestStatus.Passed,
    15531L,
    DateTimeOffset.Parse("2025-01-09T12:20:20Z"))
{
WebTestConfig = new WebTestConfig("", "", default, OsType.Windows),
AttachmentsMetadata = {AttachmentKind.Image, AttachmentKind.Video},
ArtifactsPath = "4c57e3a2-8a9c-4659-91f3-30ff4115f187",
}
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResults_ComputeResultsStats_TestResultsGetTestResultsSummary()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response response = client.ComputeResultsStats("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
            Console.WriteLine(result.GetProperty("skipped").ToString());
            Console.WriteLine(result.GetProperty("all").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResults_ComputeResultsStats_TestResultsGetTestResultsSummary_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response response = await client.ComputeResultsStatsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("passed").ToString());
            Console.WriteLine(result.GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("flaky").ToString());
            Console.WriteLine(result.GetProperty("skipped").ToString());
            Console.WriteLine(result.GetProperty("all").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResults_ComputeResultsStats_TestResultsGetTestResultsSummary_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response<ResultsStats> response = client.ComputeResultsStats("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResults_ComputeResultsStats_TestResultsGetTestResultsSummary_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            Response<ResultsStats> response = await client.ComputeResultsStatsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResultDetails_GetTestResultDetails_TestResultsListTestResults()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            foreach (BinaryData item in client.GetTestResultDetails("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, 0, null, "status eq 'Passed'", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testExecutionId").ToString());
                Console.WriteLine(result.GetProperty("testId").ToString());
                Console.WriteLine(result.GetProperty("testCombinationId").ToString());
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("shardId").ToString());
                Console.WriteLine(result.GetProperty("accountId").ToString());
                Console.WriteLine(result.GetProperty("suiteId").ToString());
                Console.WriteLine(result.GetProperty("testTitle").ToString());
                Console.WriteLine(result.GetProperty("suiteTitle").ToString());
                Console.WriteLine(result.GetProperty("fileName").ToString());
                Console.WriteLine(result.GetProperty("lineNumber").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("durationInMs").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResultDetails_GetTestResultDetails_TestResultsListTestResults_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            await foreach (BinaryData item in client.GetTestResultDetailsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a", null, 0, null, "status eq 'Passed'", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("testExecutionId").ToString());
                Console.WriteLine(result.GetProperty("testId").ToString());
                Console.WriteLine(result.GetProperty("testCombinationId").ToString());
                Console.WriteLine(result.GetProperty("runId").ToString());
                Console.WriteLine(result.GetProperty("shardId").ToString());
                Console.WriteLine(result.GetProperty("accountId").ToString());
                Console.WriteLine(result.GetProperty("suiteId").ToString());
                Console.WriteLine(result.GetProperty("testTitle").ToString());
                Console.WriteLine(result.GetProperty("suiteTitle").ToString());
                Console.WriteLine(result.GetProperty("fileName").ToString());
                Console.WriteLine(result.GetProperty("lineNumber").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("durationInMs").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestResultDetails_GetTestResultDetails_TestResultsListTestResults_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            foreach (TestResultDetails item in client.GetTestResultDetails("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestResultDetails_GetTestResultDetails_TestResultsListTestResults_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            TestResults client = new ReportingClient(endpoint, credential).GetTestResultsClient(apiVersion: "2025-02-24");

            await foreach (TestResultDetails item in client.GetTestResultDetailsAsync("eastasia_a56bbc94-fbb7-4c20-9b17-981067e4580a"))
            {
            }
        }
    }
}
