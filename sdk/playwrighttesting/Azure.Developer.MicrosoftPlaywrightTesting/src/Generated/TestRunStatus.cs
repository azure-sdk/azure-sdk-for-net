// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Status of the test run. </summary>
    public readonly partial struct TestRunStatus : IEquatable<TestRunStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestRunStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestRunStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "Running";
        private const string ClientCompleteValue = "ClientComplete";
        private const string ServerCompleteValue = "ServerComplete";

        /// <summary> The test run is currently running. </summary>
        public static TestRunStatus Running { get; } = new TestRunStatus(RunningValue);
        /// <summary> The test run completed on the client side. </summary>
        public static TestRunStatus ClientComplete { get; } = new TestRunStatus(ClientCompleteValue);
        /// <summary> The test run completed on the server side. </summary>
        public static TestRunStatus ServerComplete { get; } = new TestRunStatus(ServerCompleteValue);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are the same. </summary>
        public static bool operator ==(TestRunStatus left, TestRunStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestRunStatus"/> values are not the same. </summary>
        public static bool operator !=(TestRunStatus left, TestRunStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestRunStatus"/>. </summary>
        public static implicit operator TestRunStatus(string value) => new TestRunStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestRunStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestRunStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
