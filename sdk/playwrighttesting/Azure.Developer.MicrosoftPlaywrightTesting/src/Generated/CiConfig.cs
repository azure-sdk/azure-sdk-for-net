// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model representing continuous integration (CI) configuration. </summary>
    public partial class CiConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CiConfig"/>. </summary>
        public CiConfig()
        {
        }

        /// <summary> Initializes a new instance of <see cref="CiConfig"/>. </summary>
        /// <param name="ciProviderName"> Name of the CI provider.  GitHub | Azure DevOps | Default. </param>
        /// <param name="branch"> Branch name in the source code repository. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="author"> Author of the commit triggering the test run. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="commitId"> ID of the commit triggering the test run. This is the SHA-1 hash. </param>
        /// <param name="revisionUrl"> URL linking to the revision details. Should be a valid Url. Allowed characters- alphanumeric characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward slashes (/) for hierarchy. Special characters must be URL-encoded. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CiConfig(CiProviderName? ciProviderName, string branch, string author, string commitId, Uri revisionUrl, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CiProviderName = ciProviderName;
            Branch = branch;
            Author = author;
            CommitId = commitId;
            RevisionUrl = revisionUrl;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Name of the CI provider.  GitHub | Azure DevOps | Default. </summary>
        public CiProviderName? CiProviderName { get; set; }
        /// <summary> Branch name in the source code repository. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string Branch { get; set; }
        /// <summary> Author of the commit triggering the test run. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string Author { get; set; }
        /// <summary> ID of the commit triggering the test run. This is the SHA-1 hash. </summary>
        public string CommitId { get; set; }
        /// <summary> URL linking to the revision details. Should be a valid Url. Allowed characters- alphanumeric characters (A-Z, a-z, 0-9), hyphens (-), underscores (_), periods (.), tildes (~), and forward slashes (/) for hierarchy. Special characters must be URL-encoded. </summary>
        public Uri RevisionUrl { get; set; }
    }
}
