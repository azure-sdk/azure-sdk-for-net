// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> The UpdateShardExecutionStatusRequest. </summary>
    internal partial class UpdateShardExecutionStatusRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UpdateShardExecutionStatusRequest"/>. </summary>
        /// <param name="shardId"> Shard Id for the shard- indexed 1,2,3 etc. </param>
        /// <param name="summary"> Summary of the test run shard. </param>
        /// <param name="workersCount"> number of workers used by playwright client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summary"/> is null. </exception>
        internal UpdateShardExecutionStatusRequest(int shardId, UpdateShardExecutionSummary summary, int workersCount)
        {
            Argument.AssertNotNull(summary, nameof(summary));

            ShardId = shardId;
            Summary = summary;
            WorkersCount = workersCount;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateShardExecutionStatusRequest"/>. </summary>
        /// <param name="shardId"> Shard Id for the shard- indexed 1,2,3 etc. </param>
        /// <param name="summary"> Summary of the test run shard. </param>
        /// <param name="workersCount"> number of workers used by playwright client. </param>
        /// <param name="uploadCompleted"> Flag indicating if upload is completed for the shard. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UpdateShardExecutionStatusRequest(int shardId, UpdateShardExecutionSummary summary, int workersCount, bool? uploadCompleted, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ShardId = shardId;
            Summary = summary;
            WorkersCount = workersCount;
            UploadCompleted = uploadCompleted;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UpdateShardExecutionStatusRequest"/> for deserialization. </summary>
        internal UpdateShardExecutionStatusRequest()
        {
        }

        /// <summary> Shard Id for the shard- indexed 1,2,3 etc. </summary>
        public int ShardId { get; }
        /// <summary> Summary of the test run shard. </summary>
        public UpdateShardExecutionSummary Summary { get; }
        /// <summary> number of workers used by playwright client. </summary>
        public int WorkersCount { get; }
        /// <summary> Flag indicating if upload is completed for the shard. </summary>
        public bool? UploadCompleted { get; }
    }
}
