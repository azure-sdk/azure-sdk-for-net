// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model factory for models. </summary>
    public static partial class DeveloperMicrosoftPlaywrightTestingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.TestResultDetails"/>. </summary>
        /// <param name="testExecutionId"> Identifier of the test execution. Should be a guid. </param>
        /// <param name="testId"> Identifier of the test. </param>
        /// <param name="testCombinationId"> Identifier of the test combination.This is SHA-1 hash. </param>
        /// <param name="runId"> Identifier of the test run. </param>
        /// <param name="shardId"> Identifier of the shard. </param>
        /// <param name="accountId"> Identifier of the account. </param>
        /// <param name="suiteId"> Identifier of the suite. </param>
        /// <param name="testTitle"> Title of the test. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="suiteTitle"> Title of the suite. All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="fileName"> Name of the file- subject to constraints of OS and programming language. </param>
        /// <param name="lineNumber"> Line number. </param>
        /// <param name="retryCount"> Number of retryCount attempts. Max retryCount is 100, after which testresults metadata will not be stored. </param>
        /// <param name="status"> Status of the test result. While uploading results, a single test execution status can't be Flaky. </param>
        /// <param name="webTestConfig"> Configuration for the web test. </param>
        /// <param name="ciConfig"> Continuous integration configuration. </param>
        /// <param name="durationInMs"> Duration of the test execution in milliseconds. </param>
        /// <param name="startTime"> Start time of the test execution.- (RFC 3339 literal format). </param>
        /// <param name="attachmentsMetadata"> Metadata related to attachments- comma separated IMAGE, VIDEO, TRACE as applicable. </param>
        /// <param name="previousRetries"> Previous retry summaries. While uploading results, each retry is uploaded separately.However, all the retries of a test gets grouped on the server side and can be retrieved as a single entity using GET API. </param>
        /// <param name="tags"> List of tags associated with the test result. All unicode characters except ASCII control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="annotations"> List of annotations (https://playwright.dev/docs/test-annotations).All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="artifactsPath"> Relative path in storage for all the artifacts of this test. contain only lowercase letters, numbers, and hyphens, and cannot start or end with a hyphen or contain consecutive hyphens. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.TestResultDetails"/> instance for mocking. </returns>
        public static TestResultDetails TestResultDetails(string testExecutionId = null, string testId = null, string testCombinationId = null, string runId = null, int shardId = default, string accountId = null, string suiteId = null, string testTitle = null, string suiteTitle = null, string fileName = null, int lineNumber = default, int retryCount = default, TestStatus status = default, WebTestConfig webTestConfig = null, CiConfig ciConfig = null, long durationInMs = default, DateTimeOffset startTime = default, IEnumerable<AttachmentKind> attachmentsMetadata = null, IEnumerable<PreviousRetrySummary> previousRetries = null, IEnumerable<string> tags = null, IEnumerable<string> annotations = null, string artifactsPath = null)
        {
            attachmentsMetadata ??= new List<AttachmentKind>();
            previousRetries ??= new List<PreviousRetrySummary>();
            tags ??= new List<string>();
            annotations ??= new List<string>();

            return new TestResultDetails(
                testExecutionId,
                testId,
                testCombinationId,
                runId,
                shardId,
                accountId,
                suiteId,
                testTitle,
                suiteTitle,
                fileName,
                lineNumber,
                retryCount,
                status,
                webTestConfig,
                ciConfig,
                durationInMs,
                startTime,
                attachmentsMetadata?.ToList(),
                previousRetries?.ToList(),
                tags?.ToList(),
                annotations?.ToList(),
                artifactsPath,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.PreviousRetrySummary"/>. </summary>
        /// <param name="testExecutionId"> Identifier of the test execution. </param>
        /// <param name="retryCount"> Number of retryCount attempts. </param>
        /// <param name="status"> Status of the test execution. </param>
        /// <param name="durationInMs"> Duration of the test execution. </param>
        /// <param name="startTime"> Start time of the test execution- RFC 3339 literal format. </param>
        /// <param name="attachmentsMetadata"> Metadata related to attachments. </param>
        /// <param name="artifactsPath"> List of artifacts paths. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.PreviousRetrySummary"/> instance for mocking. </returns>
        public static PreviousRetrySummary PreviousRetrySummary(string testExecutionId = null, int retryCount = default, TestStatus status = default, TimeSpan durationInMs = default, DateTimeOffset startTime = default, IEnumerable<AttachmentKind> attachmentsMetadata = null, string artifactsPath = null)
        {
            attachmentsMetadata ??= new List<AttachmentKind>();

            return new PreviousRetrySummary(
                testExecutionId,
                retryCount,
                status,
                durationInMs,
                startTime,
                attachmentsMetadata?.ToList(),
                artifactsPath,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.ResultsStats"/>. </summary>
        /// <param name="passed"> Passed test-results within a run. </param>
        /// <param name="failed"> Failed tests within a run. </param>
        /// <param name="flaky"> Flaky tests within a run. </param>
        /// <param name="skipped"> Skipped tests within a run. </param>
        /// <param name="all"> Total tests within a run. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.ResultsStats"/> instance for mocking. </returns>
        public static ResultsStats ResultsStats(int passed = default, int failed = default, int flaky = default, int skipped = default, int all = default)
        {
            return new ResultsStats(
                passed,
                failed,
                flaky,
                skipped,
                all,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.TestRun"/>. </summary>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="displayName"> Display name of the test run All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="creationTime"> Creation time of the test run -RFC 3339 literal format. </param>
        /// <param name="creatorId"> Creator's identifier. It's the Id referred in the access/Entra token. </param>
        /// <param name="creatorName"> Creator's name. </param>
        /// <param name="cloudRunSummary"> Summary of the Cloud executed run. Only available if cloud run is enabled. </param>
        /// <param name="cloudReportSummary"> Summary of reports uploaded on cloud. Only available if cloud reporting is enabled. </param>
        /// <param name="ciConfig"> Continuous integration configuration. </param>
        /// <param name="testRunConfig"> Client configuration for the test run. </param>
        /// <param name="testResultsUrl"> URL for accessing test results. </param>
        /// <param name="cloudRunEnabled"> Flag indicating if cloud run is enabled. </param>
        /// <param name="cloudReportingEnabled"> Must be set to true when users want to use Reporting Feature. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.TestRun"/> instance for mocking. </returns>
        public static TestRun TestRun(string testRunId = null, string displayName = null, DateTimeOffset creationTime = default, string creatorId = null, string creatorName = null, CloudRunSummary cloudRunSummary = null, CloudReportingSummary cloudReportSummary = null, CiConfig ciConfig = null, TestRunConfig testRunConfig = null, TestResultsUrl testResultsUrl = null, bool cloudRunEnabled = default, bool cloudReportingEnabled = default)
        {
            return new TestRun(
                testRunId,
                displayName,
                creationTime,
                creatorId,
                creatorName,
                cloudRunSummary,
                cloudReportSummary,
                ciConfig,
                testRunConfig,
                testResultsUrl,
                cloudRunEnabled,
                cloudReportingEnabled,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.CloudRunSummary"/>. </summary>
        /// <param name="serverStatus"> Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE. </param>
        /// <param name="billableTimeInMs"> Billable time for the test run. Available after testRun Ends. </param>
        /// <param name="totalTimeInMs"> Total time taken for the test run. </param>
        /// <param name="browserSessionsCount"> Number of browser sessions used in the test run. </param>
        /// <param name="browserQuotaExceeded"> Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel browser limit for the workspace. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.CloudRunSummary"/> instance for mocking. </returns>
        public static CloudRunSummary CloudRunSummary(TestRunStatus serverStatus = default, int? billableTimeInMs = null, int? totalTimeInMs = null, int? browserSessionsCount = null, bool browserQuotaExceeded = default)
        {
            return new CloudRunSummary(
                serverStatus,
                billableTimeInMs,
                totalTimeInMs,
                browserSessionsCount,
                browserQuotaExceeded,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.CloudReportingSummary"/>. </summary>
        /// <param name="startTime"> Start time of the test run in datetime(RFC 3339 literal format). </param>
        /// <param name="endTime"> End time of the test run. </param>
        /// <param name="serverStatus"> Processing Status of the testresults on the Server Side. </param>
        /// <param name="totalTestsCount"> Total number of tests executed. </param>
        /// <param name="passedTestsCount"> Number of tests that passed. </param>
        /// <param name="failedTestsCount"> Number of tests that failed. </param>
        /// <param name="skippedTestsCount"> Number of tests that were skipped. </param>
        /// <param name="flakyTestsCount"> Number of tests that were flaky (passed on retry). </param>
        /// <param name="status"> Status of the test run. </param>
        /// <param name="jobs"> List of CI jobs associated with the test run. </param>
        /// <param name="projects"> List of Playwright projects (https://playwright.dev/docs/test-projects) associated with the test run. </param>
        /// <param name="tags"> List of tags associated with the test run. </param>
        /// <param name="workersCount"> Number of worker instances. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.CloudReportingSummary"/> instance for mocking. </returns>
        public static CloudReportingSummary CloudReportingSummary(DateTimeOffset startTime = default, DateTimeOffset endTime = default, TestRunStatus serverStatus = default, int? totalTestsCount = null, int? passedTestsCount = null, int? failedTestsCount = null, int? skippedTestsCount = null, int? flakyTestsCount = null, TestStatus status = default, IEnumerable<string> jobs = null, IEnumerable<string> projects = null, IEnumerable<string> tags = null, int? workersCount = null)
        {
            jobs ??= new List<string>();
            projects ??= new List<string>();
            tags ??= new List<string>();

            return new CloudReportingSummary(
                startTime,
                endTime,
                serverStatus,
                totalTestsCount,
                passedTestsCount,
                failedTestsCount,
                skippedTestsCount,
                flakyTestsCount,
                status,
                jobs?.ToList(),
                projects?.ToList(),
                tags?.ToList(),
                workersCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.TestResultsUrl"/>. </summary>
        /// <param name="url"> URL for accessing test results. </param>
        /// <param name="createdAt"> Creation timestamp of the test results URL- RFC 3339 literal format. </param>
        /// <param name="expiresAt"> Expiration timestamp of the test results URL- RFC 3339 literal format. </param>
        /// <param name="accessLevel"> Access level for the test results URL. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.TestResultsUrl"/> instance for mocking. </returns>
        public static TestResultsUrl TestResultsUrl(Uri url = null, DateTimeOffset createdAt = default, DateTimeOffset expiresAt = default, AccessLevel accessLevel = default)
        {
            return new TestResultsUrl(url, createdAt, expiresAt, accessLevel, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.UpdateShardExecutionSummary"/>. </summary>
        /// <param name="startTime"> Start time of the test run in datetime(RFC 3339 literal format). </param>
        /// <param name="endTime"> End time of the test run. </param>
        /// <param name="uploadMetadata"> Metadata related to test run uploads. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.UpdateShardExecutionSummary"/> instance for mocking. </returns>
        public static UpdateShardExecutionSummary UpdateShardExecutionSummary(DateTimeOffset startTime = default, DateTimeOffset endTime = default, UploadMetadata uploadMetadata = null)
        {
            return new UpdateShardExecutionSummary(startTime, endTime, uploadMetadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.AccountTestRunStats"/>. </summary>
        /// <param name="passed"> Passed  runs within an account. </param>
        /// <param name="failed"> Failed  runs within an account. </param>
        /// <param name="flaky"> Flaky  runs within an account. </param>
        /// <param name="all"> Total  runs within an account. </param>
        /// <param name="cloudExecutionRuns"> Cloud Executed runs within an account. </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.AccountTestRunStats"/> instance for mocking. </returns>
        public static AccountTestRunStats AccountTestRunStats(int passed = default, int failed = default, int flaky = default, int all = default, int cloudExecutionRuns = default)
        {
            return new AccountTestRunStats(
                passed,
                failed,
                flaky,
                all,
                cloudExecutionRuns,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="MicrosoftPlaywrightTesting.TestRunsMetadata"/>. </summary>
        /// <param name="branches"> List of CI branches for a testrun, All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <returns> A new <see cref="MicrosoftPlaywrightTesting.TestRunsMetadata"/> instance for mocking. </returns>
        public static TestRunsMetadata TestRunsMetadata(IEnumerable<string> branches = null)
        {
            branches ??= new List<string>();

            return new TestRunsMetadata(branches?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
