// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    // Data plane generated sub-client.
    /// <summary> The AccessTokens sub-client. </summary>
    public partial class AccessTokens
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://playwright.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AccessTokens for mocking. </summary>
        protected AccessTokens()
        {
        }

        /// <summary> Initializes a new instance of AccessTokens. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Azure Playwright Service API Endpoints (protocol and hostname, for example:
        ///   https://{region}.api.playwright.microsoft.com Test).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal AccessTokens(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='CreateOrReplaceAsync(string,Guid,AccessToken,CancellationToken)']/*" />
        public virtual async Task<Response<AccessToken>> CreateOrReplaceAsync(string accountId, Guid accessTokenId, AccessToken resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(resource, nameof(resource));

            using RequestContent content = resource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateOrReplaceAsync(accountId, accessTokenId, content, context).ConfigureAwait(false);
            return Response.FromValue(AccessToken.FromResponse(response), response);
        }

        /// <summary> Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="resource"> The resource instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="resource"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='CreateOrReplace(string,Guid,AccessToken,CancellationToken)']/*" />
        public virtual Response<AccessToken> CreateOrReplace(string accountId, Guid accessTokenId, AccessToken resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(resource, nameof(resource));

            using RequestContent content = resource.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateOrReplace(accountId, accessTokenId, content, context);
            return Response.FromValue(AccessToken.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplaceAsync(string,Guid,AccessToken,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='CreateOrReplaceAsync(string,Guid,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrReplaceAsync(string accountId, Guid accessTokenId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(accountId, accessTokenId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOrReplace(string,Guid,AccessToken,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='CreateOrReplace(string,Guid,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrReplace(string accountId, Guid accessTokenId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(accountId, accessTokenId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokenAsync(string,Guid,CancellationToken)']/*" />
        public virtual async Task<Response<AccessToken>> GetAccessTokenAsync(string accountId, Guid accessTokenId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAccessTokenAsync(accountId, accessTokenId, context).ConfigureAwait(false);
            return Response.FromValue(AccessToken.FromResponse(response), response);
        }

        /// <summary> Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessToken(string,Guid,CancellationToken)']/*" />
        public virtual Response<AccessToken> GetAccessToken(string accountId, Guid accessTokenId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAccessToken(accountId, accessTokenId, context);
            return Response.FromValue(AccessToken.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccessTokenAsync(string,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokenAsync(string,Guid,RequestContext)']/*" />
        public virtual async Task<Response> GetAccessTokenAsync(string accountId, Guid accessTokenId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.GetAccessToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessTokenRequest(accountId, accessTokenId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccessToken(string,Guid,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessToken(string,Guid,RequestContext)']/*" />
        public virtual Response GetAccessToken(string accountId, Guid accessTokenId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.GetAccessToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessTokenRequest(accountId, accessTokenId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='DeleteAsync(string,Guid,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string accountId, Guid accessTokenId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(accountId, accessTokenId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Deletes an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="accessTokenId"> The access-token id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='Delete(string,Guid,RequestContext)']/*" />
        public virtual Response Delete(string accountId, Guid accessTokenId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("AccessTokens.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(accountId, accessTokenId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists access-tokens for the given account id. It can use OData query params like $select, $filter, $orderby, $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokensAsync(string,CancellationToken)']/*" />
        public virtual AsyncPageable<AccessToken> GetAccessTokensAsync(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccessTokensRequest(accountId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccessTokensNextPageRequest(nextLink, accountId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => AccessToken.DeserializeAccessToken(e), ClientDiagnostics, _pipeline, "AccessTokens.GetAccessTokens", "value", "nextLink", context);
        }

        /// <summary> Lists access-tokens for the given account id. It can use OData query params like $select, $filter, $orderby, $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokens(string,CancellationToken)']/*" />
        public virtual Pageable<AccessToken> GetAccessTokens(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccessTokensRequest(accountId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccessTokensNextPageRequest(nextLink, accountId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => AccessToken.DeserializeAccessToken(e), ClientDiagnostics, _pipeline, "AccessTokens.GetAccessTokens", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists access-tokens for the given account id. It can use OData query params like $select, $filter, $orderby, $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccessTokensAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokensAsync(string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetAccessTokensAsync(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccessTokensRequest(accountId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccessTokensNextPageRequest(nextLink, accountId, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "AccessTokens.GetAccessTokens", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists access-tokens for the given account id. It can use OData query params like $select, $filter, $orderby, $top and $skip. The default page size is 10. Use nextLink in response to fetch more objects in the list. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccessTokens(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/AccessTokens.xml" path="doc/members/member[@name='GetAccessTokens(string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetAccessTokens(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAccessTokensRequest(accountId, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAccessTokensNextPageRequest(nextLink, accountId, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "AccessTokens.GetAccessTokens", "value", "nextLink", context);
        }

        internal HttpMessage CreateCreateOrReplaceRequest(string accountId, Guid accessTokenId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/access-tokens/", false);
            uri.AppendPath(accessTokenId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAccessTokenRequest(string accountId, Guid accessTokenId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/access-tokens/", false);
            uri.AppendPath(accessTokenId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string accountId, Guid accessTokenId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/access-tokens/", false);
            uri.AppendPath(accessTokenId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAccessTokensRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/access-tokens", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAccessTokensNextPageRequest(string nextLink, string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
