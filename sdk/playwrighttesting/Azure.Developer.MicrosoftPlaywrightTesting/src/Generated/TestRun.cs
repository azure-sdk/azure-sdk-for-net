// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model representing detailed information about a test run. </summary>
    public partial class TestRun
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TestRun"/>. </summary>
        /// <param name="displayName"> Display name of the test run All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="creationTime"> Creation time of the test run -RFC 3339 literal format. </param>
        /// <param name="cloudReportingEnabled"> Must be set to true when users want to use Reporting Feature. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/> is null. </exception>
        public TestRun(string displayName, DateTimeOffset creationTime, bool cloudReportingEnabled)
        {
            Argument.AssertNotNull(displayName, nameof(displayName));

            DisplayName = displayName;
            CreationTime = creationTime;
            CloudReportingEnabled = cloudReportingEnabled;
        }

        /// <summary> Initializes a new instance of <see cref="TestRun"/>. </summary>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="displayName"> Display name of the test run All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="creationTime"> Creation time of the test run -RFC 3339 literal format. </param>
        /// <param name="creatorId"> Creator's identifier. It's the Id referred in the access/Entra token. </param>
        /// <param name="creatorName"> Creator's name. </param>
        /// <param name="cloudRunSummary"> Summary of the Cloud executed run. Only available if cloud run is enabled. </param>
        /// <param name="cloudReportSummary"> Summary of reports uploaded on cloud. Only available if cloud reporting is enabled. </param>
        /// <param name="ciConfig"> Continuous integration configuration. </param>
        /// <param name="testRunConfig"> Client configuration for the test run. </param>
        /// <param name="testResultsUrl"> URL for accessing test results. </param>
        /// <param name="cloudRunEnabled"> Flag indicating if cloud run is enabled. </param>
        /// <param name="cloudReportingEnabled"> Must be set to true when users want to use Reporting Feature. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TestRun(string testRunId, string displayName, DateTimeOffset creationTime, string creatorId, string creatorName, CloudRunSummary cloudRunSummary, CloudReportingSummary cloudReportSummary, CiConfig ciConfig, TestRunConfig testRunConfig, TestResultsUrl testResultsUrl, bool cloudRunEnabled, bool cloudReportingEnabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TestRunId = testRunId;
            DisplayName = displayName;
            CreationTime = creationTime;
            CreatorId = creatorId;
            CreatorName = creatorName;
            CloudRunSummary = cloudRunSummary;
            CloudReportSummary = cloudReportSummary;
            CiConfig = ciConfig;
            TestRunConfig = testRunConfig;
            TestResultsUrl = testResultsUrl;
            CloudRunEnabled = cloudRunEnabled;
            CloudReportingEnabled = cloudReportingEnabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TestRun"/> for deserialization. </summary>
        internal TestRun()
        {
        }

        /// <summary> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string TestRunId { get; }
        /// <summary> Display name of the test run All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string DisplayName { get; set; }
        /// <summary> Creation time of the test run -RFC 3339 literal format. </summary>
        public DateTimeOffset CreationTime { get; set; }
        /// <summary> Creator's identifier. It's the Id referred in the access/Entra token. </summary>
        public string CreatorId { get; }
        /// <summary> Creator's name. </summary>
        public string CreatorName { get; }
        /// <summary> Summary of the Cloud executed run. Only available if cloud run is enabled. </summary>
        public CloudRunSummary CloudRunSummary { get; }
        /// <summary> Summary of reports uploaded on cloud. Only available if cloud reporting is enabled. </summary>
        public CloudReportingSummary CloudReportSummary { get; }
        /// <summary> Continuous integration configuration. </summary>
        public CiConfig CiConfig { get; set; }
        /// <summary> Client configuration for the test run. </summary>
        public TestRunConfig TestRunConfig { get; set; }
        /// <summary> URL for accessing test results. </summary>
        public TestResultsUrl TestResultsUrl { get; }
        /// <summary> Flag indicating if cloud run is enabled. </summary>
        public bool CloudRunEnabled { get; }
        /// <summary> Must be set to true when users want to use Reporting Feature. </summary>
        public bool CloudReportingEnabled { get; set; }
    }
}
