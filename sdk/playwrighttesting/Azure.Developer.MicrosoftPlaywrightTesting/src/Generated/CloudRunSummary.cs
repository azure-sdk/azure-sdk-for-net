// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model representing summary information about a test run. </summary>
    public partial class CloudRunSummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CloudRunSummary"/>. </summary>
        /// <param name="serverStatus"> Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE. </param>
        /// <param name="browserQuotaExceeded"> Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel browser limit for the workspace. </param>
        internal CloudRunSummary(TestRunStatus serverStatus, bool browserQuotaExceeded)
        {
            ServerStatus = serverStatus;
            BrowserQuotaExceeded = browserQuotaExceeded;
        }

        /// <summary> Initializes a new instance of <see cref="CloudRunSummary"/>. </summary>
        /// <param name="serverStatus"> Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE. </param>
        /// <param name="billableTimeInMs"> Billable time for the test run. Available after testRun Ends. </param>
        /// <param name="totalTimeInMs"> Total time taken for the test run. </param>
        /// <param name="browserSessionsCount"> Number of browser sessions used in the test run. </param>
        /// <param name="browserQuotaExceeded"> Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel browser limit for the workspace. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CloudRunSummary(TestRunStatus serverStatus, int? billableTimeInMs, int? totalTimeInMs, int? browserSessionsCount, bool browserQuotaExceeded, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ServerStatus = serverStatus;
            BillableTimeInMs = billableTimeInMs;
            TotalTimeInMs = totalTimeInMs;
            BrowserSessionsCount = browserSessionsCount;
            BrowserQuotaExceeded = browserQuotaExceeded;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CloudRunSummary"/> for deserialization. </summary>
        internal CloudRunSummary()
        {
        }

        /// <summary> Status of the test run. Allowed values: RUNNING  | CLIENT_COMPLETE | SERVER_COMPLETE. </summary>
        public TestRunStatus ServerStatus { get; }
        /// <summary> Billable time for the test run. Available after testRun Ends. </summary>
        public int? BillableTimeInMs { get; }
        /// <summary> Total time taken for the test run. </summary>
        public int? TotalTimeInMs { get; }
        /// <summary> Number of browser sessions used in the test run. </summary>
        public int? BrowserSessionsCount { get; }
        /// <summary> Flag indicating whether the test run was throttled due to reaching the maximum allowed parallel browser limit for the workspace. </summary>
        public bool BrowserQuotaExceeded { get; }
    }
}
