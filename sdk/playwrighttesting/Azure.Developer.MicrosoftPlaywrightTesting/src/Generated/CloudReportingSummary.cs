// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model representing summary of test run results. </summary>
    public partial class CloudReportingSummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CloudReportingSummary"/>. </summary>
        /// <param name="startTime"> Start time of the test run in datetime(RFC 3339 literal format). </param>
        /// <param name="endTime"> End time of the test run. </param>
        /// <param name="serverStatus"> Processing Status of the testresults on the Server Side. </param>
        internal CloudReportingSummary(DateTimeOffset startTime, DateTimeOffset endTime, TestRunStatus serverStatus)
        {
            StartTime = startTime;
            EndTime = endTime;
            ServerStatus = serverStatus;
            Jobs = new ChangeTrackingList<string>();
            Projects = new ChangeTrackingList<string>();
            Tags = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CloudReportingSummary"/>. </summary>
        /// <param name="startTime"> Start time of the test run in datetime(RFC 3339 literal format). </param>
        /// <param name="endTime"> End time of the test run. </param>
        /// <param name="serverStatus"> Processing Status of the testresults on the Server Side. </param>
        /// <param name="totalTestsCount"> Total number of tests executed. </param>
        /// <param name="passedTestsCount"> Number of tests that passed. </param>
        /// <param name="failedTestsCount"> Number of tests that failed. </param>
        /// <param name="skippedTestsCount"> Number of tests that were skipped. </param>
        /// <param name="flakyTestsCount"> Number of tests that were flaky (passed on retry). </param>
        /// <param name="status"> Status of the test run. </param>
        /// <param name="jobs"> List of CI jobs associated with the test run. </param>
        /// <param name="projects"> List of Playwright projects (https://playwright.dev/docs/test-projects) associated with the test run. </param>
        /// <param name="tags"> List of tags associated with the test run. </param>
        /// <param name="workersCount"> Number of worker instances. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CloudReportingSummary(DateTimeOffset startTime, DateTimeOffset endTime, TestRunStatus serverStatus, int? totalTestsCount, int? passedTestsCount, int? failedTestsCount, int? skippedTestsCount, int? flakyTestsCount, TestStatus status, IReadOnlyList<string> jobs, IReadOnlyList<string> projects, IReadOnlyList<string> tags, int? workersCount, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StartTime = startTime;
            EndTime = endTime;
            ServerStatus = serverStatus;
            TotalTestsCount = totalTestsCount;
            PassedTestsCount = passedTestsCount;
            FailedTestsCount = failedTestsCount;
            SkippedTestsCount = skippedTestsCount;
            FlakyTestsCount = flakyTestsCount;
            Status = status;
            Jobs = jobs;
            Projects = projects;
            Tags = tags;
            WorkersCount = workersCount;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CloudReportingSummary"/> for deserialization. </summary>
        internal CloudReportingSummary()
        {
        }

        /// <summary> Start time of the test run in datetime(RFC 3339 literal format). </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary> End time of the test run. </summary>
        public DateTimeOffset EndTime { get; }
        /// <summary> Processing Status of the testresults on the Server Side. </summary>
        public TestRunStatus ServerStatus { get; }
        /// <summary> Total number of tests executed. </summary>
        public int? TotalTestsCount { get; }
        /// <summary> Number of tests that passed. </summary>
        public int? PassedTestsCount { get; }
        /// <summary> Number of tests that failed. </summary>
        public int? FailedTestsCount { get; }
        /// <summary> Number of tests that were skipped. </summary>
        public int? SkippedTestsCount { get; }
        /// <summary> Number of tests that were flaky (passed on retry). </summary>
        public int? FlakyTestsCount { get; }
        /// <summary> Status of the test run. </summary>
        public TestStatus Status { get; }
        /// <summary> List of CI jobs associated with the test run. </summary>
        public IReadOnlyList<string> Jobs { get; }
        /// <summary> List of Playwright projects (https://playwright.dev/docs/test-projects) associated with the test run. </summary>
        public IReadOnlyList<string> Projects { get; }
        /// <summary> List of tags associated with the test run. </summary>
        public IReadOnlyList<string> Tags { get; }
        /// <summary> Number of worker instances. </summary>
        public int? WorkersCount { get; }
    }
}
