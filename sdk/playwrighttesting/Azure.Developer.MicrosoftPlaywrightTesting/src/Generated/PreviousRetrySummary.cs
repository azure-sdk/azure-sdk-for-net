// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Summary of previous retries. </summary>
    public partial class PreviousRetrySummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PreviousRetrySummary"/>. </summary>
        /// <param name="testExecutionId"> Identifier of the test execution. </param>
        /// <param name="retryCount"> Number of retryCount attempts. </param>
        /// <param name="status"> Status of the test execution. </param>
        /// <param name="durationInMs"> Duration of the test execution. </param>
        /// <param name="startTime"> Start time of the test execution- RFC 3339 literal format. </param>
        /// <param name="attachmentsMetadata"> Metadata related to attachments. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testExecutionId"/> or <paramref name="attachmentsMetadata"/> is null. </exception>
        internal PreviousRetrySummary(string testExecutionId, int retryCount, TestStatus status, TimeSpan durationInMs, DateTimeOffset startTime, IEnumerable<AttachmentKind> attachmentsMetadata)
        {
            Argument.AssertNotNull(testExecutionId, nameof(testExecutionId));
            Argument.AssertNotNull(attachmentsMetadata, nameof(attachmentsMetadata));

            TestExecutionId = testExecutionId;
            RetryCount = retryCount;
            Status = status;
            DurationInMs = durationInMs;
            StartTime = startTime;
            AttachmentsMetadata = attachmentsMetadata.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="PreviousRetrySummary"/>. </summary>
        /// <param name="testExecutionId"> Identifier of the test execution. </param>
        /// <param name="retryCount"> Number of retryCount attempts. </param>
        /// <param name="status"> Status of the test execution. </param>
        /// <param name="durationInMs"> Duration of the test execution. </param>
        /// <param name="startTime"> Start time of the test execution- RFC 3339 literal format. </param>
        /// <param name="attachmentsMetadata"> Metadata related to attachments. </param>
        /// <param name="artifactsPath"> List of artifacts paths. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PreviousRetrySummary(string testExecutionId, int retryCount, TestStatus status, TimeSpan durationInMs, DateTimeOffset startTime, IReadOnlyList<AttachmentKind> attachmentsMetadata, string artifactsPath, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TestExecutionId = testExecutionId;
            RetryCount = retryCount;
            Status = status;
            DurationInMs = durationInMs;
            StartTime = startTime;
            AttachmentsMetadata = attachmentsMetadata;
            ArtifactsPath = artifactsPath;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PreviousRetrySummary"/> for deserialization. </summary>
        internal PreviousRetrySummary()
        {
        }

        /// <summary> Identifier of the test execution. </summary>
        public string TestExecutionId { get; }
        /// <summary> Number of retryCount attempts. </summary>
        public int RetryCount { get; }
        /// <summary> Status of the test execution. </summary>
        public TestStatus Status { get; }
        /// <summary> Duration of the test execution. </summary>
        public TimeSpan DurationInMs { get; }
        /// <summary> Start time of the test execution- RFC 3339 literal format. </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary> Metadata related to attachments. </summary>
        public IReadOnlyList<AttachmentKind> AttachmentsMetadata { get; }
        /// <summary> List of artifacts paths. </summary>
        public string ArtifactsPath { get; }
    }
}
