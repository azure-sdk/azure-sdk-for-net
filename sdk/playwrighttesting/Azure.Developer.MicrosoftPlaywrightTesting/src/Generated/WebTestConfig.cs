// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Configuration details for the web test. </summary>
    public partial class WebTestConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="WebTestConfig"/>. </summary>
        /// <param name="jobName"> Name of the CI job running the test. All unicode characters except ASCII control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="projectName"> Name of the Playwright project.All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="browserType"> Name of the browser. </param>
        /// <param name="os"> Operating system where the browser is hosted. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> or <paramref name="projectName"/> is null. </exception>
        public WebTestConfig(string jobName, string projectName, BrowserType browserType, OsType os)
        {
            Argument.AssertNotNull(jobName, nameof(jobName));
            Argument.AssertNotNull(projectName, nameof(projectName));

            JobName = jobName;
            ProjectName = projectName;
            BrowserType = browserType;
            Os = os;
        }

        /// <summary> Initializes a new instance of <see cref="WebTestConfig"/>. </summary>
        /// <param name="jobName"> Name of the CI job running the test. All unicode characters except ASCII control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="projectName"> Name of the Playwright project.All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="browserType"> Name of the browser. </param>
        /// <param name="os"> Operating system where the browser is hosted. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal WebTestConfig(string jobName, string projectName, BrowserType browserType, OsType os, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            JobName = jobName;
            ProjectName = projectName;
            BrowserType = browserType;
            Os = os;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="WebTestConfig"/> for deserialization. </summary>
        internal WebTestConfig()
        {
        }

        /// <summary> Name of the CI job running the test. All unicode characters except ASCII control characters, special  characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string JobName { get; set; }
        /// <summary> Name of the Playwright project.All unicode characters except ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </summary>
        public string ProjectName { get; set; }
        /// <summary> Name of the browser. </summary>
        public BrowserType BrowserType { get; set; }
        /// <summary> Operating system where the browser is hosted. </summary>
        public OsType Os { get; set; }
    }
}
