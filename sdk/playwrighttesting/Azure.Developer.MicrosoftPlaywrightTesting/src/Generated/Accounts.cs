// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    // Data plane generated sub-client.
    /// <summary> The Accounts sub-client. </summary>
    public partial class Accounts
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://playwright.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Accounts for mocking. </summary>
        protected Accounts()
        {
        }

        /// <summary> Initializes a new instance of Accounts. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Azure Playwright Service API Endpoints (protocol and hostname, for example:
        ///   https://{region}.api.playwright.microsoft.com Test).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal Accounts(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetAccountAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<Account>> GetAccountAsync(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetAccountAsync(accountId, context).ConfigureAwait(false);
            return Response.FromValue(Account.FromResponse(response), response);
        }

        /// <summary> Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer JWT Access token provided by EntraID. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetAccount(string,CancellationToken)']/*" />
        public virtual Response<Account> GetAccount(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAccount(accountId, context);
            return Response.FromValue(Account.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccountAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetAccountAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetAccountAsync(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("Accounts.GetAccount");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountRequest(accountId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get details of the Azure resource mapped to an account for the given account id. Authorization required is Bearer JWT Access token provided by EntraID.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAccount(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetAccount(string,RequestContext)']/*" />
        public virtual Response GetAccount(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("Accounts.GetAccount");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountRequest(accountId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests. Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="runId"> The run id provided by client for corresponding remote test run. </param>
        /// <param name="os"> The os provided by client for remote test runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetBrowsersAsync(string,string,OS?,CancellationToken)']/*" />
        public virtual async Task<Response> GetBrowsersAsync(string accountId, string runId = null, OS? os = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetBrowsersAsync(accountId, runId, os?.ToString(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests. Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="runId"> The run id provided by client for corresponding remote test run. </param>
        /// <param name="os"> The os provided by client for remote test runs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetBrowsers(string,string,OS?,CancellationToken)']/*" />
        public virtual Response GetBrowsers(string accountId, string runId = null, OS? os = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetBrowsers(accountId, runId, os?.ToString(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests. Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBrowsersAsync(string,string,OS?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="runId"> The run id provided by client for corresponding remote test run. </param>
        /// <param name="os"> The os provided by client for remote test runs. Allowed values: "Linux" | "Windows". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetBrowsersAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetBrowsersAsync(string accountId, string runId, string os, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("Accounts.GetBrowsers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBrowsersRequest(accountId, runId, os, context);
                RedirectPolicy.SetAllowAutoRedirect(message, true);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets remote browsers corresponding to given account id and redirects the client for running Playwright tests. Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetBrowsers(string,string,OS?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="runId"> The run id provided by client for corresponding remote test run. </param>
        /// <param name="os"> The os provided by client for remote test runs. Allowed values: "Linux" | "Windows". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/Accounts.xml" path="doc/members/member[@name='GetBrowsers(string,string,string,RequestContext)']/*" />
        public virtual Response GetBrowsers(string accountId, string runId, string os, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("Accounts.GetBrowsers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBrowsersRequest(accountId, runId, os, context);
                RedirectPolicy.SetAllowAutoRedirect(message, true);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAccountRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBrowsersRequest(string accountId, string runId, string os, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier302);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/browsers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (runId != null)
            {
                uri.AppendQuery("runId", runId, true);
            }
            if (os != null)
            {
                uri.AppendQuery("os", os, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier302;
        private static ResponseClassifier ResponseClassifier302 => _responseClassifier302 ??= new StatusCodeClassifier(stackalloc ushort[] { 302 });
    }
}
