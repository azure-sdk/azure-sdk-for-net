// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> status of a test execution. </summary>
    public readonly partial struct TestStatus : IEquatable<TestStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PassedValue = "Passed";
        private const string FailedValue = "Failed";
        private const string SkippedValue = "Skipped";
        private const string FlakyValue = "Flaky";
        private const string InterruptedValue = "Interrupted";
        private const string TimedOutValue = "TimedOut";

        /// <summary> The test passed successfully. </summary>
        public static TestStatus Passed { get; } = new TestStatus(PassedValue);
        /// <summary> The test failed. </summary>
        public static TestStatus Failed { get; } = new TestStatus(FailedValue);
        /// <summary> The test was skipped. </summary>
        public static TestStatus Skipped { get; } = new TestStatus(SkippedValue);
        /// <summary> The test was flaky. </summary>
        public static TestStatus Flaky { get; } = new TestStatus(FlakyValue);
        /// <summary> The test was interrupted. </summary>
        public static TestStatus Interrupted { get; } = new TestStatus(InterruptedValue);
        /// <summary> The test timed out. </summary>
        public static TestStatus TimedOut { get; } = new TestStatus(TimedOutValue);
        /// <summary> Determines if two <see cref="TestStatus"/> values are the same. </summary>
        public static bool operator ==(TestStatus left, TestStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestStatus"/> values are not the same. </summary>
        public static bool operator !=(TestStatus left, TestStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestStatus"/>. </summary>
        public static implicit operator TestStatus(string value) => new TestStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
