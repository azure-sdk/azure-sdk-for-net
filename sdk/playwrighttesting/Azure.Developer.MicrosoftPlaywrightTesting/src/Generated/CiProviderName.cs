// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Supported CI provider for tests. </summary>
    public readonly partial struct CiProviderName : IEquatable<CiProviderName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CiProviderName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CiProviderName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GitHubValue = "GitHub";
        private const string AzureDevOpsValue = "Azure DevOps";
        private const string DefaultValue = "Default";

        /// <summary> GitHub. </summary>
        public static CiProviderName GitHub { get; } = new CiProviderName(GitHubValue);
        /// <summary> Azure DevOps. </summary>
        public static CiProviderName AzureDevOps { get; } = new CiProviderName(AzureDevOpsValue);
        /// <summary> default. </summary>
        public static CiProviderName Default { get; } = new CiProviderName(DefaultValue);
        /// <summary> Determines if two <see cref="CiProviderName"/> values are the same. </summary>
        public static bool operator ==(CiProviderName left, CiProviderName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CiProviderName"/> values are not the same. </summary>
        public static bool operator !=(CiProviderName left, CiProviderName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CiProviderName"/>. </summary>
        public static implicit operator CiProviderName(string value) => new CiProviderName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CiProviderName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CiProviderName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
