// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Supported Framework. </summary>
    public readonly partial struct TestFrameworkName : IEquatable<TestFrameworkName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestFrameworkName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestFrameworkName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PlaywrightValue = "Playwright";

        /// <summary> Playwright. </summary>
        public static TestFrameworkName Playwright { get; } = new TestFrameworkName(PlaywrightValue);
        /// <summary> Determines if two <see cref="TestFrameworkName"/> values are the same. </summary>
        public static bool operator ==(TestFrameworkName left, TestFrameworkName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestFrameworkName"/> values are not the same. </summary>
        public static bool operator !=(TestFrameworkName left, TestFrameworkName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestFrameworkName"/>. </summary>
        public static implicit operator TestFrameworkName(string value) => new TestFrameworkName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestFrameworkName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestFrameworkName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
