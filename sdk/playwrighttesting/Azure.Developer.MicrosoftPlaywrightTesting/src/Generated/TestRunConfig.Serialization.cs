// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    public partial class TestRunConfig : IUtf8JsonSerializable, IJsonModel<TestRunConfig>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TestRunConfig>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TestRunConfig>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRunConfig)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(RetryCount))
            {
                writer.WritePropertyName("retryCount"u8);
                writer.WriteNumberValue(RetryCount.Value);
            }
            if (Optional.IsDefined(RepeatEach))
            {
                writer.WritePropertyName("repeatEach"u8);
                writer.WriteNumberValue(RepeatEach.Value);
            }
            if (Optional.IsDefined(TestFramework))
            {
                writer.WritePropertyName("testFramework"u8);
                writer.WriteObjectValue(TestFramework, options);
            }
            if (Optional.IsDefined(ShardDetails))
            {
                writer.WritePropertyName("shardDetails"u8);
                writer.WriteObjectValue(ShardDetails, options);
            }
            writer.WritePropertyName("timeoutInMs"u8);
            writer.WriteNumberValue(TimeoutInMs);
            if (Optional.IsDefined(TestType))
            {
                writer.WritePropertyName("testType"u8);
                writer.WriteStringValue(TestType);
            }
            writer.WritePropertyName("testSdkLanguage"u8);
            writer.WriteStringValue(TestSdkLanguage.ToString());
            if (Optional.IsDefined(ServicePackageVersion))
            {
                writer.WritePropertyName("servicePackageVersion"u8);
                writer.WriteStringValue(ServicePackageVersion);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TestRunConfig IJsonModel<TestRunConfig>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunConfig>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRunConfig)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTestRunConfig(document.RootElement, options);
        }

        internal static TestRunConfig DeserializeTestRunConfig(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? retryCount = default;
            int? repeatEach = default;
            TestFramework testFramework = default;
            ShardDetails shardDetails = default;
            long timeoutInMs = default;
            string testType = default;
            TestSdkLanguage testSdkLanguage = default;
            string servicePackageVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("retryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retryCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("repeatEach"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    repeatEach = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("testFramework"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testFramework = TestFramework.DeserializeTestFramework(property.Value, options);
                    continue;
                }
                if (property.NameEquals("shardDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shardDetails = ShardDetails.DeserializeShardDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("timeoutInMs"u8))
                {
                    timeoutInMs = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("testType"u8))
                {
                    testType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testSdkLanguage"u8))
                {
                    testSdkLanguage = new TestSdkLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("servicePackageVersion"u8))
                {
                    servicePackageVersion = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TestRunConfig(
                retryCount,
                repeatEach,
                testFramework,
                shardDetails,
                timeoutInMs,
                testType,
                testSdkLanguage,
                servicePackageVersion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TestRunConfig>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TestRunConfig)} does not support writing '{options.Format}' format.");
            }
        }

        TestRunConfig IPersistableModel<TestRunConfig>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRunConfig>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTestRunConfig(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TestRunConfig)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TestRunConfig>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TestRunConfig FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTestRunConfig(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
