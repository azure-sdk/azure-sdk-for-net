// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Supported Test SDK Language. </summary>
    public readonly partial struct TestSdkLanguage : IEquatable<TestSdkLanguage>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TestSdkLanguage"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TestSdkLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JavaScriptValue = "JavaScript";
        private const string TypeScriptValue = "TypeScript";
        private const string CSharpValue = "CSharp";

        /// <summary> JavaScript. </summary>
        public static TestSdkLanguage JavaScript { get; } = new TestSdkLanguage(JavaScriptValue);
        /// <summary> TypeScript. </summary>
        public static TestSdkLanguage TypeScript { get; } = new TestSdkLanguage(TypeScriptValue);
        /// <summary> Csharp. </summary>
        public static TestSdkLanguage CSharp { get; } = new TestSdkLanguage(CSharpValue);
        /// <summary> Determines if two <see cref="TestSdkLanguage"/> values are the same. </summary>
        public static bool operator ==(TestSdkLanguage left, TestSdkLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TestSdkLanguage"/> values are not the same. </summary>
        public static bool operator !=(TestSdkLanguage left, TestSdkLanguage right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TestSdkLanguage"/>. </summary>
        public static implicit operator TestSdkLanguage(string value) => new TestSdkLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TestSdkLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TestSdkLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
