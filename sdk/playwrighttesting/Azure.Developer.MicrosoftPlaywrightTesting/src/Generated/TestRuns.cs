// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    // Data plane generated sub-client.
    /// <summary> The TestRuns sub-client. </summary>
    public partial class TestRuns
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://playwright.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TestRuns for mocking. </summary>
        protected TestRuns()
        {
        }

        /// <summary> Initializes a new instance of TestRuns. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint">
        /// Supported Azure Playwright Service API Endpoints (protocol and hostname, for example:
        ///   https://{region}.reporting.api.playwright.microsoft.com).
        /// </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal TestRuns(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a testrun.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string accountId, string testRunId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(accountId, testRunId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a testrun.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateOrUpdate(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string accountId, string testRunId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(accountId, testRunId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a test run. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRunAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<TestRun>> GetTestRunAsync(string accountId, string testRunId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetTestRunAsync(accountId, testRunId, context).ConfigureAwait(false);
            return Response.FromValue(TestRun.FromResponse(response), response);
        }

        /// <summary> Gets a test run. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRun(string,string,CancellationToken)']/*" />
        public virtual Response<TestRun> GetTestRun(string accountId, string testRunId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetTestRun(accountId, testRunId, context);
            return Response.FromValue(TestRun.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a test run.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTestRunAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRunAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetTestRunAsync(string accountId, string testRunId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.GetTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunRequest(accountId, testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a test run.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTestRun(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRun(string,string,RequestContext)']/*" />
        public virtual Response GetTestRun(string accountId, string testRunId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.GetTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunRequest(accountId, testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get TestResults Upload Url. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateArtifactsUploadBaseUrlAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<TestResultsUrl>> CreateArtifactsUploadBaseUrlAsync(string accountId, string testRunId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateArtifactsUploadBaseUrlAsync(accountId, testRunId, context).ConfigureAwait(false);
            return Response.FromValue(TestResultsUrl.FromResponse(response), response);
        }

        /// <summary> Get TestResults Upload Url. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateArtifactsUploadBaseUrl(string,string,CancellationToken)']/*" />
        public virtual Response<TestResultsUrl> CreateArtifactsUploadBaseUrl(string accountId, string testRunId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateArtifactsUploadBaseUrl(accountId, testRunId, context);
            return Response.FromValue(TestResultsUrl.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get TestResults Upload Url.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateArtifactsUploadBaseUrlAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateArtifactsUploadBaseUrlAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> CreateArtifactsUploadBaseUrlAsync(string accountId, string testRunId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.CreateArtifactsUploadBaseUrl");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateArtifactsUploadBaseUrlRequest(accountId, testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get TestResults Upload Url.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateArtifactsUploadBaseUrl(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='CreateArtifactsUploadBaseUrl(string,string,RequestContext)']/*" />
        public virtual Response CreateArtifactsUploadBaseUrl(string accountId, string testRunId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.CreateArtifactsUploadBaseUrl");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateArtifactsUploadBaseUrlRequest(accountId, testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resource action operation template. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="shardId"> Shard Id for the shard- indexed 1,2,3 etc. </param>
        /// <param name="summary"> Summary of the test run shard. </param>
        /// <param name="workersCount"> number of workers used by playwright client. </param>
        /// <param name="uploadCompleted"> Flag indicating if upload is completed for the shard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="summary"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='UpdateShardExecutionStatusAsync(string,string,int,UpdateShardExecutionSummary,int,bool?,CancellationToken)']/*" />
        public virtual async Task<Response> UpdateShardExecutionStatusAsync(string accountId, string testRunId, int shardId, UpdateShardExecutionSummary summary, int workersCount, bool? uploadCompleted = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(summary, nameof(summary));

            UpdateShardExecutionStatusRequest updateShardExecutionStatusRequest = new UpdateShardExecutionStatusRequest(shardId, summary, workersCount, uploadCompleted, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UpdateShardExecutionStatusAsync(accountId, testRunId, updateShardExecutionStatusRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Resource action operation template. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="shardId"> Shard Id for the shard- indexed 1,2,3 etc. </param>
        /// <param name="summary"> Summary of the test run shard. </param>
        /// <param name="workersCount"> number of workers used by playwright client. </param>
        /// <param name="uploadCompleted"> Flag indicating if upload is completed for the shard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="summary"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='UpdateShardExecutionStatus(string,string,int,UpdateShardExecutionSummary,int,bool?,CancellationToken)']/*" />
        public virtual Response UpdateShardExecutionStatus(string accountId, string testRunId, int shardId, UpdateShardExecutionSummary summary, int workersCount, bool? uploadCompleted = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(summary, nameof(summary));

            UpdateShardExecutionStatusRequest updateShardExecutionStatusRequest = new UpdateShardExecutionStatusRequest(shardId, summary, workersCount, uploadCompleted, null);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UpdateShardExecutionStatus(accountId, testRunId, updateShardExecutionStatusRequest.ToRequestContent(), context);
            return response;
        }

        /// <summary>
        /// [Protocol Method] Resource action operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateShardExecutionStatusAsync(string,string,int,UpdateShardExecutionSummary,int,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='UpdateShardExecutionStatusAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateShardExecutionStatusAsync(string accountId, string testRunId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.UpdateShardExecutionStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateShardExecutionStatusRequest(accountId, testRunId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Resource action operation template.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateShardExecutionStatus(string,string,int,UpdateShardExecutionSummary,int,bool?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="testRunId"> Identifier of the test run. All unicode characters except spaces, ASCII control characters, special Git characters (^, ~, :, ?, *, [, ]), double dots (..), multiple consecutive slashes (//), or start/end with a slash (/) or start with period (.). </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> or <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='UpdateShardExecutionStatus(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateShardExecutionStatus(string accountId, string testRunId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.UpdateShardExecutionStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateShardExecutionStatusRequest(accountId, testRunId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeAccountRunStatsAsync(string,int?,int?,int?,string,CancellationToken)']/*" />
        public virtual async Task<Response<AccountTestRunStats>> ComputeAccountRunStatsAsync(string accountId, int? top = null, int? skip = null, int? maxpagesize = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ComputeAccountRunStatsAsync(accountId, top, skip, maxpagesize, filter, context).ConfigureAwait(false);
            return Response.FromValue(AccountTestRunStats.FromResponse(response), response);
        }

        /// <summary> Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeAccountRunStats(string,int?,int?,int?,string,CancellationToken)']/*" />
        public virtual Response<AccountTestRunStats> ComputeAccountRunStats(string accountId, int? top = null, int? skip = null, int? maxpagesize = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ComputeAccountRunStats(accountId, top, skip, maxpagesize, filter, context);
            return Response.FromValue(AccountTestRunStats.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ComputeAccountRunStatsAsync(string,int?,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeAccountRunStatsAsync(string,int?,int?,int?,string,RequestContext)']/*" />
        public virtual async Task<Response> ComputeAccountRunStatsAsync(string accountId, int? top, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.ComputeAccountRunStats");
            scope.Start();
            try
            {
                using HttpMessage message = CreateComputeAccountRunStatsRequest(accountId, top, skip, maxpagesize, filter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get TestRun summary for an Odata filter.Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ComputeAccountRunStats(string,int?,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="top"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeAccountRunStats(string,int?,int?,int?,string,RequestContext)']/*" />
        public virtual Response ComputeAccountRunStats(string accountId, int? top, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.ComputeAccountRunStats");
            scope.Start();
            try
            {
                using HttpMessage message = CreateComputeAccountRunStatsRequest(accountId, top, skip, maxpagesize, filter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get TestRuns metadata for all runs in an account. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeMetadataAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<TestRunsMetadata>> ComputeMetadataAsync(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ComputeMetadataAsync(accountId, context).ConfigureAwait(false);
            return Response.FromValue(TestRunsMetadata.FromResponse(response), response);
        }

        /// <summary> Get TestRuns metadata for all runs in an account. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeMetadata(string,CancellationToken)']/*" />
        public virtual Response<TestRunsMetadata> ComputeMetadata(string accountId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ComputeMetadata(accountId, context);
            return Response.FromValue(TestRunsMetadata.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get TestRuns metadata for all runs in an account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ComputeMetadataAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeMetadataAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> ComputeMetadataAsync(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.ComputeMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateComputeMetadataRequest(accountId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get TestRuns metadata for all runs in an account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ComputeMetadata(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='ComputeMetadata(string,RequestContext)']/*" />
        public virtual Response ComputeMetadata(string accountId, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            using var scope = ClientDiagnostics.CreateScope("TestRuns.ComputeMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateComputeMetadataRequest(accountId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List test runs. Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRunsAsync(string,int?,int?,int?,string,CancellationToken)']/*" />
        public virtual AsyncPageable<TestRun> GetTestRunsAsync(string accountId, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTestRunsRequest(accountId, maxCount, skip, pageSizeHint, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTestRunsNextPageRequest(nextLink, accountId, maxCount, skip, pageSizeHint, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => TestRun.DeserializeTestRun(e), ClientDiagnostics, _pipeline, "TestRuns.GetTestRuns", "value", "nextLink", maxpagesize, context);
        }

        /// <summary> List test runs. Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator. </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRuns(string,int?,int?,int?,string,CancellationToken)']/*" />
        public virtual Pageable<TestRun> GetTestRuns(string accountId, int? maxCount = null, int? skip = null, int? maxpagesize = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTestRunsRequest(accountId, maxCount, skip, pageSizeHint, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTestRunsNextPageRequest(nextLink, accountId, maxCount, skip, pageSizeHint, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => TestRun.DeserializeTestRun(e), ClientDiagnostics, _pipeline, "TestRuns.GetTestRuns", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] List test runs. Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTestRunsAsync(string,int?,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRunsAsync(string,int?,int?,int?,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetTestRunsAsync(string accountId, int? maxCount, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTestRunsRequest(accountId, maxCount, skip, pageSizeHint, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTestRunsNextPageRequest(nextLink, accountId, maxCount, skip, pageSizeHint, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "TestRuns.GetTestRuns", "value", "nextLink", maxpagesize, context);
        }

        /// <summary>
        /// [Protocol Method] List test runs. Supported filters are triggeredAt with operator ge, status and branch  with in operator, displayName with eq operator
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetTestRuns(string,int?,int?,int?,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="accountId"> The account id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="accountId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/TestRuns.xml" path="doc/members/member[@name='GetTestRuns(string,int?,int?,int?,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetTestRuns(string accountId, int? maxCount, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(accountId, nameof(accountId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTestRunsRequest(accountId, maxCount, skip, pageSizeHint, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTestRunsNextPageRequest(nextLink, accountId, maxCount, skip, pageSizeHint, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "TestRuns.GetTestRuns", "value", "nextLink", maxpagesize, context);
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string accountId, string testRunId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTestRunRequest(string accountId, string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTestRunsRequest(string accountId, int? maxCount, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateArtifactsUploadBaseUrlRequest(string accountId, string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath(":createArtifactsUploadBaseUrl", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateShardExecutionStatusRequest(string accountId, string testRunId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath(":updateShardExecutionStatus", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateComputeAccountRunStatsRequest(string accountId, int? top, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs:accountRunStats", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateComputeMetadataRequest(string accountId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/test-runs:metadata", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTestRunsNextPageRequest(string nextLink, string accountId, int? maxCount, int? skip, int? maxpagesize, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
