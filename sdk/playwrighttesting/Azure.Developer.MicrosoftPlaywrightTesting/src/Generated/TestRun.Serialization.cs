// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    public partial class TestRun : IUtf8JsonSerializable, IJsonModel<TestRun>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TestRun>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TestRun>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRun>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRun)} does not support writing '{format}' format.");
            }

            if (options.Format != "W")
            {
                writer.WritePropertyName("testRunId"u8);
                writer.WriteStringValue(TestRunId);
            }
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("creationTime"u8);
            writer.WriteStringValue(CreationTime, "O");
            if (options.Format != "W")
            {
                writer.WritePropertyName("creatorId"u8);
                writer.WriteStringValue(CreatorId);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("creatorName"u8);
                writer.WriteStringValue(CreatorName);
            }
            if (options.Format != "W" && Optional.IsDefined(CloudRunSummary))
            {
                writer.WritePropertyName("cloudRunSummary"u8);
                writer.WriteObjectValue(CloudRunSummary, options);
            }
            if (options.Format != "W" && Optional.IsDefined(CloudReportSummary))
            {
                writer.WritePropertyName("cloudReportSummary"u8);
                writer.WriteObjectValue(CloudReportSummary, options);
            }
            if (Optional.IsDefined(CiConfig))
            {
                writer.WritePropertyName("ciConfig"u8);
                writer.WriteObjectValue(CiConfig, options);
            }
            if (Optional.IsDefined(TestRunConfig))
            {
                writer.WritePropertyName("testRunConfig"u8);
                writer.WriteObjectValue(TestRunConfig, options);
            }
            if (options.Format != "W" && Optional.IsDefined(TestResultsUrl))
            {
                writer.WritePropertyName("testResultsUrl"u8);
                writer.WriteObjectValue(TestResultsUrl, options);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("cloudRunEnabled"u8);
                writer.WriteBooleanValue(CloudRunEnabled);
            }
            writer.WritePropertyName("cloudReportingEnabled"u8);
            writer.WriteBooleanValue(CloudReportingEnabled);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        TestRun IJsonModel<TestRun>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRun>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TestRun)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTestRun(document.RootElement, options);
        }

        internal static TestRun DeserializeTestRun(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string testRunId = default;
            string displayName = default;
            DateTimeOffset creationTime = default;
            string creatorId = default;
            string creatorName = default;
            CloudRunSummary cloudRunSummary = default;
            CloudReportingSummary cloudReportSummary = default;
            CiConfig ciConfig = default;
            TestRunConfig testRunConfig = default;
            TestResultsUrl testResultsUrl = default;
            bool cloudRunEnabled = default;
            bool cloudReportingEnabled = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("testRunId"u8))
                {
                    testRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("creationTime"u8))
                {
                    creationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("creatorId"u8))
                {
                    creatorId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("creatorName"u8))
                {
                    creatorName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudRunSummary"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudRunSummary = CloudRunSummary.DeserializeCloudRunSummary(property.Value, options);
                    continue;
                }
                if (property.NameEquals("cloudReportSummary"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudReportSummary = CloudReportingSummary.DeserializeCloudReportingSummary(property.Value, options);
                    continue;
                }
                if (property.NameEquals("ciConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ciConfig = CiConfig.DeserializeCiConfig(property.Value, options);
                    continue;
                }
                if (property.NameEquals("testRunConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testRunConfig = TestRunConfig.DeserializeTestRunConfig(property.Value, options);
                    continue;
                }
                if (property.NameEquals("testResultsUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testResultsUrl = TestResultsUrl.DeserializeTestResultsUrl(property.Value, options);
                    continue;
                }
                if (property.NameEquals("cloudRunEnabled"u8))
                {
                    cloudRunEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cloudReportingEnabled"u8))
                {
                    cloudReportingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TestRun(
                testRunId,
                displayName,
                creationTime,
                creatorId,
                creatorName,
                cloudRunSummary,
                cloudReportSummary,
                ciConfig,
                testRunConfig,
                testResultsUrl,
                cloudRunEnabled,
                cloudReportingEnabled,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TestRun>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRun>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TestRun)} does not support writing '{options.Format}' format.");
            }
        }

        TestRun IPersistableModel<TestRun>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TestRun>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTestRun(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TestRun)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TestRun>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TestRun FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTestRun(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
