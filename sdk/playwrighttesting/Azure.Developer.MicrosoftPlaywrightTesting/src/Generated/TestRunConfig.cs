// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Developer.MicrosoftPlaywrightTesting
{
    /// <summary> Model representing client configuration. </summary>
    public partial class TestRunConfig
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TestRunConfig"/>. </summary>
        /// <param name="timeoutInMs"> Timeout duration for test execution. </param>
        /// <param name="testSdkLanguage"> Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'. </param>
        public TestRunConfig(long timeoutInMs, TestSdkLanguage testSdkLanguage)
        {
            TimeoutInMs = timeoutInMs;
            TestSdkLanguage = testSdkLanguage;
        }

        /// <summary> Initializes a new instance of <see cref="TestRunConfig"/>. </summary>
        /// <param name="retryCount"> Number of retry attempts. </param>
        /// <param name="repeatEach"> Interval between repeated test runs. </param>
        /// <param name="testFramework"> Details of the test framework used. </param>
        /// <param name="shardDetails"> Details of the shards used in the test. </param>
        /// <param name="timeoutInMs"> Timeout duration for test execution. </param>
        /// <param name="testType"> Type of test being executed (default: WebTest). </param>
        /// <param name="testSdkLanguage"> Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'. </param>
        /// <param name="servicePackageVersion"> Version of the reporter package. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TestRunConfig(int? retryCount, int? repeatEach, TestFramework testFramework, ShardDetails shardDetails, long timeoutInMs, string testType, TestSdkLanguage testSdkLanguage, string servicePackageVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RetryCount = retryCount;
            RepeatEach = repeatEach;
            TestFramework = testFramework;
            ShardDetails = shardDetails;
            TimeoutInMs = timeoutInMs;
            TestType = testType;
            TestSdkLanguage = testSdkLanguage;
            ServicePackageVersion = servicePackageVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TestRunConfig"/> for deserialization. </summary>
        internal TestRunConfig()
        {
        }

        /// <summary> Number of retry attempts. </summary>
        public int? RetryCount { get; set; }
        /// <summary> Interval between repeated test runs. </summary>
        public int? RepeatEach { get; set; }
        /// <summary> Details of the test framework used. </summary>
        public TestFramework TestFramework { get; set; }
        /// <summary> Details of the shards used in the test. </summary>
        public ShardDetails ShardDetails { get; set; }
        /// <summary> Timeout duration for test execution. </summary>
        public long TimeoutInMs { get; set; }
        /// <summary> Type of test being executed (default: WebTest). </summary>
        public string TestType { get; set; }
        /// <summary> Programming language used for the test SDK. Supported languages are 'JavaScript', 'TypeScript', 'Csharp'. </summary>
        public TestSdkLanguage TestSdkLanguage { get; set; }
        /// <summary> Version of the reporter package. </summary>
        public string ServicePackageVersion { get; set; }
    }
}
