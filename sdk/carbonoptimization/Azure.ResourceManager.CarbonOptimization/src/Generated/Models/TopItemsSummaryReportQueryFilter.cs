// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Query Parameters for Top Items Carbon Emission by Category Type
    /// </summary>
    [Newtonsoft.Json.JsonObject("TopItemsSummaryReport")]
    public partial class TopItemsSummaryReportQueryFilter : QueryFilter
    {
        /// <summary>
        /// Initializes a new instance of the TopItemsSummaryReportQueryFilter
        /// class.
        /// </summary>
        public TopItemsSummaryReportQueryFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TopItemsSummaryReportQueryFilter
        /// class.
        /// </summary>
        /// <param name="dateRange">The start date and end date for carbon
        /// emissions data</param>
        /// <param name="subscriptionList">SubscriptionId list for carbon
        /// emissions data</param>
        /// <param name="carbonScopeList">Carbon emission scope for carbon
        /// emissions data</param>
        /// <param name="categoryType">Item Category type. Possible values
        /// include: 'Subscription', 'ResourceGroup', 'Location',
        /// 'ServiceType', 'Resource', 'ResourceType'</param>
        /// <param name="topItems">Number of top items to return. The value
        /// should be between 5 and 100</param>
        /// <param name="resourceGroupUrlList">resourceGroupUrl list for carbon
        /// emissions data</param>
        /// <param name="resourceTypeList">resource type list for carbon
        /// emissions data</param>
        /// <param name="locationList">Location list for carbon emissions
        /// data</param>
        public TopItemsSummaryReportQueryFilter(DateRange dateRange, IList<string> subscriptionList, IList<string> carbonScopeList, string categoryType, int topItems, IList<string> resourceGroupUrlList = default(IList<string>), IList<string> resourceTypeList = default(IList<string>), IList<string> locationList = default(IList<string>))
            : base(dateRange, subscriptionList, carbonScopeList, resourceGroupUrlList, resourceTypeList, locationList)
        {
            CategoryType = categoryType;
            TopItems = topItems;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets item Category type. Possible values include:
        /// 'Subscription', 'ResourceGroup', 'Location', 'ServiceType',
        /// 'Resource', 'ResourceType'
        /// </summary>
        [JsonProperty(PropertyName = "categoryType")]
        public string CategoryType { get; set; }

        /// <summary>
        /// Gets or sets number of top items to return. The value should be
        /// between 5 and 100
        /// </summary>
        [JsonProperty(PropertyName = "topItems")]
        public int TopItems { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (CategoryType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CategoryType");
            }
            if (TopItems > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "TopItems", 100);
            }
            if (TopItems < 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TopItems", 5);
            }
        }
    }
}
