// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Query filter parameter specified by users
    /// </summary>
    public partial class QueryFilter
    {
        /// <summary>
        /// Initializes a new instance of the QueryFilter class.
        /// </summary>
        public QueryFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryFilter class.
        /// </summary>
        /// <param name="dateRange">The start date and end date for carbon
        /// emissions data</param>
        /// <param name="subscriptionList">SubscriptionId list for carbon
        /// emissions data</param>
        /// <param name="carbonScopeList">Carbon emission scope for carbon
        /// emissions data</param>
        /// <param name="resourceGroupUrlList">resourceGroupUrl list for carbon
        /// emissions data</param>
        /// <param name="resourceTypeList">resource type list for carbon
        /// emissions data</param>
        /// <param name="locationList">Location list for carbon emissions
        /// data</param>
        public QueryFilter(DateRange dateRange, IList<string> subscriptionList, IList<string> carbonScopeList, IList<string> resourceGroupUrlList = default(IList<string>), IList<string> resourceTypeList = default(IList<string>), IList<string> locationList = default(IList<string>))
        {
            DateRange = dateRange;
            SubscriptionList = subscriptionList;
            ResourceGroupUrlList = resourceGroupUrlList;
            ResourceTypeList = resourceTypeList;
            LocationList = locationList;
            CarbonScopeList = carbonScopeList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the start date and end date for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "dateRange")]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// Gets or sets subscriptionId list for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionList")]
        public IList<string> SubscriptionList { get; set; }

        /// <summary>
        /// Gets or sets resourceGroupUrl list for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroupUrlList")]
        public IList<string> ResourceGroupUrlList { get; set; }

        /// <summary>
        /// Gets or sets resource type list for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "resourceTypeList")]
        public IList<string> ResourceTypeList { get; set; }

        /// <summary>
        /// Gets or sets location list for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "locationList")]
        public IList<string> LocationList { get; set; }

        /// <summary>
        /// Gets or sets carbon emission scope for carbon emissions data
        /// </summary>
        [JsonProperty(PropertyName = "carbonScopeList")]
        public IList<string> CarbonScopeList { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DateRange == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DateRange");
            }
            if (SubscriptionList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubscriptionList");
            }
            if (CarbonScopeList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CarbonScopeList");
            }
            if (DateRange != null)
            {
                DateRange.Validate();
            }
        }
    }
}
