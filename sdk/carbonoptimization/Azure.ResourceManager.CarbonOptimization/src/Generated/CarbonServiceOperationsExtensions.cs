// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.CarbonOptimization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CarbonServiceOperations.
    /// </summary>
    public static partial class CarbonServiceOperationsExtensions
    {
            /// <summary>
            /// API for Carbon Emissions Reports
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryParameters'>
            /// Query parameters
            /// </param>
            public static IPage<CarbonEmissionData> ListCarbonEmissionReports(this ICarbonServiceOperations operations, QueryFilter queryParameters)
            {
                return operations.ListCarbonEmissionReportsAsync(queryParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// API for Carbon Emissions Reports
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryParameters'>
            /// Query parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CarbonEmissionData>> ListCarbonEmissionReportsAsync(this ICarbonServiceOperations operations, QueryFilter queryParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCarbonEmissionReportsWithHttpMessagesAsync(queryParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// API for query carbon emission data available date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CarbonEmissionDataAvailableDateRange QueryCarbonEmissionDataAvailableDateRange(this ICarbonServiceOperations operations)
            {
                return operations.QueryCarbonEmissionDataAvailableDateRangeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// API for query carbon emission data available date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CarbonEmissionDataAvailableDateRange> QueryCarbonEmissionDataAvailableDateRangeAsync(this ICarbonServiceOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryCarbonEmissionDataAvailableDateRangeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// API for Carbon Emissions Reports
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CarbonEmissionData> ListCarbonEmissionReportsNext(this ICarbonServiceOperations operations, string nextPageLink)
            {
                return operations.ListCarbonEmissionReportsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// API for Carbon Emissions Reports
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CarbonEmissionData>> ListCarbonEmissionReportsNextAsync(this ICarbonServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCarbonEmissionReportsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
