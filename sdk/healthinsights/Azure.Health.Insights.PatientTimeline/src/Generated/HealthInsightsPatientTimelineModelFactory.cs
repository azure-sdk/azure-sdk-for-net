// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.Health.Insights.PatientTimeline
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsPatientTimelineModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="PatientTimeline.PatientRecord"/>. </summary>
        /// <param name="id"> A given identifier for the patient. Has to be unique across all patients in a single request. </param>
        /// <param name="info"> Patient structured information, including demographics and known structured clinical information. </param>
        /// <param name="encounters"> Patient encounters/visits. </param>
        /// <param name="patientDocuments"> Patient unstructured clinical data, given as documents. </param>
        /// <returns> A new <see cref="PatientTimeline.PatientRecord"/> instance for mocking. </returns>
        public static PatientRecord PatientRecord(string id = null, PatientInfo info = null, IEnumerable<Encounter> encounters = null, IEnumerable<PatientDocument> patientDocuments = null)
        {
            encounters ??= new List<Encounter>();
            patientDocuments ??= new List<PatientDocument>();

            return new PatientRecord(id, info, encounters?.ToList(), patientDocuments?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Element"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="PatientTimeline.Element"/> instance for mocking. </returns>
        public static Element Element(string id = null, IEnumerable<Extension> extension = null)
        {
            extension ??= new List<Extension>();

            return new Element(id, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Extension"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="url"> Source of the definition for the extension code - a logical name or a URL. </param>
        /// <param name="valueQuantity"> Value as Quantity. </param>
        /// <param name="valueCodeableConcept"> Value as CodeableConcept. </param>
        /// <param name="valueString"> Value as string. </param>
        /// <param name="valueBoolean"> Value as boolean. </param>
        /// <param name="valueInteger"> Value as integer. </param>
        /// <param name="valueRange"> Value as Range. </param>
        /// <param name="valueRatio"> Value as Ratio. </param>
        /// <param name="valueSampledData"> Value as SampledData. </param>
        /// <param name="valueTime"> Value as time (hh:mm:ss). </param>
        /// <param name="valueDateTime"> Value as dateTime. </param>
        /// <param name="valuePeriod"> Value as Period. </param>
        /// <param name="valueReference"> Value as reference. </param>
        /// <returns> A new <see cref="PatientTimeline.Extension"/> instance for mocking. </returns>
        public static Extension Extension(string id = null, IEnumerable<Extension> extension = null, string url = null, Quantity valueQuantity = null, CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, Range valueRange = null, Ratio valueRatio = null, SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, Period valuePeriod = null, Reference valueReference = null)
        {
            extension ??= new List<Extension>();

            return new Extension(id, extension?.ToList(), serializedAdditionalRawData: null, url, valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueInteger, valueRange, valueRatio, valueSampledData, valueTime, valueDateTime, valuePeriod, valueReference);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Quantity"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="value"> Numerical value (with implicit precision). </param>
        /// <param name="comparator"> &lt; | &lt;= | &gt;= | &gt; - how to understand the value. </param>
        /// <param name="unit"> Unit representation. </param>
        /// <param name="system"> System that defines coded unit form. </param>
        /// <param name="code"> Coded form of the unit. </param>
        /// <returns> A new <see cref="PatientTimeline.Quantity"/> instance for mocking. </returns>
        public static Quantity Quantity(string id = null, IEnumerable<Extension> extension = null, double? value = null, string comparator = null, string unit = null, string system = null, string code = null)
        {
            extension ??= new List<Extension>();

            return new Quantity(id, extension?.ToList(), serializedAdditionalRawData: null, value, comparator, unit, system, code);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.CodeableConcept"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="coding"> Code defined by a terminology system. </param>
        /// <param name="text"> Plain text representation of the concept. </param>
        /// <returns> A new <see cref="PatientTimeline.CodeableConcept"/> instance for mocking. </returns>
        public static CodeableConcept CodeableConcept(string id = null, IEnumerable<Extension> extension = null, IEnumerable<Coding> coding = null, string text = null)
        {
            extension ??= new List<Extension>();
            coding ??= new List<Coding>();

            return new CodeableConcept(id, extension?.ToList(), serializedAdditionalRawData: null, coding?.ToList(), text);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Coding"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="system"> Identity of the terminology system. </param>
        /// <param name="version"> Version of the system - if relevant. </param>
        /// <param name="code"> Symbol in syntax defined by the system. </param>
        /// <param name="display"> Representation defined by the system. </param>
        /// <returns> A new <see cref="PatientTimeline.Coding"/> instance for mocking. </returns>
        public static Coding Coding(string id = null, IEnumerable<Extension> extension = null, string system = null, string version = null, string code = null, string display = null)
        {
            extension ??= new List<Extension>();

            return new Coding(id, extension?.ToList(), serializedAdditionalRawData: null, system, version, code, display);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Range"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="low"> Low limit. </param>
        /// <param name="high"> High limit. </param>
        /// <returns> A new <see cref="PatientTimeline.Range"/> instance for mocking. </returns>
        public static Range Range(string id = null, IEnumerable<Extension> extension = null, Quantity low = null, Quantity high = null)
        {
            extension ??= new List<Extension>();

            return new Range(id, extension?.ToList(), serializedAdditionalRawData: null, low, high);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Ratio"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="numerator"> Numerator value. </param>
        /// <param name="denominator"> Denominator value. </param>
        /// <returns> A new <see cref="PatientTimeline.Ratio"/> instance for mocking. </returns>
        public static Ratio Ratio(string id = null, IEnumerable<Extension> extension = null, Quantity numerator = null, Quantity denominator = null)
        {
            extension ??= new List<Extension>();

            return new Ratio(id, extension?.ToList(), serializedAdditionalRawData: null, numerator, denominator);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.SampledData"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="origin"> Zero value and units. </param>
        /// <param name="period"> Number of milliseconds between samples. </param>
        /// <param name="factor"> Multiply data by this before adding to origin. </param>
        /// <param name="lowerLimit"> Lower limit of detection. </param>
        /// <param name="upperLimit"> Upper limit of detection. </param>
        /// <param name="dimensions"> Number of sample points at each time point. </param>
        /// <param name="data"> Decimal values with spaces, or "E" | "U" | "L". </param>
        /// <returns> A new <see cref="PatientTimeline.SampledData"/> instance for mocking. </returns>
        public static SampledData SampledData(string id = null, IEnumerable<Extension> extension = null, Quantity origin = null, double period = default, double? factor = null, double? lowerLimit = null, double? upperLimit = null, int dimensions = default, string data = null)
        {
            extension ??= new List<Extension>();

            return new SampledData(id, extension?.ToList(), serializedAdditionalRawData: null, origin, period, factor, lowerLimit, upperLimit, dimensions, data);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Period"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="start"> Starting time with inclusive boundary. </param>
        /// <param name="end"> End time with inclusive boundary, if not ongoing. </param>
        /// <returns> A new <see cref="PatientTimeline.Period"/> instance for mocking. </returns>
        public static Period Period(string id = null, IEnumerable<Extension> extension = null, string start = null, string end = null)
        {
            extension ??= new List<Extension>();

            return new Period(id, extension?.ToList(), serializedAdditionalRawData: null, start, end);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Reference"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="referenceProperty"> Literal reference, Relative, internal or absolute URL. </param>
        /// <param name="type"> Type the reference refers to (e.g. "Patient"). </param>
        /// <param name="identifier"> Logical reference, when literal reference is not known. </param>
        /// <param name="display"> Text alternative for the resource. </param>
        /// <returns> A new <see cref="PatientTimeline.Reference"/> instance for mocking. </returns>
        public static Reference Reference(string id = null, IEnumerable<Extension> extension = null, string referenceProperty = null, string type = null, Identifier identifier = null, string display = null)
        {
            extension ??= new List<Extension>();

            return new Reference(id, extension?.ToList(), serializedAdditionalRawData: null, referenceProperty, type, identifier, display);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Identifier"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="use"> usual | official | temp | secondary | old (If known). </param>
        /// <param name="type"> Description of identifier. </param>
        /// <param name="system"> The namespace for the identifier value. </param>
        /// <param name="value"> The value that is unique. </param>
        /// <param name="period"> Time period when id is/was valid for use. </param>
        /// <param name="assigner"> Organization that issued id (may be just text). </param>
        /// <returns> A new <see cref="PatientTimeline.Identifier"/> instance for mocking. </returns>
        public static Identifier Identifier(string id = null, IEnumerable<Extension> extension = null, string use = null, CodeableConcept type = null, string system = null, string value = null, Period period = null, Reference assigner = null)
        {
            extension ??= new List<Extension>();

            return new Identifier(id, extension?.ToList(), serializedAdditionalRawData: null, use, type, system, value, period, assigner);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Encounter"/>. </summary>
        /// <param name="id"> The id of the visit. </param>
        /// <param name="period">
        /// Time period of the visit.
        /// In case of admission, use timePeriod.start to indicate the admission time and timePeriod.end to indicate the discharge time.
        /// </param>
        /// <param name="class"> The class of the encounter. </param>
        /// <returns> A new <see cref="PatientTimeline.Encounter"/> instance for mocking. </returns>
        public static Encounter Encounter(string id = null, TimePeriod period = null, EncounterClass? @class = null)
        {
            return new Encounter(id, period, @class, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.PatientDocument"/>. </summary>
        /// <param name="type"> The type of the patient document, such as 'note' (text document) or 'fhirBundle' (FHIR JSON document). </param>
        /// <param name="clinicalType"> The type of the clinical document. </param>
        /// <param name="id"> A given identifier for the document. Has to be unique across all documents for a single patient. </param>
        /// <param name="language"> A 2 letter ISO 639-1 representation of the language of the document. </param>
        /// <param name="createdDateTime"> The date and time when the document was created. </param>
        /// <param name="authors"> Document author(s). </param>
        /// <param name="specialtyType"> specialty type the document. </param>
        /// <param name="administrativeMetadata"> Administrative metadata for the document. </param>
        /// <param name="content"> The content of the patient document. </param>
        /// <returns> A new <see cref="PatientTimeline.PatientDocument"/> instance for mocking. </returns>
        public static PatientDocument PatientDocument(DocumentType type = default, ClinicalDocumentType? clinicalType = null, string id = null, string language = null, DateTimeOffset? createdDateTime = null, IEnumerable<DocumentAuthor> authors = null, SpecialtyType? specialtyType = null, DocumentAdministrativeMetadata administrativeMetadata = null, DocumentContent content = null)
        {
            authors ??= new List<DocumentAuthor>();

            return new PatientDocument(type, clinicalType, id, language, createdDateTime, authors?.ToList(), specialtyType, administrativeMetadata, content, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.PatientTimelineInferenceResult"/>. </summary>
        /// <param name="patientResults"> Results for the patients given in the request. </param>
        /// <param name="modelVersion"> The version of the model used for inference, expressed as the model date. </param>
        /// <returns> A new <see cref="PatientTimeline.PatientTimelineInferenceResult"/> instance for mocking. </returns>
        public static PatientTimelineInferenceResult PatientTimelineInferenceResult(IEnumerable<PatientTimelinePatientResult> patientResults = null, string modelVersion = null)
        {
            patientResults ??= new List<PatientTimelinePatientResult>();

            return new PatientTimelineInferenceResult(patientResults?.ToList(), modelVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.PatientTimelinePatientResult"/>. </summary>
        /// <param name="patientId"> The identifier given for the patient in the request. </param>
        /// <param name="inferences"> The model's inferences for the given patient. </param>
        /// <returns> A new <see cref="PatientTimeline.PatientTimelinePatientResult"/> instance for mocking. </returns>
        public static PatientTimelinePatientResult PatientTimelinePatientResult(string patientId = null, IEnumerable<PatientTimelineInference> inferences = null)
        {
            inferences ??= new List<PatientTimelineInference>();

            return new PatientTimelinePatientResult(patientId, inferences?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.PatientTimelineInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="type"> The type of the Patient Timeline inference. </param>
        /// <param name="resource">
        /// FHIR 4.0 representation of the piece of clinical info.
        /// additional dependent resources maybe contained (e.g. MedicationStatement may contain Medication)
        /// -- In the SDK we will have custom mapping to map this type to JsonObject
        /// </param>
        /// <param name="period"> Time range relevant to this Timeline inference. </param>
        /// <returns> A new <see cref="PatientTimeline.PatientTimelineInference"/> instance for mocking. </returns>
        public static PatientTimelineInference PatientTimelineInference(IEnumerable<Extension> extension = null, PatientTimelineInferenceType type = default, DomainResource resource = null, TimePeriod period = null)
        {
            extension ??= new List<Extension>();

            return new PatientTimelineInference(extension?.ToList(), type, resource, period, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="PatientTimeline.Narrative"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="status"> generated, extensions, additional, empty. </param>
        /// <param name="div"> xhtml. </param>
        /// <returns> A new <see cref="PatientTimeline.Narrative"/> instance for mocking. </returns>
        public static Narrative Narrative(string id = null, IEnumerable<Extension> extension = null, string status = null, string div = null)
        {
            extension ??= new List<Extension>();

            return new Narrative(id, extension?.ToList(), serializedAdditionalRawData: null, status, div);
        }
    }
}
