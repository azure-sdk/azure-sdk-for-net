// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.PatientTimeline
{
    /// <summary> Enum for specialtyType in PatientDocument. </summary>
    public readonly partial struct PatientDocumentSpecialtyType : IEquatable<PatientDocumentSpecialtyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatientDocumentSpecialtyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatientDocumentSpecialtyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PathologyValue = "pathology";
        private const string RadiologyValue = "radiology";

        /// <summary> pathology. </summary>
        public static PatientDocumentSpecialtyType Pathology { get; } = new PatientDocumentSpecialtyType(PathologyValue);
        /// <summary> radiology. </summary>
        public static PatientDocumentSpecialtyType Radiology { get; } = new PatientDocumentSpecialtyType(RadiologyValue);
        /// <summary> Determines if two <see cref="PatientDocumentSpecialtyType"/> values are the same. </summary>
        public static bool operator ==(PatientDocumentSpecialtyType left, PatientDocumentSpecialtyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatientDocumentSpecialtyType"/> values are not the same. </summary>
        public static bool operator !=(PatientDocumentSpecialtyType left, PatientDocumentSpecialtyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PatientDocumentSpecialtyType"/>. </summary>
        public static implicit operator PatientDocumentSpecialtyType(string value) => new PatientDocumentSpecialtyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatientDocumentSpecialtyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatientDocumentSpecialtyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
