// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.PatientTimeline
{
    /// <summary> Enum for type in PatientDocument. </summary>
    public readonly partial struct PatientDocumentType : IEquatable<PatientDocumentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatientDocumentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatientDocumentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoteValue = "note";
        private const string FhirBundleValue = "fhirBundle";
        private const string DicomValue = "dicom";
        private const string GenomicSequencingValue = "genomicSequencing";

        /// <summary> note. </summary>
        public static PatientDocumentType Note { get; } = new PatientDocumentType(NoteValue);
        /// <summary> fhirBundle. </summary>
        public static PatientDocumentType FhirBundle { get; } = new PatientDocumentType(FhirBundleValue);
        /// <summary> dicom. </summary>
        public static PatientDocumentType Dicom { get; } = new PatientDocumentType(DicomValue);
        /// <summary> genomicSequencing. </summary>
        public static PatientDocumentType GenomicSequencing { get; } = new PatientDocumentType(GenomicSequencingValue);
        /// <summary> Determines if two <see cref="PatientDocumentType"/> values are the same. </summary>
        public static bool operator ==(PatientDocumentType left, PatientDocumentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatientDocumentType"/> values are not the same. </summary>
        public static bool operator !=(PatientDocumentType left, PatientDocumentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PatientDocumentType"/>. </summary>
        public static implicit operator PatientDocumentType(string value) => new PatientDocumentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatientDocumentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatientDocumentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
