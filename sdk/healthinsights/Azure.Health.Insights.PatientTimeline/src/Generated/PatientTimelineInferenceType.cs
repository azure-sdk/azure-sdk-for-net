// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.PatientTimeline
{
    /// <summary> The type of the Patient Timeline inference. </summary>
    public readonly partial struct PatientTimelineInferenceType : IEquatable<PatientTimelineInferenceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatientTimelineInferenceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatientTimelineInferenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TimelineEventValue = "timelineEvent";
        private const string SummaryItemValue = "summaryItem";

        /// <summary> The inference is a timeline event. </summary>
        public static PatientTimelineInferenceType TimelineEvent { get; } = new PatientTimelineInferenceType(TimelineEventValue);
        /// <summary> The inference is a summary item. </summary>
        public static PatientTimelineInferenceType SummaryItem { get; } = new PatientTimelineInferenceType(SummaryItemValue);
        /// <summary> Determines if two <see cref="PatientTimelineInferenceType"/> values are the same. </summary>
        public static bool operator ==(PatientTimelineInferenceType left, PatientTimelineInferenceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatientTimelineInferenceType"/> values are not the same. </summary>
        public static bool operator !=(PatientTimelineInferenceType left, PatientTimelineInferenceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PatientTimelineInferenceType"/>. </summary>
        public static implicit operator PatientTimelineInferenceType(string value) => new PatientTimelineInferenceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatientTimelineInferenceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatientTimelineInferenceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
