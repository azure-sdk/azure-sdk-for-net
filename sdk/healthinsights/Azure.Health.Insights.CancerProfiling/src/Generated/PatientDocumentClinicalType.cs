// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.CancerProfiling
{
    /// <summary> Enum for clinicalType in PatientDocument. </summary>
    public readonly partial struct PatientDocumentClinicalType : IEquatable<PatientDocumentClinicalType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatientDocumentClinicalType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatientDocumentClinicalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConsultationValue = "consultation";
        private const string DischargeSummaryValue = "dischargeSummary";
        private const string HistoryAndPhysicalValue = "historyAndPhysical";
        private const string RadiologyReportValue = "radiologyReport";
        private const string ProcedureValue = "procedure";
        private const string ProgressValue = "progress";
        private const string LaboratoryValue = "laboratory";
        private const string PathologyReportValue = "pathologyReport";

        /// <summary> consultation. </summary>
        public static PatientDocumentClinicalType Consultation { get; } = new PatientDocumentClinicalType(ConsultationValue);
        /// <summary> dischargeSummary. </summary>
        public static PatientDocumentClinicalType DischargeSummary { get; } = new PatientDocumentClinicalType(DischargeSummaryValue);
        /// <summary> historyAndPhysical. </summary>
        public static PatientDocumentClinicalType HistoryAndPhysical { get; } = new PatientDocumentClinicalType(HistoryAndPhysicalValue);
        /// <summary> radiologyReport. </summary>
        public static PatientDocumentClinicalType RadiologyReport { get; } = new PatientDocumentClinicalType(RadiologyReportValue);
        /// <summary> procedure. </summary>
        public static PatientDocumentClinicalType Procedure { get; } = new PatientDocumentClinicalType(ProcedureValue);
        /// <summary> progress. </summary>
        public static PatientDocumentClinicalType Progress { get; } = new PatientDocumentClinicalType(ProgressValue);
        /// <summary> laboratory. </summary>
        public static PatientDocumentClinicalType Laboratory { get; } = new PatientDocumentClinicalType(LaboratoryValue);
        /// <summary> pathologyReport. </summary>
        public static PatientDocumentClinicalType PathologyReport { get; } = new PatientDocumentClinicalType(PathologyReportValue);
        /// <summary> Determines if two <see cref="PatientDocumentClinicalType"/> values are the same. </summary>
        public static bool operator ==(PatientDocumentClinicalType left, PatientDocumentClinicalType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatientDocumentClinicalType"/> values are not the same. </summary>
        public static bool operator !=(PatientDocumentClinicalType left, PatientDocumentClinicalType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PatientDocumentClinicalType"/>. </summary>
        public static implicit operator PatientDocumentClinicalType(string value) => new PatientDocumentClinicalType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatientDocumentClinicalType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatientDocumentClinicalType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
