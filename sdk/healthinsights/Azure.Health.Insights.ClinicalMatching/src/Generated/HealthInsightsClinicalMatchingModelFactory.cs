// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.Health.Insights.ClinicalMatching
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsClinicalMatchingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.PatientRecord"/>. </summary>
        /// <param name="id"> A given identifier for the patient. Has to be unique across all patients in a single request. </param>
        /// <param name="info"> Patient structured information, including demographics and known structured clinical information. </param>
        /// <param name="encounters"> Patient encounters/visits. </param>
        /// <param name="patientDocuments"> Patient unstructured clinical data, given as documents. </param>
        /// <returns> A new <see cref="ClinicalMatching.PatientRecord"/> instance for mocking. </returns>
        public static PatientRecord PatientRecord(string id = null, PatientInfo info = null, IEnumerable<Encounter> encounters = null, IEnumerable<PatientDocument> patientDocuments = null)
        {
            encounters ??= new List<Encounter>();
            patientDocuments ??= new List<PatientDocument>();

            return new PatientRecord(id, info, encounters?.ToList(), patientDocuments?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Resource"/>. </summary>
        /// <param name="resourceType"> The type of resource. </param>
        /// <param name="id"> Resource Id. </param>
        /// <param name="meta"> Metadata about the resource. </param>
        /// <param name="implicitRules"> A set of rules under which this content was created. </param>
        /// <param name="language"> Language of the resource content. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="ClinicalMatching.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string resourceType = null, string id = null, Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Resource(resourceType, id, meta, implicitRules, language, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Element"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="ClinicalMatching.Element"/> instance for mocking. </returns>
        public static Element Element(string id = null, IEnumerable<Extension> extension = null)
        {
            extension ??= new List<Extension>();

            return new Element(id, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Extension"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="url"> Source of the definition for the extension code - a logical name or a URL. </param>
        /// <param name="valueQuantity"> Value as Quantity. </param>
        /// <param name="valueCodeableConcept"> Value as CodeableConcept. </param>
        /// <param name="valueString"> Value as string. </param>
        /// <param name="valueBoolean"> Value as boolean. </param>
        /// <param name="valueInteger"> Value as integer. </param>
        /// <param name="valueRange"> Value as Range. </param>
        /// <param name="valueRatio"> Value as Ratio. </param>
        /// <param name="valueSampledData"> Value as SampledData. </param>
        /// <param name="valueTime"> Value as time (hh:mm:ss). </param>
        /// <param name="valueDateTime"> Value as dateTime. </param>
        /// <param name="valuePeriod"> Value as Period. </param>
        /// <param name="valueReference"> Value as reference. </param>
        /// <returns> A new <see cref="ClinicalMatching.Extension"/> instance for mocking. </returns>
        public static Extension Extension(string id = null, IEnumerable<Extension> extension = null, string url = null, Quantity valueQuantity = null, CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, Range valueRange = null, Ratio valueRatio = null, SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, Period valuePeriod = null, Reference valueReference = null)
        {
            extension ??= new List<Extension>();

            return new Extension(id, extension?.ToList(), serializedAdditionalRawData: null, url, valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueInteger, valueRange, valueRatio, valueSampledData, valueTime, valueDateTime, valuePeriod, valueReference);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Quantity"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="value"> Numerical value (with implicit precision). </param>
        /// <param name="comparator"> &lt; | &lt;= | &gt;= | &gt; - how to understand the value. </param>
        /// <param name="unit"> Unit representation. </param>
        /// <param name="system"> System that defines coded unit form. </param>
        /// <param name="code"> Coded form of the unit. </param>
        /// <returns> A new <see cref="ClinicalMatching.Quantity"/> instance for mocking. </returns>
        public static Quantity Quantity(string id = null, IEnumerable<Extension> extension = null, double? value = null, string comparator = null, string unit = null, string system = null, string code = null)
        {
            extension ??= new List<Extension>();

            return new Quantity(id, extension?.ToList(), serializedAdditionalRawData: null, value, comparator, unit, system, code);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.CodeableConcept"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="coding"> Code defined by a terminology system. </param>
        /// <param name="text"> Plain text representation of the concept. </param>
        /// <returns> A new <see cref="ClinicalMatching.CodeableConcept"/> instance for mocking. </returns>
        public static CodeableConcept CodeableConcept(string id = null, IEnumerable<Extension> extension = null, IEnumerable<Coding> coding = null, string text = null)
        {
            extension ??= new List<Extension>();
            coding ??= new List<Coding>();

            return new CodeableConcept(id, extension?.ToList(), serializedAdditionalRawData: null, coding?.ToList(), text);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Coding"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="system"> Identity of the terminology system. </param>
        /// <param name="version"> Version of the system - if relevant. </param>
        /// <param name="code"> Symbol in syntax defined by the system. </param>
        /// <param name="display"> Representation defined by the system. </param>
        /// <returns> A new <see cref="ClinicalMatching.Coding"/> instance for mocking. </returns>
        public static Coding Coding(string id = null, IEnumerable<Extension> extension = null, string system = null, string version = null, string code = null, string display = null)
        {
            extension ??= new List<Extension>();

            return new Coding(id, extension?.ToList(), serializedAdditionalRawData: null, system, version, code, display);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Range"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="low"> Low limit. </param>
        /// <param name="high"> High limit. </param>
        /// <returns> A new <see cref="ClinicalMatching.Range"/> instance for mocking. </returns>
        public static Range Range(string id = null, IEnumerable<Extension> extension = null, Quantity low = null, Quantity high = null)
        {
            extension ??= new List<Extension>();

            return new Range(id, extension?.ToList(), serializedAdditionalRawData: null, low, high);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Ratio"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="numerator"> Numerator value. </param>
        /// <param name="denominator"> Denominator value. </param>
        /// <returns> A new <see cref="ClinicalMatching.Ratio"/> instance for mocking. </returns>
        public static Ratio Ratio(string id = null, IEnumerable<Extension> extension = null, Quantity numerator = null, Quantity denominator = null)
        {
            extension ??= new List<Extension>();

            return new Ratio(id, extension?.ToList(), serializedAdditionalRawData: null, numerator, denominator);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.SampledData"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="origin"> Zero value and units. </param>
        /// <param name="period"> Number of milliseconds between samples. </param>
        /// <param name="factor"> Multiply data by this before adding to origin. </param>
        /// <param name="lowerLimit"> Lower limit of detection. </param>
        /// <param name="upperLimit"> Upper limit of detection. </param>
        /// <param name="dimensions"> Number of sample points at each time point. </param>
        /// <param name="data"> Decimal values with spaces, or "E" | "U" | "L". </param>
        /// <returns> A new <see cref="ClinicalMatching.SampledData"/> instance for mocking. </returns>
        public static SampledData SampledData(string id = null, IEnumerable<Extension> extension = null, Quantity origin = null, double period = default, double? factor = null, double? lowerLimit = null, double? upperLimit = null, int dimensions = default, string data = null)
        {
            extension ??= new List<Extension>();

            return new SampledData(id, extension?.ToList(), serializedAdditionalRawData: null, origin, period, factor, lowerLimit, upperLimit, dimensions, data);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Period"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="start"> Starting time with inclusive boundary. </param>
        /// <param name="end"> End time with inclusive boundary, if not ongoing. </param>
        /// <returns> A new <see cref="ClinicalMatching.Period"/> instance for mocking. </returns>
        public static Period Period(string id = null, IEnumerable<Extension> extension = null, string start = null, string end = null)
        {
            extension ??= new List<Extension>();

            return new Period(id, extension?.ToList(), serializedAdditionalRawData: null, start, end);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Reference"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="referenceProperty"> Literal reference, Relative, internal or absolute URL. </param>
        /// <param name="type"> Type the reference refers to (e.g. "Patient"). </param>
        /// <param name="identifier"> Logical reference, when literal reference is not known. </param>
        /// <param name="display"> Text alternative for the resource. </param>
        /// <returns> A new <see cref="ClinicalMatching.Reference"/> instance for mocking. </returns>
        public static Reference Reference(string id = null, IEnumerable<Extension> extension = null, string referenceProperty = null, string type = null, Identifier identifier = null, string display = null)
        {
            extension ??= new List<Extension>();

            return new Reference(id, extension?.ToList(), serializedAdditionalRawData: null, referenceProperty, type, identifier, display);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Identifier"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="use"> usual | official | temp | secondary | old (If known). </param>
        /// <param name="type"> Description of identifier. </param>
        /// <param name="system"> The namespace for the identifier value. </param>
        /// <param name="value"> The value that is unique. </param>
        /// <param name="period"> Time period when id is/was valid for use. </param>
        /// <param name="assigner"> Organization that issued id (may be just text). </param>
        /// <returns> A new <see cref="ClinicalMatching.Identifier"/> instance for mocking. </returns>
        public static Identifier Identifier(string id = null, IEnumerable<Extension> extension = null, string use = null, CodeableConcept type = null, string system = null, string value = null, Period period = null, Reference assigner = null)
        {
            extension ??= new List<Extension>();

            return new Identifier(id, extension?.ToList(), serializedAdditionalRawData: null, use, type, system, value, period, assigner);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Encounter"/>. </summary>
        /// <param name="id"> The id of the visit. </param>
        /// <param name="period">
        /// Time period of the visit.
        /// In case of admission, use timePeriod.start to indicate the admission time and timePeriod.end to indicate the discharge time.
        /// </param>
        /// <param name="class"> The class of the encounter. </param>
        /// <returns> A new <see cref="ClinicalMatching.Encounter"/> instance for mocking. </returns>
        public static Encounter Encounter(string id = null, TimePeriod period = null, EncounterClass? @class = null)
        {
            return new Encounter(id, period, @class, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.PatientDocument"/>. </summary>
        /// <param name="type"> The type of the patient document, such as 'note' (text document) or 'fhirBundle' (FHIR JSON document). </param>
        /// <param name="clinicalType"> The type of the clinical document. </param>
        /// <param name="id"> A given identifier for the document. Has to be unique across all documents for a single patient. </param>
        /// <param name="language"> A 2 letter ISO 639-1 representation of the language of the document. </param>
        /// <param name="createdDateTime"> The date and time when the document was created. </param>
        /// <param name="authors"> Document author(s). </param>
        /// <param name="specialtyType"> specialty type the document. </param>
        /// <param name="administrativeMetadata"> Administrative metadata for the document. </param>
        /// <param name="content"> The content of the patient document. </param>
        /// <returns> A new <see cref="ClinicalMatching.PatientDocument"/> instance for mocking. </returns>
        public static PatientDocument PatientDocument(DocumentType type = default, ClinicalDocumentType? clinicalType = null, string id = null, string language = null, DateTimeOffset? createdDateTime = null, IEnumerable<DocumentAuthor> authors = null, SpecialtyType? specialtyType = null, DocumentAdministrativeMetadata administrativeMetadata = null, DocumentContent content = null)
        {
            authors ??= new List<DocumentAuthor>();

            return new PatientDocument(type, clinicalType, id, language, createdDateTime, authors?.ToList(), specialtyType, administrativeMetadata, content, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherModelConfiguration"/>. </summary>
        /// <param name="verbose"> An indication whether the model should produce verbose output. </param>
        /// <param name="includeEvidence"> An indication whether the model's output should include evidence for the inferences. </param>
        /// <param name="clinicalTrials">
        /// The clinical trials that the patient(s) should be matched to. &lt;br /&gt;The trial
        /// selection can be given as a list of custom clinical trials and/or a list of
        /// filters to known clinical trial registries. In case both are given, the
        /// resulting trial set is a union of the two sets.
        /// </param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherModelConfiguration"/> instance for mocking. </returns>
        public static TrialMatcherModelConfiguration TrialMatcherModelConfiguration(bool? verbose = null, bool? includeEvidence = null, ClinicalTrials clinicalTrials = null)
        {
            return new TrialMatcherModelConfiguration(verbose, includeEvidence, clinicalTrials, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.DomainResource"/>. </summary>
        /// <param name="resourceType"> The type of resource. </param>
        /// <param name="id"> Resource Id. </param>
        /// <param name="meta"> Metadata about the resource. </param>
        /// <param name="implicitRules"> A set of rules under which this content was created. </param>
        /// <param name="language"> Language of the resource content. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"> Text summary of the resource, for human interpretation. </param>
        /// <param name="contained"> Contained, inline Resources. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="modifierExtension"> Extensions that cannot be ignored. </param>
        /// <returns> A new <see cref="ClinicalMatching.DomainResource"/> instance for mocking. </returns>
        public static DomainResource DomainResource(string resourceType = null, string id = null, Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, Narrative text = null, IEnumerable<Resource> contained = null, IEnumerable<Extension> extension = null, IEnumerable<Extension> modifierExtension = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<Resource>();
            extension ??= new List<Extension>();
            modifierExtension ??= new List<Extension>();

            return new UnknownDomainResource(resourceType, id, meta, implicitRules, language, additionalProperties, text, contained?.ToList(), extension?.ToList(), modifierExtension?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Narrative"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="status"> generated, extensions, additional, empty. </param>
        /// <param name="div"> xhtml. </param>
        /// <returns> A new <see cref="ClinicalMatching.Narrative"/> instance for mocking. </returns>
        public static Narrative Narrative(string id = null, IEnumerable<Extension> extension = null, string status = null, string div = null)
        {
            extension ??= new List<Extension>();

            return new Narrative(id, extension?.ToList(), serializedAdditionalRawData: null, status, div);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ResearchStudy"/>. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="meta"> Metadata about the resource. </param>
        /// <param name="implicitRules"> A set of rules under which this content was created. </param>
        /// <param name="language"> Language of the resource content. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"> Text summary of the resource, for human interpretation. </param>
        /// <param name="contained"> Contained, inline Resources. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="modifierExtension"> Extensions that cannot be ignored. </param>
        /// <param name="identifier"> Business Identifier for study. </param>
        /// <param name="title"> Name for this study. </param>
        /// <param name="protocol"> Steps followed in executing study. </param>
        /// <param name="partOf"> Part of larger study. </param>
        /// <param name="status"> active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn. </param>
        /// <param name="primaryPurposeType"> treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility. </param>
        /// <param name="phase"> n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4. </param>
        /// <param name="category"> Classifications for the study. </param>
        /// <param name="focus"> Drugs, devices, etc. under study. </param>
        /// <param name="condition"> Condition being studied. </param>
        /// <param name="contact"> Contact details for the study. </param>
        /// <param name="keyword"> Used to search for the study. </param>
        /// <param name="location"> Geographic region(s) for study. </param>
        /// <param name="description"> What this is study doing. </param>
        /// <param name="enrollment"> Inclusion &amp; exclusion criteria. </param>
        /// <param name="period"> When the study began and ended. </param>
        /// <param name="sponsor"> Organization that initiates and is legally responsible for the study. </param>
        /// <param name="principalInvestigator"> Researcher who oversees multiple aspects of the study. </param>
        /// <param name="site"> Facility where study activities are conducted. </param>
        /// <param name="reasonStopped"> accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design. </param>
        /// <param name="note"> Comments made about the study. </param>
        /// <param name="arm"> Defined path through the study for a subject. </param>
        /// <param name="objective"> A goal for the study. </param>
        /// <returns> A new <see cref="ClinicalMatching.ResearchStudy"/> instance for mocking. </returns>
        public static ResearchStudy ResearchStudy(string id = null, Meta meta = null, string implicitRules = null, string language = null, IDictionary<string, BinaryData> additionalProperties = null, Narrative text = null, IEnumerable<Resource> contained = null, IEnumerable<Extension> extension = null, IEnumerable<Extension> modifierExtension = null, IEnumerable<Identifier> identifier = null, string title = null, IEnumerable<Reference> protocol = null, IEnumerable<Reference> partOf = null, ResearchStudyStatusCodeType status = default, CodeableConcept primaryPurposeType = null, CodeableConcept phase = null, IEnumerable<CodeableConcept> category = null, IEnumerable<CodeableConcept> focus = null, IEnumerable<CodeableConcept> condition = null, IEnumerable<ContactDetail> contact = null, IEnumerable<CodeableConcept> keyword = null, IEnumerable<CodeableConcept> location = null, string description = null, IEnumerable<Reference> enrollment = null, Period period = null, Reference sponsor = null, Reference principalInvestigator = null, IEnumerable<Reference> site = null, CodeableConcept reasonStopped = null, IEnumerable<Annotation> note = null, IEnumerable<ResearchStudyArm> arm = null, IEnumerable<ResearchStudyObjective> objective = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            contained ??= new List<Resource>();
            extension ??= new List<Extension>();
            modifierExtension ??= new List<Extension>();
            identifier ??= new List<Identifier>();
            protocol ??= new List<Reference>();
            partOf ??= new List<Reference>();
            category ??= new List<CodeableConcept>();
            focus ??= new List<CodeableConcept>();
            condition ??= new List<CodeableConcept>();
            contact ??= new List<ContactDetail>();
            keyword ??= new List<CodeableConcept>();
            location ??= new List<CodeableConcept>();
            enrollment ??= new List<Reference>();
            site ??= new List<Reference>();
            note ??= new List<Annotation>();
            arm ??= new List<ResearchStudyArm>();
            objective ??= new List<ResearchStudyObjective>();

            return new ResearchStudy("ResearchStudy", id, meta, implicitRules, language, additionalProperties, text, contained?.ToList(), extension?.ToList(), modifierExtension?.ToList(), identifier?.ToList(), title, protocol?.ToList(), partOf?.ToList(), status, primaryPurposeType, phase, category?.ToList(), focus?.ToList(), condition?.ToList(), contact?.ToList(), keyword?.ToList(), location?.ToList(), description, enrollment?.ToList(), period, sponsor, principalInvestigator, site?.ToList(), reasonStopped, note?.ToList(), arm?.ToList(), objective?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ContactDetail"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="name"> Name of an individual to contact. </param>
        /// <param name="telecom"> Contact details for individual or organization. </param>
        /// <returns> A new <see cref="ClinicalMatching.ContactDetail"/> instance for mocking. </returns>
        public static ContactDetail ContactDetail(string id = null, IEnumerable<Extension> extension = null, string name = null, IEnumerable<ContactPoint> telecom = null)
        {
            extension ??= new List<Extension>();
            telecom ??= new List<ContactPoint>();

            return new ContactDetail(id, extension?.ToList(), serializedAdditionalRawData: null, name, telecom?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.Annotation"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="authorString"> Individual responsible for the annotation. </param>
        /// <param name="time"> When the annotation was made. </param>
        /// <param name="text"> The annotation - text content (as markdown). </param>
        /// <returns> A new <see cref="ClinicalMatching.Annotation"/> instance for mocking. </returns>
        public static Annotation Annotation(string id = null, IEnumerable<Extension> extension = null, string authorString = null, string time = null, string text = null)
        {
            extension ??= new List<Extension>();

            return new Annotation(id, extension?.ToList(), serializedAdditionalRawData: null, authorString, time, text);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ResearchStudyArm"/>. </summary>
        /// <param name="name"> Label for study arm. </param>
        /// <param name="type"> Categorization of study arm. </param>
        /// <param name="description"> Short explanation of study path. </param>
        /// <returns> A new <see cref="ClinicalMatching.ResearchStudyArm"/> instance for mocking. </returns>
        public static ResearchStudyArm ResearchStudyArm(string name = null, CodeableConcept type = null, string description = null)
        {
            return new ResearchStudyArm(name, type, description, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ResearchStudyObjective"/>. </summary>
        /// <param name="name"> Label for the objective. </param>
        /// <param name="type"> primary | secondary | exploratory. </param>
        /// <returns> A new <see cref="ClinicalMatching.ResearchStudyObjective"/> instance for mocking. </returns>
        public static ResearchStudyObjective ResearchStudyObjective(string name = null, CodeableConcept type = null)
        {
            return new ResearchStudyObjective(name, type, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.GeographicLocation"/>. </summary>
        /// <param name="city"> City name. </param>
        /// <param name="state"> State name. </param>
        /// <param name="countryOrRegion"> Country/region name. </param>
        /// <returns> A new <see cref="ClinicalMatching.GeographicLocation"/> instance for mocking. </returns>
        public static GeographicLocation GeographicLocation(string city = null, string state = null, string countryOrRegion = null)
        {
            return new GeographicLocation(city, state, countryOrRegion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherInferenceResult"/>. </summary>
        /// <param name="patientResults"> Results for the patients given in the request. </param>
        /// <param name="modelVersion"> The version of the model used for inference, expressed as the model date. </param>
        /// <param name="knowledgeGraphLastUpdateDate"> The date when the clinical trials knowledge graph was last updated. </param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherInferenceResult"/> instance for mocking. </returns>
        public static TrialMatcherInferenceResult TrialMatcherInferenceResult(IEnumerable<TrialMatcherPatientResult> patientResults = null, string modelVersion = null, DateTimeOffset? knowledgeGraphLastUpdateDate = null)
        {
            patientResults ??= new List<TrialMatcherPatientResult>();

            return new TrialMatcherInferenceResult(patientResults?.ToList(), modelVersion, knowledgeGraphLastUpdateDate, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherPatientResult"/>. </summary>
        /// <param name="patientId"> The identifier given for the patient in the request. </param>
        /// <param name="inferences"> The inference results for the patient. </param>
        /// <param name="neededClinicalInfo"> Clinical information which is needed to provide better trial matching results for the patient. </param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherPatientResult"/> instance for mocking. </returns>
        public static TrialMatcherPatientResult TrialMatcherPatientResult(string patientId = null, IEnumerable<TrialMatcherInference> inferences = null, IEnumerable<ExtendedClinicalCodedElement> neededClinicalInfo = null)
        {
            inferences ??= new List<TrialMatcherInference>();
            neededClinicalInfo ??= new List<ExtendedClinicalCodedElement>();

            return new TrialMatcherPatientResult(patientId, inferences?.ToList(), neededClinicalInfo?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherInference"/>. </summary>
        /// <param name="type"> The type of the Trial Matcher inference. </param>
        /// <param name="value"> The value of the inference, as relevant for the given inference type. </param>
        /// <param name="description"> The description corresponding to the inference value. </param>
        /// <param name="confidenceScore"> Confidence score for this inference. </param>
        /// <param name="evidence"> The evidence corresponding to the inference value. </param>
        /// <param name="clinicalTrialId"> The identifier of the clinical trial. </param>
        /// <param name="source"> Possible sources of a clinical trial. </param>
        /// <param name="metadata"> Trial data which is of interest to the potential participant. </param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherInference"/> instance for mocking. </returns>
        public static TrialMatcherInference TrialMatcherInference(TrialMatcherInferenceType type = default, string value = null, string description = null, float? confidenceScore = null, IEnumerable<TrialMatcherInferenceEvidence> evidence = null, string clinicalTrialId = null, ClinicalTrialSource? source = null, ClinicalTrialMetadata metadata = null)
        {
            evidence ??= new List<TrialMatcherInferenceEvidence>();

            return new TrialMatcherInference(type, value, description, confidenceScore, evidence?.ToList(), clinicalTrialId, source, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.TrialMatcherInferenceEvidence"/>. </summary>
        /// <param name="eligibilityCriteriaEvidence"> A piece of evidence from the eligibility criteria text of a clinical trial. </param>
        /// <param name="patientDataEvidence"> A piece of evidence from a clinical note (text document). </param>
        /// <param name="patientInfoEvidence">
        /// A piece of clinical information, expressed as a code in a clinical coding
        /// system.
        /// </param>
        /// <param name="importance"> A value indicating how important this piece of evidence is for the inference. </param>
        /// <returns> A new <see cref="ClinicalMatching.TrialMatcherInferenceEvidence"/> instance for mocking. </returns>
        public static TrialMatcherInferenceEvidence TrialMatcherInferenceEvidence(string eligibilityCriteriaEvidence = null, ClinicalNoteEvidence patientDataEvidence = null, ClinicalCodedElement patientInfoEvidence = null, float? importance = null)
        {
            return new TrialMatcherInferenceEvidence(eligibilityCriteriaEvidence, patientDataEvidence, patientInfoEvidence, importance, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalNoteEvidence"/>. </summary>
        /// <param name="id"> The identifier of the document containing the evidence. </param>
        /// <param name="text"> The actual text span which is evidence for the inference. </param>
        /// <param name="offset"> The start index of the evidence text span in the document (0 based). </param>
        /// <param name="length"> The length of the evidence text span. </param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalNoteEvidence"/> instance for mocking. </returns>
        public static ClinicalNoteEvidence ClinicalNoteEvidence(string id = null, string text = null, int offset = default, int length = default)
        {
            return new ClinicalNoteEvidence(id, text, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalCodedElement"/>. </summary>
        /// <param name="system"> The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS. </param>
        /// <param name="code"> The code within the given clinical coding system. </param>
        /// <param name="name"> The name of this coded concept in the coding system. </param>
        /// <param name="value"> A value associated with the code within the given clinical coding system. </param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalCodedElement"/> instance for mocking. </returns>
        public static ClinicalCodedElement ClinicalCodedElement(string system = null, string code = null, string name = null, string value = null)
        {
            return new ClinicalCodedElement(system, code, name, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalTrialMetadata"/>. </summary>
        /// <param name="phases">
        /// Phases which are relevant for the clinical trial.
        /// Each clinical trial can be in a certain phase or in multiple phases.
        /// </param>
        /// <param name="studyType"> Possible study types of a clinical trial. </param>
        /// <param name="recruitmentStatus"> Possible recruitment status of a clinical trial. </param>
        /// <param name="conditions"> Medical conditions and their synonyms which are relevant for the clinical trial, given as strings. </param>
        /// <param name="sponsors"> Sponsors/collaborators involved with the trial. </param>
        /// <param name="contacts"> Contact details of the trial administrators, for patients that want to participate in the trial. </param>
        /// <param name="facilities"> Research facilities where the clinical trial is conducted. </param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalTrialMetadata"/> instance for mocking. </returns>
        public static ClinicalTrialMetadata ClinicalTrialMetadata(IEnumerable<ClinicalTrialPhase> phases = null, ClinicalTrialStudyType? studyType = null, ClinicalTrialRecruitmentStatus? recruitmentStatus = null, IEnumerable<string> conditions = null, IEnumerable<string> sponsors = null, IEnumerable<ContactDetails> contacts = null, IEnumerable<ClinicalTrialResearchFacility> facilities = null)
        {
            phases ??= new List<ClinicalTrialPhase>();
            conditions ??= new List<string>();
            sponsors ??= new List<string>();
            contacts ??= new List<ContactDetails>();
            facilities ??= new List<ClinicalTrialResearchFacility>();

            return new ClinicalTrialMetadata(phases?.ToList(), studyType, recruitmentStatus, conditions?.ToList(), sponsors?.ToList(), contacts?.ToList(), facilities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ContactDetails"/>. </summary>
        /// <param name="name"> The person's name. </param>
        /// <param name="email"> The person's email. </param>
        /// <param name="phone"> A person's phone number. </param>
        /// <returns> A new <see cref="ClinicalMatching.ContactDetails"/> instance for mocking. </returns>
        public static ContactDetails ContactDetails(string name = null, string email = null, string phone = null)
        {
            return new ContactDetails(name, email, phone, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ClinicalTrialResearchFacility"/>. </summary>
        /// <param name="name"> The facility's name. </param>
        /// <param name="city"> City name. </param>
        /// <param name="state"> State name. </param>
        /// <param name="countryOrRegion"> Country/region name. </param>
        /// <returns> A new <see cref="ClinicalMatching.ClinicalTrialResearchFacility"/> instance for mocking. </returns>
        public static ClinicalTrialResearchFacility ClinicalTrialResearchFacility(string name = null, string city = null, string state = null, string countryOrRegion = null)
        {
            return new ClinicalTrialResearchFacility(name, city, state, countryOrRegion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ClinicalMatching.ExtendedClinicalCodedElement"/>. </summary>
        /// <param name="system"> The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS. </param>
        /// <param name="code"> The code within the given clinical coding system. </param>
        /// <param name="name"> The name of this coded concept in the coding system. </param>
        /// <param name="value"> A value associated with the code within the given clinical coding system. </param>
        /// <param name="semanticType"> The [UMLS semantic type](https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html) associated with the coded concept. </param>
        /// <param name="category"> The bio-medical category related to the coded concept, e.g. Diagnosis, Symptom, Medication, Examination. </param>
        /// <returns> A new <see cref="ClinicalMatching.ExtendedClinicalCodedElement"/> instance for mocking. </returns>
        public static ExtendedClinicalCodedElement ExtendedClinicalCodedElement(string system = null, string code = null, string name = null, string value = null, string semanticType = null, string category = null)
        {
            return new ExtendedClinicalCodedElement(system, code, name, value, semanticType, category, serializedAdditionalRawData: null);
        }
    }
}
