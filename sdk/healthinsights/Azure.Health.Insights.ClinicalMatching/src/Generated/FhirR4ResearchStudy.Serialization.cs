// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.ClinicalMatching
{
    public partial class FhirR4ResearchStudy : IUtf8JsonSerializable, IJsonModel<FhirR4ResearchStudy>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FhirR4ResearchStudy>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<FhirR4ResearchStudy>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4ResearchStudy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FhirR4ResearchStudy)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Identifier))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteStartArray();
                foreach (var item in Identifier)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsCollectionDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStartArray();
                foreach (var item in Protocol)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PartOf))
            {
                writer.WritePropertyName("partOf"u8);
                writer.WriteStartArray();
                foreach (var item in PartOf)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (Optional.IsDefined(PrimaryPurposeType))
            {
                writer.WritePropertyName("primaryPurposeType"u8);
                writer.WriteObjectValue(PrimaryPurposeType);
            }
            if (Optional.IsDefined(Phase))
            {
                writer.WritePropertyName("phase"u8);
                writer.WriteObjectValue(Phase);
            }
            if (Optional.IsCollectionDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStartArray();
                foreach (var item in Category)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Focus))
            {
                writer.WritePropertyName("focus"u8);
                writer.WriteStartArray();
                foreach (var item in Focus)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Condition))
            {
                writer.WritePropertyName("condition"u8);
                writer.WriteStartArray();
                foreach (var item in Condition)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Contact))
            {
                writer.WritePropertyName("contact"u8);
                writer.WriteStartArray();
                foreach (var item in Contact)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Keyword))
            {
                writer.WritePropertyName("keyword"u8);
                writer.WriteStartArray();
                foreach (var item in Keyword)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStartArray();
                foreach (var item in Location)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Enrollment))
            {
                writer.WritePropertyName("enrollment"u8);
                writer.WriteStartArray();
                foreach (var item in Enrollment)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Period))
            {
                writer.WritePropertyName("period"u8);
                writer.WriteObjectValue(Period);
            }
            if (Optional.IsDefined(Sponsor))
            {
                writer.WritePropertyName("sponsor"u8);
                writer.WriteObjectValue(Sponsor);
            }
            if (Optional.IsDefined(PrincipalInvestigator))
            {
                writer.WritePropertyName("principalInvestigator"u8);
                writer.WriteObjectValue(PrincipalInvestigator);
            }
            if (Optional.IsCollectionDefined(Site))
            {
                writer.WritePropertyName("site"u8);
                writer.WriteStartArray();
                foreach (var item in Site)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ReasonStopped))
            {
                writer.WritePropertyName("reasonStopped"u8);
                writer.WriteObjectValue(ReasonStopped);
            }
            if (Optional.IsCollectionDefined(Note))
            {
                writer.WritePropertyName("note"u8);
                writer.WriteStartArray();
                foreach (var item in Note)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Arm))
            {
                writer.WritePropertyName("arm"u8);
                writer.WriteStartArray();
                foreach (var item in Arm)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Objective))
            {
                writer.WritePropertyName("objective"u8);
                writer.WriteStartArray();
                foreach (var item in Objective)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text"u8);
                writer.WriteObjectValue(Text);
            }
            if (Optional.IsCollectionDefined(Contained))
            {
                writer.WritePropertyName("contained"u8);
                writer.WriteStartArray();
                foreach (var item in Contained)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Extension))
            {
                writer.WritePropertyName("extension"u8);
                writer.WriteStartArray();
                foreach (var item in Extension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ModifierExtension))
            {
                writer.WritePropertyName("modifierExtension"u8);
                writer.WriteStartArray();
                foreach (var item in ModifierExtension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Meta))
            {
                writer.WritePropertyName("meta"u8);
                writer.WriteObjectValue(Meta);
            }
            if (Optional.IsDefined(ImplicitRules))
            {
                writer.WritePropertyName("implicitRules"u8);
                writer.WriteStringValue(ImplicitRules);
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        FhirR4ResearchStudy IJsonModel<FhirR4ResearchStudy>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4ResearchStudy>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FhirR4ResearchStudy)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFhirR4ResearchStudy(document.RootElement, options);
        }

        internal static FhirR4ResearchStudy DeserializeFhirR4ResearchStudy(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<FhirR4Identifier>> identifier = default;
            Optional<string> title = default;
            Optional<IList<FhirR4Reference>> protocol = default;
            Optional<IList<FhirR4Reference>> partOf = default;
            ResearchStudyStatusCodeType status = default;
            Optional<FhirR4CodeableConcept> primaryPurposeType = default;
            Optional<FhirR4CodeableConcept> phase = default;
            Optional<IList<FhirR4CodeableConcept>> category = default;
            Optional<IList<FhirR4CodeableConcept>> focus = default;
            Optional<IList<FhirR4CodeableConcept>> condition = default;
            Optional<IList<FhirR4ContactDetail>> contact = default;
            Optional<IList<FhirR4CodeableConcept>> keyword = default;
            Optional<IList<FhirR4CodeableConcept>> location = default;
            Optional<string> description = default;
            Optional<IList<FhirR4Reference>> enrollment = default;
            Optional<FhirR4Period> period = default;
            Optional<FhirR4Reference> sponsor = default;
            Optional<FhirR4Reference> principalInvestigator = default;
            Optional<IList<FhirR4Reference>> site = default;
            Optional<FhirR4CodeableConcept> reasonStopped = default;
            Optional<IList<FhirR4Annotation>> note = default;
            Optional<IList<ResearchStudyArm>> arm = default;
            Optional<IList<ResearchStudyObjective>> objective = default;
            Optional<FhirR4Narrative> text = default;
            Optional<IList<FhirR4Resource>> contained = default;
            Optional<IList<FhirR4Extension>> extension = default;
            Optional<IList<FhirR4Extension>> modifierExtension = default;
            string resourceType = default;
            Optional<string> id = default;
            Optional<FhirR4Meta> meta = default;
            Optional<string> implicitRules = default;
            Optional<string> language = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Identifier> array = new List<FhirR4Identifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Identifier.DeserializeFhirR4Identifier(item));
                    }
                    identifier = array;
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item));
                    }
                    protocol = array;
                    continue;
                }
                if (property.NameEquals("partOf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item));
                    }
                    partOf = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new ResearchStudyStatusCodeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("primaryPurposeType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    primaryPurposeType = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("phase"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    phase = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    category = array;
                    continue;
                }
                if (property.NameEquals("focus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    focus = array;
                    continue;
                }
                if (property.NameEquals("condition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    condition = array;
                    continue;
                }
                if (property.NameEquals("contact"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4ContactDetail> array = new List<FhirR4ContactDetail>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4ContactDetail.DeserializeFhirR4ContactDetail(item));
                    }
                    contact = array;
                    continue;
                }
                if (property.NameEquals("keyword"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    keyword = array;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    location = array;
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enrollment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item));
                    }
                    enrollment = array;
                    continue;
                }
                if (property.NameEquals("period"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    period = FhirR4Period.DeserializeFhirR4Period(property.Value);
                    continue;
                }
                if (property.NameEquals("sponsor"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sponsor = FhirR4Reference.DeserializeFhirR4Reference(property.Value);
                    continue;
                }
                if (property.NameEquals("principalInvestigator"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    principalInvestigator = FhirR4Reference.DeserializeFhirR4Reference(property.Value);
                    continue;
                }
                if (property.NameEquals("site"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item));
                    }
                    site = array;
                    continue;
                }
                if (property.NameEquals("reasonStopped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reasonStopped = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("note"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Annotation> array = new List<FhirR4Annotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Annotation.DeserializeFhirR4Annotation(item));
                    }
                    note = array;
                    continue;
                }
                if (property.NameEquals("arm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResearchStudyArm> array = new List<ResearchStudyArm>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResearchStudyArm.DeserializeResearchStudyArm(item));
                    }
                    arm = array;
                    continue;
                }
                if (property.NameEquals("objective"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResearchStudyObjective> array = new List<ResearchStudyObjective>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResearchStudyObjective.DeserializeResearchStudyObjective(item));
                    }
                    objective = array;
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    text = FhirR4Narrative.DeserializeFhirR4Narrative(property.Value);
                    continue;
                }
                if (property.NameEquals("contained"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Resource> array = new List<FhirR4Resource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeFhirR4Resource(item));
                    }
                    contained = array;
                    continue;
                }
                if (property.NameEquals("extension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Extension> array = new List<FhirR4Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Extension.DeserializeFhirR4Extension(item));
                    }
                    extension = array;
                    continue;
                }
                if (property.NameEquals("modifierExtension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Extension> array = new List<FhirR4Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Extension.DeserializeFhirR4Extension(item));
                    }
                    modifierExtension = array;
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meta"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meta = FhirR4Meta.DeserializeFhirR4Meta(property.Value);
                    continue;
                }
                if (property.NameEquals("implicitRules"u8))
                {
                    implicitRules = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new FhirR4ResearchStudy(resourceType, id.Value, meta.Value, implicitRules.Value, language.Value, additionalProperties, text.Value, Optional.ToList(contained), Optional.ToList(extension), Optional.ToList(modifierExtension), Optional.ToList(identifier), title.Value, Optional.ToList(protocol), Optional.ToList(partOf), status, primaryPurposeType.Value, phase.Value, Optional.ToList(category), Optional.ToList(focus), Optional.ToList(condition), Optional.ToList(contact), Optional.ToList(keyword), Optional.ToList(location), description.Value, Optional.ToList(enrollment), period.Value, sponsor.Value, principalInvestigator.Value, Optional.ToList(site), reasonStopped.Value, Optional.ToList(note), Optional.ToList(arm), Optional.ToList(objective));
        }

        BinaryData IPersistableModel<FhirR4ResearchStudy>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4ResearchStudy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FhirR4ResearchStudy)} does not support '{options.Format}' format.");
            }
        }

        FhirR4ResearchStudy IPersistableModel<FhirR4ResearchStudy>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4ResearchStudy>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFhirR4ResearchStudy(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FhirR4ResearchStudy)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<FhirR4ResearchStudy>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new FhirR4ResearchStudy FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFhirR4ResearchStudy(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
