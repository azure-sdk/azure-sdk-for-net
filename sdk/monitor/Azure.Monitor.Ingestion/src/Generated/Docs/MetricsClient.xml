<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(String,String,String,String,String,String,Int32,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new MetricsClient(credential);

var data = new {
    time = "<time>",
    data = new {
        baseData = new {
            metric = "<metric>",
            namespace = "<namespace>",
            series = new[] {
                new {
                    min = 123.45d,
                    max = 123.45d,
                    sum = 123.45d,
                    count = 1234,
                }
            },
        },
    },
};

Response response = await client.CreateAsync("<subscriptionId>", "<resourceGroupName>", "<resourceProvider>", "<resourceTypeName>", "<resourceName>", "<contentType>", 1234, "<authorization>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new MetricsClient(credential);

var data = new {
    time = "<time>",
    data = new {
        baseData = new {
            metric = "<metric>",
            namespace = "<namespace>",
            dimNames = new[] {
                "<String>"
            },
            series = new[] {
                new {
                    dimValues = new[] {
                        "<String>"
                    },
                    min = 123.45d,
                    max = 123.45d,
                    sum = 123.45d,
                    count = 1234,
                }
            },
        },
    },
};

Response response = await client.CreateAsync("<subscriptionId>", "<resourceGroupName>", "<resourceProvider>", "<resourceTypeName>", "<resourceName>", "<contentType>", 1234, "<authorization>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("statusCode").ToString());
Console.WriteLine(result.GetProperty("apiFailureResponse").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("apiFailureResponse").GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AzureMetricsDocument</c>:
<code>{
  time: string, # Required. Gets or sets Time property (in ISO 8601 format)
  data: {
    baseData: {
      metric: string, # Required. Gets or sets the Metric name
      namespace: string, # Required. Gets or sets the Metric namespace
      dimNames: [string], # Optional. Gets or sets the list of dimension names (optional)
      series: [
        {
          dimValues: [string], # Optional. Gets or sets dimension values
          min: number, # Required. Gets or sets Min value
          max: number, # Required. Gets or sets Max value
          sum: number, # Required. Gets or sets Sum value
          count: number, # Required. Gets or sets Count value
        }
      ], # Required. Gets or sets the list of time series data for the metric (one per unique dimension combination)
    }, # Required.
  }, # Required.
}
</code>

Response Body:

Schema for <c>AzureMetricsResult</c>:
<code>{
  statusCode: number, # Optional. Http status code response 
  apiFailureResponse: {
    error: {
      code: string, # Optional. Gets or sets the azure metrics error code
      message: string, # Optional. Gets or sets the azure metrics error message
    }, # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="Create(String,String,String,String,String,String,Int32,String,RequestContent,RequestContext)">
<example>
This sample shows how to call Create with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new MetricsClient(credential);

var data = new {
    time = "<time>",
    data = new {
        baseData = new {
            metric = "<metric>",
            namespace = "<namespace>",
            series = new[] {
                new {
                    min = 123.45d,
                    max = 123.45d,
                    sum = 123.45d,
                    count = 1234,
                }
            },
        },
    },
};

Response response = client.Create("<subscriptionId>", "<resourceGroupName>", "<resourceProvider>", "<resourceTypeName>", "<resourceName>", "<contentType>", 1234, "<authorization>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Create with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new MetricsClient(credential);

var data = new {
    time = "<time>",
    data = new {
        baseData = new {
            metric = "<metric>",
            namespace = "<namespace>",
            dimNames = new[] {
                "<String>"
            },
            series = new[] {
                new {
                    dimValues = new[] {
                        "<String>"
                    },
                    min = 123.45d,
                    max = 123.45d,
                    sum = 123.45d,
                    count = 1234,
                }
            },
        },
    },
};

Response response = client.Create("<subscriptionId>", "<resourceGroupName>", "<resourceProvider>", "<resourceTypeName>", "<resourceName>", "<contentType>", 1234, "<authorization>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("statusCode").ToString());
Console.WriteLine(result.GetProperty("apiFailureResponse").GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("apiFailureResponse").GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>AzureMetricsDocument</c>:
<code>{
  time: string, # Required. Gets or sets Time property (in ISO 8601 format)
  data: {
    baseData: {
      metric: string, # Required. Gets or sets the Metric name
      namespace: string, # Required. Gets or sets the Metric namespace
      dimNames: [string], # Optional. Gets or sets the list of dimension names (optional)
      series: [
        {
          dimValues: [string], # Optional. Gets or sets dimension values
          min: number, # Required. Gets or sets Min value
          max: number, # Required. Gets or sets Max value
          sum: number, # Required. Gets or sets Sum value
          count: number, # Required. Gets or sets Count value
        }
      ], # Required. Gets or sets the list of time series data for the metric (one per unique dimension combination)
    }, # Required.
  }, # Required.
}
</code>

Response Body:

Schema for <c>AzureMetricsResult</c>:
<code>{
  statusCode: number, # Optional. Http status code response 
  apiFailureResponse: {
    error: {
      code: string, # Optional. Gets or sets the azure metrics error code
      message: string, # Optional. Gets or sets the azure metrics error message
    }, # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>