// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.Monitor.Ingestion;
using NUnit.Framework;

namespace Azure.Monitor.Ingestion.Samples
{
    public partial class Samples_MetricsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            MetricsClient client = new MetricsClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Batch("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            MetricsClient client = new MetricsClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.BatchAsync("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            MetricsClient client = new MetricsClient(credential);

            using RequestContent content = RequestContent.Create(new
            {
                resourceids = new object[]
            {
new object()
            },
            });
            Response response = client.Batch("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, content, starttime: "<starttime>", endtime: "<endtime>", interval: XmlConvert.ToTimeSpan("PT1H23M45S"), aggregation: "<aggregation>", top: 1234, orderby: "<orderby>", filter: "<filter>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("starttime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("endtime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceregion").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceid").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("displayDescription").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("timeStamp").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("average").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("minimum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("maximum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            MetricsClient client = new MetricsClient(credential);

            using RequestContent content = RequestContent.Create(new
            {
                resourceids = new object[]
            {
new object()
            },
            });
            Response response = await client.BatchAsync("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, content, starttime: "<starttime>", endtime: "<endtime>", interval: XmlConvert.ToTimeSpan("PT1H23M45S"), aggregation: "<aggregation>", top: 1234, orderby: "<orderby>", filter: "<filter>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("starttime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("endtime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceregion").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceid").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("displayDescription").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("timeStamp").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("average").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("minimum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("maximum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorMessage").ToString());
        }
    }
}
