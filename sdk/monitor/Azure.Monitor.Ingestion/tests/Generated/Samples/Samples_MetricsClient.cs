// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Monitor.Ingestion.Samples
{
    public class Samples_MetricsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch()
        {
            var credential = new DefaultAzureCredential();
            var client = new MetricsClient(credential);

            var data = new { };

            Response response = client.Batch("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new MetricsClient(credential);

            var data = new
            {
                resourceids = new[] {
        new {}
    },
            };

            Response response = client.Batch("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, RequestContent.Create(data), "<starttime>", "<endtime>", new TimeSpan(1, 2, 3), "<aggregation>", 1234, "<orderby>", "<filter>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("starttime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("endtime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceregion").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceid").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("displayDescription").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("timeStamp").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("average").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("minimum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("maximum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new MetricsClient(credential);

            var data = new { };

            Response response = await client.BatchAsync("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new MetricsClient(credential);

            var data = new
            {
                resourceids = new[] {
        new {}
    },
            };

            Response response = await client.BatchAsync("<baseUrl>", "<subscriptionId>", "<metricnamespace>", new string[] { "<metricnames>" }, RequestContent.Create(data), "<starttime>", "<endtime>", new TimeSpan(1, 2, 3), "<aggregation>", 1234, "<orderby>", "<filter>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("starttime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("endtime").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("interval").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("namespace").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceregion").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("resourceid").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("displayDescription").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("name").GetProperty("localizedValue").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("metadatavalues")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("timeStamp").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("average").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("minimum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("maximum").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("timeseries")[0].GetProperty("data")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("values")[0].GetProperty("value")[0].GetProperty("errorMessage").ToString());
        }
    }
}
