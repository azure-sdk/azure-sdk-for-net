// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlServerAvailabilityGroupsOperations.
    /// </summary>
    public static partial class SqlServerAvailabilityGroupsOperationsExtensions
    {
            /// <summary>
            /// Creates or replaces an Arc Sql Server Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupResource'>
            /// The request body for availability group resource.
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupResource Create(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, SqlServerAvailabilityGroupResource sqlServerAvailabilityGroupResource, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.CreateAsync(resourceGroupName, sqlServerAvailabilityGroupResource, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces an Arc Sql Server Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupResource'>
            /// The request body for availability group resource.
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> CreateAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, SqlServerAvailabilityGroupResource sqlServerAvailabilityGroupResource, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, sqlServerAvailabilityGroupResource, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an Arc Sql Server availability group resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupsDeleteHeaders Delete(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.DeleteAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Arc Sql Server availability group resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupsDeleteHeaders> DeleteAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieves an Arc Sql Server availability group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupResource Get(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.GetAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves an Arc Sql Server availability group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> GetAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupUpdate'>
            /// The requested server availability group resource state.
            /// </param>
            public static SqlServerAvailabilityGroupResource Update(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate)
            {
                return operations.UpdateAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupUpdate'>
            /// The requested server availability group resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> UpdateAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves detailed properties of the Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupResource DetailView(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.DetailViewAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves detailed properties of the Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> DetailViewAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetailViewWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request manual failover of the availability group to this server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupResource Failover(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.FailoverAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request manual failover of the availability group to this server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> FailoverAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FailoverWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request forced failover of the availability group to this server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupResource ForceFailoverAllowDataLoss(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.ForceFailoverAllowDataLossAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request forced failover of the availability group to this server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> ForceFailoverAllowDataLossAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ForceFailoverAllowDataLossWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the availability group associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            public static IPage<SqlServerAvailabilityGroupResource> List(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName)
            {
                return operations.ListAsync(resourceGroupName, sqlServerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the availability group associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerAvailabilityGroupResource>> ListAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an Arc Sql Server availability group resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlServerAvailabilityGroupsDeleteHeaders BeginDelete(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Arc Sql Server availability group resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupsDeleteHeaders> BeginDeleteAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates an existing Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupUpdate'>
            /// The requested server availability group resource state.
            /// </param>
            public static SqlServerAvailabilityGroupResource BeginUpdate(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate)
            {
                return operations.BeginUpdateAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing Availability Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='availabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlServerAvailabilityGroupUpdate'>
            /// The requested server availability group resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerAvailabilityGroupResource> BeginUpdateAsync(this ISqlServerAvailabilityGroupsOperations operations, string resourceGroupName, string sqlServerInstanceName, string availabilityGroupName, SqlServerAvailabilityGroupUpdate sqlServerAvailabilityGroupUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, availabilityGroupName, sqlServerAvailabilityGroupUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the availability group associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerAvailabilityGroupResource> ListNext(this ISqlServerAvailabilityGroupsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the availability group associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerAvailabilityGroupResource>> ListNextAsync(this ISqlServerAvailabilityGroupsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
