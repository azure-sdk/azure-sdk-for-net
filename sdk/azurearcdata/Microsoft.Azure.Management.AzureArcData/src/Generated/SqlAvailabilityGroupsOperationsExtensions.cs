// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlAvailabilityGroupsOperations.
    /// </summary>
    public static partial class SqlAvailabilityGroupsOperationsExtensions
    {
            /// <summary>
            /// List sqlAvailabilityGroups resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SqlAvailabilityGroup> List(this ISqlAvailabilityGroupsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlAvailabilityGroup>> ListAsync(this ISqlAvailabilityGroupsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlAvailabilityGroups in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            public static IPage<SqlAvailabilityGroup> ListByResourceGroup(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlAvailabilityGroups in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlAvailabilityGroup>> ListByResourceGroupAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static SqlAvailabilityGroup Get(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName)
            {
                return operations.GetAsync(resourceGroupName, sqlAvailabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlAvailabilityGroup> GetAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or replaces a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlAvailabilityGroup'>
            /// The SQL Availability Group to be created or updated.
            /// </param>
            public static SqlAvailabilityGroup Create(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, SqlAvailabilityGroup sqlAvailabilityGroup)
            {
                return operations.CreateAsync(resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlAvailabilityGroup'>
            /// The SQL Availability Group to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlAvailabilityGroup> CreateAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, SqlAvailabilityGroup sqlAvailabilityGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static void Delete(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName)
            {
                operations.DeleteAsync(resourceGroupName, sqlAvailabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static SqlAvailabilityGroup Update(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, sqlAvailabilityGroupName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlAvailabilityGroup> UpdateAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or replaces a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlAvailabilityGroup'>
            /// The SQL Availability Group to be created or updated.
            /// </param>
            public static SqlAvailabilityGroup BeginCreate(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, SqlAvailabilityGroup sqlAvailabilityGroup)
            {
                return operations.BeginCreateAsync(resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='sqlAvailabilityGroup'>
            /// The SQL Availability Group to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlAvailabilityGroup> BeginCreateAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, SqlAvailabilityGroup sqlAvailabilityGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, sqlAvailabilityGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            public static void BeginDelete(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName)
            {
                operations.BeginDeleteAsync(resourceGroupName, sqlAvailabilityGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Availability Group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlAvailabilityGroupName'>
            /// Name of SQL Availability Group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISqlAvailabilityGroupsOperations operations, string resourceGroupName, string sqlAvailabilityGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sqlAvailabilityGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlAvailabilityGroup> ListNext(this ISqlAvailabilityGroupsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlAvailabilityGroup>> ListNextAsync(this ISqlAvailabilityGroupsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlAvailabilityGroups in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlAvailabilityGroup> ListByResourceGroupNext(this ISqlAvailabilityGroupsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlAvailabilityGroups resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlAvailabilityGroups in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlAvailabilityGroup>> ListByResourceGroupNextAsync(this ISqlAvailabilityGroupsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
