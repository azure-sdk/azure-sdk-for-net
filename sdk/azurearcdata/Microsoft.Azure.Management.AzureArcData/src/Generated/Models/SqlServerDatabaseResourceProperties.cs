// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of Arc Sql Server database resource
    /// </summary>
    public partial class SqlServerDatabaseResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SqlServerDatabaseResourceProperties class.
        /// </summary>
        public SqlServerDatabaseResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SqlServerDatabaseResourceProperties class.
        /// </summary>
        /// <param name="collationName">Collation of the database.</param>
        /// <param name="databaseCreationDate">Creation date of the
        /// database.</param>
        /// <param name="compatibilityLevel">Compatibility level of the
        /// database</param>
        /// <param name="sizeMB">Size of the database.</param>
        /// <param name="spaceAvailableMB">Space left of the database.</param>
        /// <param name="state">State of the database. Possible values include:
        /// 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
        /// 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'</param>
        /// <param name="isReadOnly">Whether the database is read only or
        /// not.</param>
        /// <param name="recoveryMode">Status of the database. Possible values
        /// include: 'Full', 'Bulk-logged', 'Simple'</param>
        /// <param name="databaseOptions">List of features that are enabled for
        /// the database</param>
        /// <param name="backupPolicy">The backup profile for the SQL
        /// server.</param>
        /// <param name="earliestRestoreDate">This records the earliest start
        /// date and time that restore is available for this database (ISO8601
        /// format).</param>
        /// <param name="createMode">Database create mode. PointInTimeRestore:
        /// Create a database by restoring a point in time backup of an
        /// existing database. sourceDatabaseId and restorePointInTime must be
        /// specified. Possible values include: 'Default',
        /// 'PointInTimeRestore'</param>
        /// <param name="sourceDatabaseId">The resource identifier of the
        /// source database associated with create operation of this
        /// database.</param>
        /// <param name="restorePointInTime">Conditional. If createMode is
        /// PointInTimeRestore, this value is required. Specifies the point in
        /// time (ISO8601 format) of the source database that will be restored
        /// to create the new database.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// Arc-enabled SQL Server database resource.</param>
        /// <param name="lastDatabaseUploadTime">The time when last successful
        /// database upload was performed.</param>
        public SqlServerDatabaseResourceProperties(string collationName = default(string), System.DateTime? databaseCreationDate = default(System.DateTime?), int? compatibilityLevel = default(int?), double? sizeMB = default(double?), double? spaceAvailableMB = default(double?), string state = default(string), bool? isReadOnly = default(bool?), string recoveryMode = default(string), SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions = default(SqlServerDatabaseResourcePropertiesDatabaseOptions), SqlServerDatabaseResourcePropertiesBackupInformation backupInformation = default(SqlServerDatabaseResourcePropertiesBackupInformation), BackupPolicy backupPolicy = default(BackupPolicy), System.DateTime? earliestRestoreDate = default(System.DateTime?), string createMode = default(string), string sourceDatabaseId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string provisioningState = default(string), System.DateTime? lastDatabaseUploadTime = default(System.DateTime?))
        {
            CollationName = collationName;
            DatabaseCreationDate = databaseCreationDate;
            CompatibilityLevel = compatibilityLevel;
            SizeMB = sizeMB;
            SpaceAvailableMB = spaceAvailableMB;
            State = state;
            IsReadOnly = isReadOnly;
            RecoveryMode = recoveryMode;
            DatabaseOptions = databaseOptions;
            BackupInformation = backupInformation;
            BackupPolicy = backupPolicy;
            EarliestRestoreDate = earliestRestoreDate;
            CreateMode = createMode;
            SourceDatabaseId = sourceDatabaseId;
            RestorePointInTime = restorePointInTime;
            ProvisioningState = provisioningState;
            LastDatabaseUploadTime = lastDatabaseUploadTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets collation of the database.
        /// </summary>
        [JsonProperty(PropertyName = "collationName")]
        public string CollationName { get; set; }

        /// <summary>
        /// Gets or sets creation date of the database.
        /// </summary>
        [JsonProperty(PropertyName = "databaseCreationDate")]
        public System.DateTime? DatabaseCreationDate { get; set; }

        /// <summary>
        /// Gets or sets compatibility level of the database
        /// </summary>
        [JsonProperty(PropertyName = "compatibilityLevel")]
        public int? CompatibilityLevel { get; set; }

        /// <summary>
        /// Gets or sets size of the database.
        /// </summary>
        [JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMB { get; set; }

        /// <summary>
        /// Gets or sets space left of the database.
        /// </summary>
        [JsonProperty(PropertyName = "spaceAvailableMB")]
        public double? SpaceAvailableMB { get; set; }

        /// <summary>
        /// Gets or sets state of the database. Possible values include:
        /// 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
        /// 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets whether the database is read only or not.
        /// </summary>
        [JsonProperty(PropertyName = "isReadOnly")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Gets or sets status of the database. Possible values include:
        /// 'Full', 'Bulk-logged', 'Simple'
        /// </summary>
        [JsonProperty(PropertyName = "recoveryMode")]
        public string RecoveryMode { get; set; }

        /// <summary>
        /// Gets or sets list of features that are enabled for the database
        /// </summary>
        [JsonProperty(PropertyName = "databaseOptions")]
        public SqlServerDatabaseResourcePropertiesDatabaseOptions DatabaseOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backupInformation")]
        public SqlServerDatabaseResourcePropertiesBackupInformation BackupInformation { get; set; }

        /// <summary>
        /// Gets or sets the backup profile for the SQL server.
        /// </summary>
        [JsonProperty(PropertyName = "backupPolicy")]
        public BackupPolicy BackupPolicy { get; set; }

        /// <summary>
        /// Gets this records the earliest start date and time that restore is
        /// available for this database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate { get; private set; }

        /// <summary>
        /// Gets or sets database create mode. PointInTimeRestore: Create a
        /// database by restoring a point in time backup of an existing
        /// database. sourceDatabaseId and restorePointInTime must be
        /// specified. Possible values include: 'Default', 'PointInTimeRestore'
        /// </summary>
        [JsonProperty(PropertyName = "createMode")]
        public string CreateMode { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source database
        /// associated with create operation of this database.
        /// </summary>
        [JsonProperty(PropertyName = "sourceDatabaseId")]
        public string SourceDatabaseId { get; set; }

        /// <summary>
        /// Gets or sets conditional. If createMode is PointInTimeRestore, this
        /// value is required. Specifies the point in time (ISO8601 format) of
        /// the source database that will be restored to create the new
        /// database.
        /// </summary>
        [JsonProperty(PropertyName = "restorePointInTime")]
        public System.DateTime? RestorePointInTime { get; set; }

        /// <summary>
        /// Gets the provisioning state of the Arc-enabled SQL Server database
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the time when last successful database upload was performed.
        /// </summary>
        [JsonProperty(PropertyName = "lastDatabaseUploadTime")]
        public System.DateTime? LastDatabaseUploadTime { get; private set; }

    }
}
