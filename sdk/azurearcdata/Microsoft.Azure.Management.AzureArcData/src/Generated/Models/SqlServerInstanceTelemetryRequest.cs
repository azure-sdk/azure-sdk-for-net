// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Arc SQL Server instance telemetry retrieval request.
    /// </summary>
    public partial class SqlServerInstanceTelemetryRequest
    {
        /// <summary>
        /// Initializes a new instance of the SqlServerInstanceTelemetryRequest
        /// class.
        /// </summary>
        public SqlServerInstanceTelemetryRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlServerInstanceTelemetryRequest
        /// class.
        /// </summary>
        /// <param name="datasetName">The name of the telemetry dataset to
        /// retrieve.</param>
        /// <param name="startTime">The start time for the time range to fetch
        /// telemetry for. If not specified, the current time minus 1 hour is
        /// used.</param>
        /// <param name="endTime">The end time for the time range to fetch
        /// telemetry for. If not specified, the current time is used.</param>
        /// <param name="interval">The time granularity to fetch telemetry for.
        /// This is an ISO8601 duration. Examples: PT15M, PT1H, P1D</param>
        /// <param name="aggregationType">The aggregation type to use for the
        /// numerical columns in the dataset. Possible values include:
        /// 'Average', 'Minimum', 'Maximum', 'Sum', 'Count'</param>
        /// <param name="databaseNames">The list of database names to return
        /// telemetry for. If not specified, telemetry for all databases will
        /// be aggregated and returned.</param>
        public SqlServerInstanceTelemetryRequest(string datasetName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), System.TimeSpan? interval = default(System.TimeSpan?), string aggregationType = default(string), IList<string> databaseNames = default(IList<string>))
        {
            DatasetName = datasetName;
            StartTime = startTime;
            EndTime = endTime;
            Interval = interval;
            AggregationType = aggregationType;
            DatabaseNames = databaseNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the telemetry dataset to retrieve.
        /// </summary>
        [JsonProperty(PropertyName = "datasetName")]
        public string DatasetName { get; set; }

        /// <summary>
        /// Gets or sets the start time for the time range to fetch telemetry
        /// for. If not specified, the current time minus 1 hour is used.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the end time for the time range to fetch telemetry
        /// for. If not specified, the current time is used.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the time granularity to fetch telemetry for. This is
        /// an ISO8601 duration. Examples: PT15M, PT1H, P1D
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public System.TimeSpan? Interval { get; set; }

        /// <summary>
        /// Gets or sets the aggregation type to use for the numerical columns
        /// in the dataset. Possible values include: 'Average', 'Minimum',
        /// 'Maximum', 'Sum', 'Count'
        /// </summary>
        [JsonProperty(PropertyName = "aggregationType")]
        public string AggregationType { get; set; }

        /// <summary>
        /// Gets or sets the list of database names to return telemetry for. If
        /// not specified, telemetry for all databases will be aggregated and
        /// returned.
        /// </summary>
        [JsonProperty(PropertyName = "databaseNames")]
        public IList<string> DatabaseNames { get; set; }

    }
}
