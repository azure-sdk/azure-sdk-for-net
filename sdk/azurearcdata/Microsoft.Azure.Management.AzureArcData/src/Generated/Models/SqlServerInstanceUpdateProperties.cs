// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of update SqlServerInstance.
    /// </summary>
    public partial class SqlServerInstanceUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlServerInstanceUpdateProperties
        /// class.
        /// </summary>
        public SqlServerInstanceUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlServerInstanceUpdateProperties
        /// class.
        /// </summary>
        /// <param name="version">SQL Server version. Possible values include:
        /// 'SQL Server 2012', 'SQL Server 2014', 'SQL Server 2016', 'SQL
        /// Server 2017', 'SQL Server 2019', 'SQL Server 2022',
        /// 'Unknown'</param>
        /// <param name="edition">SQL Server edition. Possible values include:
        /// 'Evaluation', 'Enterprise', 'Standard', 'Web', 'Developer',
        /// 'Express', 'Business Intelligence'</param>
        /// <param name="containerResourceId">ARM Resource id of the container
        /// resource (Azure Arc for Servers).</param>
        /// <param name="createTime">The time when the resource was
        /// created.</param>
        /// <param name="vCore">The number of logical processors used by the
        /// SQL Server instance.</param>
        /// <param name="cores">The number of total cores of the Operating
        /// System Environment (OSE) hosting the SQL Server instance.</param>
        /// <param name="status">The cloud connectivity status. Possible values
        /// include: 'Connected', 'Disconnected', 'Registered',
        /// 'Unknown'</param>
        /// <param name="patchLevel">SQL Server update level.</param>
        /// <param name="collation">SQL Server collation.</param>
        /// <param name="currentVersion">SQL Server current version.</param>
        /// <param name="instanceName">SQL Server instance name.</param>
        /// <param name="tcpDynamicPorts">Dynamic TCP ports used by SQL
        /// Server.</param>
        /// <param name="tcpStaticPorts">Static TCP ports used by SQL
        /// Server.</param>
        /// <param name="productId">SQL Server product ID.</param>
        /// <param name="licenseType">SQL Server license type. Possible values
        /// include: 'Undefined', 'Free', 'HADR', 'ServerCAL', 'LicenseOnly',
        /// 'PAYG', 'Paid'</param>
        /// <param name="azureDefenderStatusLastUpdated">Timestamp of last
        /// Azure Defender status update.</param>
        /// <param name="azureDefenderStatus">Status of Azure Defender.
        /// Possible values include: 'Protected', 'Unprotected',
        /// 'Unknown'</param>
        /// <param name="provisioningState">The provisioning state of the
        /// Arc-enabled SQL Server resource.</param>
        /// <param name="lastInventoryUploadTime">The time when last successful
        /// inventory upload was performed.</param>
        /// <param name="lastUsageUploadTime">The time when last successful
        /// usage upload was performed.</param>
        /// <param name="hostType">Type of host for Azure Arc SQL Server.
        /// Possible values include: 'Azure Virtual Machine', 'Azure VMWare
        /// Virtual Machine', 'Azure Kubernetes Service', 'AWS VMWare Virtual
        /// Machine', 'AWS Kubernetes Service', 'GCP VMWare Virtual Machine',
        /// 'GCP Kubernetes Service', 'Container', 'Virtual Machine', 'Physical
        /// Server', 'AWS Virtual Machine', 'GCP Virtual Machine',
        /// 'Other'</param>
        /// <param name="alwaysOnRole">The role of the SQL Server, based on
        /// availability. Possible values include: 'None',
        /// 'FailoverClusterInstance', 'FailoverClusterNode',
        /// 'AvailabilityGroupReplica'</param>
        /// <param name="failoverCluster">Failover Cluster Instance
        /// properties.</param>
        /// <param name="backupPolicy">The backup profile for the SQL
        /// server.</param>
        /// <param name="upgradeLockedUntil">Upgrade Action for this resource
        /// is locked until it expires. The Expiration time indicated by this
        /// value. It is not locked when it is empty.</param>
        /// <param name="monitoring">The monitoring configuration.</param>
        public SqlServerInstanceUpdateProperties(string version = default(string), string edition = default(string), string containerResourceId = default(string), string createTime = default(string), string vCore = default(string), string cores = default(string), string status = default(string), string patchLevel = default(string), string collation = default(string), string currentVersion = default(string), string instanceName = default(string), string tcpDynamicPorts = default(string), string tcpStaticPorts = default(string), string productId = default(string), string licenseType = default(string), System.DateTime? azureDefenderStatusLastUpdated = default(System.DateTime?), string azureDefenderStatus = default(string), string provisioningState = default(string), System.DateTime? lastInventoryUploadTime = default(System.DateTime?), System.DateTime? lastUsageUploadTime = default(System.DateTime?), string hostType = default(string), string alwaysOnRole = default(string), FailoverCluster failoverCluster = default(FailoverCluster), BackupPolicy backupPolicy = default(BackupPolicy), System.DateTime? upgradeLockedUntil = default(System.DateTime?), Monitoring monitoring = default(Monitoring))
        {
            Version = version;
            Edition = edition;
            ContainerResourceId = containerResourceId;
            CreateTime = createTime;
            VCore = vCore;
            Cores = cores;
            Status = status;
            PatchLevel = patchLevel;
            Collation = collation;
            CurrentVersion = currentVersion;
            InstanceName = instanceName;
            TcpDynamicPorts = tcpDynamicPorts;
            TcpStaticPorts = tcpStaticPorts;
            ProductId = productId;
            LicenseType = licenseType;
            AzureDefenderStatusLastUpdated = azureDefenderStatusLastUpdated;
            AzureDefenderStatus = azureDefenderStatus;
            ProvisioningState = provisioningState;
            LastInventoryUploadTime = lastInventoryUploadTime;
            LastUsageUploadTime = lastUsageUploadTime;
            HostType = hostType;
            AlwaysOnRole = alwaysOnRole;
            FailoverCluster = failoverCluster;
            BackupPolicy = backupPolicy;
            UpgradeLockedUntil = upgradeLockedUntil;
            Monitoring = monitoring;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SQL Server version. Possible values include: 'SQL
        /// Server 2012', 'SQL Server 2014', 'SQL Server 2016', 'SQL Server
        /// 2017', 'SQL Server 2019', 'SQL Server 2022', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets SQL Server edition. Possible values include:
        /// 'Evaluation', 'Enterprise', 'Standard', 'Web', 'Developer',
        /// 'Express', 'Business Intelligence'
        /// </summary>
        [JsonProperty(PropertyName = "edition")]
        public string Edition { get; set; }

        /// <summary>
        /// Gets ARM Resource id of the container resource (Azure Arc for
        /// Servers).
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceId")]
        public string ContainerResourceId { get; private set; }

        /// <summary>
        /// Gets the time when the resource was created.
        /// </summary>
        [JsonProperty(PropertyName = "createTime")]
        public string CreateTime { get; private set; }

        /// <summary>
        /// Gets the number of logical processors used by the SQL Server
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "vCore")]
        public string VCore { get; private set; }

        /// <summary>
        /// Gets or sets the number of total cores of the Operating System
        /// Environment (OSE) hosting the SQL Server instance.
        /// </summary>
        [JsonProperty(PropertyName = "cores")]
        public string Cores { get; set; }

        /// <summary>
        /// Gets the cloud connectivity status. Possible values include:
        /// 'Connected', 'Disconnected', 'Registered', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets SQL Server update level.
        /// </summary>
        [JsonProperty(PropertyName = "patchLevel")]
        public string PatchLevel { get; private set; }

        /// <summary>
        /// Gets SQL Server collation.
        /// </summary>
        [JsonProperty(PropertyName = "collation")]
        public string Collation { get; private set; }

        /// <summary>
        /// Gets SQL Server current version.
        /// </summary>
        [JsonProperty(PropertyName = "currentVersion")]
        public string CurrentVersion { get; private set; }

        /// <summary>
        /// Gets or sets SQL Server instance name.
        /// </summary>
        [JsonProperty(PropertyName = "instanceName")]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets dynamic TCP ports used by SQL Server.
        /// </summary>
        [JsonProperty(PropertyName = "tcpDynamicPorts")]
        public string TcpDynamicPorts { get; private set; }

        /// <summary>
        /// Gets static TCP ports used by SQL Server.
        /// </summary>
        [JsonProperty(PropertyName = "tcpStaticPorts")]
        public string TcpStaticPorts { get; private set; }

        /// <summary>
        /// Gets SQL Server product ID.
        /// </summary>
        [JsonProperty(PropertyName = "productId")]
        public string ProductId { get; private set; }

        /// <summary>
        /// Gets SQL Server license type. Possible values include: 'Undefined',
        /// 'Free', 'HADR', 'ServerCAL', 'LicenseOnly', 'PAYG', 'Paid'
        /// </summary>
        [JsonProperty(PropertyName = "licenseType")]
        public string LicenseType { get; private set; }

        /// <summary>
        /// Gets timestamp of last Azure Defender status update.
        /// </summary>
        [JsonProperty(PropertyName = "azureDefenderStatusLastUpdated")]
        public System.DateTime? AzureDefenderStatusLastUpdated { get; private set; }

        /// <summary>
        /// Gets status of Azure Defender. Possible values include:
        /// 'Protected', 'Unprotected', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "azureDefenderStatus")]
        public string AzureDefenderStatus { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the Arc-enabled SQL Server resource.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the time when last successful inventory upload was performed.
        /// </summary>
        [JsonProperty(PropertyName = "lastInventoryUploadTime")]
        public System.DateTime? LastInventoryUploadTime { get; private set; }

        /// <summary>
        /// Gets the time when last successful usage upload was performed.
        /// </summary>
        [JsonProperty(PropertyName = "lastUsageUploadTime")]
        public System.DateTime? LastUsageUploadTime { get; private set; }

        /// <summary>
        /// Gets or sets type of host for Azure Arc SQL Server. Possible values
        /// include: 'Azure Virtual Machine', 'Azure VMWare Virtual Machine',
        /// 'Azure Kubernetes Service', 'AWS VMWare Virtual Machine', 'AWS
        /// Kubernetes Service', 'GCP VMWare Virtual Machine', 'GCP Kubernetes
        /// Service', 'Container', 'Virtual Machine', 'Physical Server', 'AWS
        /// Virtual Machine', 'GCP Virtual Machine', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "hostType")]
        public string HostType { get; set; }

        /// <summary>
        /// Gets the role of the SQL Server, based on availability. Possible
        /// values include: 'None', 'FailoverClusterInstance',
        /// 'FailoverClusterNode', 'AvailabilityGroupReplica'
        /// </summary>
        [JsonProperty(PropertyName = "alwaysOnRole")]
        public string AlwaysOnRole { get; private set; }

        /// <summary>
        /// Gets or sets failover Cluster Instance properties.
        /// </summary>
        [JsonProperty(PropertyName = "failoverCluster")]
        public FailoverCluster FailoverCluster { get; set; }

        /// <summary>
        /// Gets or sets the backup profile for the SQL server.
        /// </summary>
        [JsonProperty(PropertyName = "backupPolicy")]
        public BackupPolicy BackupPolicy { get; set; }

        /// <summary>
        /// Gets or sets upgrade Action for this resource is locked until it
        /// expires. The Expiration time indicated by this value. It is not
        /// locked when it is empty.
        /// </summary>
        [JsonProperty(PropertyName = "upgradeLockedUntil")]
        public System.DateTime? UpgradeLockedUntil { get; set; }

        /// <summary>
        /// Gets or sets the monitoring configuration.
        /// </summary>
        [JsonProperty(PropertyName = "monitoring")]
        public Monitoring Monitoring { get; set; }

    }
}
