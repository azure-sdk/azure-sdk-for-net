// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlServerInstancesOperations.
    /// </summary>
    public static partial class SqlServerInstancesOperationsExtensions
    {
            /// <summary>
            /// List sqlServerInstance resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SqlServerInstance> List(this ISqlServerInstancesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlServerInstance resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstance>> ListAsync(this ISqlServerInstancesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List sqlServerInstance resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlServerInstances in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            public static IPage<SqlServerInstance> ListByResourceGroup(this ISqlServerInstancesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlServerInstance resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlServerInstances in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstance>> ListByResourceGroupAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            public static SqlServerInstance Get(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName)
            {
                return operations.GetAsync(resourceGroupName, sqlServerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerInstance> GetAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or replaces a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstance'>
            /// The SQL Server Instance to be created or updated.
            /// </param>
            public static SqlServerInstance Create(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstance sqlServerInstance)
            {
                return operations.CreateAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstance'>
            /// The SQL Server Instance to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerInstance> CreateAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstance sqlServerInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            public static void Delete(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName)
            {
                operations.DeleteAsync(resourceGroupName, sqlServerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server Instance.
            /// </param>
            public static SqlServerInstance Update(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceUpdate parameters)
            {
                return operations.UpdateAsync(resourceGroupName, sqlServerInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server Instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerInstance> UpdateAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstanceTelemetryRequest'>
            /// Contains the parameters to get SQL Server instance telemetry.
            /// </param>
            public static IPage<SqlServerInstanceTelemetryColumn> GetTelemetry(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest)
            {
                return operations.GetTelemetryAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstanceTelemetryRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstanceTelemetryRequest'>
            /// Contains the parameters to get SQL Server instance telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstanceTelemetryColumn>> GetTelemetryAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTelemetryWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstanceTelemetryRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or replaces a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstance'>
            /// The SQL Server Instance to be created or updated.
            /// </param>
            public static SqlServerInstance BeginCreate(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstance sqlServerInstance)
            {
                return operations.BeginCreateAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstance'>
            /// The SQL Server Instance to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerInstance> BeginCreateAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstance sqlServerInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            public static void BeginDelete(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, sqlServerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server Instance.
            /// </param>
            public static SqlServerInstance BeginUpdate(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceUpdate parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, sqlServerInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a SQL Server Instance resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server Instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerInstance> BeginUpdateAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstanceTelemetryRequest'>
            /// Contains the parameters to get SQL Server instance telemetry.
            /// </param>
            public static IPage<SqlServerInstanceTelemetryColumn> BeginGetTelemetry(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest)
            {
                return operations.BeginGetTelemetryAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstanceTelemetryRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='sqlServerInstanceTelemetryRequest'>
            /// Contains the parameters to get SQL Server instance telemetry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstanceTelemetryColumn>> BeginGetTelemetryAsync(this ISqlServerInstancesOperations operations, string resourceGroupName, string sqlServerInstanceName, SqlServerInstanceTelemetryRequest sqlServerInstanceTelemetryRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginGetTelemetryWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, sqlServerInstanceTelemetryRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List sqlServerInstance resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerInstance> ListNext(this ISqlServerInstancesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlServerInstance resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstance>> ListNextAsync(this ISqlServerInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List sqlServerInstance resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlServerInstances in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerInstance> ListByResourceGroupNext(this ISqlServerInstancesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List sqlServerInstance resources in the resource group
            /// </summary>
            /// <remarks>
            /// Gets all sqlServerInstances in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstance>> ListByResourceGroupNextAsync(this ISqlServerInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerInstanceTelemetryColumn> PostInstanceTelemetry(this ISqlServerInstancesOperations operations, string nextPageLink)
            {
                return operations.PostInstanceTelemetryAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstanceTelemetryColumn>> PostInstanceTelemetryAsync(this ISqlServerInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostInstanceTelemetryWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerInstanceTelemetryColumn> PostInstanceTelemetry1(this ISqlServerInstancesOperations operations, string nextPageLink)
            {
                return operations.PostInstanceTelemetry1Async(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves SQL Server instance telemetry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerInstanceTelemetryColumn>> PostInstanceTelemetry1Async(this ISqlServerInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostInstanceTelemetry1WithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
