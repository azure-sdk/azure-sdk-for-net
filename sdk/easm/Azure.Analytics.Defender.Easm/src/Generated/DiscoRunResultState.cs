// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> Enum for state in DiscoRunResult. </summary>
    public readonly partial struct DiscoRunResultState : IEquatable<DiscoRunResultState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiscoRunResultState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiscoRunResultState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "pending";
        private const string RunningValue = "running";
        private const string CompletedValue = "completed";
        private const string FailedValue = "failed";

        /// <summary> pending. </summary>
        public static DiscoRunResultState Pending { get; } = new DiscoRunResultState(PendingValue);
        /// <summary> running. </summary>
        public static DiscoRunResultState Running { get; } = new DiscoRunResultState(RunningValue);
        /// <summary> completed. </summary>
        public static DiscoRunResultState Completed { get; } = new DiscoRunResultState(CompletedValue);
        /// <summary> failed. </summary>
        public static DiscoRunResultState Failed { get; } = new DiscoRunResultState(FailedValue);
        /// <summary> Determines if two <see cref="DiscoRunResultState"/> values are the same. </summary>
        public static bool operator ==(DiscoRunResultState left, DiscoRunResultState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiscoRunResultState"/> values are not the same. </summary>
        public static bool operator !=(DiscoRunResultState left, DiscoRunResultState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiscoRunResultState"/>. </summary>
        public static implicit operator DiscoRunResultState(string value) => new DiscoRunResultState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiscoRunResultState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiscoRunResultState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
