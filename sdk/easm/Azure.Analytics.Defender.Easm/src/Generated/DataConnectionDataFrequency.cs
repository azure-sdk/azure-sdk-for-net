// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Defender.Easm
{
    /// <summary> Enum for frequency in DataConnectionData. </summary>
    public readonly partial struct DataConnectionDataFrequency : IEquatable<DataConnectionDataFrequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataConnectionDataFrequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataConnectionDataFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DailyValue = "daily";
        private const string WeeklyValue = "weekly";
        private const string MonthlyValue = "monthly";

        /// <summary> daily. </summary>
        public static DataConnectionDataFrequency Daily { get; } = new DataConnectionDataFrequency(DailyValue);
        /// <summary> weekly. </summary>
        public static DataConnectionDataFrequency Weekly { get; } = new DataConnectionDataFrequency(WeeklyValue);
        /// <summary> monthly. </summary>
        public static DataConnectionDataFrequency Monthly { get; } = new DataConnectionDataFrequency(MonthlyValue);
        /// <summary> Determines if two <see cref="DataConnectionDataFrequency"/> values are the same. </summary>
        public static bool operator ==(DataConnectionDataFrequency left, DataConnectionDataFrequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataConnectionDataFrequency"/> values are not the same. </summary>
        public static bool operator !=(DataConnectionDataFrequency left, DataConnectionDataFrequency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataConnectionDataFrequency"/>. </summary>
        public static implicit operator DataConnectionDataFrequency(string value) => new DataConnectionDataFrequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataConnectionDataFrequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataConnectionDataFrequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
