// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Defender.Easm.Samples
{
    public class Samples_EasmClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateAssets()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = client.UpdateAssets("<filter>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateAssets_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                state = "candidate",
                externalId = "<externalId>",
                labels = new
                {
                    key = true,
                },
                transfers = "as",
            };

            Response response = client.UpdateAssets("<filter>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_UpdateAssets_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = await client.UpdateAssetsAsync("<filter>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_UpdateAssets_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                state = "candidate",
                externalId = "<externalId>",
                labels = new
                {
                    key = true,
                },
                transfers = "as",
            };

            Response response = await client.UpdateAssetsAsync("<filter>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_UpdateAssets_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var assetUpdateData = new AssetUpdateData()
            {
                State = AssetUpdateState.Candidate,
                ExternalId = "<ExternalId>",
                Labels =
{
        ["key"] = true,
    },
                Transfers = AssetUpdateTransfers.As,
            };
            var result = await client.UpdateAssetsAsync("<filter>", assetUpdateData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetResource()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetAssetResource("<assetId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetResource_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetAssetResource("<assetId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResource_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetAssetResourceAsync("<assetId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResource_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetAssetResourceAsync("<assetId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResource_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetAssetResourceAsync("<assetId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ValidateDataConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new { },
                kind = "logAnalytics",
            };

            Response response = client.ValidateDataConnection(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ValidateDataConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            };

            Response response = client.ValidateDataConnection(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDataConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new { },
                kind = "logAnalytics",
            };

            Response response = await client.ValidateDataConnectionAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDataConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            };

            Response response = await client.ValidateDataConnectionAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDataConnection_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties()
            {
                ApiKey = "<ApiKey>",
                WorkspaceId = "<WorkspaceId>",
            })
            {
                Name = "<Name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            var result = await client.ValidateDataConnectionAsync(dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDataConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDataConnection("<dataConnectionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDataConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDataConnection("<dataConnectionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDataConnectionAsync("<dataConnectionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDataConnectionAsync("<dataConnectionName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnection_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetDataConnectionAsync("<dataConnectionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceDataConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new { },
                kind = "logAnalytics",
            };

            Response response = client.CreateOrReplaceDataConnection("<dataConnectionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceDataConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            };

            Response response = client.CreateOrReplaceDataConnection("<dataConnectionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDataConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new { },
                kind = "logAnalytics",
            };

            Response response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDataConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                properties = new
                {
                    apiKey = "<apiKey>",
                    workspaceId = "<workspaceId>",
                },
                kind = "logAnalytics",
                name = "<name>",
                content = "assets",
                frequency = "daily",
                frequencyOffset = 1234,
            };

            Response response = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("content").ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
            Console.WriteLine(result.GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDataConnection_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var dataConnectionData = new LogAnalyticsDataConnectionData(new LogAnalyticsDataConnectionProperties()
            {
                ApiKey = "<ApiKey>",
                WorkspaceId = "<WorkspaceId>",
            })
            {
                Name = "<Name>",
                Content = DataConnectionContent.Assets,
                Frequency = DataConnectionFrequency.Daily,
                FrequencyOffset = 1234,
            };
            var result = await client.CreateOrReplaceDataConnectionAsync("<dataConnectionName>", dataConnectionData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDataConnection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteDataConnection("<dataConnectionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDataConnection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteDataConnection("<dataConnectionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DeleteDataConnection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteDataConnectionAsync("<dataConnectionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DeleteDataConnection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteDataConnectionAsync("<dataConnectionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ValidateDiscoGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = client.ValidateDiscoGroup(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ValidateDiscoGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                names = new[] {
        "<String>"
    },
                excludes = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                templateId = "<templateId>",
            };

            Response response = client.ValidateDiscoGroup(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDiscoGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = await client.ValidateDiscoGroupAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDiscoGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                names = new[] {
        "<String>"
    },
                excludes = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                templateId = "<templateId>",
            };

            Response response = await client.ValidateDiscoGroupAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_ValidateDiscoGroup_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var discoGroupData = new DiscoGroupData()
            {
                Name = "<Name>",
                Description = "<Description>",
                Tier = "<Tier>",
                FrequencyMilliseconds = 1234,
                Seeds =
{
        new DiscoSource()
{
            Kind = DiscoSourceKind.As,
            Name = "<Name>",
        }
    },
                Names =
{
        "<null>"
    },
                Excludes =
{
        new DiscoSource()
{
            Kind = DiscoSourceKind.As,
            Name = "<Name>",
        }
    },
                TemplateId = "<TemplateId>",
            };
            var result = await client.ValidateDiscoGroupAsync(discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoGroup("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoGroup("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoGroupAsync("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoGroupAsync("<groupName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroup_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetDiscoGroupAsync("<groupName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceDiscoGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceDiscoGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                names = new[] {
        "<String>"
    },
                excludes = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                templateId = "<templateId>",
            };

            Response response = client.CreateOrReplaceDiscoGroup("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDiscoGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDiscoGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                name = "<name>",
                description = "<description>",
                tier = "<tier>",
                frequencyMilliseconds = 1234L,
                seeds = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                names = new[] {
        "<String>"
    },
                excludes = new[] {
        new {
            kind = "as",
            name = "<name>",
        }
    },
                templateId = "<templateId>",
            };

            Response response = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
            Console.WriteLine(result.GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("templateId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceDiscoGroup_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var discoGroupData = new DiscoGroupData()
            {
                Name = "<Name>",
                Description = "<Description>",
                Tier = "<Tier>",
                FrequencyMilliseconds = 1234,
                Seeds =
{
        new DiscoSource()
{
            Kind = DiscoSourceKind.As,
            Name = "<Name>",
        }
    },
                Names =
{
        "<null>"
    },
                Excludes =
{
        new DiscoSource()
{
            Kind = DiscoSourceKind.As,
            Name = "<Name>",
        }
    },
                TemplateId = "<TemplateId>",
            };
            var result = await client.CreateOrReplaceDiscoGroupAsync("<groupName>", discoGroupData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RunDiscoGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.RunDiscoGroup("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RunDiscoGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.RunDiscoGroup("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_RunDiscoGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.RunDiscoGroupAsync("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_RunDiscoGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.RunDiscoGroupAsync("<groupName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRuns()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetRuns("<groupName>", "<filter>", 1234, 1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRuns_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetRuns("<groupName>", "<filter>", 1234, 1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetRuns_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetRunsAsync("<groupName>", "<filter>", 1234, 1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetRuns_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetRunsAsync("<groupName>", "<filter>", 1234, 1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("submittedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("startedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("completedDate").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("tier").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("totalAssetsFoundCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("excludes")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("excludes")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetRuns_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetRunsAsync("<groupName>", "<filter>", 1234, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoTemplate()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoTemplate("<templateId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoTemplate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetDiscoTemplate("<templateId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("industry").ToString());
            Console.WriteLine(result.GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("stateCode").ToString());
            Console.WriteLine(result.GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplate_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoTemplateAsync("<templateId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetDiscoTemplateAsync("<templateId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("industry").ToString());
            Console.WriteLine(result.GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("stateCode").ToString());
            Console.WriteLine(result.GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("names")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplate_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetDiscoTemplateAsync("<templateId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBillable()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetBillable(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBillable_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetBillable(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetBillable_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetBillableAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetBillable_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetBillableAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("assetBreakdown")[0].GetProperty("count").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetBillable_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetBillableAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSnapshot()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = client.GetSnapshot(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSnapshot_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            };

            Response response = client.GetSnapshot(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSnapshot_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = await client.GetSnapshotAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSnapshot_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                metric = "<metric>",
                labelName = "<labelName>",
                size = 1234,
                page = 1234,
            };

            Response response = await client.GetSnapshotAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("totalElements").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("mark").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("uuid").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("updatedDate").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("externalId").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("labels")[0].ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("wildcard").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("discoGroupName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("auditTrail")[0].GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("value")[0].GetProperty("reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSnapshot_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var reportAssetSnapshotRequest = new ReportAssetSnapshotRequest()
            {
                Metric = "<Metric>",
                LabelName = "<LabelName>",
                Size = 1234,
                Page = 1234,
            };
            var result = await client.GetSnapshotAsync(reportAssetSnapshotRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSummary()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = client.GetSummary(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSummary_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                metricCategories = new[] {
        "<String>"
    },
                metrics = new[] {
        "<String>"
    },
                filters = new[] {
        "<String>"
    },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            };

            Response response = client.GetSummary(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSummary_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new { };

            Response response = await client.GetSummaryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSummary_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                metricCategories = new[] {
        "<String>"
    },
                metrics = new[] {
        "<String>"
    },
                filters = new[] {
        "<String>"
    },
                groupBy = "<groupBy>",
                segmentBy = "<segmentBy>",
                labelName = "<labelName>",
            };

            Response response = await client.GetSummaryAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("updatedAt").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metricCategory").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("metric").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("labelName").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("count").ToString());
            Console.WriteLine(result.GetProperty("assetSummaries")[0].GetProperty("link").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSummary_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var reportAssetSummaryRequest = new ReportAssetSummaryRequest()
            {
                MetricCategories =
{
        "<null>"
    },
                Metrics =
{
        "<null>"
    },
                Filters =
{
        "<null>"
    },
                GroupBy = "<GroupBy>",
                SegmentBy = "<SegmentBy>",
                LabelName = "<LabelName>",
            };
            var result = await client.GetSummaryAsync(reportAssetSummaryRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSavedFilter()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetSavedFilter("<filterName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSavedFilter_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetSavedFilter("<filterName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilter_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetSavedFilterAsync("<filterName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilter_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetSavedFilterAsync("<filterName>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilter_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetSavedFilterAsync("<filterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceSavedFilter()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                filter = "<filter>",
                description = "<description>",
            };

            Response response = client.CreateOrReplaceSavedFilter("<filterName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceSavedFilter_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                filter = "<filter>",
                description = "<description>",
            };

            Response response = client.CreateOrReplaceSavedFilter("<filterName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceSavedFilter_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                filter = "<filter>",
                description = "<description>",
            };

            Response response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceSavedFilter_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var data = new
            {
                filter = "<filter>",
                description = "<description>",
            };

            Response response = await client.CreateOrReplaceSavedFilterAsync("<filterName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("filter").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CreateOrReplaceSavedFilter_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var savedFilterData = new SavedFilterData("<filter>", "<description>");
            var result = await client.CreateOrReplaceSavedFilterAsync("<filterName>", savedFilterData);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteSavedFilter()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteSavedFilter("<filterName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteSavedFilter_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.DeleteSavedFilter("<filterName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DeleteSavedFilter_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteSavedFilterAsync("<filterName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_DeleteSavedFilter_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.DeleteSavedFilterAsync("<filterName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetTask("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.GetTask("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetTaskAsync("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.GetTaskAsync("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTask_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.GetTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelTask()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.CancelTask("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelTask_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = client.CancelTask("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CancelTask_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.CancelTaskAsync("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CancelTask_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            Response response = await client.CancelTaskAsync("<taskId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("completedAt").ToString());
            Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("phase").ToString());
            Console.WriteLine(result.GetProperty("reason").ToString());
            Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_CancelTask_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            var result = await client.CancelTaskAsync("<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetResources()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetAssetResources("<filter>", "<orderby>", 1234, 1234, "<mark>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAssetResources_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetAssetResources("<filter>", "<orderby>", 1234, 1234, "<mark>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("uuid").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("externalId").ToString());
                Console.WriteLine(result.GetProperty("labels")[0].ToString());
                Console.WriteLine(result.GetProperty("wildcard").ToString());
                Console.WriteLine(result.GetProperty("discoGroupName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResources_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetAssetResourcesAsync("<filter>", "<orderby>", 1234, 1234, "<mark>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResources_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetAssetResourcesAsync("<filter>", "<orderby>", 1234, 1234, "<mark>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("uuid").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("externalId").ToString());
                Console.WriteLine(result.GetProperty("labels")[0].ToString());
                Console.WriteLine(result.GetProperty("wildcard").ToString());
                Console.WriteLine(result.GetProperty("discoGroupName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("auditTrail")[0].GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetAssetResources_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetAssetResourcesAsync("<filter>", "<orderby>", 1234, 1234, "<mark>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDataConnections()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDataConnections(1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDataConnections_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDataConnections(1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("content").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("active").ToString());
                Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnections_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDataConnectionsAsync(1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnections_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDataConnectionsAsync(1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("content").ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("frequency").ToString());
                Console.WriteLine(result.GetProperty("frequencyOffset").ToString());
                Console.WriteLine(result.GetProperty("updatedDate").ToString());
                Console.WriteLine(result.GetProperty("userUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("active").ToString());
                Console.WriteLine(result.GetProperty("inactiveMessage").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDataConnections_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDataConnectionsAsync(1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoGroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDiscoGroups("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDiscoGroups("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoGroupsAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoGroupsAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("frequencyMilliseconds").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("submittedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("startedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("completedDate").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("totalAssetsFoundCount").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("excludes")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("latestRun").GetProperty("names")[0].ToString());
                Console.WriteLine(result.GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("templateId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoGroups_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoGroupsAsync("<filter>", 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoTemplates()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDiscoTemplates("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDiscoTemplates_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetDiscoTemplates("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("industry").ToString());
                Console.WriteLine(result.GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("countryCode").ToString());
                Console.WriteLine(result.GetProperty("stateCode").ToString());
                Console.WriteLine(result.GetProperty("city").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplates_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoTemplatesAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplates_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoTemplatesAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("industry").ToString());
                Console.WriteLine(result.GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("countryCode").ToString());
                Console.WriteLine(result.GetProperty("stateCode").ToString());
                Console.WriteLine(result.GetProperty("city").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("seeds")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("names")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetDiscoTemplates_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetDiscoTemplatesAsync("<filter>", 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSavedFilters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetSavedFilters("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSavedFilters_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetSavedFilters("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("filter").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetSavedFiltersAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilters_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetSavedFiltersAsync("<filter>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("filter").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetSavedFilters_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetSavedFiltersAsync("<filter>", 1234, 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTasks()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetTasks("<filter>", "<orderby>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTasks_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            foreach (var item in client.GetTasks("<filter>", "<orderby>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("phase").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTasks_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetTasksAsync("<filter>", "<orderby>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTasks_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetTasksAsync("<filter>", "<orderby>", 1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("completedAt").ToString());
                Console.WriteLine(result.GetProperty("lastPolledAt").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("phase").ToString());
                Console.WriteLine(result.GetProperty("reason").ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async System.Threading.Tasks.Task Example_GetTasks_Convenience_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EasmClient(endpoint, "<subscriptionId>", "<resourceGroupName>", "<workspaceName>", credential);

            await foreach (var item in client.GetTasksAsync("<filter>", "<orderby>", 1234, 1234))
            {
            }
        }
    }
}
