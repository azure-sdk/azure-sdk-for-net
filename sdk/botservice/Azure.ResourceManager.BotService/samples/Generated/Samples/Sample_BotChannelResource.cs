// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.BotService.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.BotService.Samples
{
    public partial class Sample_BotChannelResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAlexaChannel()
        {
            // Generated from example definition: 2023-09-15-preview/GetAlexaChannel.json
            // this example is just showing the usage of "BotChannel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "AlexaChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelResource result = await botChannel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetChannel()
        {
            // Generated from example definition: 2023-09-15-preview/GetChannel.json
            // this example is just showing the usage of "BotChannel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "EmailChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelResource result = await botChannel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetDirectLineSpeechChannel()
        {
            // Generated from example definition: 2023-09-15-preview/GetDirectLineSpeechChannel.json
            // this example is just showing the usage of "BotChannel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "DirectLineSpeechChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelResource result = await botChannel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetLineChannel()
        {
            // Generated from example definition: 2023-09-15-preview/GetLineChannel.json
            // this example is just showing the usage of "BotChannel_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "LineChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelResource result = await botChannel.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteChannel()
        {
            // Generated from example definition: 2023-09-15-preview/DeleteChannel.json
            // this example is just showing the usage of "BotChannel_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "EmailChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            await botChannel.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteDirectLineSpeechChannel()
        {
            // Generated from example definition: 2023-09-15-preview/DeleteDirectLineSpeechChannel.json
            // this example is just showing the usage of "BotChannel_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "DirectLineSpeechChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            await botChannel.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAlexaChannel()
        {
            // Generated from example definition: 2023-09-15-preview/UpdateAlexaChannel.json
            // this example is just showing the usage of "BotChannel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "AlexaChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelData data = new BotChannelData(default);
            BotChannelResource result = await botChannel.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateChannel()
        {
            // Generated from example definition: 2023-09-15-preview/UpdateChannel.json
            // this example is just showing the usage of "BotChannel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "EmailChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelData data = new BotChannelData(default);
            BotChannelResource result = await botChannel.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateDirectLineSpeechChannel()
        {
            // Generated from example definition: 2023-09-15-preview/UpdateDirectLineSpeechChannel.json
            // this example is just showing the usage of "BotChannel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "DirectLineSpeechChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelData data = new BotChannelData(default);
            BotChannelResource result = await botChannel.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateLineChannel()
        {
            // Generated from example definition: 2023-09-15-preview/UpdateLineChannel.json
            // this example is just showing the usage of "BotChannel_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "LineChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            BotChannelData data = new BotChannelData(default);
            BotChannelResource result = await botChannel.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetWithKeys_ListChannel()
        {
            // Generated from example definition: 2023-09-15-preview/ListChannel.json
            // this example is just showing the usage of "BotChannels_ListWithKeys" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "EmailChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            ListChannelWithKeysResponse result = await botChannel.GetWithKeysAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RegenerateKeys_RegenerateKeysForDirectLineChannelSite()
        {
            // Generated from example definition: 2023-09-15-preview/DirectlineRegenerateKeys.json
            // this example is just showing the usage of "BotChannels_RegenerateKeys" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "DirectLineChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            SiteContent content = new SiteContent(null, default);
            BotChannelResource result = await botChannel.RegenerateKeysAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RegenerateKeys_RegenerateKeysForWebChatChannelSite()
        {
            // Generated from example definition: 2023-09-15-preview/WebChatRegenerateKeys.json
            // this example is just showing the usage of "BotChannels_RegenerateKeys" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this BotChannelResource created on azure
            // for more information of creating BotChannelResource, please refer to the document of BotChannelResource
            string subscriptionId = "subscription-id";
            string resourceGroupName = "OneResourceGroupName";
            string resourceName = "samplebotname";
            string channelName = "WebChatChannel";
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName, channelName);
            BotChannelResource botChannel = client.GetBotChannelResource(botChannelResourceId);

            // invoke the operation
            SiteContent content = new SiteContent(null, default);
            BotChannelResource result = await botChannel.RegenerateKeysAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BotChannelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
