// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Analysis
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AnalysisServicesServersOperations.
    /// </summary>
    public static partial class AnalysisServicesServersOperationsExtensions
    {
            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<AnalysisServicesServer> ListByResourceGroup(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(apiVersion, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisServicesServer>> ListByResourceGroupAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(apiVersion, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details about the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            public static AnalysisServicesServer GetDetails(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName)
            {
                return operations.GetDetailsAsync(apiVersion, resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServer> GetDetailsAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static AnalysisServicesServer Create(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServer resource)
            {
                return operations.CreateAsync(apiVersion, resourceGroupName, serverName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServer> CreateAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServer resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='properties'>
            /// The resource properties to be updated.
            /// </param>
            public static AnalysisServicesServer Update(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServerUpdate properties)
            {
                return operations.UpdateAsync(apiVersion, resourceGroupName, serverName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='properties'>
            /// The resource properties to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServer> UpdateAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServerUpdate properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            public static AnalysisServicesServersDeleteHeaders Delete(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName)
            {
                return operations.DeleteAsync(apiVersion, resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServersDeleteHeaders> DeleteAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Dissociates a Unified Gateway associated with the server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static object DissociateGateway(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.DissociateGatewayAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Dissociates a Unified Gateway associated with the server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DissociateGatewayAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DissociateGatewayWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the gateway status of the specified Analysis Services server
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static GatewayListStatusLive ListGatewayStatus(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.ListGatewayStatusAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the gateway status of the specified Analysis Services server
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayListStatusLive> ListGatewayStatusAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGatewayStatusWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static object Resume(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.ResumeAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResumeAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists eligible SKUs for an Analysis Services resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given Analysis Services
            /// server is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be at least 3 characters
            /// in length, and no more than 63.
            /// </param>
            /// <param name='subscriptionId'>
            /// A unique identifier for a Microsoft Azure subscription. The subscription ID
            /// forms part of the URI for every service call.
            /// </param>
            public static SkuEnumerationForExistingResourceResult ListSkusForExisting(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, string subscriptionId)
            {
                return operations.ListSkusForExistingAsync(apiVersion, resourceGroupName, serverName, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists eligible SKUs for an Analysis Services resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure Resource group of which a given Analysis Services
            /// server is part. This name must be at least 1 character in length, and no
            /// more than 90.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be at least 3 characters
            /// in length, and no more than 63.
            /// </param>
            /// <param name='subscriptionId'>
            /// A unique identifier for a Microsoft Azure subscription. The subscription ID
            /// forms part of the URI for every service call.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuEnumerationForExistingResourceResult> ListSkusForExistingAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusForExistingWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static object Suspend(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.SuspendAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SuspendAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            public static AnalysisServicesServer BeginCreate(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServer resource)
            {
                return operations.BeginCreateAsync(apiVersion, resourceGroupName, serverName, resource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provisions the specified Analysis Services server based on the
            /// configuration specified in the request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='resource'>
            /// Resource create parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServer> BeginCreateAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServer resource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, resource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='properties'>
            /// The resource properties to be updated.
            /// </param>
            public static AnalysisServicesServer BeginUpdate(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServerUpdate properties)
            {
                return operations.BeginUpdateAsync(apiVersion, resourceGroupName, serverName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the current state of the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='properties'>
            /// The resource properties to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServer> BeginUpdateAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, AnalysisServicesServerUpdate properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            public static AnalysisServicesServersDeleteHeaders BeginDelete(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName)
            {
                return operations.BeginDeleteAsync(apiVersion, resourceGroupName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Analysis Services server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalysisServicesServersDeleteHeaders> BeginDeleteAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Resumes operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static object BeginResume(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.BeginResumeAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginResumeAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            public static object BeginSuspend(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body)
            {
                return operations.BeginSuspendAsync(apiVersion, resourceGroupName, serverName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends operation of the specified Analysis Services server instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for this operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serverName'>
            /// The name of the Analysis Services server. It must be a minimum of 3
            /// characters, and a maximum of 63.
            /// </param>
            /// <param name='body'>
            /// The content of the action request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginSuspendAsync(this IAnalysisServicesServersOperations operations, string apiVersion, string resourceGroupName, string serverName, object body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendWithHttpMessagesAsync(apiVersion, resourceGroupName, serverName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AnalysisServicesServer> ListByResourceGroupNext(this IAnalysisServicesServersOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Analysis Services servers for the given resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisServicesServer>> ListByResourceGroupNextAsync(this IAnalysisServicesServersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
