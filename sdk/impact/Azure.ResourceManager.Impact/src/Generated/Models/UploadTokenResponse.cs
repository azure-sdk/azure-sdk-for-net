// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Impact.Models
{
    /// <summary> A successful response from getUploadToken will contain an "uploadUrl" field. This uploadUrl field's value should be follow the format: https://<storage-account-name>.blob.core.windows.net/<container-name>/<ENTER YOUR BLOB NAME HERE>?<SAS-token>. </summary>
    public partial class UploadTokenResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UploadTokenResponse"/>. </summary>
        /// <param name="uploadUri"> The SAS token URL for uploading. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadUri"/> is null. </exception>
        internal UploadTokenResponse(string uploadUri)
        {
            Argument.AssertNotNull(uploadUri, nameof(uploadUri));

            UploadUri = uploadUri;
        }

        /// <summary> Initializes a new instance of <see cref="UploadTokenResponse"/>. </summary>
        /// <param name="uploadUri"> The SAS token URL for uploading. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UploadTokenResponse(string uploadUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UploadUri = uploadUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UploadTokenResponse"/> for deserialization. </summary>
        internal UploadTokenResponse()
        {
        }

        /// <summary> The SAS token URL for uploading. </summary>
        public string UploadUri { get; }
    }
}
