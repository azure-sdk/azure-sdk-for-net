// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigurationsOperations.
    /// </summary>
    public static partial class ConfigurationsOperationsExtensions
    {
            /// <summary>
            /// List all the configurations of a server in cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            public static IPage<ServerConfiguration> ListByServer(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string serverName)
            {
                return operations.ListByServerAsync(resourceGroupName, clusterName, serverName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the configurations of a server in cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerConfiguration>> ListByServerAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string serverName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerWithHttpMessagesAsync(resourceGroupName, clusterName, serverName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the configurations of a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            public static IPage<Configuration> ListByCluster(this IConfigurationsOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListByClusterAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the configurations of a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListByClusterAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByClusterWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information of a configuration for coordinator and nodes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            public static Configuration Get(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information of a configuration for coordinator and nodes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Configuration> GetAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information of a configuration for coordinator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            public static ServerConfiguration GetCoordinator(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName)
            {
                return operations.GetCoordinatorAsync(resourceGroupName, clusterName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information of a configuration for coordinator.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> GetCoordinatorAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCoordinatorWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates configuration of coordinator in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            public static ServerConfiguration UpdateOnCoordinator(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value)
            {
                return operations.UpdateOnCoordinatorAsync(resourceGroupName, clusterName, configurationName, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates configuration of coordinator in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> UpdateOnCoordinatorAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOnCoordinatorWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information of a configuration for worker nodes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            public static ServerConfiguration GetNode(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName)
            {
                return operations.GetNodeAsync(resourceGroupName, clusterName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information of a configuration for worker nodes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> GetNodeAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNodeWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates configuration of worker nodes in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            public static ServerConfiguration UpdateOnNode(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value)
            {
                return operations.UpdateOnNodeAsync(resourceGroupName, clusterName, configurationName, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates configuration of worker nodes in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> UpdateOnNodeAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOnNodeWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates configuration of coordinator in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            public static ServerConfiguration BeginUpdateOnCoordinator(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value)
            {
                return operations.BeginUpdateOnCoordinatorAsync(resourceGroupName, clusterName, configurationName, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates configuration of coordinator in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> BeginUpdateOnCoordinatorAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateOnCoordinatorWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates configuration of worker nodes in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            public static ServerConfiguration BeginUpdateOnNode(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value)
            {
                return operations.BeginUpdateOnNodeAsync(resourceGroupName, clusterName, configurationName, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates configuration of worker nodes in a cluster
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the cluster configuration.
            /// </param>
            /// <param name='value'>
            /// Value of the configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerConfiguration> BeginUpdateOnNodeAsync(this IConfigurationsOperations operations, string resourceGroupName, string clusterName, string configurationName, string value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateOnNodeWithHttpMessagesAsync(resourceGroupName, clusterName, configurationName, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the configurations of a server in cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerConfiguration> ListByServerNext(this IConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListByServerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the configurations of a server in cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerConfiguration>> ListByServerNextAsync(this IConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all the configurations of a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Configuration> ListByClusterNext(this IConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListByClusterNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the configurations of a cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Configuration>> ListByClusterNextAsync(this IConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByClusterNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
