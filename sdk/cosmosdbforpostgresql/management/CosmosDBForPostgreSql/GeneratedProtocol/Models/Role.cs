// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a cluster role.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Role : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        public Role()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Role class.
        /// </summary>
        /// <param name="principalType">Possible values include: 'user',
        /// 'servicePrincipal', 'group'</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="roleType">Possible values include: 'user',
        /// 'admin'</param>
        /// <param name="password">The password of the cluster role. If an
        /// identity is used, password will not be required.</param>
        /// <param name="provisioningState">Provisioning state of the role.
        /// Possible values include: 'Succeeded', 'Canceled', 'InProgress',
        /// 'Failed'</param>
        public Role(string objectId, string principalType, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string roleType = default(string), string password = default(string), string tenantId = default(string), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            RoleType = roleType;
            Password = password;
            ObjectId = objectId;
            PrincipalType = principalType;
            TenantId = tenantId;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'user', 'admin'
        /// </summary>
        [JsonProperty(PropertyName = "properties.roleType")]
        public string RoleType { get; set; }

        /// <summary>
        /// Gets or sets the password of the cluster role. If an identity is
        /// used, password will not be required.
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.externalIdentity.objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'user', 'servicePrincipal',
        /// 'group'
        /// </summary>
        [JsonProperty(PropertyName = "properties.externalIdentity.principalType")]
        public string PrincipalType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.externalIdentity.tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets provisioning state of the role. Possible values include:
        /// 'Succeeded', 'Canceled', 'InProgress', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ObjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ObjectId");
            }
            if (PrincipalType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrincipalType");
            }
        }
    }
}
