// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a server in a cluster.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterServer : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ClusterServer class.
        /// </summary>
        public ClusterServer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterServer class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="serverEdition">The edition of a server.</param>
        /// <param name="storageQuotaInMb">The storage of a server in
        /// MB.</param>
        /// <param name="vCores">The vCores count of a server.</param>
        /// <param name="enableHa">If high availability (HA) is enabled or not
        /// for the server.</param>
        /// <param name="enablePublicIpAccess">If public access is enabled on
        /// server.</param>
        /// <param name="isReadOnly">If server database is set to read-only by
        /// system maintenance depending on high disk space usage.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// the servers in the cluster.</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of a server.</param>
        /// <param name="role">The role of server in the cluster. Possible
        /// values include: 'Coordinator', 'Worker'</param>
        /// <param name="state">A state of a cluster/server that is visible to
        /// user.</param>
        /// <param name="haState">A state of HA feature for the
        /// cluster.</param>
        /// <param name="availabilityZone">Availability Zone information of the
        /// server.</param>
        /// <param name="postgresqlVersion">The major PostgreSQL version of
        /// server.</param>
        /// <param name="citusVersion">The Citus extension version of
        /// server.</param>
        public ClusterServer(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string serverEdition = default(string), int? storageQuotaInMb = default(int?), int? vCores = default(int?), bool? enableHa = default(bool?), bool? enablePublicIpAccess = default(bool?), bool? isReadOnly = default(bool?), string administratorLogin = default(string), string fullyQualifiedDomainName = default(string), string role = default(string), string state = default(string), string haState = default(string), string availabilityZone = default(string), string postgresqlVersion = default(string), string citusVersion = default(string))
            : base(id, name, type, systemData)
        {
            ServerEdition = serverEdition;
            StorageQuotaInMb = storageQuotaInMb;
            VCores = vCores;
            EnableHa = enableHa;
            EnablePublicIpAccess = enablePublicIpAccess;
            IsReadOnly = isReadOnly;
            AdministratorLogin = administratorLogin;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            Role = role;
            State = state;
            HaState = haState;
            AvailabilityZone = availabilityZone;
            PostgresqlVersion = postgresqlVersion;
            CitusVersion = citusVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the edition of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverEdition")]
        public string ServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of a server in MB.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageQuotaInMb")]
        public int? StorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vCores")]
        public int? VCores { get; set; }

        /// <summary>
        /// Gets or sets if high availability (HA) is enabled or not for the
        /// server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableHa")]
        public bool? EnableHa { get; set; }

        /// <summary>
        /// Gets if public access is enabled on server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enablePublicIpAccess")]
        public bool? EnablePublicIpAccess { get; private set; }

        /// <summary>
        /// Gets if server database is set to read-only by system maintenance
        /// depending on high disk space usage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isReadOnly")]
        public bool? IsReadOnly { get; private set; }

        /// <summary>
        /// Gets the administrator's login name of the servers in the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; private set; }

        /// <summary>
        /// Gets the fully qualified domain name of a server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; private set; }

        /// <summary>
        /// Gets or sets the role of server in the cluster. Possible values
        /// include: 'Coordinator', 'Worker'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets a state of a cluster/server that is visible to user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets a state of HA feature for the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.haState")]
        public string HaState { get; private set; }

        /// <summary>
        /// Gets or sets availability Zone information of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZone")]
        public string AvailabilityZone { get; set; }

        /// <summary>
        /// Gets or sets the major PostgreSQL version of server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.postgresqlVersion")]
        public string PostgresqlVersion { get; set; }

        /// <summary>
        /// Gets or sets the Citus extension version of server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.citusVersion")]
        public string CitusVersion { get; set; }

    }
}
