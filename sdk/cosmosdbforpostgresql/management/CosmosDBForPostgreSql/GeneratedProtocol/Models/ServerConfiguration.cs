// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a configuration.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerConfiguration : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerConfiguration class.
        /// </summary>
        public ServerConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerConfiguration class.
        /// </summary>
        /// <param name="value">Value of the configuration.</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="source">Source of the configuration.</param>
        /// <param name="description">Description of the configuration.</param>
        /// <param name="defaultValue">Default value of the
        /// configuration.</param>
        /// <param name="dataType">Data type of the configuration. Possible
        /// values include: 'Boolean', 'Numeric', 'Integer',
        /// 'Enumeration'</param>
        /// <param name="allowedValues">Allowed values of the
        /// configuration.</param>
        /// <param name="requiresRestart">If configuration change requires
        /// restart.</param>
        /// <param name="provisioningState">Provisioning state of the
        /// configuration. Possible values include: 'Succeeded', 'Canceled',
        /// 'InProgress', 'Failed'</param>
        public ServerConfiguration(string value, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string source = default(string), string description = default(string), string defaultValue = default(string), string dataType = default(string), string allowedValues = default(string), bool? requiresRestart = default(bool?), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            Value = value;
            Source = source;
            Description = description;
            DefaultValue = defaultValue;
            DataType = dataType;
            AllowedValues = allowedValues;
            RequiresRestart = requiresRestart;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets value of the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets source of the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public string Source { get; private set; }

        /// <summary>
        /// Gets description of the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets default value of the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultValue")]
        public string DefaultValue { get; private set; }

        /// <summary>
        /// Gets data type of the configuration. Possible values include:
        /// 'Boolean', 'Numeric', 'Integer', 'Enumeration'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataType")]
        public string DataType { get; private set; }

        /// <summary>
        /// Gets allowed values of the configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowedValues")]
        public string AllowedValues { get; private set; }

        /// <summary>
        /// Gets if configuration change requires restart.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requiresRestart")]
        public bool? RequiresRestart { get; private set; }

        /// <summary>
        /// Gets provisioning state of the configuration. Possible values
        /// include: 'Succeeded', 'Canceled', 'InProgress', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
