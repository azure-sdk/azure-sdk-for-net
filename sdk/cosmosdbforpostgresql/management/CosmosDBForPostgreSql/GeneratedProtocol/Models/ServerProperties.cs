// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The properties of a server.
    /// </summary>
    public partial class ServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>
        public ServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>
        /// <param name="serverEdition">The edition of a server.</param>
        /// <param name="storageQuotaInMb">The storage of a server in
        /// MB.</param>
        /// <param name="vCores">The vCores count of a server.</param>
        /// <param name="enableHa">If high availability (HA) is enabled or not
        /// for the server.</param>
        /// <param name="enablePublicIpAccess">If public access is enabled on
        /// server.</param>
        /// <param name="isReadOnly">If server database is set to read-only by
        /// system maintenance depending on high disk space usage.</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// the servers in the cluster.</param>
        public ServerProperties(string serverEdition = default(string), int? storageQuotaInMb = default(int?), int? vCores = default(int?), bool? enableHa = default(bool?), bool? enablePublicIpAccess = default(bool?), bool? isReadOnly = default(bool?), string administratorLogin = default(string))
        {
            ServerEdition = serverEdition;
            StorageQuotaInMb = storageQuotaInMb;
            VCores = vCores;
            EnableHa = enableHa;
            EnablePublicIpAccess = enablePublicIpAccess;
            IsReadOnly = isReadOnly;
            AdministratorLogin = administratorLogin;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the edition of a server.
        /// </summary>
        [JsonProperty(PropertyName = "serverEdition")]
        public string ServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of a server in MB.
        /// </summary>
        [JsonProperty(PropertyName = "storageQuotaInMb")]
        public int? StorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of a server.
        /// </summary>
        [JsonProperty(PropertyName = "vCores")]
        public int? VCores { get; set; }

        /// <summary>
        /// Gets or sets if high availability (HA) is enabled or not for the
        /// server.
        /// </summary>
        [JsonProperty(PropertyName = "enableHa")]
        public bool? EnableHa { get; set; }

        /// <summary>
        /// Gets if public access is enabled on server.
        /// </summary>
        [JsonProperty(PropertyName = "enablePublicIpAccess")]
        public bool? EnablePublicIpAccess { get; private set; }

        /// <summary>
        /// Gets if server database is set to read-only by system maintenance
        /// depending on high disk space usage.
        /// </summary>
        [JsonProperty(PropertyName = "isReadOnly")]
        public bool? IsReadOnly { get; private set; }

        /// <summary>
        /// Gets the administrator's login name of the servers in the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "administratorLogin")]
        public string AdministratorLogin { get; private set; }

    }
}
