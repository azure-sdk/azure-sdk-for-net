// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a cluster.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Cluster : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>
        public Cluster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Cluster class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. E.g.
        /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="aadAuthEnabled">Indicates whether the cluster was
        /// created using AAD authentication. Possible values include:
        /// 'enabled', 'disabled'</param>
        /// <param name="administratorLogin">The administrator's login name of
        /// the servers in the cluster.</param>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login. Required for creation.</param>
        /// <param name="dataEncryption">The data encryption properties of a
        /// cluster.</param>
        /// <param name="provisioningState">Provisioning state of the
        /// cluster</param>
        /// <param name="state">A state of a cluster/server that is visible to
        /// user.</param>
        /// <param name="postgresqlVersion">The major PostgreSQL version on all
        /// cluster servers.</param>
        /// <param name="citusVersion">The Citus extension version on all
        /// cluster servers.</param>
        /// <param name="maintenanceWindow">Maintenance window of a
        /// cluster.</param>
        /// <param name="preferredPrimaryZone">Preferred primary availability
        /// zone (AZ) for all cluster servers.</param>
        /// <param name="enableShardsOnCoordinator">If distributed tables are
        /// placed on coordinator or not. Should be set to 'true' on single
        /// node clusters. Requires shard rebalancing after value is
        /// changed.</param>
        /// <param name="enableHa">If high availability (HA) is enabled or not
        /// for the cluster.</param>
        /// <param name="coordinatorServerEdition">The edition of a coordinator
        /// server (default: GeneralPurpose). Required for creation.</param>
        /// <param name="coordinatorStorageQuotaInMb">The storage of a server
        /// in MB. Required for creation. See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.</param>
        /// <param name="coordinatorVCores">The vCores count of a server (max:
        /// 96). Required for creation. See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.</param>
        /// <param name="coordinatorEnablePublicIpAccess">If public access is
        /// enabled on coordinator.</param>
        /// <param name="nodeServerEdition">The edition of a node server
        /// (default: MemoryOptimized).</param>
        /// <param name="nodeCount">Worker node count of the cluster. When node
        /// count is 0, it represents a single node configuration with the
        /// ability to create distributed tables on that node. 2 or more worker
        /// nodes represent multi-node configuration. Node count value cannot
        /// be 1. Required for creation.</param>
        /// <param name="nodeStorageQuotaInMb">The storage in MB on each worker
        /// node. See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.</param>
        /// <param name="nodeVCores">The compute in vCores on each worker node
        /// (max: 104). See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.</param>
        /// <param name="nodeEnablePublicIpAccess">If public access is enabled
        /// on worker nodes.</param>
        /// <param name="serverNames">The list of server names in the
        /// cluster</param>
        /// <param name="sourceResourceId">The resource id of source cluster
        /// for read replica clusters.</param>
        /// <param name="sourceLocation">The Azure region of source cluster for
        /// read replica clusters.</param>
        /// <param name="passwordEnabled">Indicates whether the cluster was
        /// created with a password or using AAD authentication. Possible
        /// values include: 'enabled', 'disabled'</param>
        /// <param name="pointInTimeUTC">Date and time in UTC (ISO8601 format)
        /// for cluster restore.</param>
        /// <param name="readReplicas">The array of read replica
        /// clusters.</param>
        /// <param name="earliestRestoreTime">The earliest restore point time
        /// (ISO8601 format) for the cluster.</param>
        /// <param name="privateEndpointConnections">The private endpoint
        /// connections for a cluster.</param>
        /// <param name="databaseName">The database name of the cluster. Only
        /// one database per cluster is supported.</param>
        /// <param name="enableGeoBackup">If cluster backup is stored in
        /// another Azure region in addition to the copy of the backup stored
        /// in the cluster's region. Enabled only at the time of cluster
        /// creation.</param>
        /// <param name="authConfig">Authentication configuration of a
        /// cluster.</param>
        /// <param name="identity">Describes the identity of the
        /// cluster.</param>
        public Cluster(string location, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), string aadAuthEnabled = default(string), string administratorLogin = default(string), string administratorLoginPassword = default(string), DataEncryption dataEncryption = default(DataEncryption), string provisioningState = default(string), string state = default(string), string postgresqlVersion = default(string), string citusVersion = default(string), MaintenanceWindow maintenanceWindow = default(MaintenanceWindow), string preferredPrimaryZone = default(string), bool? enableShardsOnCoordinator = default(bool?), bool? enableHa = default(bool?), string coordinatorServerEdition = default(string), int? coordinatorStorageQuotaInMb = default(int?), int? coordinatorVCores = default(int?), bool? coordinatorEnablePublicIpAccess = default(bool?), string nodeServerEdition = default(string), int? nodeCount = default(int?), int? nodeStorageQuotaInMb = default(int?), int? nodeVCores = default(int?), bool? nodeEnablePublicIpAccess = default(bool?), IList<ServerNameItem> serverNames = default(IList<ServerNameItem>), string sourceResourceId = default(string), string sourceLocation = default(string), string passwordEnabled = default(string), System.DateTime? pointInTimeUTC = default(System.DateTime?), IList<string> readReplicas = default(IList<string>), System.DateTime? earliestRestoreTime = default(System.DateTime?), IList<SimplePrivateEndpointConnection> privateEndpointConnections = default(IList<SimplePrivateEndpointConnection>), string databaseName = default(string), bool? enableGeoBackup = default(bool?), AuthConfig authConfig = default(AuthConfig), IdentityProperties identity = default(IdentityProperties))
            : base(location, id, name, type, systemData, tags)
        {
            AadAuthEnabled = aadAuthEnabled;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            DataEncryption = dataEncryption;
            ProvisioningState = provisioningState;
            State = state;
            PostgresqlVersion = postgresqlVersion;
            CitusVersion = citusVersion;
            MaintenanceWindow = maintenanceWindow;
            PreferredPrimaryZone = preferredPrimaryZone;
            EnableShardsOnCoordinator = enableShardsOnCoordinator;
            EnableHa = enableHa;
            CoordinatorServerEdition = coordinatorServerEdition;
            CoordinatorStorageQuotaInMb = coordinatorStorageQuotaInMb;
            CoordinatorVCores = coordinatorVCores;
            CoordinatorEnablePublicIpAccess = coordinatorEnablePublicIpAccess;
            NodeServerEdition = nodeServerEdition;
            NodeCount = nodeCount;
            NodeStorageQuotaInMb = nodeStorageQuotaInMb;
            NodeVCores = nodeVCores;
            NodeEnablePublicIpAccess = nodeEnablePublicIpAccess;
            ServerNames = serverNames;
            SourceResourceId = sourceResourceId;
            SourceLocation = sourceLocation;
            PasswordEnabled = passwordEnabled;
            PointInTimeUTC = pointInTimeUTC;
            ReadReplicas = readReplicas;
            EarliestRestoreTime = earliestRestoreTime;
            PrivateEndpointConnections = privateEndpointConnections;
            DatabaseName = databaseName;
            EnableGeoBackup = enableGeoBackup;
            AuthConfig = authConfig;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets indicates whether the cluster was created using AAD
        /// authentication. Possible values include: 'enabled', 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.aadAuthEnabled")]
        public string AadAuthEnabled { get; private set; }

        /// <summary>
        /// Gets the administrator's login name of the servers in the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; private set; }

        /// <summary>
        /// Gets or sets the password of the administrator login. Required for
        /// creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets the data encryption properties of a cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataEncryption")]
        public DataEncryption DataEncryption { get; set; }

        /// <summary>
        /// Gets provisioning state of the cluster
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets a state of a cluster/server that is visible to user.
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets or sets the major PostgreSQL version on all cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.postgresqlVersion")]
        public string PostgresqlVersion { get; set; }

        /// <summary>
        /// Gets or sets the Citus extension version on all cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.citusVersion")]
        public string CitusVersion { get; set; }

        /// <summary>
        /// Gets or sets maintenance window of a cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow")]
        public MaintenanceWindow MaintenanceWindow { get; set; }

        /// <summary>
        /// Gets or sets preferred primary availability zone (AZ) for all
        /// cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.preferredPrimaryZone")]
        public string PreferredPrimaryZone { get; set; }

        /// <summary>
        /// Gets or sets if distributed tables are placed on coordinator or
        /// not. Should be set to 'true' on single node clusters. Requires
        /// shard rebalancing after value is changed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableShardsOnCoordinator")]
        public bool? EnableShardsOnCoordinator { get; set; }

        /// <summary>
        /// Gets or sets if high availability (HA) is enabled or not for the
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableHa")]
        public bool? EnableHa { get; set; }

        /// <summary>
        /// Gets or sets the edition of a coordinator server (default:
        /// GeneralPurpose). Required for creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorServerEdition")]
        public string CoordinatorServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of a server in MB. Required for creation.
        /// See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorStorageQuotaInMb")]
        public int? CoordinatorStorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of a server (max: 96). Required for
        /// creation. See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorVCores")]
        public int? CoordinatorVCores { get; set; }

        /// <summary>
        /// Gets or sets if public access is enabled on coordinator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorEnablePublicIpAccess")]
        public bool? CoordinatorEnablePublicIpAccess { get; set; }

        /// <summary>
        /// Gets or sets the edition of a node server (default:
        /// MemoryOptimized).
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeServerEdition")]
        public string NodeServerEdition { get; set; }

        /// <summary>
        /// Gets or sets worker node count of the cluster. When node count is
        /// 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes
        /// represent multi-node configuration. Node count value cannot be 1.
        /// Required for creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeCount")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// Gets or sets the storage in MB on each worker node. See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeStorageQuotaInMb")]
        public int? NodeStorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the compute in vCores on each worker node (max: 104).
        /// See
        /// https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute
        /// for more information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeVCores")]
        public int? NodeVCores { get; set; }

        /// <summary>
        /// Gets or sets if public access is enabled on worker nodes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeEnablePublicIpAccess")]
        public bool? NodeEnablePublicIpAccess { get; set; }

        /// <summary>
        /// Gets the list of server names in the cluster
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverNames")]
        public IList<ServerNameItem> ServerNames { get; private set; }

        /// <summary>
        /// Gets or sets the resource id of source cluster for read replica
        /// clusters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceResourceId")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Gets or sets the Azure region of source cluster for read replica
        /// clusters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceLocation")]
        public string SourceLocation { get; set; }

        /// <summary>
        /// Gets indicates whether the cluster was created with a password or
        /// using AAD authentication. Possible values include: 'enabled',
        /// 'disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.passwordEnabled")]
        public string PasswordEnabled { get; private set; }

        /// <summary>
        /// Gets or sets date and time in UTC (ISO8601 format) for cluster
        /// restore.
        /// </summary>
        [JsonProperty(PropertyName = "properties.pointInTimeUTC")]
        public System.DateTime? PointInTimeUTC { get; set; }

        /// <summary>
        /// Gets the array of read replica clusters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.readReplicas")]
        public IList<string> ReadReplicas { get; private set; }

        /// <summary>
        /// Gets the earliest restore point time (ISO8601 format) for the
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreTime")]
        public System.DateTime? EarliestRestoreTime { get; private set; }

        /// <summary>
        /// Gets the private endpoint connections for a cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public IList<SimplePrivateEndpointConnection> PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Gets or sets the database name of the cluster. Only one database
        /// per cluster is supported.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets if cluster backup is stored in another Azure region in
        /// addition to the copy of the backup stored in the cluster's region.
        /// Enabled only at the time of cluster creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableGeoBackup")]
        public bool? EnableGeoBackup { get; set; }

        /// <summary>
        /// Gets or sets authentication configuration of a cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authConfig")]
        public AuthConfig AuthConfig { get; set; }

        /// <summary>
        /// Gets or sets describes the identity of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ServerNames != null)
            {
                if (ServerNames.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(ServerNames)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "ServerNames");
                }
            }
            if (ReadReplicas != null)
            {
                if (ReadReplicas.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(ReadReplicas)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "ReadReplicas");
                }
            }
        }
    }
}
