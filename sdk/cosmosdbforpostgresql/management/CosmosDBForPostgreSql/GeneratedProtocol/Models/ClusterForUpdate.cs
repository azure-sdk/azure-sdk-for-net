// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a cluster for update.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterForUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ClusterForUpdate class.
        /// </summary>
        public ClusterForUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterForUpdate class.
        /// </summary>
        /// <param name="administratorLoginPassword">The password of the
        /// administrator login. Each cluster is created with pre-defined
        /// administrative role called ‘citus’. </param>
        /// <param name="postgresqlVersion">The major PostgreSQL version on all
        /// cluster servers.</param>
        /// <param name="citusVersion">The Citus extension version on all
        /// cluster servers.</param>
        /// <param name="enableShardsOnCoordinator">If distributed tables are
        /// placed on coordinator or not. Should be set to 'true' on single
        /// node clusters. Requires shard rebalancing after value is
        /// changed.</param>
        /// <param name="enableHa">If high availability (HA) is enabled or not
        /// for the cluster.</param>
        /// <param name="preferredPrimaryZone">Preferred primary availability
        /// zone (AZ) for all cluster servers.</param>
        /// <param name="coordinatorServerEdition">The edition of the
        /// coordinator (default: GeneralPurpose).</param>
        /// <param name="coordinatorStorageQuotaInMb">The storage of the
        /// coordinator in MB.</param>
        /// <param name="coordinatorVCores">The vCores count of the coordinator
        /// (max: 96).</param>
        /// <param name="coordinatorEnablePublicIpAccess">If public access is
        /// enabled on coordinator.</param>
        /// <param name="nodeServerEdition">The edition of a node (default:
        /// MemoryOptimized).</param>
        /// <param name="nodeCount">Worker node count of the cluster. When node
        /// count is 0, it represents a single node configuration with the
        /// ability to create distributed tables on that node. 2 or more worker
        /// nodes represent multi-node configuration. Node count value cannot
        /// be 1.</param>
        /// <param name="nodeStorageQuotaInMb">The storage in MB on each worker
        /// node.</param>
        /// <param name="nodeVCores">The compute in vCores on each worker node
        /// (max: 104).</param>
        /// <param name="nodeEnablePublicIpAccess">If public access is enabled
        /// on worker nodes.</param>
        /// <param name="maintenanceWindow">Maintenance window of a
        /// cluster.</param>
        /// <param name="identity">Describes the identity of the
        /// cluster.</param>
        /// <param name="tags">Application-specific metadata in the form of
        /// key-value pairs.</param>
        public ClusterForUpdate(string administratorLoginPassword = default(string), string postgresqlVersion = default(string), string citusVersion = default(string), bool? enableShardsOnCoordinator = default(bool?), bool? enableHa = default(bool?), string preferredPrimaryZone = default(string), string coordinatorServerEdition = default(string), int? coordinatorStorageQuotaInMb = default(int?), int? coordinatorVCores = default(int?), bool? coordinatorEnablePublicIpAccess = default(bool?), string nodeServerEdition = default(string), int? nodeCount = default(int?), int? nodeStorageQuotaInMb = default(int?), int? nodeVCores = default(int?), bool? nodeEnablePublicIpAccess = default(bool?), MaintenanceWindow maintenanceWindow = default(MaintenanceWindow), IdentityProperties identity = default(IdentityProperties), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            AdministratorLoginPassword = administratorLoginPassword;
            PostgresqlVersion = postgresqlVersion;
            CitusVersion = citusVersion;
            EnableShardsOnCoordinator = enableShardsOnCoordinator;
            EnableHa = enableHa;
            PreferredPrimaryZone = preferredPrimaryZone;
            CoordinatorServerEdition = coordinatorServerEdition;
            CoordinatorStorageQuotaInMb = coordinatorStorageQuotaInMb;
            CoordinatorVCores = coordinatorVCores;
            CoordinatorEnablePublicIpAccess = coordinatorEnablePublicIpAccess;
            NodeServerEdition = nodeServerEdition;
            NodeCount = nodeCount;
            NodeStorageQuotaInMb = nodeStorageQuotaInMb;
            NodeVCores = nodeVCores;
            NodeEnablePublicIpAccess = nodeEnablePublicIpAccess;
            MaintenanceWindow = maintenanceWindow;
            Identity = identity;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the password of the administrator login. Each cluster
        /// is created with pre-defined administrative role called ‘citus’.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets the major PostgreSQL version on all cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.postgresqlVersion")]
        public string PostgresqlVersion { get; set; }

        /// <summary>
        /// Gets or sets the Citus extension version on all cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.citusVersion")]
        public string CitusVersion { get; set; }

        /// <summary>
        /// Gets or sets if distributed tables are placed on coordinator or
        /// not. Should be set to 'true' on single node clusters. Requires
        /// shard rebalancing after value is changed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableShardsOnCoordinator")]
        public bool? EnableShardsOnCoordinator { get; set; }

        /// <summary>
        /// Gets or sets if high availability (HA) is enabled or not for the
        /// cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableHa")]
        public bool? EnableHa { get; set; }

        /// <summary>
        /// Gets or sets preferred primary availability zone (AZ) for all
        /// cluster servers.
        /// </summary>
        [JsonProperty(PropertyName = "properties.preferredPrimaryZone")]
        public string PreferredPrimaryZone { get; set; }

        /// <summary>
        /// Gets or sets the edition of the coordinator (default:
        /// GeneralPurpose).
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorServerEdition")]
        public string CoordinatorServerEdition { get; set; }

        /// <summary>
        /// Gets or sets the storage of the coordinator in MB.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorStorageQuotaInMb")]
        public int? CoordinatorStorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the vCores count of the coordinator (max: 96).
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorVCores")]
        public int? CoordinatorVCores { get; set; }

        /// <summary>
        /// Gets or sets if public access is enabled on coordinator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.coordinatorEnablePublicIpAccess")]
        public bool? CoordinatorEnablePublicIpAccess { get; set; }

        /// <summary>
        /// Gets or sets the edition of a node (default: MemoryOptimized).
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeServerEdition")]
        public string NodeServerEdition { get; set; }

        /// <summary>
        /// Gets or sets worker node count of the cluster. When node count is
        /// 0, it represents a single node configuration with the ability to
        /// create distributed tables on that node. 2 or more worker nodes
        /// represent multi-node configuration. Node count value cannot be 1.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeCount")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// Gets or sets the storage in MB on each worker node.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeStorageQuotaInMb")]
        public int? NodeStorageQuotaInMb { get; set; }

        /// <summary>
        /// Gets or sets the compute in vCores on each worker node (max: 104).
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeVCores")]
        public int? NodeVCores { get; set; }

        /// <summary>
        /// Gets if public access is enabled on worker nodes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeEnablePublicIpAccess")]
        public bool? NodeEnablePublicIpAccess { get; private set; }

        /// <summary>
        /// Gets or sets maintenance window of a cluster.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceWindow")]
        public MaintenanceWindow MaintenanceWindow { get; set; }

        /// <summary>
        /// Gets or sets describes the identity of the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityProperties Identity { get; set; }

        /// <summary>
        /// Gets or sets application-specific metadata in the form of key-value
        /// pairs.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
