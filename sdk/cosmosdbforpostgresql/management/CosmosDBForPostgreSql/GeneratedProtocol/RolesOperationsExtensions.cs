// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDBForPostgreSql
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RolesOperations.
    /// </summary>
    public static partial class RolesOperationsExtensions
    {
            /// <summary>
            /// Gets information about a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            public static Role Get(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, roleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> GetAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new role or updates an existing role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a role.
            /// </param>
            public static Role Create(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, Role parameters)
            {
                return operations.CreateAsync(resourceGroupName, clusterName, roleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new role or updates an existing role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> CreateAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, Role parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, clusterName, roleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            public static RolesDeleteHeaders Delete(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName)
            {
                return operations.DeleteAsync(resourceGroupName, clusterName, roleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RolesDeleteHeaders> DeleteAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List all the roles in a given cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            public static IEnumerable<Role> ListByCluster(this IRolesOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListByClusterAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all the roles in a given cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Role>> ListByClusterAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByClusterWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new role or updates an existing role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a role.
            /// </param>
            public static Role BeginCreate(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, Role parameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, clusterName, roleName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new role or updates an existing role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Role> BeginCreateAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, Role parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, clusterName, roleName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            public static RolesDeleteHeaders BeginDelete(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, clusterName, roleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a cluster role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='roleName'>
            /// The name of the cluster role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RolesDeleteHeaders> BeginDeleteAsync(this IRolesOperations operations, string resourceGroupName, string clusterName, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
