// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> Model factory for models. </summary>
    public static partial class AITranslationTextModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Text.GetSupportedLanguagesResult"/>. </summary>
        /// <param name="translation"> Languages that support translate API. </param>
        /// <param name="transliteration"> Languages that support transliteration API. </param>
        /// <param name="dictionary"> Languages that support dictionary API. </param>
        /// <returns> A new <see cref="Text.GetSupportedLanguagesResult"/> instance for mocking. </returns>
        public static GetSupportedLanguagesResult GetSupportedLanguagesResult(IReadOnlyDictionary<string, TranslationLanguage> translation = null, IReadOnlyDictionary<string, TransliterationLanguage> transliteration = null, IReadOnlyDictionary<string, SourceDictionaryLanguage> dictionary = null)
        {
            translation ??= new Dictionary<string, TranslationLanguage>();
            transliteration ??= new Dictionary<string, TransliterationLanguage>();
            dictionary ??= new Dictionary<string, SourceDictionaryLanguage>();

            return new GetSupportedLanguagesResult(translation, transliteration, dictionary, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <returns> A new <see cref="Text.TranslationLanguage"/> instance for mocking. </returns>
        public static TranslationLanguage TranslationLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default)
        {
            return new TranslationLanguage(name, nativeName, dir, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterationLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="scripts"> List of scripts to convert from. </param>
        /// <returns> A new <see cref="Text.TransliterationLanguage"/> instance for mocking. </returns>
        public static TransliterationLanguage TransliterationLanguage(string name = null, string nativeName = null, IEnumerable<TransliterableScript> scripts = null)
        {
            scripts ??= new List<TransliterableScript>();

            return new TransliterationLanguage(name, nativeName, scripts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterableScript"/>. </summary>
        /// <param name="code"> Code identifying the script. </param>
        /// <param name="name"> Display name of the script in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for the language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="toScripts"> List of scripts available to convert text to. </param>
        /// <returns> A new <see cref="Text.TransliterableScript"/> instance for mocking. </returns>
        public static TransliterableScript TransliterableScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality dir = default, IEnumerable<LanguageScript> toScripts = null)
        {
            toScripts ??= new List<LanguageScript>();

            return new TransliterableScript(
                code,
                name,
                nativeName,
                dir,
                serializedAdditionalRawData: null,
                toScripts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Text.LanguageScript"/>. </summary>
        /// <param name="code"> Code identifying the script. </param>
        /// <param name="name"> Display name of the script in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for the language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <returns> A new <see cref="Text.LanguageScript"/> instance for mocking. </returns>
        public static LanguageScript LanguageScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality dir = default)
        {
            return new LanguageScript(code, name, nativeName, dir, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SourceDictionaryLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="translations"> List of languages with alterative translations and examples for the query expressed in the source language. </param>
        /// <returns> A new <see cref="Text.SourceDictionaryLanguage"/> instance for mocking. </returns>
        public static SourceDictionaryLanguage SourceDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default, IEnumerable<TargetDictionaryLanguage> translations = null)
        {
            translations ??= new List<TargetDictionaryLanguage>();

            return new SourceDictionaryLanguage(name, nativeName, dir, translations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TargetDictionaryLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="code"> Language code identifying the target language. </param>
        /// <returns> A new <see cref="Text.TargetDictionaryLanguage"/> instance for mocking. </returns>
        public static TargetDictionaryLanguage TargetDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default, string code = null)
        {
            return new TargetDictionaryLanguage(name, nativeName, dir, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslateBodyDetails"/>. </summary>
        /// <param name="text"> Specifies the text string to be translated in the translate API. </param>
        /// <param name="script"> Specifies the script of the input text. </param>
        /// <param name="language">
        /// Specifies the language of the input text. Find which languages are available to translate by
        /// looking up supported languages using the translation scope. If the language parameter isn't
        /// specified, automatic language detection is applied to determine the source language.
        ///
        /// You must use the language parameter rather than autodetection when using the dynamic dictionary feature.
        /// Note: the dynamic dictionary feature is case-sensitive.
        /// </param>
        /// <param name="textType">
        /// Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
        /// complete element. Possible values are: plain (default) or html.
        /// </param>
        /// <param name="targets"> Translation target parameters. </param>
        /// <returns> A new <see cref="Text.TranslateBodyDetails"/> instance for mocking. </returns>
        public static TranslateBodyDetails TranslateBodyDetails(string text = null, string script = null, string language = null, TextType? textType = null, IEnumerable<TranslateTarget> targets = null)
        {
            targets ??= new List<TranslateTarget>();

            return new TranslateBodyDetails(
                text,
                script,
                language,
                textType,
                targets?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslatedTextItem"/>. </summary>
        /// <param name="detectedLanguage"> The detectedLanguage property is only present in the result object when language auto-detection is requested. </param>
        /// <param name="translations">
        /// An array of translation results. The size of the array matches the number of target
        /// languages specified through the to query parameter.
        /// </param>
        /// <param name="sourceText">
        /// Input text in the default script of the source language. sourceText property is present only when
        /// the input is expressed in a script that's not the usual script for the language. For example,
        /// if the input were Arabic written in Latin script, then sourceText.text would be the same Arabic text
        /// converted into Arab script.
        /// </param>
        /// <returns> A new <see cref="Text.TranslatedTextItem"/> instance for mocking. </returns>
        public static TranslatedTextItem TranslatedTextItem(DetectedLanguage detectedLanguage = null, IEnumerable<TranslationText> translations = null, SourceText sourceText = null)
        {
            translations ??= new List<TranslationText>();

            return new TranslatedTextItem(detectedLanguage, translations?.ToList(), sourceText, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DetectedLanguage"/>. </summary>
        /// <param name="language"> A string representing the code of the detected language. </param>
        /// <param name="score">
        /// A float value indicating the confidence in the result.
        /// The score is between zero and one and a low score indicates a low confidence.
        /// </param>
        /// <returns> A new <see cref="Text.DetectedLanguage"/> instance for mocking. </returns>
        public static DetectedLanguage DetectedLanguage(string language = null, float score = default)
        {
            return new DetectedLanguage(language, score, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationText"/>. </summary>
        /// <param name="to"> A string representing the language code of the target language. </param>
        /// <param name="text"> A string giving the translated text. </param>
        /// <param name="transliteration"> An object giving the translated text in the script specified by the toScript parameter. </param>
        /// <returns> A new <see cref="Text.TranslationText"/> instance for mocking. </returns>
        public static TranslationText TranslationText(string to = null, string text = null, TransliteratedText transliteration = null)
        {
            return new TranslationText(to, text, transliteration, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliteratedText"/>. </summary>
        /// <param name="text"> A string which is the result of converting the input string to the output script. </param>
        /// <param name="script"> A string specifying the script used in the output. </param>
        /// <returns> A new <see cref="Text.TransliteratedText"/> instance for mocking. </returns>
        public static TransliteratedText TransliteratedText(string text = null, string script = null)
        {
            return new TransliteratedText(text, script, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SourceText"/>. </summary>
        /// <param name="text"> Input text in the default script of the source language. </param>
        /// <returns> A new <see cref="Text.SourceText"/> instance for mocking. </returns>
        public static SourceText SourceText(string text = null)
        {
            return new SourceText(text, serializedAdditionalRawData: null);
        }
    }
}
