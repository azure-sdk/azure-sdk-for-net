// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> Element containing the text for translation. </summary>
    public partial class TranslateBody : InputTextItem
    {
        /// <summary> Initializes a new instance of <see cref="TranslateBody"/>. </summary>
        /// <param name="text"> Text to translate. </param>
        /// <param name="targets"> Translation target parameters. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="targets"/> is null. </exception>
        public TranslateBody(string text, IEnumerable<TranslateTarget> targets) : base(text)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(targets, nameof(targets));

            Targets = targets.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TranslateBody"/>. </summary>
        /// <param name="text"> Text to translate. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="script"> Specifies the script of the input text. </param>
        /// <param name="language">
        /// Specifies the language of the input text. Find which languages are available to translate by
        /// looking up supported languages using the translation scope. If the language parameter isn't
        /// specified, automatic language detection is applied to determine the source language.
        ///
        /// You must use the language parameter rather than autodetection when using the dynamic dictionary feature.
        /// Note: the dynamic dictionary feature is case-sensitive.
        /// </param>
        /// <param name="textType">
        /// Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
        /// complete element. Possible values are: plain (default) or html.
        /// </param>
        /// <param name="targets"> Translation target parameters. </param>
        internal TranslateBody(string text, IDictionary<string, BinaryData> serializedAdditionalRawData, string script, string language, TextType? textType, IList<TranslateTarget> targets) : base(text, serializedAdditionalRawData)
        {
            Script = script;
            Language = language;
            TextType = textType;
            Targets = targets;
        }

        /// <summary> Initializes a new instance of <see cref="TranslateBody"/> for deserialization. </summary>
        internal TranslateBody()
        {
        }

        /// <summary> Specifies the script of the input text. </summary>
        public string Script { get; set; }
        /// <summary>
        /// Specifies the language of the input text. Find which languages are available to translate by
        /// looking up supported languages using the translation scope. If the language parameter isn't
        /// specified, automatic language detection is applied to determine the source language.
        ///
        /// You must use the language parameter rather than autodetection when using the dynamic dictionary feature.
        /// Note: the dynamic dictionary feature is case-sensitive.
        /// </summary>
        public string Language { get; set; }
        /// <summary>
        /// Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
        /// complete element. Possible values are: plain (default) or html.
        /// </summary>
        public TextType? TextType { get; set; }
        /// <summary> Translation target parameters. </summary>
        public IList<TranslateTarget> Targets { get; }
    }
}
