<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSupportedLanguagesAsync(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
]]></code>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
]]></code>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="Translate2Async(IEnumerable{TranslateBodyDetails},string,CancellationToken)">
      <example>
This sample shows how to call Translate2Async.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<IReadOnlyList<TranslatedTextItem>> response = await client.Translate2Async(new TranslateBodyDetails[]
{
    new TranslateBodyDetails("<text>", new TranslateTarget[]
    {
        new TranslateTarget(new string[]{"<language>"})
    })
});
]]></code>
This sample shows how to call Translate2Async with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<IReadOnlyList<TranslatedTextItem>> response = await client.Translate2Async(new TranslateBodyDetails[]
{
    new TranslateBodyDetails("<text>", new TranslateTarget[]
    {
        new TranslateTarget(new string[]{"<language>"})
        {
            Script = "<script>",
            ProfanityAction = ProfanityAction.NoAction,
            ProfanityMarker = ProfanityMarker.Asterisk,
            DeploymentNameModel = "<deploymentNameModel>",
            AllowFallback = true,
            Grade = "<grade>",
            Tone = "<tone>",
            Gender = "<gender>",
            AdaptiveDatasetId = "<adaptiveDatasetId>",
            ReferenceTextPairs = {new ReferenceSentencePair("<referenceTextPairsSource>", "<referenceTextPairsTarget>")},
        }
    })
    {
        Script = "<script>",
        Language = "<language>",
        TextType = TextType.Plain,
    }
}, clientTraceId: "<clientTraceId>");
]]></code></example>
    </member>
    <member name="Translate2(IEnumerable{TranslateBodyDetails},string,CancellationToken)">
      <example>
This sample shows how to call Translate2.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<IReadOnlyList<TranslatedTextItem>> response = client.Translate2(new TranslateBodyDetails[]
{
    new TranslateBodyDetails("<text>", new TranslateTarget[]
    {
        new TranslateTarget(new string[]{"<language>"})
    })
});
]]></code>
This sample shows how to call Translate2 with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<IReadOnlyList<TranslatedTextItem>> response = client.Translate2(new TranslateBodyDetails[]
{
    new TranslateBodyDetails("<text>", new TranslateTarget[]
    {
        new TranslateTarget(new string[]{"<language>"})
        {
            Script = "<script>",
            ProfanityAction = ProfanityAction.NoAction,
            ProfanityMarker = ProfanityMarker.Asterisk,
            DeploymentNameModel = "<deploymentNameModel>",
            AllowFallback = true,
            Grade = "<grade>",
            Tone = "<tone>",
            Gender = "<gender>",
            AdaptiveDatasetId = "<adaptiveDatasetId>",
            ReferenceTextPairs = {new ReferenceSentencePair("<referenceTextPairsSource>", "<referenceTextPairsTarget>")},
        }
    })
    {
        Script = "<script>",
        Language = "<language>",
        TextType = TextType.Plain,
    }
}, clientTraceId: "<clientTraceId>");
]]></code></example>
    </member>
    <member name="Translate2Async(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call Translate2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        text = "<text>",
        targets = new object[]
        {
            new
            {
                language = new object[]
                {
                    "<language>"
                },
            }
        },
    }
});
Response response = await client.Translate2Async(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code>
This sample shows how to call Translate2Async with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        text = "<text>",
        script = "<script>",
        language = "<language>",
        textType = "Plain",
        targets = new object[]
        {
            new
            {
                language = new object[]
                {
                    "<language>"
                },
                script = "<script>",
                profanityAction = "NoAction",
                profanityMarker = "Asterisk",
                deploymentNameModel = "<deploymentNameModel>",
                allowFallback = true,
                grade = "<grade>",
                tone = "<tone>",
                gender = "<gender>",
                adaptiveDatasetId = "<adaptiveDatasetId>",
                referenceTextPairs = new object[]
                {
                    new
                    {
                        referenceTextPairsSource = "<referenceTextPairsSource>",
                        referenceTextPairsTarget = "<referenceTextPairsTarget>",
                    }
                },
            }
        },
    }
});
Response response = await client.Translate2Async(content, clientTraceId: "<clientTraceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("text").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("script").ToString());
Console.WriteLine(result[0].GetProperty("sourceText").GetProperty("text").ToString());
]]></code></example>
    </member>
    <member name="Translate2(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call Translate2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        text = "<text>",
        targets = new object[]
        {
            new
            {
                language = new object[]
                {
                    "<language>"
                },
            }
        },
    }
});
Response response = client.Translate2(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code>
This sample shows how to call Translate2 with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        text = "<text>",
        script = "<script>",
        language = "<language>",
        textType = "Plain",
        targets = new object[]
        {
            new
            {
                language = new object[]
                {
                    "<language>"
                },
                script = "<script>",
                profanityAction = "NoAction",
                profanityMarker = "Asterisk",
                deploymentNameModel = "<deploymentNameModel>",
                allowFallback = true,
                grade = "<grade>",
                tone = "<tone>",
                gender = "<gender>",
                adaptiveDatasetId = "<adaptiveDatasetId>",
                referenceTextPairs = new object[]
                {
                    new
                    {
                        referenceTextPairsSource = "<referenceTextPairsSource>",
                        referenceTextPairsTarget = "<referenceTextPairsTarget>",
                    }
                },
            }
        },
    }
});
Response response = client.Translate2(content, clientTraceId: "<clientTraceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("text").ToString());
Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("script").ToString());
Console.WriteLine(result[0].GetProperty("sourceText").GetProperty("text").ToString());
]]></code></example>
    </member>
  </members>
</doc>