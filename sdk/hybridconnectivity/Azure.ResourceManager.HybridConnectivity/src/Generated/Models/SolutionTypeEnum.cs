// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridConnectivity.Models
{
    /// <summary> Solution types. </summary>
    public readonly partial struct SolutionTypeEnum : IEquatable<SolutionTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SolutionTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SolutionTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftAssetManagementValue = "Microsoft.AssetManagement";
        private const string MicrosoftHybridComputeOnboardValue = "Microsoft.HybridCompute.Onboard";
        private const string MicrosoftHybridNetworkVWanProvisionValue = "Microsoft.HybridNetwork.VWan.Provision";

        /// <summary> Asset Management solution type. </summary>
        public static SolutionTypeEnum MicrosoftAssetManagement { get; } = new SolutionTypeEnum(MicrosoftAssetManagementValue);
        /// <summary> Hybrid Compute Onboard solution type. </summary>
        public static SolutionTypeEnum MicrosoftHybridComputeOnboard { get; } = new SolutionTypeEnum(MicrosoftHybridComputeOnboardValue);
        /// <summary> VWan Provisioning solution type. </summary>
        public static SolutionTypeEnum MicrosoftHybridNetworkVWanProvision { get; } = new SolutionTypeEnum(MicrosoftHybridNetworkVWanProvisionValue);
        /// <summary> Determines if two <see cref="SolutionTypeEnum"/> values are the same. </summary>
        public static bool operator ==(SolutionTypeEnum left, SolutionTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SolutionTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(SolutionTypeEnum left, SolutionTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SolutionTypeEnum"/>. </summary>
        public static implicit operator SolutionTypeEnum(string value) => new SolutionTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SolutionTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SolutionTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
