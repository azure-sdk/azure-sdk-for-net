// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="ServiceConfigurationResource" /> and their operations.
    /// Each <see cref="ServiceConfigurationResource" /> in the collection will belong to the same instance of <see cref="EndpointResource" />.
    /// To get a <see cref="ServiceConfigurationResourceCollection" /> instance call the GetServiceConfigurationResources method from an instance of <see cref="EndpointResource" />.
    /// </summary>
    public partial class ServiceConfigurationResourceCollection : ArmCollection, IEnumerable<ServiceConfigurationResource>, IAsyncEnumerable<ServiceConfigurationResource>
    {
        private readonly ClientDiagnostics _serviceConfigurationResourceServiceconfigurationsClientDiagnostics;
        private readonly ServiceconfigurationsRestOperations _serviceConfigurationResourceServiceconfigurationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ServiceConfigurationResourceCollection"/> class for mocking. </summary>
        protected ServiceConfigurationResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServiceConfigurationResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ServiceConfigurationResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _serviceConfigurationResourceServiceconfigurationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", ServiceConfigurationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServiceConfigurationResource.ResourceType, out string serviceConfigurationResourceServiceconfigurationsApiVersion);
            _serviceConfigurationResourceServiceconfigurationsRestClient = new ServiceconfigurationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serviceConfigurationResourceServiceconfigurationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != EndpointResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, EndpointResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a service in serviceConfiguration for the endpoint resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="data"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ServiceConfigurationResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string serviceConfigurationName, ServiceConfigurationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _serviceConfigurationResourceServiceconfigurationsRestClient.CreateAsync(Id.Parent, Id.Name, serviceConfigurationName, data, cancellationToken).ConfigureAwait(false);
                var operation = new HybridConnectivityArmOperation<ServiceConfigurationResource>(Response.FromValue(new ServiceConfigurationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a service in serviceConfiguration for the endpoint resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="data"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ServiceConfigurationResource> CreateOrUpdate(WaitUntil waitUntil, string serviceConfigurationName, ServiceConfigurationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _serviceConfigurationResourceServiceconfigurationsRestClient.Create(Id.Parent, Id.Name, serviceConfigurationName, data, cancellationToken);
                var operation = new HybridConnectivityArmOperation<ServiceConfigurationResource>(Response.FromValue(new ServiceConfigurationResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details about the service to the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> is null. </exception>
        public virtual async Task<Response<ServiceConfigurationResource>> GetAsync(string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _serviceConfigurationResourceServiceconfigurationsRestClient.GetAsync(Id.Parent, Id.Name, serviceConfigurationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceConfigurationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details about the service to the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> is null. </exception>
        public virtual Response<ServiceConfigurationResource> Get(string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _serviceConfigurationResourceServiceconfigurationsRestClient.Get(Id.Parent, Id.Name, serviceConfigurationName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceConfigurationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// API to enumerate registered services in service configurations under a Endpoint Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_ListByEndpointResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServiceConfigurationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceConfigurationResourceServiceconfigurationsRestClient.CreateListByEndpointResourceRequest(Id.Parent, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serviceConfigurationResourceServiceconfigurationsRestClient.CreateListByEndpointResourceNextPageRequest(nextLink, Id.Parent, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ServiceConfigurationResource(Client, ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(e)), _serviceConfigurationResourceServiceconfigurationsClientDiagnostics, Pipeline, "ServiceConfigurationResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// API to enumerate registered services in service configurations under a Endpoint Resource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_ListByEndpointResource</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceConfigurationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServiceConfigurationResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceConfigurationResourceServiceconfigurationsRestClient.CreateListByEndpointResourceRequest(Id.Parent, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serviceConfigurationResourceServiceconfigurationsRestClient.CreateListByEndpointResourceNextPageRequest(nextLink, Id.Parent, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ServiceConfigurationResource(Client, ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(e)), _serviceConfigurationResourceServiceconfigurationsClientDiagnostics, Pipeline, "ServiceConfigurationResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serviceConfigurationResourceServiceconfigurationsRestClient.GetAsync(Id.Parent, Id.Name, serviceConfigurationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceconfigurations/{serviceConfigurationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Serviceconfigurations_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceConfigurationName"/> is null. </exception>
        public virtual Response<bool> Exists(string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var scope = _serviceConfigurationResourceServiceconfigurationsClientDiagnostics.CreateScope("ServiceConfigurationResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _serviceConfigurationResourceServiceconfigurationsRestClient.Get(Id.Parent, Id.Name, serviceConfigurationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServiceConfigurationResource> IEnumerable<ServiceConfigurationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServiceConfigurationResource> IAsyncEnumerable<ServiceConfigurationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
