// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.QuestionAnswering.Samples
{
    public partial class Samples_QuestionAnswering
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswers_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.GetAnswers("<projectName>", "<deploymentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswers_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.GetAnswersAsync("<projectName>", "<deploymentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswers_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersOptions knowledgeBaseQueryOptions = new AnswersOptions();
            Response<AnswersResult> response = client.GetAnswers("<projectName>", "<deploymentName>", knowledgeBaseQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswers_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersOptions knowledgeBaseQueryOptions = new AnswersOptions();
            Response<AnswersResult> response = await client.GetAnswersAsync("<projectName>", "<deploymentName>", knowledgeBaseQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswers_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                qnaId = 1234,
                question = "<question>",
                top = 1234,
                userId = "<userId>",
                confidenceScoreThreshold = 123.45,
                context = new
                {
                    previousQnaId = 1234,
                    previousUserQuery = "<previousUserQuery>",
                },
                rankerType = "QuestionOnly",
                filters = new
                {
                    metadataFilter = new
                    {
                        metadata = new object[]
            {
new
{
key = "<key>",
value = "<value>",
}
            },
                        logicalOperation = "AND",
                    },
                    sourceFilter = new object[]
            {
"<sourceFilter>"
            },
                    logicalOperation = "AND",
                },
                answerSpanRequest = new
                {
                    enable = true,
                    confidenceScoreThreshold = 123.45,
                    topAnswersWithSpan = 1234,
                },
                includeUnstructuredSources = true,
            });
            Response response = client.GetAnswers("<projectName>", "<deploymentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("questions")[0].ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answer").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("isContextOnly").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                qnaId = 1234,
                question = "<question>",
                top = 1234,
                userId = "<userId>",
                confidenceScoreThreshold = 123.45,
                context = new
                {
                    previousQnaId = 1234,
                    previousUserQuery = "<previousUserQuery>",
                },
                rankerType = "QuestionOnly",
                filters = new
                {
                    metadataFilter = new
                    {
                        metadata = new object[]
            {
new
{
key = "<key>",
value = "<value>",
}
            },
                        logicalOperation = "AND",
                    },
                    sourceFilter = new object[]
            {
"<sourceFilter>"
            },
                    logicalOperation = "AND",
                },
                answerSpanRequest = new
                {
                    enable = true,
                    confidenceScoreThreshold = 123.45,
                    topAnswersWithSpan = 1234,
                },
                includeUnstructuredSources = true,
            });
            Response response = await client.GetAnswersAsync("<projectName>", "<deploymentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("questions")[0].ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answer").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("metadata").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("isContextOnly").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswers_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersOptions knowledgeBaseQueryOptions = new AnswersOptions
            {
                Size = 1234,
                UserId = "<userId>",
                ConfidenceThreshold = 123.45,
                AnswerContext = new KnowledgeBaseAnswerContext(1234)
                {
                    PreviousQuestion = "<previousUserQuery>",
                },
                RankerKind = RankerKind.QuestionOnly,
                Filters = new QueryFilters
                {
                    MetadataFilter = new MetadataFilter
                    {
                        Metadata = { new MetadataRecord("<key>", "<value>") },
                        LogicalOperation = LogicalOperationKind.And,
                    },
                    SourceFilter = { "<sourceFilter>" },
                    LogicalOperation = LogicalOperationKind.And,
                },
                ShortAnswerOptions = new ShortAnswerOptions
                {
                    ConfidenceThreshold = 123.45,
                    Size = 1234,
                },
                IncludeUnstructuredSources = true,
            };
            Response<AnswersResult> response = client.GetAnswers("<projectName>", "<deploymentName>", knowledgeBaseQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersOptions knowledgeBaseQueryOptions = new AnswersOptions
            {
                Size = 1234,
                UserId = "<userId>",
                ConfidenceThreshold = 123.45,
                AnswerContext = new KnowledgeBaseAnswerContext(1234)
                {
                    PreviousQuestion = "<previousUserQuery>",
                },
                RankerKind = RankerKind.QuestionOnly,
                Filters = new QueryFilters
                {
                    MetadataFilter = new MetadataFilter
                    {
                        Metadata = { new MetadataRecord("<key>", "<value>") },
                        LogicalOperation = LogicalOperationKind.And,
                    },
                    SourceFilter = { "<sourceFilter>" },
                    LogicalOperation = LogicalOperationKind.And,
                },
                ShortAnswerOptions = new ShortAnswerOptions
                {
                    ConfidenceThreshold = 123.45,
                    Size = 1234,
                },
                IncludeUnstructuredSources = true,
            };
            Response<AnswersResult> response = await client.GetAnswersAsync("<projectName>", "<deploymentName>", knowledgeBaseQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswersFromText_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                question = "<question>",
                records = new object[]
            {
new
{
id = "<id>",
text = "<text>",
}
            },
            });
            Response response = client.GetAnswersFromText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswersFromText_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                question = "<question>",
                records = new object[]
            {
new
{
id = "<id>",
text = "<text>",
}
            },
            });
            Response response = await client.GetAnswersFromTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswersFromText_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersFromTextOptions textQueryOptions = new AnswersFromTextOptions("<question>", new TextDocument[]
            {
new TextDocument("<id>", "<text>")
            });
            Response<AnswersFromTextResult> response = client.GetAnswersFromText(textQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswersFromText_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersFromTextOptions textQueryOptions = new AnswersFromTextOptions("<question>", new TextDocument[]
            {
new TextDocument("<id>", "<text>")
            });
            Response<AnswersFromTextResult> response = await client.GetAnswersFromTextAsync(textQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswersFromText_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                question = "<question>",
                records = new object[]
            {
new
{
id = "<id>",
text = "<text>",
}
            },
                language = "<language>",
                stringIndexType = "TextElements_v8",
            });
            Response response = client.GetAnswersFromText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answer").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswersFromText_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                question = "<question>",
                records = new object[]
            {
new
{
id = "<id>",
text = "<text>",
}
            },
                language = "<language>",
                stringIndexType = "TextElements_v8",
            });
            Response response = await client.GetAnswersFromTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answer").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("answerSpan").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("answers")[0].GetProperty("length").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnswering_GetAnswersFromText_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersFromTextOptions textQueryOptions = new AnswersFromTextOptions("<question>", new TextDocument[]
            {
new TextDocument("<id>", "<text>")
            })
            {
                Language = "<language>",
            };
            Response<AnswersFromTextResult> response = client.GetAnswersFromText(textQueryOptions);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnswering_GetAnswersFromText_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnswering client = new QuestionAnsweringClient(endpoint, credential).GetQuestionAnsweringClient(apiVersion: "2023-04-01");

            AnswersFromTextOptions textQueryOptions = new AnswersFromTextOptions("<question>", new TextDocument[]
            {
new TextDocument("<id>", "<text>")
            })
            {
                Language = "<language>",
            };
            Response<AnswersFromTextResult> response = await client.GetAnswersFromTextAsync(textQueryOptions);
        }
    }
}
