// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.AI.Language.Text.Authoring.Models;

namespace Azure.AI.Language.Text.Authoring
{
    /// <summary> Model factory for models. </summary>
    public static partial class TextAuthoringModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringProjectMetadata"/>. </summary>
        /// <param name="createdOn"> Represents the project creation datetime. </param>
        /// <param name="lastModifiedOn"> Represents the project last modification datetime. </param>
        /// <param name="lastTrainedOn"> Represents the project last training datetime. </param>
        /// <param name="lastDeployedOn"> Represents the project last deployment datetime. </param>
        /// <param name="projectKind"> The project kind. </param>
        /// <param name="storageInputContainerName"> The storage container name. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.TextAuthoringProjectMetadata"/> instance for mocking. </returns>
        public static TextAuthoringProjectMetadata TextAuthoringProjectMetadata(DateTimeOffset createdOn = default, DateTimeOffset lastModifiedOn = default, DateTimeOffset? lastTrainedOn = null, DateTimeOffset? lastDeployedOn = null, TextAuthoringProjectKind projectKind = default, string storageInputContainerName = null, TextAuthoringProjectSettings settings = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new TextAuthoringProjectMetadata(
                createdOn,
                lastModifiedOn,
                lastTrainedOn,
                lastDeployedOn,
                projectKind,
                storageInputContainerName,
                settings,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringProjectDeployment"/>. </summary>
        /// <param name="deploymentName"> Represents deployment name. </param>
        /// <param name="modelId"> Represents deployment modelId. </param>
        /// <param name="lastTrainedOn"> Represents deployment last trained time. </param>
        /// <param name="lastDeployedOn"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpiredOn"> Represents deployment expiration date in the runtime. </param>
        /// <param name="modelTrainingConfigVersion"> Represents model training config version. </param>
        /// <param name="assignedResources"> Represents the metadata of the assigned Azure resources. </param>
        /// <returns> A new <see cref="Models.TextAuthoringProjectDeployment"/> instance for mocking. </returns>
        public static TextAuthoringProjectDeployment TextAuthoringProjectDeployment(string deploymentName = null, string modelId = null, DateTimeOffset lastTrainedOn = default, DateTimeOffset lastDeployedOn = default, DateTimeOffset deploymentExpiredOn = default, string modelTrainingConfigVersion = null, IEnumerable<TextAuthoringDeploymentResource> assignedResources = null)
        {
            assignedResources ??= new List<TextAuthoringDeploymentResource>();

            return new TextAuthoringProjectDeployment(
                deploymentName,
                modelId,
                lastTrainedOn,
                lastDeployedOn,
                deploymentExpiredOn,
                modelTrainingConfigVersion,
                assignedResources?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringDeploymentResource"/>. </summary>
        /// <param name="resourceId"> Represents the Azure resource Id. </param>
        /// <param name="region"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.TextAuthoringDeploymentResource"/> instance for mocking. </returns>
        public static TextAuthoringDeploymentResource TextAuthoringDeploymentResource(string resourceId = null, string region = null)
        {
            return new TextAuthoringDeploymentResource(resourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringExportedTrainedModel"/>. </summary>
        /// <param name="exportedModelName"> The exported model name. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedOn"> The last trained date time of the model. </param>
        /// <param name="lastExportedModelOn"> The last exported date time of the model. </param>
        /// <param name="modelExpiredOn"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <returns> A new <see cref="Models.TextAuthoringExportedTrainedModel"/> instance for mocking. </returns>
        public static TextAuthoringExportedTrainedModel TextAuthoringExportedTrainedModel(string exportedModelName = null, string modelId = null, DateTimeOffset lastTrainedOn = default, DateTimeOffset lastExportedModelOn = default, DateTimeOffset modelExpiredOn = default, string modelTrainingConfigVersion = null)
        {
            return new TextAuthoringExportedTrainedModel(
                exportedModelName,
                modelId,
                lastTrainedOn,
                lastExportedModelOn,
                modelExpiredOn,
                modelTrainingConfigVersion,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringProjectTrainedModel"/>. </summary>
        /// <param name="label"> The trained model label. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedOn"> The last trained date time of the model. </param>
        /// <param name="lastTrainingDurationInSeconds"> The duration of the model's last training request in seconds. </param>
        /// <param name="modelExpiredOn"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <param name="hasSnapshot"> The flag to indicate if the trained model has a snapshot ready. </param>
        /// <returns> A new <see cref="Models.TextAuthoringProjectTrainedModel"/> instance for mocking. </returns>
        public static TextAuthoringProjectTrainedModel TextAuthoringProjectTrainedModel(string label = null, string modelId = null, DateTimeOffset lastTrainedOn = default, int lastTrainingDurationInSeconds = default, DateTimeOffset modelExpiredOn = default, string modelTrainingConfigVersion = null, bool hasSnapshot = default)
        {
            return new TextAuthoringProjectTrainedModel(
                label,
                modelId,
                lastTrainedOn,
                lastTrainingDurationInSeconds,
                modelExpiredOn,
                modelTrainingConfigVersion,
                hasSnapshot,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringAssignedDeploymentResource"/>. </summary>
        /// <param name="azureResourceId"> The resource ID. </param>
        /// <param name="region"> The resource region. </param>
        /// <returns> A new <see cref="Models.TextAuthoringAssignedDeploymentResource"/> instance for mocking. </returns>
        public static TextAuthoringAssignedDeploymentResource TextAuthoringAssignedDeploymentResource(string azureResourceId = null, string region = null)
        {
            return new TextAuthoringAssignedDeploymentResource(azureResourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringTrainingOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents training tasks detailed result. </param>
        /// <returns> A new <see cref="Models.TextAuthoringTrainingOperationState"/> instance for mocking. </returns>
        public static TextAuthoringTrainingOperationState TextAuthoringTrainingOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, TextAuthoringTrainingJobResult result = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringTrainingOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringTrainingJobResult"/>. </summary>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="trainingStatus"> Represents model train status. </param>
        /// <param name="evaluationStatus"> Represents model evaluation status. </param>
        /// <param name="estimatedEndOn"> Represents the estimate end date time for training and evaluation. </param>
        /// <returns> A new <see cref="Models.TextAuthoringTrainingJobResult"/> instance for mocking. </returns>
        public static TextAuthoringTrainingJobResult TextAuthoringTrainingJobResult(string modelLabel = null, string trainingConfigVersion = null, TextAuthoringSubTrainingOperationState trainingStatus = null, TextAuthoringSubTrainingOperationState evaluationStatus = null, DateTimeOffset? estimatedEndOn = null)
        {
            return new TextAuthoringTrainingJobResult(
                modelLabel,
                trainingConfigVersion,
                trainingStatus,
                evaluationStatus,
                estimatedEndOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringSubTrainingOperationState"/>. </summary>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <param name="startedOn"> Represents the start date time. </param>
        /// <param name="endedOn"> Represents the end date time. </param>
        /// <param name="status"> Represents the status of the sub-operation. </param>
        /// <returns> A new <see cref="Models.TextAuthoringSubTrainingOperationState"/> instance for mocking. </returns>
        public static TextAuthoringSubTrainingOperationState TextAuthoringSubTrainingOperationState(int percentComplete = default, DateTimeOffset? startedOn = null, DateTimeOffset? endedOn = null, TextAuthoringOperationStatus status = default)
        {
            return new TextAuthoringSubTrainingOperationState(percentComplete, startedOn, endedOn, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringAssignedProjectDeploymentsMetadata"/>. </summary>
        /// <param name="projectName"> Represents the project name. </param>
        /// <param name="deploymentsMetadata"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.TextAuthoringAssignedProjectDeploymentsMetadata"/> instance for mocking. </returns>
        public static TextAuthoringAssignedProjectDeploymentsMetadata TextAuthoringAssignedProjectDeploymentsMetadata(string projectName = null, IEnumerable<TextAuthoringAssignedProjectDeploymentMetadata> deploymentsMetadata = null)
        {
            deploymentsMetadata ??= new List<TextAuthoringAssignedProjectDeploymentMetadata>();

            return new TextAuthoringAssignedProjectDeploymentsMetadata(projectName, deploymentsMetadata?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringAssignedProjectDeploymentMetadata"/>. </summary>
        /// <param name="deploymentName"> Represents the deployment name. </param>
        /// <param name="lastDeployedOn"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpiresOn"> Represents deployment expiration date in the runtime. </param>
        /// <returns> A new <see cref="Models.TextAuthoringAssignedProjectDeploymentMetadata"/> instance for mocking. </returns>
        public static TextAuthoringAssignedProjectDeploymentMetadata TextAuthoringAssignedProjectDeploymentMetadata(string deploymentName = null, DateTimeOffset lastDeployedOn = default, DateTimeOffset deploymentExpiresOn = default)
        {
            return new TextAuthoringAssignedProjectDeploymentMetadata(deploymentName, lastDeployedOn, deploymentExpiresOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringSupportedLanguage"/>. </summary>
        /// <param name="languageName"> The language name. </param>
        /// <param name="languageCode"> The language code. This is BCP-47 representation of a language. For example, "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.TextAuthoringSupportedLanguage"/> instance for mocking. </returns>
        public static TextAuthoringSupportedLanguage TextAuthoringSupportedLanguage(string languageName = null, string languageCode = null)
        {
            return new TextAuthoringSupportedLanguage(languageName, languageCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringPrebuiltEntity"/>. </summary>
        /// <param name="category"> The prebuilt entity category. </param>
        /// <param name="description"> The description. </param>
        /// <param name="examples"> English examples for the entity. </param>
        /// <returns> A new <see cref="Models.TextAuthoringPrebuiltEntity"/> instance for mocking. </returns>
        public static TextAuthoringPrebuiltEntity TextAuthoringPrebuiltEntity(string category = null, string description = null, string examples = null)
        {
            return new TextAuthoringPrebuiltEntity(category, description, examples, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringTrainingConfigVersion"/>. </summary>
        /// <param name="trainingConfigVersion"> Represents the version of the config. </param>
        /// <param name="modelExpiredOn"> Represents the training config version expiration date. </param>
        /// <returns> A new <see cref="Models.TextAuthoringTrainingConfigVersion"/> instance for mocking. </returns>
        public static TextAuthoringTrainingConfigVersion TextAuthoringTrainingConfigVersion(string trainingConfigVersion = null, DateTimeOffset modelExpiredOn = default)
        {
            return new TextAuthoringTrainingConfigVersion(trainingConfigVersion, modelExpiredOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringExportedModelOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringExportedModelOperationState"/> instance for mocking. </returns>
        public static TextAuthoringExportedModelOperationState TextAuthoringExportedModelOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringExportedModelOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedModelManifest"/>. </summary>
        /// <param name="modelFiles"> The model files belonging to this model. </param>
        /// <returns> A new <see cref="Models.ExportedModelManifest"/> instance for mocking. </returns>
        public static ExportedModelManifest ExportedModelManifest(IEnumerable<ModelFile> modelFiles = null)
        {
            modelFiles ??= new List<ModelFile>();

            return new ExportedModelManifest(modelFiles?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelFile"/>. </summary>
        /// <param name="name"> The name of the file. </param>
        /// <param name="contentUri"> The URI to retrieve the content of the file. </param>
        /// <returns> A new <see cref="Models.ModelFile"/> instance for mocking. </returns>
        public static ModelFile ModelFile(string name = null, Uri contentUri = null)
        {
            return new ModelFile(name, contentUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringEvaluationJobResult"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <returns> A new <see cref="Models.TextAuthoringEvaluationJobResult"/> instance for mocking. </returns>
        public static TextAuthoringEvaluationJobResult TextAuthoringEvaluationJobResult(TextAuthoringEvaluationDetails evaluationOptions = null, string modelLabel = null, string trainingConfigVersion = null, int percentComplete = default)
        {
            return new TextAuthoringEvaluationJobResult(evaluationOptions, modelLabel, trainingConfigVersion, percentComplete, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringEvaluationOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <returns> A new <see cref="Models.TextAuthoringEvaluationOperationState"/> instance for mocking. </returns>
        public static TextAuthoringEvaluationOperationState TextAuthoringEvaluationOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, TextAuthoringEvaluationJobResult result = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringEvaluationOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringLoadSnapshotOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringLoadSnapshotOperationState"/> instance for mocking. </returns>
        public static TextAuthoringLoadSnapshotOperationState TextAuthoringLoadSnapshotOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringLoadSnapshotOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringDocumentEvaluationResult"/>. </summary>
        /// <param name="projectKind"> Represents the project kind. </param>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.TextAuthoringDocumentEvaluationResult"/> instance for mocking. </returns>
        public static TextAuthoringDocumentEvaluationResult TextAuthoringDocumentEvaluationResult(string projectKind = null, string location = null, string language = null)
        {
            return new UnknownTextAuthoringDocumentEvaluationResult(projectKind == null ? default : new TextAuthoringProjectKind(projectKind), location, language, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomEntityRecognitionDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customEntityRecognitionResult"> Represents the evaluation prediction for entity recognition. </param>
        /// <returns> A new <see cref="Models.CustomEntityRecognitionDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomEntityRecognitionDocumentEvaluationResult CustomEntityRecognitionDocumentEvaluationResult(string location = null, string language = null, DocumentEntityRecognitionEvaluationResult customEntityRecognitionResult = null)
        {
            return new CustomEntityRecognitionDocumentEvaluationResult(TextAuthoringProjectKind.CustomEntityRecognition, location, language, serializedAdditionalRawData: null, customEntityRecognitionResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityRecognitionEvaluationResult"/>. </summary>
        /// <param name="entities"> Represents the document labelled entities. </param>
        /// <returns> A new <see cref="Models.DocumentEntityRecognitionEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityRecognitionEvaluationResult DocumentEntityRecognitionEvaluationResult(IEnumerable<DocumentEntityRegionEvaluationResult> entities = null)
        {
            entities ??= new List<DocumentEntityRegionEvaluationResult>();

            return new DocumentEntityRecognitionEvaluationResult(entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityRegionEvaluationResult"/>. </summary>
        /// <param name="expectedEntities"> Represents the region's expected entity labels. </param>
        /// <param name="predictedEntities"> Represents the region's predicted entity labels. </param>
        /// <param name="regionOffset"> Represents the region offset. </param>
        /// <param name="regionLength"> Represents the region length. </param>
        /// <returns> A new <see cref="Models.DocumentEntityRegionEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityRegionEvaluationResult DocumentEntityRegionEvaluationResult(IEnumerable<DocumentEntityLabelEvaluationResult> expectedEntities = null, IEnumerable<DocumentEntityLabelEvaluationResult> predictedEntities = null, int regionOffset = default, int regionLength = default)
        {
            expectedEntities ??= new List<DocumentEntityLabelEvaluationResult>();
            predictedEntities ??= new List<DocumentEntityLabelEvaluationResult>();

            return new DocumentEntityRegionEvaluationResult(expectedEntities?.ToList(), predictedEntities?.ToList(), regionOffset, regionLength, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentEntityLabelEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the entity category. </param>
        /// <param name="offset"> Represents the entity offset index relative to the original text. </param>
        /// <param name="length"> Represents the entity length. </param>
        /// <returns> A new <see cref="Models.DocumentEntityLabelEvaluationResult"/> instance for mocking. </returns>
        public static DocumentEntityLabelEvaluationResult DocumentEntityLabelEvaluationResult(string category = null, int offset = default, int length = default)
        {
            return new DocumentEntityLabelEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomHealthcareDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customHealthcareResult"> Represents the evaluation prediction for entity recognition. </param>
        /// <returns> A new <see cref="Models.CustomHealthcareDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomHealthcareDocumentEvaluationResult CustomHealthcareDocumentEvaluationResult(string location = null, string language = null, DocumentHealthcareEvaluationResult customHealthcareResult = null)
        {
            return new CustomHealthcareDocumentEvaluationResult(TextAuthoringProjectKind.CustomHealthcare, location, language, serializedAdditionalRawData: null, customHealthcareResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentHealthcareEvaluationResult"/>. </summary>
        /// <param name="entities"> Represents the document labelled entities. </param>
        /// <returns> A new <see cref="Models.DocumentHealthcareEvaluationResult"/> instance for mocking. </returns>
        public static DocumentHealthcareEvaluationResult DocumentHealthcareEvaluationResult(IEnumerable<DocumentEntityRegionEvaluationResult> entities = null)
        {
            entities ??= new List<DocumentEntityRegionEvaluationResult>();

            return new DocumentHealthcareEvaluationResult(entities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomMultiLabelClassificationDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customMultiLabelClassificationResult"> Represents the evaluation prediction for multi label classification. </param>
        /// <returns> A new <see cref="Models.CustomMultiLabelClassificationDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomMultiLabelClassificationDocumentEvaluationResult CustomMultiLabelClassificationDocumentEvaluationResult(string location = null, string language = null, DocumentMultiLabelClassificationEvaluationResult customMultiLabelClassificationResult = null)
        {
            return new CustomMultiLabelClassificationDocumentEvaluationResult(TextAuthoringProjectKind.CustomMultiLabelClassification, location, language, serializedAdditionalRawData: null, customMultiLabelClassificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentMultiLabelClassificationEvaluationResult"/>. </summary>
        /// <param name="expectedClasses"> Represents the document's expected classes. </param>
        /// <param name="predictedClasses"> Represents the document's predicted classes. </param>
        /// <returns> A new <see cref="Models.DocumentMultiLabelClassificationEvaluationResult"/> instance for mocking. </returns>
        public static DocumentMultiLabelClassificationEvaluationResult DocumentMultiLabelClassificationEvaluationResult(IEnumerable<string> expectedClasses = null, IEnumerable<string> predictedClasses = null)
        {
            expectedClasses ??= new List<string>();
            predictedClasses ??= new List<string>();

            return new DocumentMultiLabelClassificationEvaluationResult(expectedClasses?.ToList(), predictedClasses?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSingleLabelClassificationDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customSingleLabelClassificationResult"> Represents the evaluation prediction for single label classification. </param>
        /// <returns> A new <see cref="Models.CustomSingleLabelClassificationDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomSingleLabelClassificationDocumentEvaluationResult CustomSingleLabelClassificationDocumentEvaluationResult(string location = null, string language = null, DocumentSingleLabelClassificationEvaluationResult customSingleLabelClassificationResult = null)
        {
            return new CustomSingleLabelClassificationDocumentEvaluationResult(TextAuthoringProjectKind.CustomSingleLabelClassification, location, language, serializedAdditionalRawData: null, customSingleLabelClassificationResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentSingleLabelClassificationEvaluationResult"/>. </summary>
        /// <param name="expectedClass"> Represents the document's expected class. </param>
        /// <param name="predictedClass"> Represents the document's predicted class. </param>
        /// <returns> A new <see cref="Models.DocumentSingleLabelClassificationEvaluationResult"/> instance for mocking. </returns>
        public static DocumentSingleLabelClassificationEvaluationResult DocumentSingleLabelClassificationEvaluationResult(string expectedClass = null, string predictedClass = null)
        {
            return new DocumentSingleLabelClassificationEvaluationResult(expectedClass, predictedClass, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomTextSentimentDocumentEvaluationResult"/>. </summary>
        /// <param name="location"> Represents the document path. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="customTextSentimentResult"> Represents the evaluation prediction for text sentiment. </param>
        /// <returns> A new <see cref="Models.CustomTextSentimentDocumentEvaluationResult"/> instance for mocking. </returns>
        public static CustomTextSentimentDocumentEvaluationResult CustomTextSentimentDocumentEvaluationResult(string location = null, string language = null, DocumentTextSentimentEvaluationResult customTextSentimentResult = null)
        {
            return new CustomTextSentimentDocumentEvaluationResult(TextAuthoringProjectKind.CustomTextSentiment, location, language, serializedAdditionalRawData: null, customTextSentimentResult);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentTextSentimentEvaluationResult"/>. </summary>
        /// <param name="expectedSentimentSpans"> Represents the document's expected sentiment labels. </param>
        /// <param name="predictedSentimentSpans"> Represents the document's predicted sentiment labels. </param>
        /// <returns> A new <see cref="Models.DocumentTextSentimentEvaluationResult"/> instance for mocking. </returns>
        public static DocumentTextSentimentEvaluationResult DocumentTextSentimentEvaluationResult(IEnumerable<DocumentSentimentLabelEvaluationResult> expectedSentimentSpans = null, IEnumerable<DocumentSentimentLabelEvaluationResult> predictedSentimentSpans = null)
        {
            expectedSentimentSpans ??= new List<DocumentSentimentLabelEvaluationResult>();
            predictedSentimentSpans ??= new List<DocumentSentimentLabelEvaluationResult>();

            return new DocumentTextSentimentEvaluationResult(expectedSentimentSpans?.ToList(), predictedSentimentSpans?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DocumentSentimentLabelEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the sentiment category. </param>
        /// <param name="offset"> Represents the sentiment offset index relative to the original text. </param>
        /// <param name="length"> Represents the sentiment length. </param>
        /// <returns> A new <see cref="Models.DocumentSentimentLabelEvaluationResult"/> instance for mocking. </returns>
        public static DocumentSentimentLabelEvaluationResult DocumentSentimentLabelEvaluationResult(TextAuthoringSentiment category = default, int offset = default, int length = default)
        {
            return new DocumentSentimentLabelEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringEvaluationSummary"/>. </summary>
        /// <param name="projectKind"> Represents the project type that the evaluation ran on. </param>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <returns> A new <see cref="Models.TextAuthoringEvaluationSummary"/> instance for mocking. </returns>
        public static TextAuthoringEvaluationSummary TextAuthoringEvaluationSummary(string projectKind = null, TextAuthoringEvaluationDetails evaluationOptions = null)
        {
            return new UnknownTextAuthoringEvaluationSummary(projectKind == null ? default : new TextAuthoringProjectKind(projectKind), evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomEntityRecognitionEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customEntityRecognitionEvaluation"> Contains the data related to extraction evaluation. </param>
        /// <returns> A new <see cref="Models.CustomEntityRecognitionEvaluationSummary"/> instance for mocking. </returns>
        public static CustomEntityRecognitionEvaluationSummary CustomEntityRecognitionEvaluationSummary(TextAuthoringEvaluationDetails evaluationOptions = null, EntityRecognitionEvaluationSummary customEntityRecognitionEvaluation = null)
        {
            return new CustomEntityRecognitionEvaluationSummary(TextAuthoringProjectKind.CustomEntityRecognition, evaluationOptions, serializedAdditionalRawData: null, customEntityRecognitionEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EntityRecognitionEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two entities (the two entities can be the same). The matrix is between the entity that was labelled and the entity that was predicted. </param>
        /// <param name="entities"> Represents the entities evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.EntityRecognitionEvaluationSummary"/> instance for mocking. </returns>
        public static EntityRecognitionEvaluationSummary EntityRecognitionEvaluationSummary(IReadOnlyDictionary<string, TextAuthoringConfusionMatrixRow> confusionMatrix = null, IReadOnlyDictionary<string, TextAuthoringEntityEvaluationSummary> entities = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            confusionMatrix ??= new Dictionary<string, TextAuthoringConfusionMatrixRow>();
            entities ??= new Dictionary<string, TextAuthoringEntityEvaluationSummary>();

            return new EntityRecognitionEvaluationSummary(
                confusionMatrix,
                entities,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringConfusionMatrixRow"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.TextAuthoringConfusionMatrixRow"/> instance for mocking. </returns>
        public static TextAuthoringConfusionMatrixRow TextAuthoringConfusionMatrixRow(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TextAuthoringConfusionMatrixRow(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringConfusionMatrixCell"/>. </summary>
        /// <param name="normalizedValue"> Represents normalized value in percentages. </param>
        /// <param name="rawValue"> Represents raw value. </param>
        /// <returns> A new <see cref="Models.TextAuthoringConfusionMatrixCell"/> instance for mocking. </returns>
        public static TextAuthoringConfusionMatrixCell TextAuthoringConfusionMatrixCell(float normalizedValue = default, float rawValue = default)
        {
            return new TextAuthoringConfusionMatrixCell(normalizedValue, rawValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringEntityEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.TextAuthoringEntityEvaluationSummary"/> instance for mocking. </returns>
        public static TextAuthoringEntityEvaluationSummary TextAuthoringEntityEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new TextAuthoringEntityEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomHealthcareEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customHealthcareEvaluation"> Contains the data related to health care evaluation. </param>
        /// <returns> A new <see cref="Models.CustomHealthcareEvaluationSummary"/> instance for mocking. </returns>
        public static CustomHealthcareEvaluationSummary CustomHealthcareEvaluationSummary(TextAuthoringEvaluationDetails evaluationOptions = null, EntityRecognitionEvaluationSummary customHealthcareEvaluation = null)
        {
            return new CustomHealthcareEvaluationSummary(TextAuthoringProjectKind.CustomHealthcare, evaluationOptions, serializedAdditionalRawData: null, customHealthcareEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomMultiLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customMultiLabelClassificationEvaluation"> Contains the data related to multi label classification evaluation. </param>
        /// <returns> A new <see cref="Models.CustomMultiLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static CustomMultiLabelClassificationEvaluationSummary CustomMultiLabelClassificationEvaluationSummary(TextAuthoringEvaluationDetails evaluationOptions = null, MultiLabelClassificationEvaluationSummary customMultiLabelClassificationEvaluation = null)
        {
            return new CustomMultiLabelClassificationEvaluationSummary(TextAuthoringProjectKind.CustomMultiLabelClassification, evaluationOptions, serializedAdditionalRawData: null, customMultiLabelClassificationEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultiLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="classes"> Represents the classes evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.MultiLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static MultiLabelClassificationEvaluationSummary MultiLabelClassificationEvaluationSummary(IReadOnlyDictionary<string, MultiLabelClassEvaluationSummary> classes = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            classes ??= new Dictionary<string, MultiLabelClassEvaluationSummary>();

            return new MultiLabelClassificationEvaluationSummary(
                classes,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultiLabelClassEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.MultiLabelClassEvaluationSummary"/> instance for mocking. </returns>
        public static MultiLabelClassEvaluationSummary MultiLabelClassEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new MultiLabelClassEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomSingleLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customSingleLabelClassificationEvaluation"> Contains the data related to single label classification evaluation. </param>
        /// <returns> A new <see cref="Models.CustomSingleLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static CustomSingleLabelClassificationEvaluationSummary CustomSingleLabelClassificationEvaluationSummary(TextAuthoringEvaluationDetails evaluationOptions = null, SingleLabelClassificationEvaluationSummary customSingleLabelClassificationEvaluation = null)
        {
            return new CustomSingleLabelClassificationEvaluationSummary(TextAuthoringProjectKind.CustomSingleLabelClassification, evaluationOptions, serializedAdditionalRawData: null, customSingleLabelClassificationEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SingleLabelClassificationEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two classes (the two classes can be the same). The matrix is between the class that was labelled and the class that was predicted. </param>
        /// <param name="classes"> Represents the classes evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.SingleLabelClassificationEvaluationSummary"/> instance for mocking. </returns>
        public static SingleLabelClassificationEvaluationSummary SingleLabelClassificationEvaluationSummary(IReadOnlyDictionary<string, TextAuthoringConfusionMatrixRow> confusionMatrix = null, IReadOnlyDictionary<string, SingleLabelClassEvaluationSummary> classes = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            confusionMatrix ??= new Dictionary<string, TextAuthoringConfusionMatrixRow>();
            classes ??= new Dictionary<string, SingleLabelClassEvaluationSummary>();

            return new SingleLabelClassificationEvaluationSummary(
                confusionMatrix,
                classes,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SingleLabelClassEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.SingleLabelClassEvaluationSummary"/> instance for mocking. </returns>
        public static SingleLabelClassEvaluationSummary SingleLabelClassEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new SingleLabelClassEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomTextSentimentEvaluationSummary"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="customTextSentimentEvaluation"> Contains the data related to custom sentiment evaluation. </param>
        /// <returns> A new <see cref="Models.CustomTextSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static CustomTextSentimentEvaluationSummary CustomTextSentimentEvaluationSummary(TextAuthoringEvaluationDetails evaluationOptions = null, TextSentimentEvaluationSummary customTextSentimentEvaluation = null)
        {
            return new CustomTextSentimentEvaluationSummary(TextAuthoringProjectKind.CustomTextSentiment, evaluationOptions, serializedAdditionalRawData: null, customTextSentimentEvaluation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextSentimentEvaluationSummary"/>. </summary>
        /// <param name="spanSentimentsEvaluation"> Represents evaluation of span level sentiments. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.TextSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static TextSentimentEvaluationSummary TextSentimentEvaluationSummary(SpanSentimentEvaluationSummary spanSentimentsEvaluation = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            return new TextSentimentEvaluationSummary(
                spanSentimentsEvaluation,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpanSentimentEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix"> Represents the confusion matrix between two sentiments (the two sentiments can be the same). The matrix is between the sentiment that was labelled and the sentiment that was predicted. </param>
        /// <param name="sentiments"> Represents the sentiment evaluation. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision"> Represents the micro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microRecall"> Represents the micro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision"> Represents the macro precision. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroRecall"> Represents the macro recall. Expected value is a float between 0 and 1 inclusive. </param>
        /// <returns> A new <see cref="Models.SpanSentimentEvaluationSummary"/> instance for mocking. </returns>
        public static SpanSentimentEvaluationSummary SpanSentimentEvaluationSummary(IReadOnlyDictionary<string, TextAuthoringConfusionMatrixRow> confusionMatrix = null, IReadOnlyDictionary<string, SentimentEvaluationSummary> sentiments = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            confusionMatrix ??= new Dictionary<string, TextAuthoringConfusionMatrixRow>();
            sentiments ??= new Dictionary<string, SentimentEvaluationSummary>();

            return new SpanSentimentEvaluationSummary(
                confusionMatrix,
                sentiments,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SentimentEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.SentimentEvaluationSummary"/> instance for mocking. </returns>
        public static SentimentEvaluationSummary SentimentEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new SentimentEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringDeploymentOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringDeploymentOperationState"/> instance for mocking. </returns>
        public static TextAuthoringDeploymentOperationState TextAuthoringDeploymentOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringDeploymentOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringDeploymentDeleteFromResourcesOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringDeploymentDeleteFromResourcesOperationState"/> instance for mocking. </returns>
        public static TextAuthoringDeploymentDeleteFromResourcesOperationState TextAuthoringDeploymentDeleteFromResourcesOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringDeploymentDeleteFromResourcesOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringSwapDeploymentsOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringSwapDeploymentsOperationState"/> instance for mocking. </returns>
        public static TextAuthoringSwapDeploymentsOperationState TextAuthoringSwapDeploymentsOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringSwapDeploymentsOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringAssignDeploymentResourcesOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringAssignDeploymentResourcesOperationState"/> instance for mocking. </returns>
        public static TextAuthoringAssignDeploymentResourcesOperationState TextAuthoringAssignDeploymentResourcesOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringAssignDeploymentResourcesOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringUnassignDeploymentResourcesOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringUnassignDeploymentResourcesOperationState"/> instance for mocking. </returns>
        public static TextAuthoringUnassignDeploymentResourcesOperationState TextAuthoringUnassignDeploymentResourcesOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringUnassignDeploymentResourcesOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringCreateDeploymentDetails"/>. </summary>
        /// <param name="trainedModelLabel"> Represents the trained model label. </param>
        /// <param name="assignedResourceIds"> Represents the resource IDs to be assigned to the deployment. If provided, the deployment will be rolled out to the resources provided here as well as the original resource in which the project is created. </param>
        /// <returns> A new <see cref="Models.TextAuthoringCreateDeploymentDetails"/> instance for mocking. </returns>
        public static TextAuthoringCreateDeploymentDetails TextAuthoringCreateDeploymentDetails(string trainedModelLabel = null, IEnumerable<string> assignedResourceIds = null)
        {
            assignedResourceIds ??= new List<string>();

            return new TextAuthoringCreateDeploymentDetails(trainedModelLabel, assignedResourceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringImportProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringImportProjectOperationState"/> instance for mocking. </returns>
        public static TextAuthoringImportProjectOperationState TextAuthoringImportProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringImportProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringExportProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="resultUrl"> The URL to use in order to download the exported project. </param>
        /// <returns> A new <see cref="Models.TextAuthoringExportProjectOperationState"/> instance for mocking. </returns>
        public static TextAuthoringExportProjectOperationState TextAuthoringExportProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null, string resultUrl = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringExportProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                resultUrl,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringCreateProjectDetails"/>. </summary>
        /// <param name="projectKind"> The project kind. </param>
        /// <param name="storageInputContainerName"> The storage container name. </param>
        /// <param name="settings"> The project settings. </param>
        /// <param name="projectName"> The new project name. </param>
        /// <param name="multilingual"> Whether the project would be used for multiple languages or not. </param>
        /// <param name="description"> The project description. </param>
        /// <param name="language"> The project language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <returns> A new <see cref="Models.TextAuthoringCreateProjectDetails"/> instance for mocking. </returns>
        public static TextAuthoringCreateProjectDetails TextAuthoringCreateProjectDetails(TextAuthoringProjectKind projectKind = default, string storageInputContainerName = null, TextAuthoringProjectSettings settings = null, string projectName = null, bool? multilingual = null, string description = null, string language = null)
        {
            return new TextAuthoringCreateProjectDetails(
                projectKind,
                storageInputContainerName,
                settings,
                projectName,
                multilingual,
                description,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringProjectDeletionOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringProjectDeletionOperationState"/> instance for mocking. </returns>
        public static TextAuthoringProjectDeletionOperationState TextAuthoringProjectDeletionOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringProjectDeletionOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringCopyProjectOperationState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdOn"> The creation date time of the job. </param>
        /// <param name="lastUpdatedOn"> The last date time the job was updated. </param>
        /// <param name="expiresOn"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.TextAuthoringCopyProjectOperationState"/> instance for mocking. </returns>
        public static TextAuthoringCopyProjectOperationState TextAuthoringCopyProjectOperationState(string jobId = null, DateTimeOffset createdOn = default, DateTimeOffset lastUpdatedOn = default, DateTimeOffset? expiresOn = null, TextAuthoringOperationStatus status = default, IEnumerable<ResponseError> warnings = null, IEnumerable<ResponseError> errors = null)
        {
            warnings ??= new List<ResponseError>();
            errors ??= new List<ResponseError>();

            return new TextAuthoringCopyProjectOperationState(
                jobId,
                createdOn,
                lastUpdatedOn,
                expiresOn,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringExportedProject"/>. </summary>
        /// <param name="projectFileVersion"> The version of the exported file. </param>
        /// <param name="stringIndexType"> Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets. </param>
        /// <param name="metadata"> Represents the project metadata. </param>
        /// <param name="assets">
        /// Represents the project assets.
        /// Please note <see cref="TextAuthoringExportedProjectAsset"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExportedCustomAbstractiveSummarizationProjectAsset"/>, <see cref="ExportedCustomEntityRecognitionProjectAsset"/>, <see cref="ExportedCustomHealthcareProjectAsset"/>, <see cref="ExportedCustomMultiLabelClassificationProjectAsset"/>, <see cref="ExportedCustomSingleLabelClassificationProjectAsset"/> and <see cref="CustomTextSentimentProjectAssets"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TextAuthoringExportedProject"/> instance for mocking. </returns>
        public static TextAuthoringExportedProject TextAuthoringExportedProject(string projectFileVersion = null, StringIndexType stringIndexType = default, TextAuthoringCreateProjectDetails metadata = null, TextAuthoringExportedProjectAsset assets = null)
        {
            return new TextAuthoringExportedProject(projectFileVersion, stringIndexType, metadata, assets, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportedCustomAbstractiveSummarizationDocument"/>. </summary>
        /// <param name="summaryLocation"> Represents the summary file location in the blob store container associated with the project. </param>
        /// <param name="location"> The location of the document in the storage. </param>
        /// <param name="language"> Represents the document language. This is BCP-47 representation of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. </param>
        /// <param name="dataset"> The dataset for this document. Allowed values are 'Train' and 'Test'. </param>
        /// <returns> A new <see cref="Models.ExportedCustomAbstractiveSummarizationDocument"/> instance for mocking. </returns>
        public static ExportedCustomAbstractiveSummarizationDocument ExportedCustomAbstractiveSummarizationDocument(string summaryLocation = null, string location = null, string language = null, string dataset = null)
        {
            return new ExportedCustomAbstractiveSummarizationDocument(summaryLocation, location, language, dataset, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TextAuthoringTrainingJobDetails"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="evaluationOptions"> Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20. </param>
        /// <param name="dataGenerationSettings"> Represents the settings for using data generation as part of training a custom model. </param>
        /// <returns> A new <see cref="Models.TextAuthoringTrainingJobDetails"/> instance for mocking. </returns>
        public static TextAuthoringTrainingJobDetails TextAuthoringTrainingJobDetails(string modelLabel = null, string trainingConfigVersion = null, TextAuthoringEvaluationDetails evaluationOptions = null, DataGenerationSetting dataGenerationSettings = null)
        {
            return new TextAuthoringTrainingJobDetails(modelLabel, trainingConfigVersion, evaluationOptions, dataGenerationSettings, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataGenerationConnectionInfo"/>. </summary>
        /// <param name="kind"> Connection type for data generation settings. Currently only supports Azure Open AI. </param>
        /// <param name="resourceId"> Resource ID for the data generation resource. Looks something like "/subscriptions/&lt;SUBSCRIPTION-ID-GUID&gt;/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.CognitiveServices/accounts/&lt;AOAI-ACCOUNT-NAME&gt;". </param>
        /// <param name="deploymentName"> Deployment name of model to be used for synthetic data generation. </param>
        /// <returns> A new <see cref="Models.DataGenerationConnectionInfo"/> instance for mocking. </returns>
        public static DataGenerationConnectionInfo DataGenerationConnectionInfo(DataGenerationConnectionInfoKind kind = default, string resourceId = null, string deploymentName = null)
        {
            return new DataGenerationConnectionInfo(kind, resourceId, deploymentName, serializedAdditionalRawData: null);
        }
    }
}
