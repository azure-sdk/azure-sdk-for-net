// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Documents.Samples
{
    public partial class Samples_AnalyzeDocumentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_SuccessfulAnalyzeDocumentsJobStatusTaskStatusRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_SuccessfulAnalyzeDocumentsJobStatusTaskStatusRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_SuccessfulAnalyzeDocumentsJobStatusTaskStatusRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsOperationState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_SuccessfulAnalyzeDocumentsJobStatusTaskStatusRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsOperationState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_SuccessfulAnalyzeDocumentsJobsTaskSubmitRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Redact PII from documents example",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
source = new
{
location = "https://myblob.blob.core.windows.net/Container/document.txt",
kind = "AzureBlob",
},
target = new
{
location = "https://myblob.blob.core.windows.net/Container",
kind = "AzureBlob",
},
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
taskName = "Redact PII Task 1",
parameters = new
{
redactionPolicy = new
{
policyKind = "entityMask",
},
piiCategories = new object[]
{
"Person",
"Organization"
},
},
}
            },
            });
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_SuccessfulAnalyzeDocumentsJobsTaskSubmitRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Redact PII from documents example",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "1",
language = "en",
source = new
{
location = "https://myblob.blob.core.windows.net/Container/document.txt",
kind = "AzureBlob",
},
target = new
{
location = "https://myblob.blob.core.windows.net/Container",
kind = "AzureBlob",
},
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
taskName = "Redact PII Task 1",
parameters = new
{
redactionPolicy = new
{
policyKind = "entityMask",
},
piiCategories = new object[]
{
"Person",
"Organization"
},
},
}
            },
            });
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_SuccessfulAnalyzeDocumentsJobsTaskSubmitRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
            {
                Documents = {new MultiLanguageInput("1", new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container/document.txt"), new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container"))
{
Language = "en",
}},
            }, new AnalyzeDocumentsOperationAction[]
            {
new PiiEntityRecognitionOperationAction
{
Parameters = new PiiActionContent
{
PiiCategories = {PiiCategory.Person, PiiCategory.Organization},
RedactionPolicy = new EntityMaskPolicy(),
},
Name = "Redact PII Task 1",
}
            })
            {
                DisplayName = "Redact PII from documents example",
            };
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_SuccessfulAnalyzeDocumentsJobsTaskSubmitRequest_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
            {
                Documents = {new MultiLanguageInput("1", new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container/document.txt"), new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container"))
{
Language = "en",
}},
            }, new AnalyzeDocumentsOperationAction[]
            {
new PiiEntityRecognitionOperationAction
{
Parameters = new PiiActionContent
{
PiiCategories = {PiiCategory.Person, PiiCategory.Organization},
RedactionPolicy = new EntityMaskPolicy(),
},
Name = "Redact PII Task 1",
}
            })
            {
                DisplayName = "Redact PII from documents example",
            };
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_SuccessfulAnalyzeDocumentsJobsCancelRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_SuccessfulAnalyzeDocumentsJobsCancelRequest_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
        }
    }
}
