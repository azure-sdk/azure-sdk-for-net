// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Documents.Samples
{
    public partial class Samples_AnalyzeDocumentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsJobState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsJobState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsJobState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocumentsJobState_GetAnalyzeDocumentsJobStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Response<AnalyzeDocumentsJobState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
}
            },
            });
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new object(),
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
}
            },
            });
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput(), new AnalyzeDocumentsOperationAction[]
            {
new PiiLROTask()
            });
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput(), new AnalyzeDocumentsOperationAction[]
            {
new PiiLROTask()
            });
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
source = new
{
kind = "AzureBlob",
location = "<location>",
managedIdentityClientId = "<managedIdentityClientId>",
},
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
parameters = new
{
loggingOptOut = true,
modelVersion = "<modelVersion>",
domain = "phi",
piiCategories = new object[]
{
"ABARoutingNumber"
},
stringIndexType = "TextElements_v8",
excludePiiCategories = new object[]
{
"ABARoutingNumber"
},
redactionPolicy = new
{
policyKind = "characterMask",
redactionCharacter = "!",
},
excludeExtractionData = true,
},
taskName = "<taskName>",
}
            },
                cancelAfter = 123.45F,
            });
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    documents = new object[]
            {
new
{
id = "<id>",
source = new
{
kind = "AzureBlob",
location = "<location>",
managedIdentityClientId = "<managedIdentityClientId>",
},
language = "<language>",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "PiiEntityRecognition",
parameters = new
{
loggingOptOut = true,
modelVersion = "<modelVersion>",
domain = "phi",
piiCategories = new object[]
{
"ABARoutingNumber"
},
stringIndexType = "TextElements_v8",
excludePiiCategories = new object[]
{
"ABARoutingNumber"
},
redactionPolicy = new
{
policyKind = "characterMask",
redactionCharacter = "!",
},
excludeExtractionData = true,
},
taskName = "<taskName>",
}
            },
                cancelAfter = 123.45F,
            });
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
            {
                Documents = {new MultiLanguageInput("<id>", new AzureBlobDocumentLocation("<location>")
{
ManagedIdentityClientId = "<managedIdentityClientId>",
}, default)
{
Language = "<language>",
}},
            }, new AnalyzeDocumentsOperationAction[]
            {
new PiiLROTask
{
Parameters = new PiiActionContent
{
LoggingOptOut = true,
ModelVersion = "<modelVersion>",
Domain = PiiDomain.Phi,
PiiCategories = {PiiCategory.AbaRoutingNumber},
StringIndexType = StringIndexType.TextElementsV8,
ExcludePiiCategories = {PiiCategoriesExclude.AbaRoutingNumber},
RedactionPolicy = new CharacterMaskPolicy
{
RedactionCharacter = RedactionCharacter.ExclamationPoint,
},
ExcludeExtractionData = true,
},
Name = "<taskName>",
}
            })
            {
                DisplayName = "<displayName>",
                CancelAfter = 123.45F,
            };
            Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsSubmitOperation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
            {
                Documents = {new MultiLanguageInput("<id>", new AzureBlobDocumentLocation("<location>")
{
ManagedIdentityClientId = "<managedIdentityClientId>",
}, default)
{
Language = "<language>",
}},
            }, new AnalyzeDocumentsOperationAction[]
            {
new PiiLROTask
{
Parameters = new PiiActionContent
{
LoggingOptOut = true,
ModelVersion = "<modelVersion>",
Domain = PiiDomain.Phi,
PiiCategories = {PiiCategory.AbaRoutingNumber},
StringIndexType = StringIndexType.TextElementsV8,
ExcludePiiCategories = {PiiCategoriesExclude.AbaRoutingNumber},
RedactionPolicy = new CharacterMaskPolicy
{
RedactionCharacter = RedactionCharacter.ExclamationPoint,
},
ExcludeExtractionData = true,
},
Name = "<taskName>",
}
            })
            {
                DisplayName = "<displayName>",
                CancelAfter = 123.45F,
            };
            Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeDocuments_AnalyzeDocumentsCancelOperation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

            Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }
    }
}
