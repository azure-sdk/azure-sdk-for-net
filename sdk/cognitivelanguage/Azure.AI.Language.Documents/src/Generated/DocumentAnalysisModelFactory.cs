// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Documents
{
    /// <summary> Model factory for models. </summary>
    public static partial class DocumentAnalysisModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsOperationState"/>. </summary>
        /// <param name="displayName"> display name. </param>
        /// <param name="createdAt"> Date and time job created. </param>
        /// <param name="expiresOn"> Date and time job expires. </param>
        /// <param name="jobId"> job ID. </param>
        /// <param name="lastUpdatedAt"> last updated date and time. </param>
        /// <param name="status"> status. </param>
        /// <param name="errors"> errors. </param>
        /// <param name="nextLink"> next link. </param>
        /// <param name="actions"> List of tasks. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsOperationState"/> instance for mocking. </returns>
        public static AnalyzeDocumentsOperationState AnalyzeDocumentsOperationState(string displayName = null, DateTimeOffset createdAt = default, DateTimeOffset? expiresOn = null, Guid jobId = default, DateTimeOffset lastUpdatedAt = default, DocumentActionState status = default, IEnumerable<AnalyzeDocumentsError> errors = null, string nextLink = null, DocumentActions actions = null, RequestStatistics statistics = null)
        {
            errors ??= new List<AnalyzeDocumentsError>();

            return new AnalyzeDocumentsOperationState(
                displayName,
                createdAt,
                expiresOn,
                jobId,
                lastUpdatedAt,
                status,
                errors?.ToList(),
                nextLink,
                actions,
                statistics,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsError"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <param name="target"> The target of the error. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsError"/> instance for mocking. </returns>
        public static AnalyzeDocumentsError AnalyzeDocumentsError(AnalyzeDocumentsErrorCode code = default, string message = null, string target = null, IEnumerable<AnalyzeDocumentsError> details = null, InnerErrorModel innererror = null)
        {
            details ??= new List<AnalyzeDocumentsError>();

            return new AnalyzeDocumentsError(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.InnerErrorModel"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="innererror"> An object containing more specific information than the current object about the error. </param>
        /// <returns> A new <see cref="Documents.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(
                code,
                message,
                details,
                target,
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.DocumentActions"/>. </summary>
        /// <param name="completed"> Count of completed tasks. </param>
        /// <param name="failed"> Count of failed tasks. </param>
        /// <param name="inProgress"> Count of inprogress tasks. </param>
        /// <param name="total"> Count of total tasks. </param>
        /// <param name="items">
        /// Enumerable of Analyze documents job results.
        /// Please note <see cref="Documents.AnalyzeDocumentsOperationResult"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Documents.AbstractiveSummarizationOperationResult"/>, <see cref="Documents.ExtractiveSummarizationOperationResult"/> and <see cref="Documents.PiiEntityRecognitionOperationResult"/>.
        /// </param>
        /// <returns> A new <see cref="Documents.DocumentActions"/> instance for mocking. </returns>
        public static DocumentActions DocumentActions(int completed = default, int failed = default, int inProgress = default, int total = default, IEnumerable<AnalyzeDocumentsOperationResult> items = null)
        {
            items ??= new List<AnalyzeDocumentsOperationResult>();

            return new DocumentActions(
                completed,
                failed,
                inProgress,
                total,
                items?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="kind"> Kind of the task. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsOperationResult"/> instance for mocking. </returns>
        public static AnalyzeDocumentsOperationResult AnalyzeDocumentsOperationResult(DateTimeOffset lastUpdateDateTime = default, DocumentActionState status = default, string taskName = null, string kind = null)
        {
            return new UnknownAnalyzeDocumentsOperationResult(lastUpdateDateTime, status, taskName, kind == null ? default : new AnalyzeDocumentsOperationResultsKind(kind), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.PiiEntityRecognitionOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"> The list of pii document results. </param>
        /// <returns> A new <see cref="Documents.PiiEntityRecognitionOperationResult"/> instance for mocking. </returns>
        public static PiiEntityRecognitionOperationResult PiiEntityRecognitionOperationResult(DateTimeOffset lastUpdateDateTime = default, DocumentActionState status = default, string taskName = null, AnalyzeDocumentsResult results = null)
        {
            return new PiiEntityRecognitionOperationResult(
                lastUpdateDateTime,
                status,
                taskName,
                AnalyzeDocumentsOperationResultsKind.PiiEntityRecognitionOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsResult"/>. </summary>
        /// <param name="errors"> Errors by document id. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the request payload. </param>
        /// <param name="modelVersion"> This field indicates which model is used for analysis. </param>
        /// <param name="documents"> Response by document. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsResult"/> instance for mocking. </returns>
        public static AnalyzeDocumentsResult AnalyzeDocumentsResult(IEnumerable<AnalyzeDocumentsDocumentError> errors = null, RequestStatistics statistics = null, string modelVersion = null, IEnumerable<DocumentAnalysisDocumentResult> documents = null)
        {
            errors ??= new List<AnalyzeDocumentsDocumentError>();
            documents ??= new List<DocumentAnalysisDocumentResult>();

            return new AnalyzeDocumentsResult(errors?.ToList(), statistics, modelVersion, documents?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsDocumentError"/>. </summary>
        /// <param name="id"> Document Id. </param>
        /// <param name="error"> Document Error. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsDocumentError"/> instance for mocking. </returns>
        public static AnalyzeDocumentsDocumentError AnalyzeDocumentsDocumentError(string id = null, AnalyzeDocumentsError error = null)
        {
            return new AnalyzeDocumentsDocumentError(id, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.RequestStatistics"/>. </summary>
        /// <param name="documentsCount"> Number of documents submitted in the request. </param>
        /// <param name="validDocumentsCount"> Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="erroneousDocumentsCount"> Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. </param>
        /// <param name="transactionsCount"> Number of transactions for the request. </param>
        /// <returns> A new <see cref="Documents.RequestStatistics"/> instance for mocking. </returns>
        public static RequestStatistics RequestStatistics(int documentsCount = default, int validDocumentsCount = default, int erroneousDocumentsCount = default, long transactionsCount = default)
        {
            return new RequestStatistics(documentsCount, validDocumentsCount, erroneousDocumentsCount, transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.DocumentAnalysisDocumentResult"/>. </summary>
        /// <param name="id"> Unique, non-empty document identifier. </param>
        /// <param name="warnings"> Warnings encountered while processing document. </param>
        /// <param name="statistics"> if showStats=true was specified in the request this field will contain information about the document payload. </param>
        /// <param name="source">
        /// Location of the input document.
        /// Please note <see cref="DocumentLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobDocumentLocation"/>.
        /// </param>
        /// <param name="target">
        /// Array of document results generated after the analysis.
        /// Please note <see cref="DocumentLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobDocumentLocation"/>.
        /// </param>
        /// <returns> A new <see cref="Documents.DocumentAnalysisDocumentResult"/> instance for mocking. </returns>
        public static DocumentAnalysisDocumentResult DocumentAnalysisDocumentResult(string id = null, IEnumerable<DocumentWarning> warnings = null, DocumentStatistics statistics = null, DocumentLocation source = null, IEnumerable<DocumentLocation> target = null)
        {
            warnings ??= new List<DocumentWarning>();
            target ??= new List<DocumentLocation>();

            return new DocumentAnalysisDocumentResult(
                id,
                warnings?.ToList(),
                statistics,
                source,
                target?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.DocumentWarning"/>. </summary>
        /// <param name="code"> Warning code. </param>
        /// <param name="message"> Warning message. </param>
        /// <param name="targetRef"> A JSON pointer reference indicating the target object. </param>
        /// <returns> A new <see cref="Documents.DocumentWarning"/> instance for mocking. </returns>
        public static DocumentWarning DocumentWarning(WarningCode code = default, string message = null, string targetRef = null)
        {
            return new DocumentWarning(code, message, targetRef, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.DocumentStatistics"/>. </summary>
        /// <param name="charactersCount"> Number of documents elements recognized in the document. </param>
        /// <param name="transactionsCount"> Number of transactions for the document. </param>
        /// <returns> A new <see cref="Documents.DocumentStatistics"/> instance for mocking. </returns>
        public static DocumentStatistics DocumentStatistics(int charactersCount = default, int transactionsCount = default)
        {
            return new DocumentStatistics(charactersCount, transactionsCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.ExtractiveSummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"> Results of the document task. </param>
        /// <returns> A new <see cref="Documents.ExtractiveSummarizationOperationResult"/> instance for mocking. </returns>
        public static ExtractiveSummarizationOperationResult ExtractiveSummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, DocumentActionState status = default, string taskName = null, AnalyzeDocumentsResult results = null)
        {
            return new ExtractiveSummarizationOperationResult(
                lastUpdateDateTime,
                status,
                taskName,
                AnalyzeDocumentsOperationResultsKind.ExtractiveSummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AbstractiveSummarizationOperationResult"/>. </summary>
        /// <param name="lastUpdateDateTime"> The last updated time in UTC for the task. </param>
        /// <param name="status"> The status of the task at the mentioned last update time. </param>
        /// <param name="taskName"> task name. </param>
        /// <param name="results"> Results of the task. </param>
        /// <returns> A new <see cref="Documents.AbstractiveSummarizationOperationResult"/> instance for mocking. </returns>
        public static AbstractiveSummarizationOperationResult AbstractiveSummarizationOperationResult(DateTimeOffset lastUpdateDateTime = default, DocumentActionState status = default, string taskName = null, AnalyzeDocumentsResult results = null)
        {
            return new AbstractiveSummarizationOperationResult(
                lastUpdateDateTime,
                status,
                taskName,
                AnalyzeDocumentsOperationResultsKind.AbstractiveSummarizationOperationResults,
                serializedAdditionalRawData: null,
                results);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AnalyzeDocumentsOperationInput"/>. </summary>
        /// <param name="displayName"> Name for the task. </param>
        /// <param name="documentsInput"> Contains the input to be analyzed. </param>
        /// <param name="actions">
        /// List of tasks to be performed as part of the LRO.
        /// Please note <see cref="AnalyzeDocumentsOperationAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Documents.AbstractiveSummarizationOperationAction"/>, <see cref="ExtractiveSummarizationOperationAction"/> and <see cref="PiiEntityRecognitionOperationAction"/>.
        /// </param>
        /// <param name="defaultLanguage"> Default language to use for records. </param>
        /// <returns> A new <see cref="Documents.AnalyzeDocumentsOperationInput"/> instance for mocking. </returns>
        public static AnalyzeDocumentsOperationInput AnalyzeDocumentsOperationInput(string displayName = null, MultiLanguageDocumentInput documentsInput = null, IEnumerable<AnalyzeDocumentsOperationAction> actions = null, string defaultLanguage = null)
        {
            actions ??= new List<AnalyzeDocumentsOperationAction>();

            return new AnalyzeDocumentsOperationInput(displayName, documentsInput, actions?.ToList(), defaultLanguage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.MultiLanguageInput"/>. </summary>
        /// <param name="id"> A unique, non-empty document identifier. </param>
        /// <param name="source">
        /// The location of the input document to process.
        /// Please note <see cref="DocumentLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobDocumentLocation"/>.
        /// </param>
        /// <param name="target">
        /// The location where the processed document will be stored.
        /// Please note <see cref="DocumentLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobDocumentLocation"/>.
        /// </param>
        /// <param name="language"> (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default. </param>
        /// <returns> A new <see cref="Documents.MultiLanguageInput"/> instance for mocking. </returns>
        public static MultiLanguageInput MultiLanguageInput(string id = null, DocumentLocation source = null, DocumentLocation target = null, string language = null)
        {
            return new MultiLanguageInput(id, source, target, language, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Documents.AbstractiveSummarizationOperationAction"/>. </summary>
        /// <param name="name"> task name. </param>
        /// <param name="actionContent"> Parameters for the Abstractive Summarization task. </param>
        /// <returns> A new <see cref="Documents.AbstractiveSummarizationOperationAction"/> instance for mocking. </returns>
        public static AbstractiveSummarizationOperationAction AbstractiveSummarizationOperationAction(string name = null, AbstractiveSummarizationActionContent actionContent = null)
        {
            return new AbstractiveSummarizationOperationAction(name, AnalyzeDocumentsOperationActionKind.AbstractiveSummarization, serializedAdditionalRawData: null, actionContent);
        }
    }
}
