<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAnalyzeDocumentsJobStatusAsync(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsJobState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsJobState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatus(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsJobState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetAnalyzeDocumentsJobStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsJobState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true, top: 1234, skip: 1234);
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatusAsync(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatus(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call GetAnalyzeDocumentsJobStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), true, 1234, 1234, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperationAsync(WaitUntil,AnalyzeDocumentsOperationInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput(), new AnalyzeDocumentsOperationAction[]
{
    new PiiLROTask()
});
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
{
    Documents = {new MultiLanguageInput("<id>", new AzureBlobDocumentLocation("<location>")
    {
        ManagedIdentityClientId = "<managedIdentityClientId>",
    }, default)
    {
        Language = "<language>",
    }},
}, new AnalyzeDocumentsOperationAction[]
{
    new PiiLROTask
    {
        Parameters = new PiiActionContent
        {
            LoggingOptOut = true,
            ModelVersion = "<modelVersion>",
            Domain = PiiDomain.Phi,
            PiiCategories = {PiiCategory.AbaRoutingNumber},
            StringIndexType = StringIndexType.TextElementsV8,
            ExcludePiiCategories = {PiiCategoriesExclude.AbaRoutingNumber},
            RedactionCharacter = RedactionCharacter.ExclamationPoint,
        },
        Name = "<taskName>",
    }
})
{
    DisplayName = "<displayName>",
    DefaultLanguage = "<defaultLanguage>",
};
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperation(WaitUntil,AnalyzeDocumentsOperationInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput(), new AnalyzeDocumentsOperationAction[]
{
    new PiiLROTask()
});
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code>
This sample shows how to call AnalyzeDocumentsSubmitOperation with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
{
    Documents = {new MultiLanguageInput("<id>", new AzureBlobDocumentLocation("<location>")
    {
        ManagedIdentityClientId = "<managedIdentityClientId>",
    }, default)
    {
        Language = "<language>",
    }},
}, new AnalyzeDocumentsOperationAction[]
{
    new PiiLROTask
    {
        Parameters = new PiiActionContent
        {
            LoggingOptOut = true,
            ModelVersion = "<modelVersion>",
            Domain = PiiDomain.Phi,
            PiiCategories = {PiiCategory.AbaRoutingNumber},
            StringIndexType = StringIndexType.TextElementsV8,
            ExcludePiiCategories = {PiiCategoriesExclude.AbaRoutingNumber},
            RedactionCharacter = RedactionCharacter.ExclamationPoint,
        },
        Name = "<taskName>",
    }
})
{
    DisplayName = "<displayName>",
    DefaultLanguage = "<defaultLanguage>",
};
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperationAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new object(),
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
        }
    },
});
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                source = new
                {
                    kind = "AzureBlob",
                    location = "<location>",
                    managedIdentityClientId = "<managedIdentityClientId>",
                },
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
            parameters = new
            {
                loggingOptOut = true,
                modelVersion = "<modelVersion>",
                domain = "phi",
                piiCategories = new object[]
                {
                    "ABARoutingNumber"
                },
                stringIndexType = "TextElements_v8",
                excludePiiCategories = new object[]
                {
                    "ABARoutingNumber"
                },
                redactionCharacter = "!",
            },
            taskName = "<taskName>",
        }
    },
    defaultLanguage = "<defaultLanguage>",
});
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperation(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new object(),
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
        }
    },
});
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
]]></code>
This sample shows how to call AnalyzeDocumentsSubmitOperation with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "<id>",
                source = new
                {
                    kind = "AzureBlob",
                    location = "<location>",
                    managedIdentityClientId = "<managedIdentityClientId>",
                },
                language = "<language>",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
            parameters = new
            {
                loggingOptOut = true,
                modelVersion = "<modelVersion>",
                domain = "phi",
                piiCategories = new object[]
                {
                    "ABARoutingNumber"
                },
                stringIndexType = "TextElements_v8",
                excludePiiCategories = new object[]
                {
                    "ABARoutingNumber"
                },
                redactionCharacter = "!",
            },
            taskName = "<taskName>",
        }
    },
    defaultLanguage = "<defaultLanguage>",
});
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsCancelOperationAsync(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsCancelOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeDocumentsCancelOperationAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsCancelOperation(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsCancelOperation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call AnalyzeDocumentsCancelOperation with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
  </members>
</doc>