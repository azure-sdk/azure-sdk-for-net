<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAnalyzeDocumentsJobStatusAsync(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsOperationState> response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatus(Guid,bool?,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatus.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response<AnalyzeDocumentsOperationState> response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatusAsync(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = await client.GetAnalyzeDocumentsJobStatusAsync(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="GetAnalyzeDocumentsJobStatus(Guid,bool?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetAnalyzeDocumentsJobStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Response response = client.GetAnalyzeDocumentsJobStatus(Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperationAsync(WaitUntil,AnalyzeDocumentsOperationInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
{
    Documents = {new MultiLanguageInput("1", new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container/document.txt"), new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container"))
    {
        Language = "en",
    }},
}, new AnalyzeDocumentsOperationAction[]
{
    new PiiEntityRecognitionOperationAction
    {
        Parameters = new PiiActionContent
        {
            PiiCategories = {PiiCategory.Person, PiiCategory.Organization},
            RedactionPolicy = new EntityMaskPolicy(),
        },
        Name = "Redact PII Task 1",
    }
})
{
    DisplayName = "Redact PII from documents example",
};
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperation(WaitUntil,AnalyzeDocumentsOperationInput,CancellationToken)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

AnalyzeDocumentsOperationInput analyzeDocumentOperationInput = new AnalyzeDocumentsOperationInput(new MultiLanguageDocumentInput
{
    Documents = {new MultiLanguageInput("1", new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container/document.txt"), new AzureBlobDocumentLocation("https://myblob.blob.core.windows.net/Container"))
    {
        Language = "en",
    }},
}, new AnalyzeDocumentsOperationAction[]
{
    new PiiEntityRecognitionOperationAction
    {
        Parameters = new PiiActionContent
        {
            PiiCategories = {PiiCategory.Person, PiiCategory.Organization},
            RedactionPolicy = new EntityMaskPolicy(),
        },
        Name = "Redact PII Task 1",
    }
})
{
    DisplayName = "Redact PII from documents example",
};
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, analyzeDocumentOperationInput);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperationAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Redact PII from documents example",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "1",
                language = "en",
                source = new
                {
                    location = "https://myblob.blob.core.windows.net/Container/document.txt",
                    kind = "AzureBlob",
                },
                target = new
                {
                    location = "https://myblob.blob.core.windows.net/Container",
                    kind = "AzureBlob",
                },
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
            taskName = "Redact PII Task 1",
            parameters = new
            {
                redactionPolicy = new
                {
                    policyKind = "entityMask",
                },
                piiCategories = new object[]
                {
                    "Person",
                    "Organization"
                },
            },
        }
    },
});
Operation operation = await client.AnalyzeDocumentsSubmitOperationAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsSubmitOperation(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsSubmitOperation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Redact PII from documents example",
    analysisInput = new
    {
        documents = new object[]
        {
            new
            {
                id = "1",
                language = "en",
                source = new
                {
                    location = "https://myblob.blob.core.windows.net/Container/document.txt",
                    kind = "AzureBlob",
                },
                target = new
                {
                    location = "https://myblob.blob.core.windows.net/Container",
                    kind = "AzureBlob",
                },
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "PiiEntityRecognition",
            taskName = "Redact PII Task 1",
            parameters = new
            {
                redactionPolicy = new
                {
                    policyKind = "entityMask",
                },
                piiCategories = new object[]
                {
                    "Person",
                    "Organization"
                },
            },
        }
    },
});
Operation operation = client.AnalyzeDocumentsSubmitOperation(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsCancelOperationAsync(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsCancelOperationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = await client.AnalyzeDocumentsCancelOperationAsync(WaitUntil.Completed, Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
]]></code></example>
    </member>
    <member name="AnalyzeDocumentsCancelOperation(WaitUntil,Guid,RequestContext)">
      <example>
This sample shows how to call AnalyzeDocumentsCancelOperation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnalyzeDocumentsClient client = new AnalyzeDocumentsClient(endpoint, credential);

Operation operation = client.AnalyzeDocumentsCancelOperation(WaitUntil.Completed, Guid.Parse("c0f2a446-05d9-48fc-ba8f-3ef4af8d0b18"));
]]></code></example>
    </member>
  </members>
</doc>