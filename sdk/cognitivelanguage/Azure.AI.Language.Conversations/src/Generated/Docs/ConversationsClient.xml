<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeConversationAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationAsync and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
});
Response response = await client.AnalyzeConversationAsync("<endpoint>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversationAsync with all parameters and request content and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "TextElements_v8",
        directTarget = "<directTarget>",
        targetProjectParameters = new
        {
            key = new
            {
                callingOptions = new
                {
                    language = "<language>",
                    verbose = true,
                    isLoggingEnabled = true,
                },
                targetProjectKind = "Conversation",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
});
Response response = await client.AnalyzeConversationAsync("<endpoint>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversation(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AnalyzeConversation and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
    },
    kind = "Conversation",
});
Response response = client.AnalyzeConversation("<endpoint>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code>
This sample shows how to call AnalyzeConversation with all parameters and request content and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversationItem = new
        {
            id = "<id>",
            participantId = "<participantId>",
            language = "<language>",
            modality = "transcript",
        },
    },
    parameters = new
    {
        projectName = "<projectName>",
        deploymentName = "<deploymentName>",
        verbose = true,
        isLoggingEnabled = true,
        stringIndexType = "TextElements_v8",
        directTarget = "<directTarget>",
        targetProjectParameters = new
        {
            key = new
            {
                callingOptions = new
                {
                    language = "<language>",
                    verbose = true,
                    isLoggingEnabled = true,
                },
                targetProjectKind = "Conversation",
                apiVersion = "<apiVersion>",
            },
        },
    },
    kind = "Conversation",
});
Response response = client.AnalyzeConversation("<endpoint>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="JobStatusAsync(string,string,bool?,RequestContext)">
      <example>
This sample shows how to call JobStatusAsync and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Response response = await client.JobStatusAsync("<endpoint>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call JobStatusAsync with all parameters and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Response response = await client.JobStatusAsync("<endpoint>", "<jobId>", showStats: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("nextlink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="JobStatus(string,string,bool?,RequestContext)">
      <example>
This sample shows how to call JobStatus and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Response response = client.JobStatus("<endpoint>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
]]></code>
This sample shows how to call JobStatus with all parameters and parse the result.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Response response = client.JobStatus("<endpoint>", "<jobId>", showStats: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("nextlink").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
]]></code></example>
    </member>
    <member name="SubmitJobAsync(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitJobAsync.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                conversationItems = new object[]
                {
                    new
                    {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalSummarizationTask",
        }
    },
});
Operation operation = await client.SubmitJobAsync(WaitUntil.Completed, "<endpoint>", content);
]]></code>
This sample shows how to call SubmitJobAsync with all parameters and request content.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                conversationItems = new object[]
                {
                    new
                    {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
                domain = "finance",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            parameters = new
            {
                summaryAspects = new object[]
                {
                    "issue"
                },
                sentenceCount = 1234,
                stringIndexType = "TextElements_v8",
            },
            kind = "ConversationalSummarizationTask",
            taskName = "<taskName>",
        }
    },
});
Operation operation = await client.SubmitJobAsync(WaitUntil.Completed, "<endpoint>", content);
]]></code></example>
    </member>
    <member name="SubmitJob(WaitUntil,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SubmitJob.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                conversationItems = new object[]
                {
                    new
                    {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            kind = "ConversationalSummarizationTask",
        }
    },
});
Operation operation = client.SubmitJob(WaitUntil.Completed, "<endpoint>", content);
]]></code>
This sample shows how to call SubmitJob with all parameters and request content.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "<displayName>",
    analysisInput = new
    {
        conversations = new object[]
        {
            new
            {
                conversationItems = new object[]
                {
                    new
                    {
                        text = "<text>",
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                    }
                },
                id = "<id>",
                language = "<language>",
                modality = "text",
                domain = "finance",
            }
        },
    },
    tasks = new object[]
    {
        new
        {
            parameters = new
            {
                summaryAspects = new object[]
                {
                    "issue"
                },
                sentenceCount = 1234,
                stringIndexType = "TextElements_v8",
            },
            kind = "ConversationalSummarizationTask",
            taskName = "<taskName>",
        }
    },
});
Operation operation = client.SubmitJob(WaitUntil.Completed, "<endpoint>", content);
]]></code></example>
    </member>
    <member name="CancelAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call CancelAsync.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Operation operation = await client.CancelAsync(WaitUntil.Completed, "<endpoint>", "<jobId>");
]]></code>
This sample shows how to call CancelAsync with all parameters.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Operation operation = await client.CancelAsync(WaitUntil.Completed, "<endpoint>", "<jobId>");
]]></code></example>
    </member>
    <member name="Cancel(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call Cancel.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Operation operation = client.Cancel(WaitUntil.Completed, "<endpoint>", "<jobId>");
]]></code>
This sample shows how to call Cancel with all parameters.
<code><![CDATA[
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ConversationsClient client = new ConversationsClient(credential);

Operation operation = client.Cancel(WaitUntil.Completed, "<endpoint>", "<jobId>");
]]></code></example>
    </member>
  </members>
</doc>