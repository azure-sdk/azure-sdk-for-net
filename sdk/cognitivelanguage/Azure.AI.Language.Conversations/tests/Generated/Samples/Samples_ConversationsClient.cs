// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Language.Conversations;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Samples
{
    public class Samples_ConversationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                },
                kind = "ConversationalTask",
            });
            Response response = client.AnalyzeConversation("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                },
                kind = "ConversationalTask",
            });
            Response response = await client.AnalyzeConversationAsync("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                    verbose = true,
                    isLoggingEnabled = true,
                    stringIndexType = "TextElements_v8",
                    directTarget = "<directTarget>",
                    targetProjectParameters = new
                    {
                        key = new
                        {
                            callingOptions = new
                            {
                                language = "<language>",
                                verbose = true,
                                isLoggingEnabled = true,
                            },
                            targetProjectKind = "ConversationParameters",
                            apiVersion = "<apiVersion>",
                        },
                    },
                },
                kind = "ConversationalTask",
            });
            Response response = client.AnalyzeConversation("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                    verbose = true,
                    isLoggingEnabled = true,
                    stringIndexType = "TextElements_v8",
                    directTarget = "<directTarget>",
                    targetProjectParameters = new
                    {
                        key = new
                        {
                            callingOptions = new
                            {
                                language = "<language>",
                                verbose = true,
                                isLoggingEnabled = true,
                            },
                            targetProjectKind = "ConversationParameters",
                            apiVersion = "<apiVersion>",
                        },
                    },
                },
                kind = "ConversationalTask",
            });
            Response response = await client.AnalyzeConversationAsync("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }
    }
}
