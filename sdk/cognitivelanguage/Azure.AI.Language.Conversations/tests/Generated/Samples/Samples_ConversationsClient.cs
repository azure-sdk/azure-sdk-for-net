// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Samples
{
    public partial class Samples_ConversationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversations_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        text = "<text>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                },
                kind = "Conversation",
            });
            Response response = client.AnalyzeConversations(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversations_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        text = "<text>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                },
                kind = "Conversation",
            });
            Response response = await client.AnalyzeConversationsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversations_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "customer",
                        text = "<text>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                    verbose = true,
                    isLoggingEnabled = true,
                    stringIndexType = "TextElements_v8",
                    directTarget = "<directTarget>",
                    targetProjectParameters = new
                    {
                        key = new
                        {
                            callingOptions = new
                            {
                                language = "<language>",
                                verbose = true,
                                isLoggingEnabled = true,
                            },
                            targetProjectKind = "Conversation",
                            apiVersion = "<apiVersion>",
                        },
                    },
                },
                kind = "Conversation",
            });
            Response response = client.AnalyzeConversations(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversations_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversationItem = new
                    {
                        id = "<id>",
                        participantId = "<participantId>",
                        language = "<language>",
                        modality = "transcript",
                        role = "customer",
                        text = "<text>",
                    },
                },
                parameters = new
                {
                    projectName = "<projectName>",
                    deploymentName = "<deploymentName>",
                    verbose = true,
                    isLoggingEnabled = true,
                    stringIndexType = "TextElements_v8",
                    directTarget = "<directTarget>",
                    targetProjectParameters = new
                    {
                        key = new
                        {
                            callingOptions = new
                            {
                                language = "<language>",
                                verbose = true,
                                isLoggingEnabled = true,
                            },
                            targetProjectKind = "Conversation",
                            apiVersion = "<apiVersion>",
                        },
                    },
                },
                kind = "Conversation",
            });
            Response response = await client.AnalyzeConversationsAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsJobStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Response response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsJobStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Response response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsJobStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Response response = client.AnalyzeConversationsJobStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsJobStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Response response = await client.AnalyzeConversationsJobStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsSubmitJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversations = new object[]
            {
new
{
conversationItems = new object[]
{
new
{
id = "<id>",
participantId = "<participantId>",
text = "<text>",
}
},
id = "<id>",
language = "<language>",
modality = "text",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "ConversationalSummarizationTask",
}
            },
            });
            Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsSubmitJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversations = new object[]
            {
new
{
conversationItems = new object[]
{
new
{
id = "<id>",
participantId = "<participantId>",
text = "<text>",
}
},
id = "<id>",
language = "<language>",
modality = "text",
}
            },
                },
                tasks = new object[]
            {
new
{
kind = "ConversationalSummarizationTask",
}
            },
            });
            Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsSubmitJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    conversations = new object[]
            {
new
{
conversationItems = new object[]
{
new
{
id = "<id>",
participantId = "<participantId>",
language = "<language>",
modality = "transcript",
role = "customer",
text = "<text>",
}
},
id = "<id>",
language = "<language>",
modality = "text",
domain = "finance",
}
            },
                },
                tasks = new object[]
            {
new
{
parameters = new
{
loggingOptOut = true,
modelVersion = "<modelVersion>",
sentenceCount = 1234,
stringIndexType = "TextElements_v8",
summaryAspects = new object[]
{
"issue"
},
},
taskName = "<taskName>",
kind = "ConversationalSummarizationTask",
}
            },
            });
            Operation operation = client.AnalyzeConversationsSubmitJob(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsSubmitJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    conversations = new object[]
            {
new
{
conversationItems = new object[]
{
new
{
id = "<id>",
participantId = "<participantId>",
language = "<language>",
modality = "transcript",
role = "customer",
text = "<text>",
}
},
id = "<id>",
language = "<language>",
modality = "text",
domain = "finance",
}
            },
                },
                tasks = new object[]
            {
new
{
parameters = new
{
loggingOptOut = true,
modelVersion = "<modelVersion>",
sentenceCount = 1234,
stringIndexType = "TextElements_v8",
summaryAspects = new object[]
{
"issue"
},
},
taskName = "<taskName>",
kind = "ConversationalSummarizationTask",
}
            },
            });
            Operation operation = await client.AnalyzeConversationsSubmitJobAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsCancelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Operation operation = client.AnalyzeConversationsCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsCancelJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Operation operation = await client.AnalyzeConversationsCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversationsCancelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Operation operation = client.AnalyzeConversationsCancelJob(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversationsCancelJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationsClient client = new ConversationsClient(endpoint, credential);

            Operation operation = await client.AnalyzeConversationsCancelJobAsync(WaitUntil.Completed, Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }
    }
}
