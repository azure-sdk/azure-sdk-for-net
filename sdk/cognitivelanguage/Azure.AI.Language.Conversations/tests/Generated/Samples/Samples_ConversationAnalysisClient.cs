// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Language.Conversations;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.Conversations.Samples
{
    public class Samples_ConversationAnalysisClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversations()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversations = new List<object>()
{
new
{
conversationItems = new List<object>()
{
new
{
text = "<text>",
id = "<id>",
participantId = "<participantId>",
}
},
id = "<id>",
language = "<language>",
modality = "TextConversation",
}
},
                },
                tasks = new List<object>()
{
new
{
kind = "AnalyzeConversationSummarizationTask",
taskName = "<taskName>",
}
},
            });
            Response response = client.AnalyzeConversations("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversations_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                analysisInput = new
                {
                    conversations = new List<object>()
{
new
{
conversationItems = new List<object>()
{
new
{
text = "<text>",
id = "<id>",
participantId = "<participantId>",
}
},
id = "<id>",
language = "<language>",
modality = "TextConversation",
}
},
                },
                tasks = new List<object>()
{
new
{
kind = "AnalyzeConversationSummarizationTask",
taskName = "<taskName>",
}
},
            });
            Response response = await client.AnalyzeConversationsAsync("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversations_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    conversations = new List<object>()
{
new
{
conversationItems = new List<object>()
{
new
{
text = "<text>",
id = "<id>",
participantId = "<participantId>",
language = "<language>",
modality = "transcript",
}
},
id = "<id>",
language = "<language>",
modality = "TextConversation",
domain = "finance",
}
},
                },
                tasks = new List<object>()
{
new
{
parameters = new
{
summaryAspects = new List<object>()
{
"issue"
},
sentenceCount = 1234,
stringIndexType = "TextElements_v8",
},
kind = "AnalyzeConversationSummarizationTask",
taskName = "<taskName>",
}
},
            });
            Response response = client.AnalyzeConversations("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("nextlink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversations_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                displayName = "<displayName>",
                analysisInput = new
                {
                    conversations = new List<object>()
{
new
{
conversationItems = new List<object>()
{
new
{
text = "<text>",
id = "<id>",
participantId = "<participantId>",
language = "<language>",
modality = "transcript",
}
},
id = "<id>",
language = "<language>",
modality = "TextConversation",
domain = "finance",
}
},
                },
                tasks = new List<object>()
{
new
{
parameters = new
{
summaryAspects = new List<object>()
{
"issue"
},
sentenceCount = 1234,
stringIndexType = "TextElements_v8",
},
kind = "AnalyzeConversationSummarizationTask",
taskName = "<taskName>",
}
},
            });
            Response response = await client.AnalyzeConversationsAsync("<endpoint>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("nextlink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAnalyzeConversationJobStatus()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = client.GetAnalyzeConversationJobStatus("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAnalyzeConversationJobStatus_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = await client.GetAnalyzeConversationJobStatusAsync("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAnalyzeConversationJobStatus_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = client.GetAnalyzeConversationJobStatus("<endpoint>", "<jobId>", showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("nextlink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAnalyzeConversationJobStatus_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = await client.GetAnalyzeConversationJobStatusAsync("<endpoint>", "<jobId>", showStats: true);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("nextlink").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("taskName").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("lastUpdateDateTime").ToString());
            Console.WriteLine(result.GetProperty("tasks").GetProperty("items")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("conversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validConversationCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousConversationsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("documentsCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("validDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("erroneousDocumentCount").ToString());
            Console.WriteLine(result.GetProperty("statistics").GetProperty("transactionsCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelAnalyzeConversations()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = client.CancelAnalyzeConversations("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelAnalyzeConversations_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = await client.CancelAnalyzeConversationsAsync("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelAnalyzeConversations_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = client.CancelAnalyzeConversations("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelAnalyzeConversations_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ConversationAnalysisClient client = new ConversationAnalysisClient(credential);

            Response response = await client.CancelAnalyzeConversationsAsync("<endpoint>", "<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }
    }
}
