// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.QuestionAnswering.Authoring
{
    /// <summary> Model factory for models. </summary>
    public static partial class AILanguageQuestionAnsweringAuthoringModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectMetadata"/>. </summary>
        /// <param name="projectName"> Name of the project. </param>
        /// <param name="description"> Description of the project. </param>
        /// <param name="language">
        /// Language of the text records. This is BCP-47 representation of a language. For
        /// example, use "en" for English; "es" for Spanish etc. If not set, use "en" for
        /// English as default.
        /// </param>
        /// <param name="multilingualResource"> Resource enabled for multiple languages across projects or not. </param>
        /// <param name="settings"> Configurable settings of the Project. </param>
        /// <param name="createdDateTime"> Project creation date-time. </param>
        /// <param name="lastModifiedDateTime"> Represents the project last modified date-time. </param>
        /// <param name="lastDeployedDateTime"> Represents the project last deployment date-time. </param>
        /// <returns> A new <see cref="Authoring.ProjectMetadata"/> instance for mocking. </returns>
        public static ProjectMetadata ProjectMetadata(string projectName = null, string description = null, string language = null, bool? multilingualResource = null, ProjectSettings settings = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastModifiedDateTime = null, DateTimeOffset? lastDeployedDateTime = null)
        {
            return new ProjectMetadata(
                projectName,
                description,
                language,
                multilingualResource,
                settings,
                createdDateTime,
                lastModifiedDateTime,
                lastDeployedDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.Error"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <param name="target"> The target of the error. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <param name="innererror">
        /// An object containing more specific information than the current object about
        /// the error.
        /// </param>
        /// <returns> A new <see cref="Authoring.Error"/> instance for mocking. </returns>
        public static Error Error(ErrorCode code = default, string message = null, string target = null, IEnumerable<Error> details = null, InnerErrorModel innererror = null)
        {
            details ??= new List<Error>();

            return new Error(
                code,
                message,
                target,
                details?.ToList(),
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.InnerErrorModel"/>. </summary>
        /// <param name="code"> One of a server-defined set of error codes. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="innererror">
        /// An object containing more specific information than the current object about
        /// the error.
        /// </param>
        /// <returns> A new <see cref="Authoring.InnerErrorModel"/> instance for mocking. </returns>
        public static InnerErrorModel InnerErrorModel(InnerErrorCode code = default, string message = null, IReadOnlyDictionary<string, string> details = null, string target = null, InnerErrorModel innererror = null)
        {
            details ??= new Dictionary<string, string>();

            return new InnerErrorModel(
                code,
                message,
                details,
                target,
                innererror,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.CreateProjectOptions"/>. </summary>
        /// <param name="description"> Description of the project. </param>
        /// <param name="language">
        /// Language of the text records. This is BCP-47 representation of a language. For
        /// example, use "en" for English; "es" for Spanish etc. If not set, use "en" for
        /// English as default.
        /// </param>
        /// <param name="multilingualResource">
        /// Set to true to enable creating knowledgebases in different languages for the
        /// same resource.
        /// </param>
        /// <param name="settings"> Configurable settings of the Project. </param>
        /// <returns> A new <see cref="Authoring.CreateProjectOptions"/> instance for mocking. </returns>
        public static CreateProjectOptions CreateProjectOptions(string description = null, string language = null, bool? multilingualResource = null, ProjectSettings settings = null)
        {
            return new CreateProjectOptions(description, language, multilingualResource, settings, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringProjectDeletionJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringProjectDeletionJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringProjectDeletionJobState QuestionAnsweringAuthoringProjectDeletionJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringProjectDeletionJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringExportJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="resultUrl"> URL to download the result of the Export Job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringExportJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringExportJobState QuestionAnsweringAuthoringExportJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null, string resultUrl = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringExportJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                resultUrl,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ImportQnaRecord"/>. </summary>
        /// <param name="id"> Unique ID for the QnA. </param>
        /// <param name="answer"> Answer text. </param>
        /// <param name="source">
        /// Source from which QnA was indexed e.g.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        /// </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <param name="metadata">
        /// Metadata associated with the answer, useful to categorize or filter question
        /// answers.
        /// </param>
        /// <param name="dialog"> Context of a QnA. </param>
        /// <param name="activeLearningSuggestions"> List of Active Learning suggestions for the QnA. </param>
        /// <param name="lastUpdatedDateTime"> Date-time when the QnA was last updated. </param>
        /// <param name="sourceDisplayName"> Friendly name of the Source. </param>
        /// <returns> A new <see cref="Authoring.ImportQnaRecord"/> instance for mocking. </returns>
        public static ImportQnaRecord ImportQnaRecord(int id = default, string answer = null, string source = null, IEnumerable<string> questions = null, IDictionary<string, string> metadata = null, QnaDialog dialog = null, IEnumerable<SuggestedQuestionsCluster> activeLearningSuggestions = null, DateTimeOffset? lastUpdatedDateTime = null, string sourceDisplayName = null)
        {
            questions ??= new List<string>();
            metadata ??= new Dictionary<string, string>();
            activeLearningSuggestions ??= new List<SuggestedQuestionsCluster>();

            return new ImportQnaRecord(
                id,
                answer,
                source,
                questions?.ToList(),
                metadata,
                dialog,
                activeLearningSuggestions?.ToList(),
                lastUpdatedDateTime,
                sourceDisplayName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QnaRecord"/>. </summary>
        /// <param name="id"> Unique ID for the QnA. </param>
        /// <param name="answer"> Answer text. </param>
        /// <param name="source">
        /// Source from which QnA was indexed e.g.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        /// </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <param name="metadata">
        /// Metadata associated with the answer, useful to categorize or filter question
        /// answers.
        /// </param>
        /// <param name="dialog"> Context of a QnA. </param>
        /// <param name="activeLearningSuggestions"> List of Active Learning suggestions for the QnA. </param>
        /// <returns> A new <see cref="Authoring.QnaRecord"/> instance for mocking. </returns>
        public static QnaRecord QnaRecord(int id = default, string answer = null, string source = null, IEnumerable<string> questions = null, IDictionary<string, string> metadata = null, QnaDialog dialog = null, IEnumerable<SuggestedQuestionsCluster> activeLearningSuggestions = null)
        {
            questions ??= new List<string>();
            metadata ??= new Dictionary<string, string>();
            activeLearningSuggestions ??= new List<SuggestedQuestionsCluster>();

            return new QnaRecord(
                id,
                answer,
                source,
                questions?.ToList(),
                metadata,
                dialog,
                activeLearningSuggestions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringImportJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringImportJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringImportJobState QuestionAnsweringAuthoringImportJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringImportJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringProjectDeploymentJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringProjectDeploymentJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringProjectDeploymentJobState QuestionAnsweringAuthoringProjectDeploymentJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringProjectDeploymentJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.ProjectDeployment"/>. </summary>
        /// <param name="deploymentName"> Name of the deployment. </param>
        /// <param name="lastDeployedDateTime"> Represents the project last deployment date-time. </param>
        /// <returns> A new <see cref="Authoring.ProjectDeployment"/> instance for mocking. </returns>
        public static ProjectDeployment ProjectDeployment(string deploymentName = null, DateTimeOffset? lastDeployedDateTime = null)
        {
            return new ProjectDeployment(deploymentName, lastDeployedDateTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QnaSourceRecord"/>. </summary>
        /// <param name="displayName"> Friendly name of the Source. </param>
        /// <param name="source">
        /// Unique source identifier. Name of the file if it's a 'file' source; otherwise,
        /// the complete URL if it's a 'url' source.
        /// </param>
        /// <param name="sourceUri"> URI location for the file or url. </param>
        /// <param name="sourceKind"> Supported source types. </param>
        /// <param name="contentStructureKind"> Content structure type for sources. </param>
        /// <param name="lastUpdatedDateTime"> Date-time when the QnA was last updated. </param>
        /// <returns> A new <see cref="Authoring.QnaSourceRecord"/> instance for mocking. </returns>
        public static QnaSourceRecord QnaSourceRecord(string displayName = null, string source = null, Uri sourceUri = null, SourceKind sourceKind = default, SourceContentStructureKind? contentStructureKind = null, DateTimeOffset? lastUpdatedDateTime = null)
        {
            return new QnaSourceRecord(
                displayName,
                source,
                sourceUri,
                sourceKind,
                contentStructureKind,
                lastUpdatedDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringUpdateSourcesJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringUpdateSourcesJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringUpdateSourcesJobState QuestionAnsweringAuthoringUpdateSourcesJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringUpdateSourcesJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.RetrieveQnaRecord"/>. </summary>
        /// <param name="id"> Unique ID for the QnA. </param>
        /// <param name="answer"> Answer text. </param>
        /// <param name="source">
        /// Source from which QnA was indexed e.g.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        /// </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <param name="metadata">
        /// Metadata associated with the answer, useful to categorize or filter question
        /// answers.
        /// </param>
        /// <param name="dialog"> Context of a QnA. </param>
        /// <param name="activeLearningSuggestions"> List of Active Learning suggestions for the QnA. </param>
        /// <param name="lastUpdatedDateTime"> Date-time when the QnA was last updated. </param>
        /// <returns> A new <see cref="Authoring.RetrieveQnaRecord"/> instance for mocking. </returns>
        public static RetrieveQnaRecord RetrieveQnaRecord(int id = default, string answer = null, string source = null, IEnumerable<string> questions = null, IReadOnlyDictionary<string, string> metadata = null, QnaDialog dialog = null, IEnumerable<SuggestedQuestionsCluster> activeLearningSuggestions = null, DateTimeOffset? lastUpdatedDateTime = null)
        {
            questions ??= new List<string>();
            metadata ??= new Dictionary<string, string>();
            activeLearningSuggestions ??= new List<SuggestedQuestionsCluster>();

            return new RetrieveQnaRecord(
                id,
                answer,
                source,
                questions?.ToList(),
                metadata,
                dialog,
                activeLearningSuggestions?.ToList(),
                lastUpdatedDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Authoring.QuestionAnsweringAuthoringUpdateQnasJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Authoring.QuestionAnsweringAuthoringUpdateQnasJobState"/> instance for mocking. </returns>
        public static QuestionAnsweringAuthoringUpdateQnasJobState QuestionAnsweringAuthoringUpdateQnasJobState(DateTimeOffset createdDateTime = default, DateTimeOffset? expirationDateTime = null, string jobId = null, DateTimeOffset lastUpdatedDateTime = default, JobStatus status = default, IEnumerable<Error> errors = null)
        {
            errors ??= new List<Error>();

            return new QuestionAnsweringAuthoringUpdateQnasJobState(
                createdDateTime,
                expirationDateTime,
                jobId,
                lastUpdatedDateTime,
                status,
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
