// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.QuestionAnswering.Authoring
{
    /// <summary> QnA record. </summary>
    public partial class QnaRecord
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QnaRecord"/>. </summary>
        public QnaRecord()
        {
            Questions = new ChangeTrackingList<string>();
            Metadata = new ChangeTrackingDictionary<string, string>();
            ActiveLearningSuggestions = new ChangeTrackingList<SuggestedQuestionsCluster>();
        }

        /// <summary> Initializes a new instance of <see cref="QnaRecord"/>. </summary>
        /// <param name="id"> Unique ID for the QnA. </param>
        /// <param name="answer"> Answer text. </param>
        /// <param name="source">
        /// Source from which QnA was indexed e.g.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        /// </param>
        /// <param name="questions"> List of questions associated with the answer. </param>
        /// <param name="metadata">
        /// Metadata associated with the answer, useful to categorize or filter question
        /// answers.
        /// </param>
        /// <param name="dialog"> Context of a QnA. </param>
        /// <param name="activeLearningSuggestions"> List of Active Learning suggestions for the QnA. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QnaRecord(int id, string answer, string source, IList<string> questions, IDictionary<string, string> metadata, QnaDialog dialog, IList<SuggestedQuestionsCluster> activeLearningSuggestions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Answer = answer;
            Source = source;
            Questions = questions;
            Metadata = metadata;
            Dialog = dialog;
            ActiveLearningSuggestions = activeLearningSuggestions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique ID for the QnA. </summary>
        public int Id { get; }
        /// <summary> Answer text. </summary>
        public string Answer { get; set; }
        /// <summary>
        /// Source from which QnA was indexed e.g.
        /// https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        /// </summary>
        public string Source { get; set; }
        /// <summary> List of questions associated with the answer. </summary>
        public IList<string> Questions { get; }
        /// <summary>
        /// Metadata associated with the answer, useful to categorize or filter question
        /// answers.
        /// </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> Context of a QnA. </summary>
        public QnaDialog Dialog { get; set; }
        /// <summary> List of Active Learning suggestions for the QnA. </summary>
        public IList<SuggestedQuestionsCluster> ActiveLearningSuggestions { get; }
    }
}
