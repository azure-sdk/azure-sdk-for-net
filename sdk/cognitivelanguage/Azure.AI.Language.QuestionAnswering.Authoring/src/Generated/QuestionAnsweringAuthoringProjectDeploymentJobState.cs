// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.QuestionAnswering.Authoring
{
    /// <summary> Job state represents the job metadata and any errors. </summary>
    public partial class QuestionAnsweringAuthoringProjectDeploymentJobState
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QuestionAnsweringAuthoringProjectDeploymentJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        internal QuestionAnsweringAuthoringProjectDeploymentJobState(DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime, JobStatus status)
        {
            CreatedDateTime = createdDateTime;
            LastUpdatedDateTime = lastUpdatedDateTime;
            Status = status;
            Errors = new ChangeTrackingList<Error>();
        }

        /// <summary> Initializes a new instance of <see cref="QuestionAnsweringAuthoringProjectDeploymentJobState"/>. </summary>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="status"> Job Status. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QuestionAnsweringAuthoringProjectDeploymentJobState(DateTimeOffset createdDateTime, DateTimeOffset? expirationDateTime, string jobId, DateTimeOffset lastUpdatedDateTime, JobStatus status, IReadOnlyList<Error> errors, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CreatedDateTime = createdDateTime;
            ExpirationDateTime = expirationDateTime;
            JobId = jobId;
            LastUpdatedDateTime = lastUpdatedDateTime;
            Status = status;
            Errors = errors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="QuestionAnsweringAuthoringProjectDeploymentJobState"/> for deserialization. </summary>
        internal QuestionAnsweringAuthoringProjectDeploymentJobState()
        {
        }

        /// <summary> The creation date time of the job. </summary>
        public DateTimeOffset CreatedDateTime { get; }
        /// <summary> The expiration date time of the job. </summary>
        public DateTimeOffset? ExpirationDateTime { get; }
        /// <summary> The job ID. </summary>
        public string JobId { get; }
        /// <summary> The last date time the job was updated. </summary>
        public DateTimeOffset LastUpdatedDateTime { get; }
        /// <summary> Job Status. </summary>
        public JobStatus Status { get; }
        /// <summary> The errors encountered while executing the job. </summary>
        public IReadOnlyList<Error> Errors { get; }
    }
}
