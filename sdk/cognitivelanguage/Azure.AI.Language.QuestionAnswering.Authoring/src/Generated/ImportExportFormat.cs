// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.QuestionAnswering.Authoring
{
    /// <summary> Knowledge base Import or Export format. </summary>
    public readonly partial struct ImportExportFormat : IEquatable<ImportExportFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImportExportFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImportExportFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JsonValue = "json";
        private const string TsvValue = "tsv";
        private const string ExcelValue = "excel";

        /// <summary> Export or Import QnA assets in JSON format. </summary>
        public static ImportExportFormat Json { get; } = new ImportExportFormat(JsonValue);
        /// <summary>
        /// Export or Import knowledge base replica including all assets and metadata in
        /// Excel format.
        /// </summary>
        public static ImportExportFormat Tsv { get; } = new ImportExportFormat(TsvValue);
        /// <summary>
        /// Export or Import knowledge base replica including all assets and metadata in
        /// Tsv format.
        /// </summary>
        public static ImportExportFormat Excel { get; } = new ImportExportFormat(ExcelValue);
        /// <summary> Determines if two <see cref="ImportExportFormat"/> values are the same. </summary>
        public static bool operator ==(ImportExportFormat left, ImportExportFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImportExportFormat"/> values are not the same. </summary>
        public static bool operator !=(ImportExportFormat left, ImportExportFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ImportExportFormat"/>. </summary>
        public static implicit operator ImportExportFormat(string value) => new ImportExportFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImportExportFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImportExportFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
