// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.QuestionAnswering.Authoring
{
    /// <summary> Custom source record with last updated date-time. </summary>
    public partial class QnaSourceRecord
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QnaSourceRecord"/>. </summary>
        /// <param name="source">
        /// Unique source identifier. Name of the file if it's a 'file' source; otherwise,
        /// the complete URL if it's a 'url' source.
        /// </param>
        /// <param name="sourceUri"> URI location for the file or url. </param>
        /// <param name="sourceKind"> Supported source types. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="source"/> or <paramref name="sourceUri"/> is null. </exception>
        internal QnaSourceRecord(string source, Uri sourceUri, SourceKind sourceKind)
        {
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(sourceUri, nameof(sourceUri));

            Source = source;
            SourceUri = sourceUri;
            SourceKind = sourceKind;
        }

        /// <summary> Initializes a new instance of <see cref="QnaSourceRecord"/>. </summary>
        /// <param name="displayName"> Friendly name of the Source. </param>
        /// <param name="source">
        /// Unique source identifier. Name of the file if it's a 'file' source; otherwise,
        /// the complete URL if it's a 'url' source.
        /// </param>
        /// <param name="sourceUri"> URI location for the file or url. </param>
        /// <param name="sourceKind"> Supported source types. </param>
        /// <param name="contentStructureKind"> Content structure type for sources. </param>
        /// <param name="lastUpdatedDateTime"> Date-time when the QnA was last updated. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QnaSourceRecord(string displayName, string source, Uri sourceUri, SourceKind sourceKind, SourceContentStructureKind? contentStructureKind, DateTimeOffset? lastUpdatedDateTime, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DisplayName = displayName;
            Source = source;
            SourceUri = sourceUri;
            SourceKind = sourceKind;
            ContentStructureKind = contentStructureKind;
            LastUpdatedDateTime = lastUpdatedDateTime;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="QnaSourceRecord"/> for deserialization. </summary>
        internal QnaSourceRecord()
        {
        }

        /// <summary> Friendly name of the Source. </summary>
        public string DisplayName { get; }
        /// <summary>
        /// Unique source identifier. Name of the file if it's a 'file' source; otherwise,
        /// the complete URL if it's a 'url' source.
        /// </summary>
        public string Source { get; }
        /// <summary> URI location for the file or url. </summary>
        public Uri SourceUri { get; }
        /// <summary> Supported source types. </summary>
        public SourceKind SourceKind { get; }
        /// <summary> Content structure type for sources. </summary>
        public SourceContentStructureKind? ContentStructureKind { get; }
        /// <summary> Date-time when the QnA was last updated. </summary>
        public DateTimeOffset? LastUpdatedDateTime { get; }
    }
}
