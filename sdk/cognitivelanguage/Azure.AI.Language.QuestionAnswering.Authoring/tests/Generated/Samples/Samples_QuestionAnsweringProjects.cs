// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Language.QuestionAnswering.Authoring.Samples
{
    public partial class Samples_QuestionAnsweringProjects
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjectDetails_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetProjectDetails("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjectDetails_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetProjectDetailsAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjectDetails_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<ProjectMetadata> response = client.GetProjectDetails("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjectDetails_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<ProjectMetadata> response = await client.GetProjectDetailsAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjectDetails_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetProjectDetails("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("multilingualResource").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjectDetails_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetProjectDetailsAsync("<projectName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("multilingualResource").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjectDetails_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<ProjectMetadata> response = client.GetProjectDetails("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjectDetails_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<ProjectMetadata> response = await client.GetProjectDetailsAsync("<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_CreateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                language = "<language>",
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_CreateProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                language = "<language>",
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_CreateProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                language = "<language>",
                multilingualResource = true,
                settings = new
                {
                    defaultAnswer = "<defaultAnswer>",
                },
            });
            Response response = client.CreateProject("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("multilingualResource").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_CreateProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                language = "<language>",
                multilingualResource = true,
                settings = new
                {
                    defaultAnswer = "<defaultAnswer>",
                },
            });
            Response response = await client.CreateProjectAsync("<projectName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("multilingualResource").ToString());
            Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetDeleteStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetDeleteStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeletionJobState> response = client.GetDeleteStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeletionJobState> response = await client.GetDeleteStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetDeleteStatus("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetDeleteStatusAsync("<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeletionJobState> response = client.GetDeleteStatus("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeletionJobState_GetDeleteStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeletionJobState> response = await client.GetDeleteStatusAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringExportJobState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringExportJobState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetExportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetExportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("resultUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringExportJobState> response = client.GetExportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringExportJobState_GetExportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringExportJobState> response = await client.GetExportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringImportJobState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringImportJobState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetImportStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetImportStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringImportJobState> response = client.GetImportStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringImportJobState_GetImportStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringImportJobState> response = await client.GetImportStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeploymentJobState> response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeploymentJobState> response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeploymentJobState> response = client.GetDeployStatus("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringProjectDeploymentJobState_GetDeployStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringProjectDeploymentJobState> response = await client.GetDeployStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSynonyms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
            });
            Response response = client.UpdateSynonyms("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSynonyms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
            });
            Response response = await client.UpdateSynonymsAsync("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSynonyms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            SynonymAssets body = new SynonymAssets(new WordAlterations[]
            {
new WordAlterations(new string[]{"<alterations>"})
            });
            Response response = client.UpdateSynonyms("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSynonyms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            SynonymAssets body = new SynonymAssets(new WordAlterations[]
            {
new WordAlterations(new string[]{"<alterations>"})
            });
            Response response = await client.UpdateSynonymsAsync("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSynonyms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                nextLink = "http://localhost:3000",
            });
            Response response = client.UpdateSynonyms("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSynonyms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                nextLink = "http://localhost:3000",
            });
            Response response = await client.UpdateSynonymsAsync("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSynonyms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            SynonymAssets body = new SynonymAssets(new WordAlterations[]
            {
new WordAlterations(new string[]{"<alterations>"})
            })
            {
                NextLink = new Uri("http://localhost:3000"),
            };
            Response response = client.UpdateSynonyms("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSynonyms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            SynonymAssets body = new SynonymAssets(new WordAlterations[]
            {
new WordAlterations(new string[]{"<alterations>"})
            })
            {
                NextLink = new Uri("http://localhost:3000"),
            };
            Response response = await client.UpdateSynonymsAsync("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateSourcesJobState> response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateSourcesJobState> response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateSourcesJobState> response = client.GetUpdateSourcesStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateSourcesJobState_GetUpdateSourcesStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateSourcesJobState> response = await client.GetUpdateSourcesStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetUpdateQnasStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateQnasJobState> response = client.GetUpdateQnasStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateQnasJobState> response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = client.GetUpdateQnasStatus("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
            Console.WriteLine(result.GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateQnasJobState> response = client.GetUpdateQnasStatus("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringAuthoringUpdateQnasJobState_GetUpdateQnasStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Response<QuestionAnsweringAuthoringUpdateQnasJobState> response = await client.GetUpdateQnasStatusAsync("<projectName>", "<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_AddFeedback_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.AddFeedback("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_AddFeedback_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.AddFeedbackAsync("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_AddFeedback_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ActiveLearningFeedback body = new ActiveLearningFeedback();
            Response response = client.AddFeedback("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_AddFeedback_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ActiveLearningFeedback body = new ActiveLearningFeedback();
            Response response = await client.AddFeedbackAsync("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_AddFeedback_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                records = new object[]
            {
new
{
userId = "<userId>",
userQuestion = "<userQuestion>",
qnaId = 1234,
}
            },
            });
            Response response = client.AddFeedback("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_AddFeedback_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                records = new object[]
            {
new
{
userId = "<userId>",
userQuestion = "<userQuestion>",
qnaId = 1234,
}
            },
            });
            Response response = await client.AddFeedbackAsync("<projectName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_AddFeedback_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ActiveLearningFeedback body = new ActiveLearningFeedback
            {
                Records = {new FeedbackRecord
{
UserId = "<userId>",
UserQuestion = "<userQuestion>",
QnaId = 1234,
}},
            };
            Response response = client.AddFeedback("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_AddFeedback_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ActiveLearningFeedback body = new ActiveLearningFeedback
            {
                Records = {new FeedbackRecord
{
UserId = "<userId>",
UserQuestion = "<userQuestion>",
QnaId = 1234,
}},
            };
            Response response = await client.AddFeedbackAsync("<projectName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjects_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetProjects(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("projectName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjects_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetProjectsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("projectName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjects_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (ProjectMetadata item in client.GetProjects())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjects_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (ProjectMetadata item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjects_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetProjects(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
                Console.WriteLine(result.GetProperty("multilingualResource").ToString());
                Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjects_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetProjectsAsync(1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("projectName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("language").ToString());
                Console.WriteLine(result.GetProperty("multilingualResource").ToString());
                Console.WriteLine(result.GetProperty("settings").GetProperty("defaultAnswer").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectMetadata_GetProjects_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (ProjectMetadata item in client.GetProjects(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectMetadata_GetProjects_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (ProjectMetadata item in client.GetProjectsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectDeployment_GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetDeployments("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectDeployment_GetDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectDeployment_GetDeployments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (ProjectDeployment item in client.GetDeployments("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectDeployment_GetDeployments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectDeployment_GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetDeployments("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectDeployment_GetDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentName").ToString());
                Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectDeployment_GetDeployments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (ProjectDeployment item in client.GetDeployments("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectDeployment_GetDeployments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (ProjectDeployment item in client.GetDeploymentsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WordAlterations_GetSynonyms_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetSynonyms("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("alterations")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WordAlterations_GetSynonyms_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetSynonymsAsync("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("alterations")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WordAlterations_GetSynonyms_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (WordAlterations item in client.GetSynonyms("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WordAlterations_GetSynonyms_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (WordAlterations item in client.GetSynonymsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WordAlterations_GetSynonyms_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetSynonyms("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("alterations")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WordAlterations_GetSynonyms_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetSynonymsAsync("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("alterations")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WordAlterations_GetSynonyms_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (WordAlterations item in client.GetSynonyms("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WordAlterations_GetSynonyms_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (WordAlterations item in client.GetSynonymsAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QnaSourceRecord_GetSources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetSources("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("sourceUri").ToString());
                Console.WriteLine(result.GetProperty("sourceKind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QnaSourceRecord_GetSources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetSourcesAsync("<projectName>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("sourceUri").ToString());
                Console.WriteLine(result.GetProperty("sourceKind").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QnaSourceRecord_GetSources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (QnaSourceRecord item in client.GetSources("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QnaSourceRecord_GetSources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (QnaSourceRecord item in client.GetSourcesAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QnaSourceRecord_GetSources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetSources("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("sourceUri").ToString());
                Console.WriteLine(result.GetProperty("sourceKind").ToString());
                Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QnaSourceRecord_GetSources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetSourcesAsync("<projectName>", 1234, 1234, 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("sourceUri").ToString());
                Console.WriteLine(result.GetProperty("sourceKind").ToString());
                Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QnaSourceRecord_GetSources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (QnaSourceRecord item in client.GetSources("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QnaSourceRecord_GetSources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (QnaSourceRecord item in client.GetSourcesAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveQnaRecord_GetQnas_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetQnas("<projectName>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveQnaRecord_GetQnas_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetQnasAsync("<projectName>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveQnaRecord_GetQnas_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (RetrieveQnaRecord item in client.GetQnas("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveQnaRecord_GetQnas_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (RetrieveQnaRecord item in client.GetQnasAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveQnaRecord_GetQnas_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (BinaryData item in client.GetQnas("<projectName>", 1234, 1234, 1234, "<source>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("answer").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("questions")[0].ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveQnaRecord_GetQnas_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (BinaryData item in client.GetQnasAsync("<projectName>", 1234, 1234, 1234, "<source>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("answer").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("questions")[0].ToString());
                Console.WriteLine(result.GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("isContextOnly").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayOrder").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qnaId").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("answer").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("questions")[0].ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("metadata").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("qna").GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("dialog").GetProperty("prompts")[0].GetProperty("displayText").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("clusterHead").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("question").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("userSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("activeLearningSuggestions")[0].GetProperty("suggestedQuestions")[0].GetProperty("autoSuggestedCount").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveQnaRecord_GetQnas_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            foreach (RetrieveQnaRecord item in client.GetQnas("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, source: "<source>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveQnaRecord_GetQnas_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            await foreach (RetrieveQnaRecord item in client.GetQnasAsync("<projectName>", maxCount: 1234, skip: 1234, maxpagesize: 1234, source: "<source>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_DeleteProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_DeleteProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_DeleteProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.DeleteProject(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_DeleteProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Export_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", null, null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Export_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", null, null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Export_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Export_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Export_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", "json", "qnas", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Export_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "json", "qnas", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Export_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.Export(WaitUntil.Completed, "<projectName>", format: ImportExportFormat.Json, assetKind: AssestKind.Qnas);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Export_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", format: ImportExportFormat.Json, assetKind: AssestKind.Qnas);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Import_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = null;
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Import_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = null;
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Import_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.Import(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Import_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Import_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    description = "<description>",
                    language = "<language>",
                    multilingualResource = true,
                    settings = new
                    {
                        defaultAnswer = "<defaultAnswer>",
                    },
                },
                assets = new
                {
                    synonyms = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                    qnas = new object[]
            {
new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
qna = new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
null
},
lastUpdatedDateTime = "2022-05-10T18:57:31.2311892Z",
sourceDisplayName = "<sourceDisplayName>",
}
            },
                },
                fileUri = "<fileUri>",
            });
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", content, format: "json", assetKind: "qnas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Import_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new
            {
                metadata = new
                {
                    description = "<description>",
                    language = "<language>",
                    multilingualResource = true,
                    settings = new
                    {
                        defaultAnswer = "<defaultAnswer>",
                    },
                },
                assets = new
                {
                    synonyms = new object[]
            {
new
{
alterations = new object[]
{
"<alterations>"
},
}
            },
                    qnas = new object[]
            {
new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
qna = new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
null
},
lastUpdatedDateTime = "2022-05-10T18:57:31.2311892Z",
sourceDisplayName = "<sourceDisplayName>",
}
            },
                },
                fileUri = "<fileUri>",
            });
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", content, format: "json", assetKind: "qnas");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_Import_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ImportJobOptions body = new ImportJobOptions
            {
                Metadata = new CreateProjectOptions("<language>")
                {
                    Description = "<description>",
                    MultilingualResource = true,
                    Settings = new ProjectSettings
                    {
                        DefaultAnswer = "<defaultAnswer>",
                    },
                },
                Assets = new Assets
                {
                    Synonyms = { new WordAlterations(new string[] { "<alterations>" }) },
                    Qnas = {new ImportQnaRecord
{
Answer = "<answer>",
Source = "<source>",
Questions = {"<questions>"},
Metadata =
{
["key"] = "<metadata>"
},
Dialog = new QnaDialog
{
IsContextOnly = true,
Prompts = {new QnaPrompt
{
DisplayOrder = 1234,
QnaId = 1234,
Qna = new QnaRecord
{
Answer = "<answer>",
Source = "<source>",
Questions = {"<questions>"},
Metadata =
{
["key"] = "<metadata>"
},
Dialog = default,
ActiveLearningSuggestions = {new SuggestedQuestionsCluster
{
ClusterHead = "<clusterHead>",
SuggestedQuestions = {new SuggestedQuestion
{
Question = "<question>",
UserSuggestedCount = 1234,
AutoSuggestedCount = 1234,
}},
}},
},
DisplayText = "<displayText>",
}},
},
ActiveLearningSuggestions = {default},
LastUpdatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
SourceDisplayName = "<sourceDisplayName>",
}},
                },
                FileUri = "<fileUri>",
            };
            Operation operation = client.Import(WaitUntil.Completed, "<projectName>", body: body, format: ImportExportFormat.Json, assetKind: AssestKind.Qnas);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_Import_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            ImportJobOptions body = new ImportJobOptions
            {
                Metadata = new CreateProjectOptions("<language>")
                {
                    Description = "<description>",
                    MultilingualResource = true,
                    Settings = new ProjectSettings
                    {
                        DefaultAnswer = "<defaultAnswer>",
                    },
                },
                Assets = new Assets
                {
                    Synonyms = { new WordAlterations(new string[] { "<alterations>" }) },
                    Qnas = {new ImportQnaRecord
{
Answer = "<answer>",
Source = "<source>",
Questions = {"<questions>"},
Metadata =
{
["key"] = "<metadata>"
},
Dialog = new QnaDialog
{
IsContextOnly = true,
Prompts = {new QnaPrompt
{
DisplayOrder = 1234,
QnaId = 1234,
Qna = new QnaRecord
{
Answer = "<answer>",
Source = "<source>",
Questions = {"<questions>"},
Metadata =
{
["key"] = "<metadata>"
},
Dialog = default,
ActiveLearningSuggestions = {new SuggestedQuestionsCluster
{
ClusterHead = "<clusterHead>",
SuggestedQuestions = {new SuggestedQuestion
{
Question = "<question>",
UserSuggestedCount = 1234,
AutoSuggestedCount = 1234,
}},
}},
},
DisplayText = "<displayText>",
}},
},
ActiveLearningSuggestions = {default},
LastUpdatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
SourceDisplayName = "<sourceDisplayName>",
}},
                },
                FileUri = "<fileUri>",
            };
            Operation operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", body: body, format: ImportExportFormat.Json, assetKind: AssestKind.Qnas);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_DeployProject_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = client.DeployProject(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_DeployProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            Operation operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSources_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
source = "<source>",
sourceUri = "http://localhost:3000",
sourceKind = "file",
},
}
            });
            Operation operation = client.UpdateSources(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
source = "<source>",
sourceUri = "http://localhost:3000",
sourceKind = "file",
},
}
            });
            Operation operation = await client.UpdateSourcesAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateSources_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
displayName = "<displayName>",
source = "<source>",
sourceUri = "http://localhost:3000",
sourceKind = "file",
contentStructureKind = "unstructured",
refresh = true,
},
}
            });
            Operation operation = client.UpdateSources(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateSources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
displayName = "<displayName>",
source = "<source>",
sourceUri = "http://localhost:3000",
sourceKind = "file",
contentStructureKind = "unstructured",
refresh = true,
},
}
            });
            Operation operation = await client.UpdateSourcesAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateQnas_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new object(),
}
            });
            Operation operation = client.UpdateQnas(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateQnas_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new object(),
}
            });
            Operation operation = await client.UpdateQnasAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_QuestionAnsweringProjects_UpdateQnas_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
}
            });
            Operation operation = client.UpdateQnas(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_QuestionAnsweringProjects_UpdateQnas_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            QuestionAnsweringProjects client = new AuthoringClient(endpoint, credential).GetQuestionAnsweringProjectsClient(apiVersion: "2023-04-01");

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
op = "add",
value = new
{
answer = "<answer>",
source = "<source>",
questions = new object[]
{
"<questions>"
},
metadata = new
{
key = "<metadata>",
},
dialog = new
{
isContextOnly = true,
prompts = new object[]
{
new
{
displayOrder = 1234,
qnaId = 1234,
displayText = "<displayText>",
}
},
},
activeLearningSuggestions = new object[]
{
new
{
clusterHead = "<clusterHead>",
suggestedQuestions = new object[]
{
new
{
question = "<question>",
userSuggestedCount = 1234,
autoSuggestedCount = 1234,
}
},
}
},
},
}
            });
            Operation operation = await client.UpdateQnasAsync(WaitUntil.Completed, "<projectName>", content);
        }
    }
}
