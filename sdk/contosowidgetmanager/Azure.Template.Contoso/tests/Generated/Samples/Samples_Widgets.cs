// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Template.Contoso.Samples
{
    public partial class Samples_Widgets
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_GetWidget_GetWidgetByWidgetName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response response = client.GetWidget("searchbox", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_GetWidget_GetWidgetByWidgetName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response response = await client.GetWidgetAsync("searchbox", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_GetWidget_GetWidgetByWidgetName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response<WidgetSuite> response = client.GetWidget("searchbox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_GetWidget_GetWidgetByWidgetName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response<WidgetSuite> response = await client.GetWidgetAsync("searchbox");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ResourceOperationStatus_GetWidgetOperationStatus_WidgetsGetWidgetOperationStatus()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response response = client.GetWidgetOperationStatus("name1", "opreation id1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ResourceOperationStatus_GetWidgetOperationStatus_WidgetsGetWidgetOperationStatus_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response response = await client.GetWidgetOperationStatusAsync("name1", "opreation id1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ResourceOperationStatus_GetWidgetOperationStatus_WidgetsGetWidgetOperationStatus_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response<ResourceOperationStatusWidgetSuiteWidgetSuiteError> response = client.GetWidgetOperationStatus("name1", "opreation id1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ResourceOperationStatus_GetWidgetOperationStatus_WidgetsGetWidgetOperationStatus_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Response<ResourceOperationStatusWidgetSuiteWidgetSuiteError> response = await client.GetWidgetOperationStatusAsync("name1", "opreation id1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_GetWidgets_WidgetsListWidgets()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            foreach (BinaryData item in client.GetWidgets(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_GetWidgets_WidgetsListWidgets_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            await foreach (BinaryData item in client.GetWidgetsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_GetWidgets_WidgetsListWidgets_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            foreach (WidgetSuite item in client.GetWidgets())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_GetWidgets_WidgetsListWidgets_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            await foreach (WidgetSuite item in client.GetWidgetsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_CreateOrUpdateWidget_WidgetsCreateOrUpdateWidget()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "manufacturer id1",
                sharedModel = new
                {
                    tag = "tag1",
                    createdAt = "2023-01-09T02:12:25.689Z",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdateWidget(WaitUntil.Completed, "name1", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_CreateOrUpdateWidget_WidgetsCreateOrUpdateWidget_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            using RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "manufacturer id1",
                sharedModel = new
                {
                    tag = "tag1",
                    createdAt = "2023-01-09T02:12:25.689Z",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateWidgetAsync(WaitUntil.Completed, "name1", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_DeleteWidget_DeleteWidgetByWidgetNameUsingLongRunningOperation()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Operation<BinaryData> operation = client.DeleteWidget(WaitUntil.Completed, "searchbox", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_DeleteWidget_DeleteWidgetByWidgetNameUsingLongRunningOperation_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Operation<BinaryData> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "searchbox", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_WidgetSuite_DeleteWidget_DeleteWidgetByWidgetNameUsingLongRunningOperation_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Operation<WidgetSuite> operation = client.DeleteWidget(WaitUntil.Completed, "searchbox");
            WidgetSuite responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_WidgetSuite_DeleteWidget_DeleteWidgetByWidgetNameUsingLongRunningOperation_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            Widgets client = new WidgetManagerClient(endpoint, credential).GetWidgetsClient(apiVersion: "2022-11-01-preview");

            Operation<WidgetSuite> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "searchbox");
            WidgetSuite responseData = operation.Value;
        }
    }
}
