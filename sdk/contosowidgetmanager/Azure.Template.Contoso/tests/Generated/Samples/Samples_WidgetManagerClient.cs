// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.Template.Contoso;
using NUnit.Framework;

namespace Azure.Template.Contoso.Samples
{
    public class Samples_WidgetManagerClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidget()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response response = client.GetWidget("<widgetName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidget_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response response = await client.GetWidgetAsync("<widgetName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidget_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response<WidgetSuite> response = client.GetWidget("<widgetName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidget_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response<WidgetSuite> response = await client.GetWidgetAsync("<widgetName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidget_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response response = client.GetWidget("<widgetName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidget_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response response = await client.GetWidgetAsync("<widgetName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidget_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response<WidgetSuite> response = client.GetWidget("<widgetName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidget_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Response<WidgetSuite> response = await client.GetWidgetAsync("<widgetName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidgets()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            foreach (BinaryData item in client.GetWidgets(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("manufacturerId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidgets_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            await foreach (BinaryData item in client.GetWidgetsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("manufacturerId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidgets_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            foreach (WidgetSuite item in client.GetWidgets())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidgets_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            await foreach (WidgetSuite item in client.GetWidgetsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidgets_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            foreach (BinaryData item in client.GetWidgets(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("manufacturerId").ToString());
                Console.WriteLine(result[0].GetProperty("sharedModel").GetProperty("tag").ToString());
                Console.WriteLine(result[0].GetProperty("sharedModel").GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidgets_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            await foreach (BinaryData item in client.GetWidgetsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("manufacturerId").ToString());
                Console.WriteLine(result[0].GetProperty("sharedModel").GetProperty("tag").ToString());
                Console.WriteLine(result[0].GetProperty("sharedModel").GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWidgets_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            foreach (WidgetSuite item in client.GetWidgets())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWidgets_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            await foreach (WidgetSuite item in client.GetWidgetsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateWidget()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "<manufacturerId>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdateWidget(WaitUntil.Completed, "<widgetName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateWidget_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "<manufacturerId>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateWidgetAsync(WaitUntil.Completed, "<widgetName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateWidget_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "<manufacturerId>",
                sharedModel = new
                {
                    tag = "<tag>",
                    createdAt = "2022-05-10T14:57:31.2311892-04:00",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdateWidget(WaitUntil.Completed, "<widgetName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateWidget_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                manufacturerId = "<manufacturerId>",
                sharedModel = new
                {
                    tag = "<tag>",
                    createdAt = "2022-05-10T14:57:31.2311892-04:00",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateWidgetAsync(WaitUntil.Completed, "<widgetName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWidget()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<BinaryData> operation = client.DeleteWidget(WaitUntil.Completed, "<widgetName>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWidget_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<BinaryData> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "<widgetName>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWidget_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<WidgetSuite> operation = client.DeleteWidget(WaitUntil.Completed, "<widgetName>");
            WidgetSuite responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWidget_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<WidgetSuite> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "<widgetName>");
            WidgetSuite responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWidget_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<BinaryData> operation = client.DeleteWidget(WaitUntil.Completed, "<widgetName>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWidget_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<BinaryData> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "<widgetName>", null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("manufacturerId").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("tag").ToString());
            Console.WriteLine(result.GetProperty("sharedModel").GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteWidget_AllParameters_Convenience()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<WidgetSuite> operation = client.DeleteWidget(WaitUntil.Completed, "<widgetName>");
            WidgetSuite responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteWidget_AllParameters_Convenience_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            WidgetManagerClient client = new WidgetManagerClient(credential);

            Operation<WidgetSuite> operation = await client.DeleteWidgetAsync(WaitUntil.Completed, "<widgetName>");
            WidgetSuite responseData = operation.Value;
        }
    }
}
