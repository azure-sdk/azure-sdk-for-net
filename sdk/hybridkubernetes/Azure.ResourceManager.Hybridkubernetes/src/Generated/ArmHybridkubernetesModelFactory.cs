// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hybridkubernetes.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHybridkubernetesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Hybridkubernetes.ConnectedClusterData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the connected cluster. Current supported identity types: None, SystemAssigned. </param>
        /// <param name="kind"> The kind of connected cluster. </param>
        /// <param name="agentPublicKeyCertificate"> Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. </param>
        /// <param name="kubernetesVersion"> The Kubernetes version of the connected cluster resource. </param>
        /// <param name="totalNodeCount"> Number of nodes present in the connected cluster resource. </param>
        /// <param name="totalCoreCount"> Number of CPU cores present in the connected cluster resource. </param>
        /// <param name="agentVersion"> Version of the agent running on the connected cluster resource. </param>
        /// <param name="provisioningState"> Provisioning state of the connected cluster resource. </param>
        /// <param name="distribution"> The Kubernetes distribution running on this connected cluster. </param>
        /// <param name="distributionVersion"> The Kubernetes distribution version on this connected cluster. </param>
        /// <param name="infrastructure"> The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on. </param>
        /// <param name="offering"> Connected cluster offering. </param>
        /// <param name="managedIdentityCertificateExpirationOn"> Expiration time of the managed identity certificate. </param>
        /// <param name="lastConnectivityOn"> Time representing the last instance when heart beat was received from the cluster. </param>
        /// <param name="connectivityStatus"> Represents the connectivity status of the connected cluster. </param>
        /// <param name="privateLinkState"> Property which describes the state of private link on a connected cluster resource. </param>
        /// <param name="privateLinkScopeResourceId"> This is populated only if privateLinkState is enabled. The resource id of the private link scope this connected cluster is assigned to, if any. </param>
        /// <param name="azureHybridBenefit"> Indicates whether Azure Hybrid Benefit is opted in. </param>
        /// <param name="aadProfile"> AAD profile for the connected cluster. </param>
        /// <param name="arcAgentProfile"> Arc agentry configuration for the provisioned cluster. </param>
        /// <param name="workloadIdentityEnabled"> Security profile for the connected cluster. </param>
        /// <param name="oidcIssuerProfile"> Open ID Connect (OIDC) Issuer Profile for the connected cluster. </param>
        /// <param name="gateway"> Details of the gateway used by the Arc router for connectivity. </param>
        /// <param name="arcAgentryConfigurations"> Configuration settings for customizing the behavior of the connected cluster. </param>
        /// <param name="miscellaneousProperties"> More properties related to the Connected Cluster. </param>
        /// <returns> A new <see cref="Hybridkubernetes.ConnectedClusterData"/> instance for mocking. </returns>
        public static ConnectedClusterData ConnectedClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ConnectedClusterKind? kind = null, string agentPublicKeyCertificate = null, string kubernetesVersion = null, int? totalNodeCount = null, int? totalCoreCount = null, string agentVersion = null, ProvisioningState? provisioningState = null, string distribution = null, string distributionVersion = null, string infrastructure = null, string offering = null, DateTimeOffset? managedIdentityCertificateExpirationOn = null, DateTimeOffset? lastConnectivityOn = null, ConnectivityStatus? connectivityStatus = null, PrivateLinkState? privateLinkState = null, string privateLinkScopeResourceId = null, AzureHybridBenefit? azureHybridBenefit = null, AadProfile aadProfile = null, ArcAgentProfile arcAgentProfile = null, bool? workloadIdentityEnabled = null, OidcIssuerProfile oidcIssuerProfile = null, Gateway gateway = null, IEnumerable<ArcAgentryConfigurations> arcAgentryConfigurations = null, IReadOnlyDictionary<string, string> miscellaneousProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            arcAgentryConfigurations ??= new List<ArcAgentryConfigurations>();
            miscellaneousProperties ??= new Dictionary<string, string>();

            return new ConnectedClusterData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                kind,
                agentPublicKeyCertificate,
                kubernetesVersion,
                totalNodeCount,
                totalCoreCount,
                agentVersion,
                provisioningState,
                distribution,
                distributionVersion,
                infrastructure,
                offering,
                managedIdentityCertificateExpirationOn,
                lastConnectivityOn,
                connectivityStatus,
                privateLinkState,
                privateLinkScopeResourceId,
                azureHybridBenefit,
                aadProfile,
                arcAgentProfile,
                workloadIdentityEnabled != null ? new SecurityProfile(new SecurityProfileWorkloadIdentity(workloadIdentityEnabled, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                oidcIssuerProfile,
                gateway,
                arcAgentryConfigurations?.ToList(),
                miscellaneousProperties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArcAgentProfile"/>. </summary>
        /// <param name="desiredAgentVersion"> Version of the Arc agents to be installed on the cluster resource. </param>
        /// <param name="agentAutoUpgrade"> Indicates whether the Arc agents on the be upgraded automatically to the latest version. Defaults to Enabled. </param>
        /// <param name="systemComponents"> List of system extensions that are installed on the cluster resource. </param>
        /// <param name="agentErrors"> List of arc agentry and system components errors on the cluster resource. </param>
        /// <param name="agentState"> Represents the current state of the Arc agentry and its dependent components. </param>
        /// <returns> A new <see cref="Models.ArcAgentProfile"/> instance for mocking. </returns>
        public static ArcAgentProfile ArcAgentProfile(string desiredAgentVersion = null, AutoUpgradeOption? agentAutoUpgrade = null, IEnumerable<SystemComponent> systemComponents = null, IEnumerable<AgentError> agentErrors = null, string agentState = null)
        {
            systemComponents ??= new List<SystemComponent>();
            agentErrors ??= new List<AgentError>();

            return new ArcAgentProfile(
                desiredAgentVersion,
                agentAutoUpgrade,
                systemComponents?.ToList(),
                agentErrors?.ToList(),
                agentState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SystemComponent"/>. </summary>
        /// <param name="type"> Type of the system extension. </param>
        /// <param name="userSpecifiedVersion"> Version of the system extension to be installed on the cluster resource. </param>
        /// <param name="majorVersion"> Major Version of the system extension that is currently installed on the cluster resource. </param>
        /// <param name="currentVersion"> Version of the system extension that is currently installed on the cluster resource. </param>
        /// <returns> A new <see cref="Models.SystemComponent"/> instance for mocking. </returns>
        public static SystemComponent SystemComponent(string type = null, string userSpecifiedVersion = null, int? majorVersion = null, string currentVersion = null)
        {
            return new SystemComponent(type, userSpecifiedVersion, majorVersion, currentVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AgentError"/>. </summary>
        /// <param name="message"> Agent error message. </param>
        /// <param name="severity"> Severity of the error message. </param>
        /// <param name="component"> Agent component where error message occured. </param>
        /// <param name="time"> The timestamp of error occured (UTC). </param>
        /// <returns> A new <see cref="Models.AgentError"/> instance for mocking. </returns>
        public static AgentError AgentError(string message = null, string severity = null, string component = null, DateTimeOffset? time = null)
        {
            return new AgentError(message, severity, component, time, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OidcIssuerProfile"/>. </summary>
        /// <param name="enabled"> Whether to enable oidc issuer for workload identity integration. </param>
        /// <param name="issuerUri"> The issuer url for hybrid clusters connected to Arc used for the workload identity feature. </param>
        /// <param name="selfHostedIssuerUri"> The issuer url for public cloud clusters - AKS, EKS, GKE - used for the workload identity feature. </param>
        /// <returns> A new <see cref="Models.OidcIssuerProfile"/> instance for mocking. </returns>
        public static OidcIssuerProfile OidcIssuerProfile(bool? enabled = null, string issuerUri = null, string selfHostedIssuerUri = null)
        {
            return new OidcIssuerProfile(enabled, issuerUri, selfHostedIssuerUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CredentialResults"/>. </summary>
        /// <param name="hybridConnectionConfig"> Contains the REP (rendezvous endpoint) and “Sender” access token. </param>
        /// <param name="kubeconfigs"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.CredentialResults"/> instance for mocking. </returns>
        public static CredentialResults CredentialResults(HybridConnectionConfig hybridConnectionConfig = null, IEnumerable<CredentialResult> kubeconfigs = null)
        {
            kubeconfigs ??= new List<CredentialResult>();

            return new CredentialResults(hybridConnectionConfig, kubeconfigs?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HybridConnectionConfig"/>. </summary>
        /// <param name="expirationTime"> Timestamp when this token will be expired. </param>
        /// <param name="hybridConnectionName"> Name of the connection. </param>
        /// <param name="relay"> Name of the relay. </param>
        /// <param name="token"> Sender access token. </param>
        /// <param name="relayTid"> TenantID of the relay. </param>
        /// <param name="relayType"> Type of relay. </param>
        /// <returns> A new <see cref="Models.HybridConnectionConfig"/> instance for mocking. </returns>
        public static HybridConnectionConfig HybridConnectionConfig(long? expirationTime = null, string hybridConnectionName = null, string relay = null, string token = null, string relayTid = null, string relayType = null)
        {
            return new HybridConnectionConfig(
                expirationTime,
                hybridConnectionName,
                relay,
                token,
                relayTid,
                relayType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CredentialResult"/>. </summary>
        /// <param name="name"> The name of the credential. </param>
        /// <param name="value"> Base64-encoded Kubernetes configuration file. </param>
        /// <returns> A new <see cref="Models.CredentialResult"/> instance for mocking. </returns>
        public static CredentialResult CredentialResult(string name = null, byte[] value = null)
        {
            return new CredentialResult(name, value, serializedAdditionalRawData: null);
        }
    }
}
