// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hybridkubernetes.Models
{
    /// <summary> Indicates the kind of Arc connected cluster based on host infrastructure. </summary>
    public readonly partial struct ConnectedClusterKind : IEquatable<ConnectedClusterKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectedClusterKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectedClusterKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProvisionedClusterValue = "ProvisionedCluster";
        private const string AWSValue = "AWS";

        /// <summary> ProvisionedCluster. </summary>
        public static ConnectedClusterKind ProvisionedCluster { get; } = new ConnectedClusterKind(ProvisionedClusterValue);
        /// <summary> AWS. </summary>
        public static ConnectedClusterKind AWS { get; } = new ConnectedClusterKind(AWSValue);
        /// <summary> Determines if two <see cref="ConnectedClusterKind"/> values are the same. </summary>
        public static bool operator ==(ConnectedClusterKind left, ConnectedClusterKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectedClusterKind"/> values are not the same. </summary>
        public static bool operator !=(ConnectedClusterKind left, ConnectedClusterKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectedClusterKind"/>. </summary>
        public static implicit operator ConnectedClusterKind(string value) => new ConnectedClusterKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectedClusterKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectedClusterKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
