// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Search
{
    /// <summary>
    /// The results of the vector query will filter based on the '@search.score' value.
    /// Note this is the @search.score returned as part of the search response. The
    /// threshold direction will be chosen for higher @search.score.
    /// </summary>
    public partial class SearchScoreThreshold : VectorThreshold
    {
        /// <summary> Initializes a new instance of <see cref="SearchScoreThreshold"/>. </summary>
        /// <param name="value">
        /// The threshold will filter based on the '@search.score' value. Note this is the
        /// @search.score returned as part of the search response. The threshold direction
        /// will be chosen for higher @search.score.
        /// </param>
        public SearchScoreThreshold(double value)
        {
            Kind = VectorThresholdKind.SearchScore;
            Value = value;
        }

        /// <summary> Initializes a new instance of <see cref="SearchScoreThreshold"/>. </summary>
        /// <param name="kind"> Type of threshold. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="value">
        /// The threshold will filter based on the '@search.score' value. Note this is the
        /// @search.score returned as part of the search response. The threshold direction
        /// will be chosen for higher @search.score.
        /// </param>
        internal SearchScoreThreshold(VectorThresholdKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, double value) : base(kind, serializedAdditionalRawData)
        {
            Value = value;
        }

        /// <summary> Initializes a new instance of <see cref="SearchScoreThreshold"/> for deserialization. </summary>
        internal SearchScoreThreshold()
        {
        }

        /// <summary>
        /// The threshold will filter based on the '@search.score' value. Note this is the
        /// @search.score returned as part of the search response. The threshold direction
        /// will be chosen for higher @search.score.
        /// </summary>
        public double Value { get; set; }
    }
}
