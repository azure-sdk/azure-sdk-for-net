// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Search
{
    /// <summary>
    /// Specifies whether any or all of the search terms must be matched in order to
    /// count the document as a match.
    /// </summary>
    public readonly partial struct SearchMode : IEquatable<SearchMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SearchMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SearchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnyValue = "any";
        private const string AllValue = "all";

        /// <summary>
        /// Any of the search terms must be matched in order to count the document as a
        /// match.
        /// </summary>
        public static SearchMode Any { get; } = new SearchMode(AnyValue);
        /// <summary>
        /// All of the search terms must be matched in order to count the document as a
        /// match.
        /// </summary>
        public static SearchMode All { get; } = new SearchMode(AllValue);
        /// <summary> Determines if two <see cref="SearchMode"/> values are the same. </summary>
        public static bool operator ==(SearchMode left, SearchMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SearchMode"/> values are not the same. </summary>
        public static bool operator !=(SearchMode left, SearchMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SearchMode"/>. </summary>
        public static implicit operator SearchMode(string value) => new SearchMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SearchMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SearchMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
