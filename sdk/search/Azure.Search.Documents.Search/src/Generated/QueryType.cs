// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Search
{
    /// <summary>
    /// Specifies the syntax of the search query. The default is 'simple'. Use 'full'
    /// if your query uses the Lucene query syntax.
    /// </summary>
    public readonly partial struct QueryType : IEquatable<QueryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QueryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SimpleValue = "simple";
        private const string FullValue = "full";
        private const string SemanticValue = "semantic";

        /// <summary>
        /// Uses the simple query syntax for searches. Search text is interpreted using a
        /// simple query language that allows for symbols such as +, * and "". Queries are
        /// evaluated across all searchable fields by default, unless the searchFields
        /// parameter is specified.
        /// </summary>
        public static QueryType Simple { get; } = new QueryType(SimpleValue);
        /// <summary>
        /// Uses the full Lucene query syntax for searches. Search text is interpreted
        /// using the Lucene query language which allows field-specific and weighted
        /// searches, as well as other advanced features.
        /// </summary>
        public static QueryType Full { get; } = new QueryType(FullValue);
        /// <summary>
        /// Best suited for queries expressed in natural language as opposed to keywords.
        /// Improves precision of search results by re-ranking the top search results using
        /// a ranking model trained on the Web corpus.
        /// </summary>
        public static QueryType Semantic { get; } = new QueryType(SemanticValue);
        /// <summary> Determines if two <see cref="QueryType"/> values are the same. </summary>
        public static bool operator ==(QueryType left, QueryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QueryType"/> values are not the same. </summary>
        public static bool operator !=(QueryType left, QueryType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="QueryType"/>. </summary>
        public static implicit operator QueryType(string value) => new QueryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QueryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QueryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
