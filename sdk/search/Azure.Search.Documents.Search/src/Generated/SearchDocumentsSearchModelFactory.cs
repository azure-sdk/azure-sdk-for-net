// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Search.Documents.Search
{
    /// <summary> Model factory for models. </summary>
    public static partial class SearchDocumentsSearchModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Search.SearchDocumentsResult"/>. </summary>
        /// <param name="count">
        /// The total count of results found by the search operation, or null if the count
        /// was not requested. If present, the count may be greater than the number of
        /// results in this response. This can happen if you use the $top or $skip
        /// parameters, or if the query can't return all the requested documents in a
        /// single response.
        /// </param>
        /// <param name="coverage">
        /// A value indicating the percentage of the index that was included in the query,
        /// or null if minimumCoverage was not specified in the request.
        /// </param>
        /// <param name="facets">
        /// The facet query results for the search operation, organized as a collection of
        /// buckets for each faceted field; null if the query did not include any facet
        /// expressions.
        /// </param>
        /// <param name="answers">
        /// The answers query results for the search operation; null if the answers query
        /// parameter was not specified or set to 'none'.
        /// </param>
        /// <param name="nextPageParameters">
        /// Continuation JSON payload returned when the query can't return all the
        /// requested results in a single response. You can use this JSON along with
        /// </param>
        /// <param name="value"> The sequence of results returned by the query. </param>
        /// <param name="nextLink">
        /// Continuation URL returned when the query can't return all the requested results
        /// in a single response. You can use this URL to formulate another GET or POST
        /// Search request to get the next part of the search response. Make sure to use
        /// the same verb (GET or POST) as the request that produced this response.
        /// </param>
        /// <param name="semanticPartialResponseReason"> Reason that a partial response was returned for a semantic ranking request. </param>
        /// <param name="semanticPartialResponseType"> Type of partial response that was returned for a semantic ranking request. </param>
        /// <returns> A new <see cref="Search.SearchDocumentsResult"/> instance for mocking. </returns>
        public static SearchDocumentsResult SearchDocumentsResult(long? count = null, double? coverage = null, IReadOnlyDictionary<string, IList<FacetResult>> facets = null, IEnumerable<QueryAnswerResult> answers = null, SearchRequest nextPageParameters = null, IEnumerable<SearchResult> value = null, string nextLink = null, SemanticErrorReason? semanticPartialResponseReason = null, SemanticSearchResultsType? semanticPartialResponseType = null)
        {
            facets ??= new Dictionary<string, IList<FacetResult>>();
            answers ??= new List<QueryAnswerResult>();
            value ??= new List<SearchResult>();

            return new SearchDocumentsResult(
                count,
                coverage,
                facets,
                answers?.ToList(),
                nextPageParameters,
                value?.ToList(),
                nextLink,
                semanticPartialResponseReason,
                semanticPartialResponseType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.FacetResult"/>. </summary>
        /// <param name="count">
        /// The approximate count of documents falling within the bucket described by this
        /// facet.
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.FacetResult"/> instance for mocking. </returns>
        public static FacetResult FacetResult(long? count = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FacetResult(count, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.QueryAnswerResult"/>. </summary>
        /// <param name="score">
        /// The score value represents how relevant the answer is to the query relative to
        /// other answers returned for the query.
        /// </param>
        /// <param name="key"> The key of the document the answer was extracted from. </param>
        /// <param name="text"> The text passage extracted from the document contents as the answer. </param>
        /// <param name="highlights">
        /// Same text passage as in the Text property with highlighted text phrases most
        /// relevant to the query.
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.QueryAnswerResult"/> instance for mocking. </returns>
        public static QueryAnswerResult QueryAnswerResult(double? score = null, string key = null, string text = null, string highlights = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QueryAnswerResult(score, key, text, highlights, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.SearchResult"/>. </summary>
        /// <param name="score">
        /// The relevance score of the document compared to other documents returned by the
        /// query.
        /// </param>
        /// <param name="rerankerScore">
        /// The relevance score computed by the semantic ranker for the top search results.
        /// Search results are sorted by the RerankerScore first and then by the Score.
        /// RerankerScore is only returned for queries of type 'semantic'.
        /// </param>
        /// <param name="highlights">
        /// Text fragments from the document that indicate the matching search terms,
        /// organized by each applicable field; null if hit highlighting was not enabled
        /// for the query.
        /// </param>
        /// <param name="captions">
        /// Captions are the most representative passages from the document relatively to
        /// the search query. They are often used as document summary. Captions are only
        /// returned for queries of type 'semantic'.
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.SearchResult"/> instance for mocking. </returns>
        public static SearchResult SearchResult(double score = default, double? rerankerScore = null, IReadOnlyDictionary<string, IList<string>> highlights = null, IEnumerable<QueryCaptionResult> captions = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            highlights ??= new Dictionary<string, IList<string>>();
            captions ??= new List<QueryCaptionResult>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SearchResult(score, rerankerScore, highlights, captions?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.QueryCaptionResult"/>. </summary>
        /// <param name="text">
        /// A representative text passage extracted from the document most relevant to the
        /// search query.
        /// </param>
        /// <param name="highlights">
        /// Same text passage as in the Text property with highlighted phrases most
        /// relevant to the query.
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.QueryCaptionResult"/> instance for mocking. </returns>
        public static QueryCaptionResult QueryCaptionResult(string text = null, string highlights = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QueryCaptionResult(text, highlights, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.LookupDocument"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.LookupDocument"/> instance for mocking. </returns>
        public static LookupDocument LookupDocument(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LookupDocument(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.SuggestDocumentsResult"/>. </summary>
        /// <param name="value"> The sequence of results returned by the query. </param>
        /// <param name="coverage">
        /// A value indicating the percentage of the index that was included in the query,
        /// or null if minimumCoverage was not set in the request.
        /// </param>
        /// <returns> A new <see cref="Search.SuggestDocumentsResult"/> instance for mocking. </returns>
        public static SuggestDocumentsResult SuggestDocumentsResult(IEnumerable<SuggestResult> value = null, double? coverage = null)
        {
            value ??= new List<SuggestResult>();

            return new SuggestDocumentsResult(value?.ToList(), coverage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.SuggestResult"/>. </summary>
        /// <param name="text"> The text of the suggestion result. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Search.SuggestResult"/> instance for mocking. </returns>
        public static SuggestResult SuggestResult(string text = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SuggestResult(text, additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Search.SuggestRequest"/>. </summary>
        /// <param name="filter"> An OData expression that filters the documents considered for suggestions. </param>
        /// <param name="fuzzy">
        /// A value indicating whether to use fuzzy matching for the suggestion query.
        /// Default is false. When set to true, the query will find suggestions even if
        /// there's a substituted or missing character in the search text. While this
        /// provides a better experience in some scenarios, it comes at a performance cost
        /// as fuzzy suggestion searches are slower and consume more resources.
        /// </param>
        /// <param name="highlightPostTag">
        /// A string tag that is appended to hit highlights. Must be set with
        /// highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
        /// </param>
        /// <param name="highlightPreTag">
        /// A string tag that is prepended to hit highlights. Must be set with
        /// highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
        /// </param>
        /// <param name="minimumCoverage">
        /// A number between 0 and 100 indicating the percentage of the index that must be
        /// covered by a suggestion query in order for the query to be reported as a
        /// success. This parameter can be useful for ensuring search availability even for
        /// services with only one replica. The default is 80.
        /// </param>
        /// <param name="orderby">
        /// The comma-separated list of OData $orderby expressions by which to sort the
        /// results. Each expression can be either a field name or a call to either the
        /// geo.distance() or the search.score() functions. Each expression can be followed
        /// by asc to indicate ascending, or desc to indicate descending. The default is
        /// ascending order. Ties will be broken by the match scores of documents. If no
        /// $orderby is specified, the default sort order is descending by document match
        /// score. There can be at most 32 $orderby clauses.
        /// </param>
        /// <param name="search">
        /// The search text to use to suggest documents. Must be at least 1 character, and
        /// no more than 100 characters.
        /// </param>
        /// <param name="searchFields">
        /// The comma-separated list of field names to search for the specified search
        /// text. Target fields must be included in the specified suggester.
        /// </param>
        /// <param name="select">
        /// The comma-separated list of fields to retrieve. If unspecified, only the key
        /// field will be included in the results.
        /// </param>
        /// <param name="suggesterName">
        /// The name of the suggester as specified in the suggesters collection that's part
        /// of the index definition.
        /// </param>
        /// <param name="top">
        /// The number of suggestions to retrieve. This must be a value between 1 and 100.
        /// The default is 5.
        /// </param>
        /// <returns> A new <see cref="Search.SuggestRequest"/> instance for mocking. </returns>
        public static SuggestRequest SuggestRequest(string filter = null, bool? fuzzy = null, string highlightPostTag = null, string highlightPreTag = null, double? minimumCoverage = null, string orderby = null, string search = null, string searchFields = null, string select = null, string suggesterName = null, int? top = null)
        {
            return new SuggestRequest(
                filter,
                fuzzy,
                highlightPostTag,
                highlightPreTag,
                minimumCoverage,
                orderby,
                search,
                searchFields,
                select,
                suggesterName,
                top,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.IndexDocumentsResult"/>. </summary>
        /// <param name="value"> The list of status information for each document in the indexing request. </param>
        /// <returns> A new <see cref="Search.IndexDocumentsResult"/> instance for mocking. </returns>
        public static IndexDocumentsResult IndexDocumentsResult(IEnumerable<IndexingResult> value = null)
        {
            value ??= new List<IndexingResult>();

            return new IndexDocumentsResult(value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.IndexingResult"/>. </summary>
        /// <param name="key"> The key of a document that was in the indexing request. </param>
        /// <param name="errorMessage">
        /// The error message explaining why the indexing operation failed for the document
        /// identified by the key; null if indexing succeeded.
        /// </param>
        /// <param name="status">
        /// A value indicating whether the indexing operation succeeded for the document
        /// identified by the key.
        /// </param>
        /// <param name="statusCode">
        /// The status code of the indexing operation. Possible values include: 200 for a
        /// successful update or delete, 201 for successful document creation, 400 for a
        /// malformed input document, 404 for document not found, 409 for a version
        /// conflict, 422 when the index is temporarily unavailable, or 503 for when the
        /// service is too busy.
        /// </param>
        /// <returns> A new <see cref="Search.IndexingResult"/> instance for mocking. </returns>
        public static IndexingResult IndexingResult(string key = null, string errorMessage = null, bool status = default, int statusCode = default)
        {
            return new IndexingResult(key, errorMessage, status, statusCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.AutocompleteResult"/>. </summary>
        /// <param name="coverage">
        /// A value indicating the percentage of the index that was considered by the
        /// autocomplete request, or null if minimumCoverage was not specified in the
        /// request.
        /// </param>
        /// <param name="value"> The list of returned Autocompleted items. </param>
        /// <returns> A new <see cref="Search.AutocompleteResult"/> instance for mocking. </returns>
        public static AutocompleteResult AutocompleteResult(double? coverage = null, IEnumerable<AutocompleteItem> value = null)
        {
            value ??= new List<AutocompleteItem>();

            return new AutocompleteResult(coverage, value?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.AutocompleteItem"/>. </summary>
        /// <param name="text"> The completed term. </param>
        /// <param name="queryPlusText"> The query along with the completed term. </param>
        /// <returns> A new <see cref="Search.AutocompleteItem"/> instance for mocking. </returns>
        public static AutocompleteItem AutocompleteItem(string text = null, string queryPlusText = null)
        {
            return new AutocompleteItem(text, queryPlusText, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Search.AutocompleteRequest"/>. </summary>
        /// <param name="search"> The search text on which to base autocomplete results. </param>
        /// <param name="autocompleteMode">
        /// Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms'
        /// to get shingles and 'oneTermWithContext' to use the current context while
        /// producing auto-completed terms.
        /// </param>
        /// <param name="filter">
        /// An OData expression that filters the documents used to produce completed terms
        /// for the Autocomplete result.
        /// </param>
        /// <param name="fuzzy">
        /// A value indicating whether to use fuzzy matching for the autocomplete query.
        /// Default is false. When set to true, the query will autocomplete terms even if
        /// there's a substituted or missing character in the search text. While this
        /// provides a better experience in some scenarios, it comes at a performance cost
        /// as fuzzy autocomplete queries are slower and consume more resources.
        /// </param>
        /// <param name="highlightPostTag">
        /// A string tag that is appended to hit highlights. Must be set with
        /// highlightPreTag. If omitted, hit highlighting is disabled.
        /// </param>
        /// <param name="highlightPreTag">
        /// A string tag that is prepended to hit highlights. Must be set with
        /// highlightPostTag. If omitted, hit highlighting is disabled.
        /// </param>
        /// <param name="minimumCoverage">
        /// A number between 0 and 100 indicating the percentage of the index that must be
        /// covered by an autocomplete query in order for the query to be reported as a
        /// success. This parameter can be useful for ensuring search availability even for
        /// services with only one replica. The default is 80.
        /// </param>
        /// <param name="searchFields">
        /// The comma-separated list of field names to consider when querying for
        /// auto-completed terms. Target fields must be included in the specified
        /// suggester.
        /// </param>
        /// <param name="suggesterName">
        /// The name of the suggester as specified in the suggesters collection that's part
        /// of the index definition.
        /// </param>
        /// <param name="top">
        /// The number of auto-completed terms to retrieve. This must be a value between 1
        /// and 100. The default is 5.
        /// </param>
        /// <returns> A new <see cref="Search.AutocompleteRequest"/> instance for mocking. </returns>
        public static AutocompleteRequest AutocompleteRequest(string search = null, AutocompleteMode? autocompleteMode = null, string filter = null, bool? fuzzy = null, string highlightPostTag = null, string highlightPreTag = null, double? minimumCoverage = null, string searchFields = null, string suggesterName = null, int? top = null)
        {
            return new AutocompleteRequest(
                search,
                autocompleteMode,
                filter,
                fuzzy,
                highlightPostTag,
                highlightPreTag,
                minimumCoverage,
                searchFields,
                suggesterName,
                top,
                serializedAdditionalRawData: null);
        }
    }
}
