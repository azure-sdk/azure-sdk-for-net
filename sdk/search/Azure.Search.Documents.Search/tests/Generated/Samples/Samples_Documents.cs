// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Search.Samples
{
    public partial class Samples_Documents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_Count_SearchIndexCountDocuments()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.Count("myindex", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_Count_SearchIndexCountDocuments_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.CountAsync("myindex", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_Count_SearchIndexCountDocuments_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<int> response = client.Count("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_Count_SearchIndexCountDocuments_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<int> response = await client.CountAsync("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchGet_SearchIndexSearchDocumentsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.SearchGet("myindex", "nice hotels", true, new string[] { "category,count:10,sort:count" }, "rating gt 10", new string[] { "title" }, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, "simple", null, "sp", new string[] { "title", "description" }, "any", "global", "mysessionid", new string[] { "docId", "title", "description" }, 100, 10, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchGet_SearchIndexSearchDocumentsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.SearchGetAsync("myindex", "nice hotels", true, new string[] { "category,count:10,sort:count" }, "rating gt 10", new string[] { "title" }, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, "simple", null, "sp", new string[] { "title", "description" }, "any", "global", "mysessionid", new string[] { "docId", "title", "description" }, 100, 10, null, null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchGet_SearchIndexSearchDocumentsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SearchDocumentsResult> response = client.SearchGet("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchGet_SearchIndexSearchDocumentsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SearchDocumentsResult> response = await client.SearchGetAsync("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchGet_SearchIndexSearchDocumentsSemanticGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.SearchGet("myindex", "how do clouds form", true, null, null, null, "</em>", "<em>", null, null, "semantic", null, null, null, null, null, null, null, null, null, "my-semantic-config", "partial", 780, "extractive|count-3", "extractive|highlight-true", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchGet_SearchIndexSearchDocumentsSemanticGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.SearchGetAsync("myindex", "how do clouds form", true, null, null, null, "</em>", "<em>", null, null, "semantic", null, null, null, null, null, null, null, null, null, "my-semantic-config", "partial", 780, "extractive|count-3", "extractive|highlight-true", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchGet_SearchIndexSearchDocumentsSemanticGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SearchDocumentsResult> response = client.SearchGet("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchGet_SearchIndexSearchDocumentsSemanticGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SearchDocumentsResult> response = await client.SearchGetAsync("myindex");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchPost_SearchIndexSearchDocumentsPost()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                count = true,
                facets = new object[]
            {
"category,count:10,sort:count"
            },
                filter = "rating gt 4.0",
                highlight = "description",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                orderby = "rating desc",
                queryType = "simple",
                scoringParameters = new object[]
            {
"currentLocation--122.123,44.77233"
            },
                scoringProfile = "sp",
                search = "nice hotels",
                searchFields = "category,description",
                searchMode = "any",
                sessionId = "mysessionid",
                scoringStatistics = "global",
                select = "hotelId,category,description",
                skip = 0,
                top = 10,
                vectorQueries = new object[]
            {
new
{
kind = "vector",
vector = new object[]
{
0.103F,
0.0712F,
0.0852F,
0.1547F,
0.1183F
},
fields = "descriptionEmbedding",
k = 5,
exhaustive = true,
oversampling = 20,
weight = 2F,
}
            },
                vectorFilterMode = "preFilter",
            });
            Response response = client.SearchPost("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchPost_SearchIndexSearchDocumentsPost_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                count = true,
                facets = new object[]
            {
"category,count:10,sort:count"
            },
                filter = "rating gt 4.0",
                highlight = "description",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                orderby = "rating desc",
                queryType = "simple",
                scoringParameters = new object[]
            {
"currentLocation--122.123,44.77233"
            },
                scoringProfile = "sp",
                search = "nice hotels",
                searchFields = "category,description",
                searchMode = "any",
                sessionId = "mysessionid",
                scoringStatistics = "global",
                select = "hotelId,category,description",
                skip = 0,
                top = 10,
                vectorQueries = new object[]
            {
new
{
kind = "vector",
vector = new object[]
{
0.103F,
0.0712F,
0.0852F,
0.1547F,
0.1183F
},
fields = "descriptionEmbedding",
k = 5,
exhaustive = true,
oversampling = 20,
weight = 2F,
}
            },
                vectorFilterMode = "preFilter",
            });
            Response response = await client.SearchPostAsync("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchPost_SearchIndexSearchDocumentsPost_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SearchRequest searchRequest = new SearchRequest
            {
                Count = true,
                Facets = { "category,count:10,sort:count" },
                Filter = "rating gt 4.0",
                Highlight = "description",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                Orderby = "rating desc",
                QueryType = QueryType.Simple,
                ScoringStatistics = ScoringStatistics.Global,
                SessionId = "mysessionid",
                ScoringParameters = { "currentLocation--122.123,44.77233" },
                ScoringProfile = "sp",
                Search = "nice hotels",
                SearchFields = "category,description",
                SearchMode = SearchMode.Any,
                Select = "hotelId,category,description",
                Skip = 0,
                Top = 10,
                VectorQueries = {new VectorizedQuery(new float[]{0.103F, 0.0712F, 0.0852F, 0.1547F, 0.1183F})
{
K = 5,
Fields = "descriptionEmbedding",
Exhaustive = true,
Oversampling = 20,
Weight = 2F,
}},
                VectorFilterMode = VectorFilterMode.PreFilter,
            };
            Response<SearchDocumentsResult> response = client.SearchPost("myindex", searchRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchPost_SearchIndexSearchDocumentsPost_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SearchRequest searchRequest = new SearchRequest
            {
                Count = true,
                Facets = { "category,count:10,sort:count" },
                Filter = "rating gt 4.0",
                Highlight = "description",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                Orderby = "rating desc",
                QueryType = QueryType.Simple,
                ScoringStatistics = ScoringStatistics.Global,
                SessionId = "mysessionid",
                ScoringParameters = { "currentLocation--122.123,44.77233" },
                ScoringProfile = "sp",
                Search = "nice hotels",
                SearchFields = "category,description",
                SearchMode = SearchMode.Any,
                Select = "hotelId,category,description",
                Skip = 0,
                Top = 10,
                VectorQueries = {new VectorizedQuery(new float[]{0.103F, 0.0712F, 0.0852F, 0.1547F, 0.1183F})
{
K = 5,
Fields = "descriptionEmbedding",
Exhaustive = true,
Oversampling = 20,
Weight = 2F,
}},
                VectorFilterMode = VectorFilterMode.PreFilter,
            };
            Response<SearchDocumentsResult> response = await client.SearchPostAsync("myindex", searchRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchPost_SearchIndexSearchDocumentsSemanticPost()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                count = true,
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                queryType = "semantic",
                search = "how do clouds form",
                semanticConfiguration = "my-semantic-config",
                answers = "extractive|count-3",
                captions = "extractive|highlight-true",
                semanticErrorHandling = "partial",
                semanticMaxWaitInMilliseconds = 780,
            });
            Response response = client.SearchPost("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchPost_SearchIndexSearchDocumentsSemanticPost_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                count = true,
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                queryType = "semantic",
                search = "how do clouds form",
                semanticConfiguration = "my-semantic-config",
                answers = "extractive|count-3",
                captions = "extractive|highlight-true",
                semanticErrorHandling = "partial",
                semanticMaxWaitInMilliseconds = 780,
            });
            Response response = await client.SearchPostAsync("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SearchPost_SearchIndexSearchDocumentsSemanticPost_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SearchRequest searchRequest = new SearchRequest
            {
                Count = true,
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                QueryType = QueryType.Semantic,
                Search = "how do clouds form",
                SemanticConfiguration = "my-semantic-config",
                SemanticErrorHandling = SemanticErrorMode.Partial,
                SemanticMaxWaitInMilliseconds = 780,
                Answers = new QueryAnswerType("extractive|count-3"),
                Captions = new QueryCaptionType("extractive|highlight-true"),
            };
            Response<SearchDocumentsResult> response = client.SearchPost("myindex", searchRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SearchPost_SearchIndexSearchDocumentsSemanticPost_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SearchRequest searchRequest = new SearchRequest
            {
                Count = true,
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                QueryType = QueryType.Semantic,
                Search = "how do clouds form",
                SemanticConfiguration = "my-semantic-config",
                SemanticErrorHandling = SemanticErrorMode.Partial,
                SemanticMaxWaitInMilliseconds = 780,
                Answers = new QueryAnswerType("extractive|count-3"),
                Captions = new QueryCaptionType("extractive|highlight-true"),
            };
            Response<SearchDocumentsResult> response = await client.SearchPostAsync("myindex", searchRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_GetDocument_SearchIndexGetDocument()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.GetDocument("getdocumentexample", "1", new string[] { "docId", "title", "description" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_GetDocument_SearchIndexGetDocument_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.GetDocumentAsync("getdocumentexample", "1", new string[] { "docId", "title", "description" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_GetDocument_SearchIndexGetDocument_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<LookupDocument> response = client.GetDocument("getdocumentexample", "1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_GetDocument_SearchIndexGetDocument_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<LookupDocument> response = await client.GetDocumentAsync("getdocumentexample", "1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SuggestGet_SearchIndexSuggestDocumentsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.SuggestGet("myindex", "hote", "sg", "rating gt 10", false, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, new string[] { "title" }, new string[] { "docId", "title", "description" }, 10, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SuggestGet_SearchIndexSuggestDocumentsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.SuggestGetAsync("myindex", "hote", "sg", "rating gt 10", false, "</em>", "<em>", 80, new string[] { "search.score() desc", "rating desc" }, new string[] { "title" }, new string[] { "docId", "title", "description" }, 10, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SuggestGet_SearchIndexSuggestDocumentsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SuggestDocumentsResult> response = client.SuggestGet("myindex", "hote", "sg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SuggestGet_SearchIndexSuggestDocumentsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<SuggestDocumentsResult> response = await client.SuggestGetAsync("myindex", "hote", "sg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SuggestPost_SearchIndexSuggestDocumentsPost()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                filter = "rating gt 4.0",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                minimumCoverage = 80,
                orderby = "rating desc",
                search = "hote",
                searchFields = "title",
                select = "docId,title,description",
                suggesterName = "sg",
                top = 10,
            });
            Response response = client.SuggestPost("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SuggestPost_SearchIndexSuggestDocumentsPost_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                filter = "rating gt 4.0",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                minimumCoverage = 80,
                orderby = "rating desc",
                search = "hote",
                searchFields = "title",
                select = "docId,title,description",
                suggesterName = "sg",
                top = 10,
            });
            Response response = await client.SuggestPostAsync("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_SuggestPost_SearchIndexSuggestDocumentsPost_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SuggestRequest suggestRequest = new SuggestRequest("hote", "sg")
            {
                Filter = "rating gt 4.0",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                MinimumCoverage = 80,
                Orderby = "rating desc",
                SearchFields = "title",
                Select = "docId,title,description",
                Top = 10,
            };
            Response<SuggestDocumentsResult> response = client.SuggestPost("myindex", suggestRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_SuggestPost_SearchIndexSuggestDocumentsPost_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            SuggestRequest suggestRequest = new SuggestRequest("hote", "sg")
            {
                Filter = "rating gt 4.0",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                MinimumCoverage = 80,
                Orderby = "rating desc",
                SearchFields = "title",
                Select = "docId,title,description",
                Top = 10,
            };
            Response<SuggestDocumentsResult> response = await client.SuggestPostAsync("myindex", suggestRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_Index_SearchIndexIndexDocuments()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new Dictionary<string, object>
{
["@search.action"] = "upload"
},
new Dictionary<string, object>
{
["@search.action"] = "merge"
},
new Dictionary<string, object>
{
["@search.action"] = "mergeOrUpload"
},
new Dictionary<string, object>
{
["@search.action"] = "delete"
}
            },
            });
            Response response = client.Index("indexdocumentsexample", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_Index_SearchIndexIndexDocuments_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new Dictionary<string, object>
{
["@search.action"] = "upload"
},
new Dictionary<string, object>
{
["@search.action"] = "merge"
},
new Dictionary<string, object>
{
["@search.action"] = "mergeOrUpload"
},
new Dictionary<string, object>
{
["@search.action"] = "delete"
}
            },
            });
            Response response = await client.IndexAsync("indexdocumentsexample", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("statusCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_Index_SearchIndexIndexDocuments_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            IndexBatch batch = new IndexBatch(new IndexAction[]
            {
new IndexAction
{
ActionType = IndexActionType.Upload,
},
new IndexAction
{
ActionType = IndexActionType.Merge,
},
new IndexAction
{
ActionType = IndexActionType.MergeOrUpload,
},
new IndexAction
{
ActionType = IndexActionType.Delete,
}
            });
            Response<IndexDocumentsResult> response = client.Index("indexdocumentsexample", batch);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_Index_SearchIndexIndexDocuments_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            IndexBatch batch = new IndexBatch(new IndexAction[]
            {
new IndexAction
{
ActionType = IndexActionType.Upload,
},
new IndexAction
{
ActionType = IndexActionType.Merge,
},
new IndexAction
{
ActionType = IndexActionType.MergeOrUpload,
},
new IndexAction
{
ActionType = IndexActionType.Delete,
}
            });
            Response<IndexDocumentsResult> response = await client.IndexAsync("indexdocumentsexample", batch);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_AutocompleteGet_SearchIndexAutocompleteDocumentsGet()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = client.AutocompleteGet("myindex", "washington medic", "sg", "oneTerm", null, false, "</em>", "<em>", 80, new string[] { "title", "description" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_AutocompleteGet_SearchIndexAutocompleteDocumentsGet_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response response = await client.AutocompleteGetAsync("myindex", "washington medic", "sg", "oneTerm", null, false, "</em>", "<em>", 80, new string[] { "title", "description" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_AutocompleteGet_SearchIndexAutocompleteDocumentsGet_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<AutocompleteResult> response = client.AutocompleteGet("myindex", "washington medic", "sg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_AutocompleteGet_SearchIndexAutocompleteDocumentsGet_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            Response<AutocompleteResult> response = await client.AutocompleteGetAsync("myindex", "washington medic", "sg");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_AutocompletePost_SearchIndexAutocompleteDocumentsPost()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                autocompleteMode = "oneTerm",
                search = "washington medic",
                suggesterName = "sg",
                filter = "search.in(docId,'101,102,105')",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                minimumCoverage = 80,
                searchFields = "title,description",
                top = 10,
            });
            Response response = client.AutocompletePost("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_AutocompletePost_SearchIndexAutocompleteDocumentsPost_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            using RequestContent content = RequestContent.Create(new
            {
                autocompleteMode = "oneTerm",
                search = "washington medic",
                suggesterName = "sg",
                filter = "search.in(docId,'101,102,105')",
                highlightPostTag = "</em>",
                highlightPreTag = "<em>",
                minimumCoverage = 80,
                searchFields = "title,description",
                top = 10,
            });
            Response response = await client.AutocompletePostAsync("myindex", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Documents_AutocompletePost_SearchIndexAutocompleteDocumentsPost_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            AutocompleteRequest autocompleteRequest = new AutocompleteRequest("washington medic", "sg")
            {
                AutocompleteMode = AutocompleteMode.OneTerm,
                Filter = "search.in(docId,'101,102,105')",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                MinimumCoverage = 80,
                SearchFields = "title,description",
                Top = 10,
            };
            Response<AutocompleteResult> response = client.AutocompletePost("myindex", autocompleteRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Documents_AutocompletePost_SearchIndexAutocompleteDocumentsPost_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Documents client = new SearchClient(endpoint, credential).GetDocumentsClient(apiVersion: "2024-07-01");

            AutocompleteRequest autocompleteRequest = new AutocompleteRequest("washington medic", "sg")
            {
                AutocompleteMode = AutocompleteMode.OneTerm,
                Filter = "search.in(docId,'101,102,105')",
                HighlightPostTag = "</em>",
                HighlightPreTag = "<em>",
                MinimumCoverage = 80,
                SearchFields = "title,description",
                Top = 10,
            };
            Response<AutocompleteResult> response = await client.AutocompletePostAsync("myindex", autocompleteRequest);
        }
    }
}
