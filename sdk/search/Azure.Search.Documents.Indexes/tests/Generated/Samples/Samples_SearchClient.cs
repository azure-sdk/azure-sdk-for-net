// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Indexes.Samples
{
    public partial class Samples_SearchClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Search_GetServiceStatistics_SearchServiceGetServiceStatistics()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            Response response = client.GetServiceStatistics(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("counters").GetProperty("aliasesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("documentCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("indexesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("indexersCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("dataSourcesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("storageSize").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("synonymMaps").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("skillsetCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("vectorIndexSize").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Search_GetServiceStatistics_SearchServiceGetServiceStatistics_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            Response response = await client.GetServiceStatisticsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("counters").GetProperty("aliasesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("documentCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("indexesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("indexersCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("dataSourcesCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("storageSize").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("synonymMaps").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("skillsetCount").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("counters").GetProperty("vectorIndexSize").GetProperty("usage").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Search_GetServiceStatistics_SearchServiceGetServiceStatistics_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            Response<SearchServiceStatistics> response = client.GetServiceStatistics();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Search_GetServiceStatistics_SearchServiceGetServiceStatistics_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            Response<SearchServiceStatistics> response = await client.GetServiceStatisticsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Search_GetIndexStatsSummary_SearchServiceGetIndexStatsSummary()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            foreach (BinaryData item in client.GetIndexStatsSummary(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("documentCount").ToString());
                Console.WriteLine(result.GetProperty("storageSize").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Search_GetIndexStatsSummary_SearchServiceGetIndexStatsSummary_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetIndexStatsSummaryAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("documentCount").ToString());
                Console.WriteLine(result.GetProperty("storageSize").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Search_GetIndexStatsSummary_SearchServiceGetIndexStatsSummary_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            foreach (IndexStatisticsSummary item in client.GetIndexStatsSummary())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Search_GetIndexStatsSummary_SearchServiceGetIndexStatsSummary_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            SearchClient client = new SearchClient(endpoint, credential);

            await foreach (IndexStatisticsSummary item in client.GetIndexStatsSummaryAsync())
            {
            }
        }
    }
}
