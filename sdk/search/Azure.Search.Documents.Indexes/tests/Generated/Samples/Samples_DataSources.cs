// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Indexes.Samples
{
    public partial class Samples_DataSources
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "mydocdbdatasource",
                description = "My Cosmos DB data source.",
                type = "cosmosdb",
                credentials = new
                {
                    connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
                },
                container = new
                {
                    name = "myDocDbCollectionId",
                    query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
                },
                dataChangeDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
                    ["highWaterMarkColumnName"] = "_ts"
                },
                dataDeletionDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
                    ["softDeleteColumnName"] = "isDeleted",
                    ["softDeleteMarkerValue"] = "true"
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                },
            });
            Response response = client.CreateOrUpdate("mydatasource", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "mydocdbdatasource",
                description = "My Cosmos DB data source.",
                type = "cosmosdb",
                credentials = new
                {
                    connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
                },
                container = new
                {
                    name = "myDocDbCollectionId",
                    query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
                },
                dataChangeDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
                    ["highWaterMarkColumnName"] = "_ts"
                },
                dataDeletionDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
                    ["softDeleteColumnName"] = "isDeleted",
                    ["softDeleteMarkerValue"] = "true"
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                },
            });
            Response response = await client.CreateOrUpdateAsync("mydatasource", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
            {
                ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
            }, new SearchIndexerDataContainer("myDocDbCollectionId")
            {
                Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
            })
            {
                Description = "My Cosmos DB data source.",
                DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
                DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
                {
                    SoftDeleteColumnName = "isDeleted",
                    SoftDeleteMarkerValue = "true",
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
            };
            Response<SearchIndexerDataSource> response = client.CreateOrUpdate("mydatasource", dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_CreateOrUpdate_SearchServiceCreateOrUpdateDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
            {
                ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
            }, new SearchIndexerDataContainer("myDocDbCollectionId")
            {
                Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
            })
            {
                Description = "My Cosmos DB data source.",
                DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
                DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
                {
                    SoftDeleteColumnName = "isDeleted",
                    SoftDeleteMarkerValue = "true",
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
            };
            Response<SearchIndexerDataSource> response = await client.CreateOrUpdateAsync("mydatasource", dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Delete_SearchServiceDeleteDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.Delete("mydatasource");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Delete_SearchServiceDeleteDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.DeleteAsync("mydatasource");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSource_SearchServiceGetDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.GetDataSource("mydatasource", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSource_SearchServiceGetDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.GetDataSourceAsync("mydatasource", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSource_SearchServiceGetDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<SearchIndexerDataSource> response = client.GetDataSource("mydatasource");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSource_SearchServiceGetDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<SearchIndexerDataSource> response = await client.GetDataSourceAsync("mydatasource");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSources_SearchServiceListDataSources()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = client.GetDataSources("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSources_SearchServiceListDataSources_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response response = await client.GetDataSourcesAsync("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_GetDataSources_SearchServiceListDataSources_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<ListDataSourcesResult> response = client.GetDataSources();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_GetDataSources_SearchServiceListDataSources_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            Response<ListDataSourcesResult> response = await client.GetDataSourcesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Create_SearchServiceCreateDataSource()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "mydocdbdatasource",
                description = "My Cosmos DB data source.",
                type = "cosmosdb",
                credentials = new
                {
                    connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
                },
                container = new
                {
                    name = "myDocDbCollectionId",
                    query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
                },
                dataChangeDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
                    ["highWaterMarkColumnName"] = "_ts"
                },
                dataDeletionDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
                    ["softDeleteColumnName"] = "isDeleted",
                    ["softDeleteMarkerValue"] = "true"
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Create_SearchServiceCreateDataSource_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "mydocdbdatasource",
                description = "My Cosmos DB data source.",
                type = "cosmosdb",
                credentials = new
                {
                    connectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
                },
                container = new
                {
                    name = "myDocDbCollectionId",
                    query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
                },
                dataChangeDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy",
                    ["highWaterMarkColumnName"] = "_ts"
                },
                dataDeletionDetectionPolicy = new Dictionary<string, object>
                {
                    ["@odata.type"] = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy",
                    ["softDeleteColumnName"] = "isDeleted",
                    ["softDeleteMarkerValue"] = "true"
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("credentials").ToString());
            Console.WriteLine(result.GetProperty("container").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DataSources_Create_SearchServiceCreateDataSource_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
            {
                ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
            }, new SearchIndexerDataContainer("myDocDbCollectionId")
            {
                Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
            })
            {
                Description = "My Cosmos DB data source.",
                DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
                DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
                {
                    SoftDeleteColumnName = "isDeleted",
                    SoftDeleteMarkerValue = "true",
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
                {
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerDataSource> response = client.Create(dataSource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DataSources_Create_SearchServiceCreateDataSource_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DataSources client = new SearchClient(endpoint, credential).GetDataSourcesClient();

            SearchIndexerDataSource dataSource = new SearchIndexerDataSource("mydocdbdatasource", SearchIndexerDataSourceType.CosmosDb, new DataSourceCredentials
            {
                ConnectionString = "AccountEndpoint=https://myDocDbEndpoint.documents.azure.com;AccountKey=myDocDbAuthKey;Database=myDocDbDatabaseId",
            }, new SearchIndexerDataContainer("myDocDbCollectionId")
            {
                Query = "SELECT c.id, c.userId, tag, c._ts FROM c JOIN tag IN c.tags WHERE c._ts >= @HighWaterMark ORDER BY c._ts",
            })
            {
                Description = "My Cosmos DB data source.",
                DataChangeDetectionPolicy = new HighWaterMarkChangeDetectionPolicy("_ts"),
                DataDeletionDetectionPolicy = new SoftDeleteColumnDeletionDetectionPolicy
                {
                    SoftDeleteColumnName = "isDeleted",
                    SoftDeleteMarkerValue = "true",
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
                {
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerDataSource> response = await client.CreateAsync(dataSource);
        }
    }
}
