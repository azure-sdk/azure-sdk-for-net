// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Indexes.Samples
{
    public partial class Samples_Indexers
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Reset_SearchServiceResetIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Reset("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Reset_SearchServiceResetIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.ResetAsync("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Run_SearchServiceRunIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Run("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Run_SearchServiceRunIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.RunAsync("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "myindexer",
                description = "a cool indexer",
                dataSourceName = "mydatasource",
                targetIndexName = "orders",
                schedule = new
                {
                    interval = "PT1H",
                    startTime = "2015-01-01T00:00:00Z",
                },
                parameters = new
                {
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                },
            });
            Response response = client.CreateOrUpdate("myindexer", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "myindexer",
                description = "a cool indexer",
                dataSourceName = "mydatasource",
                targetIndexName = "orders",
                schedule = new
                {
                    interval = "PT1H",
                    startTime = "2015-01-01T00:00:00Z",
                },
                parameters = new
                {
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                },
            });
            Response response = await client.CreateOrUpdateAsync("myindexer", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydatasource", "orders")
            {
                Description = "a cool indexer",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("PT1H"))
                {
                    StartTime = DateTimeOffset.Parse("2015-01-01T00:00:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
            };
            Response<SearchIndexer> response = client.CreateOrUpdate("myindexer", indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydatasource", "orders")
            {
                Description = "a cool indexer",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("PT1H"))
                {
                    StartTime = DateTimeOffset.Parse("2015-01-01T00:00:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net"),
            };
            Response<SearchIndexer> response = await client.CreateOrUpdateAsync("myindexer", indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Delete_SearchServiceDeleteIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Delete("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Delete_SearchServiceDeleteIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.DeleteAsync("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexer_SearchServiceGetIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetIndexer("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexer_SearchServiceGetIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetIndexerAsync("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexer_SearchServiceGetIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexer> response = client.GetIndexer("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexer_SearchServiceGetIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexer> response = await client.GetIndexerAsync("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexers_SearchServiceListIndexers()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetIndexers("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexers_SearchServiceListIndexers_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetIndexersAsync("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexers_SearchServiceListIndexers_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<ListIndexersResult> response = client.GetIndexers();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexers_SearchServiceListIndexers_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<ListIndexersResult> response = await client.GetIndexersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Create_SearchServiceCreateIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "myindexer",
                description = "an indexer",
                dataSourceName = "mydatasource",
                targetIndexName = "orders",
                schedule = new
                {
                    interval = "PT1H",
                    startTime = "2015-01-01T00:00:00Z",
                },
                parameters = new
                {
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Create_SearchServiceCreateIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "myindexer",
                description = "an indexer",
                dataSourceName = "mydatasource",
                targetIndexName = "orders",
                schedule = new
                {
                    interval = "PT1H",
                    startTime = "2015-01-01T00:00:00Z",
                },
                parameters = new
                {
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                },
                encryptionKey = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Create_SearchServiceCreateIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydatasource", "orders")
            {
                Description = "an indexer",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("PT1H"))
                {
                    StartTime = DateTimeOffset.Parse("2015-01-01T00:00:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
                {
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexer> response = client.Create(indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Create_SearchServiceCreateIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydatasource", "orders")
            {
                Description = "an indexer",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("PT1H"))
                {
                    StartTime = DateTimeOffset.Parse("2015-01-01T00:00:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                },
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "myKeyVersion-32charAlphaNumericString", "https://myKeyVault.vault.azure.net")
                {
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexer> response = await client.CreateAsync(indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetStatus_SearchServiceGetIndexerStatus()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetStatus("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("errorMessage").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsProcessed").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsFailed").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetStatusAsync("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("errorMessage").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsProcessed").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsFailed").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexerStatus> response = client.GetStatus("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexerStatus> response = await client.GetStatusAsync("myindexer");
        }
    }
}
