// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Indexes.Samples
{
    public partial class Samples_Indexers
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Reset_SearchServiceResetIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Reset("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Reset_SearchServiceResetIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.ResetAsync("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_ResetDocs_SearchServiceResetDocs()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                documentKeys = new object[]
            {
"1",
"2",
"3"
            },
            });
            Response response = client.ResetDocs("myindexer", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_ResetDocs_SearchServiceResetDocs_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new
            {
                documentKeys = new object[]
            {
"1",
"2",
"3"
            },
            });
            Response response = await client.ResetDocsAsync("myindexer", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_ResetDocs_SearchServiceResetDocs_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.ResetDocs("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_ResetDocs_SearchServiceResetDocs_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.ResetDocsAsync("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Run_SearchServiceRunIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Run("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Run_SearchServiceRunIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.RunAsync("myindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myindexer",
                ["description"] = "Description of the indexer",
                ["dataSourceName"] = "mydocdbdatasource",
                ["skillsetName"] = "myskillset",
                ["targetIndexName"] = "preview-test",
                ["schedule"] = new
                {
                    interval = "P1D",
                    startTime = "2025-01-07T19:30:00Z",
                },
                ["parameters"] = new
                {
                    batchSize = 10,
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                    configuration = new
                    {
                        parsingMode = "markdown",
                        excludedFileNameExtensions = ".png,.mp4",
                        indexedFileNameExtensions = ".docx,.pptx",
                        failOnUnsupportedContentType = true,
                        failOnUnprocessableDocument = false,
                        indexStorageMetadataOnlyForOversizedDocuments = true,
                        delimitedTextHeaders = "Header1,Header2",
                        delimitedTextDelimiter = "|",
                        firstLineContainsHeaders = true,
                        markdownParsingSubmode = "oneToOne",
                        markdownHeaderDepth = "h6",
                        documentRoot = "/root",
                        dataToExtract = "storageMetadata",
                        imageAction = "none",
                        allowSkillsetToReadFileData = false,
                        pdfTextRotationAlgorithm = "none",
                        executionEnvironment = "standard",
                    },
                },
                ["fieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["outputFieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["disabled"] = false,
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.CreateOrUpdate("myindexer", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myindexer",
                ["description"] = "Description of the indexer",
                ["dataSourceName"] = "mydocdbdatasource",
                ["skillsetName"] = "myskillset",
                ["targetIndexName"] = "preview-test",
                ["schedule"] = new
                {
                    interval = "P1D",
                    startTime = "2025-01-07T19:30:00Z",
                },
                ["parameters"] = new
                {
                    batchSize = 10,
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                    configuration = new
                    {
                        parsingMode = "markdown",
                        excludedFileNameExtensions = ".png,.mp4",
                        indexedFileNameExtensions = ".docx,.pptx",
                        failOnUnsupportedContentType = true,
                        failOnUnprocessableDocument = false,
                        indexStorageMetadataOnlyForOversizedDocuments = true,
                        delimitedTextHeaders = "Header1,Header2",
                        delimitedTextDelimiter = "|",
                        firstLineContainsHeaders = true,
                        markdownParsingSubmode = "oneToOne",
                        markdownHeaderDepth = "h6",
                        documentRoot = "/root",
                        dataToExtract = "storageMetadata",
                        imageAction = "none",
                        allowSkillsetToReadFileData = false,
                        pdfTextRotationAlgorithm = "none",
                        executionEnvironment = "standard",
                    },
                },
                ["fieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["outputFieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["disabled"] = false,
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateOrUpdateAsync("myindexer", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
            {
                Description = "Description of the indexer",
                SkillsetName = "myskillset",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("P1D"))
                {
                    StartTime = DateTimeOffset.Parse("2025-01-07T19:30:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    BatchSize = 10,
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                    Configuration = new IndexingParametersConfiguration
                    {
                        ParsingMode = BlobIndexerParsingMode.Markdown,
                        ExcludedFileNameExtensions = ".png,.mp4",
                        IndexedFileNameExtensions = ".docx,.pptx",
                        FailOnUnsupportedContentType = true,
                        FailOnUnprocessableDocument = false,
                        IndexStorageMetadataOnlyForOversizedDocuments = true,
                        DelimitedTextHeaders = "Header1,Header2",
                        DelimitedTextDelimiter = "|",
                        FirstLineContainsHeaders = true,
                        MarkdownParsingSubmode = MarkdownParsingSubmode.OneToOne,
                        MarkdownHeaderDepth = MarkdownHeaderDepth.H6,
                        DocumentRoot = "/root",
                        DataToExtract = BlobIndexerDataToExtract.StorageMetadata,
                        ImageAction = BlobIndexerImageAction.None,
                        AllowSkillsetToReadFileData = false,
                        PdfTextRotationAlgorithm = BlobIndexerPDFTextRotationAlgorithm.None,
                        ExecutionEnvironment = IndexerExecutionEnvironment.Standard,
                    },
                },
                FieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                OutputFieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                Disabled = false,
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexer> response = client.CreateOrUpdate("myindexer", indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_CreateOrUpdate_SearchServiceCreateOrUpdateIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
            {
                Description = "Description of the indexer",
                SkillsetName = "myskillset",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("P1D"))
                {
                    StartTime = DateTimeOffset.Parse("2025-01-07T19:30:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    BatchSize = 10,
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                    Configuration = new IndexingParametersConfiguration
                    {
                        ParsingMode = BlobIndexerParsingMode.Markdown,
                        ExcludedFileNameExtensions = ".png,.mp4",
                        IndexedFileNameExtensions = ".docx,.pptx",
                        FailOnUnsupportedContentType = true,
                        FailOnUnprocessableDocument = false,
                        IndexStorageMetadataOnlyForOversizedDocuments = true,
                        DelimitedTextHeaders = "Header1,Header2",
                        DelimitedTextDelimiter = "|",
                        FirstLineContainsHeaders = true,
                        MarkdownParsingSubmode = MarkdownParsingSubmode.OneToOne,
                        MarkdownHeaderDepth = MarkdownHeaderDepth.H6,
                        DocumentRoot = "/root",
                        DataToExtract = BlobIndexerDataToExtract.StorageMetadata,
                        ImageAction = BlobIndexerImageAction.None,
                        AllowSkillsetToReadFileData = false,
                        PdfTextRotationAlgorithm = BlobIndexerPDFTextRotationAlgorithm.None,
                        ExecutionEnvironment = IndexerExecutionEnvironment.Standard,
                    },
                },
                FieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                OutputFieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                Disabled = false,
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexer> response = await client.CreateOrUpdateAsync("myindexer", indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Delete_SearchServiceDeleteIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.Delete("tempindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Delete_SearchServiceDeleteIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.DeleteAsync("tempindexer");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexer_SearchServiceGetIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetIndexer("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexer_SearchServiceGetIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetIndexerAsync("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexer_SearchServiceGetIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexer> response = client.GetIndexer("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexer_SearchServiceGetIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexer> response = await client.GetIndexerAsync("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexers_SearchServiceListIndexers()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetIndexers("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexers_SearchServiceListIndexers_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetIndexersAsync("*", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetIndexers_SearchServiceListIndexers_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<ListIndexersResult> response = client.GetIndexers();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetIndexers_SearchServiceListIndexers_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<ListIndexersResult> response = await client.GetIndexersAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Create_SearchServiceCreateIndexer()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myindexer",
                ["description"] = "Description of the indexer",
                ["dataSourceName"] = "mydocdbdatasource",
                ["skillsetName"] = "myskillset",
                ["targetIndexName"] = "preview-test",
                ["schedule"] = new
                {
                    interval = "P1D",
                    startTime = "2025-01-07T19:30:00Z",
                },
                ["parameters"] = new
                {
                    batchSize = 10,
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                    configuration = new
                    {
                        parsingMode = "markdown",
                        excludedFileNameExtensions = ".png,.mp4",
                        indexedFileNameExtensions = ".docx,.pptx",
                        failOnUnsupportedContentType = true,
                        failOnUnprocessableDocument = false,
                        indexStorageMetadataOnlyForOversizedDocuments = true,
                        delimitedTextHeaders = "Header1,Header2",
                        delimitedTextDelimiter = "|",
                        firstLineContainsHeaders = true,
                        markdownParsingSubmode = "oneToMany",
                        markdownHeaderDepth = "h6",
                        documentRoot = "/root",
                        dataToExtract = "storageMetadata",
                        imageAction = "none",
                        allowSkillsetToReadFileData = false,
                        pdfTextRotationAlgorithm = "none",
                        executionEnvironment = "standard",
                    },
                },
                ["fieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["outputFieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["disabled"] = false,
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["cache"] = new
                {
                    storageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                    enableReprocessing = true,
                    identity = new Dictionary<string, object>
                    {
                        ["@odata.type"] = "#Microsoft.Azure.Search.DataNoneIdentity"
                    },
                }
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Create_SearchServiceCreateIndexer_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "myindexer",
                ["description"] = "Description of the indexer",
                ["dataSourceName"] = "mydocdbdatasource",
                ["skillsetName"] = "myskillset",
                ["targetIndexName"] = "preview-test",
                ["schedule"] = new
                {
                    interval = "P1D",
                    startTime = "2025-01-07T19:30:00Z",
                },
                ["parameters"] = new
                {
                    batchSize = 10,
                    maxFailedItems = 10,
                    maxFailedItemsPerBatch = 5,
                    configuration = new
                    {
                        parsingMode = "markdown",
                        excludedFileNameExtensions = ".png,.mp4",
                        indexedFileNameExtensions = ".docx,.pptx",
                        failOnUnsupportedContentType = true,
                        failOnUnprocessableDocument = false,
                        indexStorageMetadataOnlyForOversizedDocuments = true,
                        delimitedTextHeaders = "Header1,Header2",
                        delimitedTextDelimiter = "|",
                        firstLineContainsHeaders = true,
                        markdownParsingSubmode = "oneToMany",
                        markdownHeaderDepth = "h6",
                        documentRoot = "/root",
                        dataToExtract = "storageMetadata",
                        imageAction = "none",
                        allowSkillsetToReadFileData = false,
                        pdfTextRotationAlgorithm = "none",
                        executionEnvironment = "standard",
                    },
                },
                ["fieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["outputFieldMappings"] = new object[]
            {
new
{
sourceFieldName = "/document",
targetFieldName = "name",
mappingFunction = new
{
name = "base64Encode",
},
}
            },
                ["disabled"] = false,
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                },
                ["cache"] = new
                {
                    storageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                    enableReprocessing = true,
                    identity = new Dictionary<string, object>
                    {
                        ["@odata.type"] = "#Microsoft.Azure.Search.DataNoneIdentity"
                    },
                }
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dataSourceName").ToString());
            Console.WriteLine(result.GetProperty("targetIndexName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_Create_SearchServiceCreateIndexer_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
            {
                Description = "Description of the indexer",
                SkillsetName = "myskillset",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("P1D"))
                {
                    StartTime = DateTimeOffset.Parse("2025-01-07T19:30:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    BatchSize = 10,
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                    Configuration = new IndexingParametersConfiguration
                    {
                        ParsingMode = BlobIndexerParsingMode.Markdown,
                        ExcludedFileNameExtensions = ".png,.mp4",
                        IndexedFileNameExtensions = ".docx,.pptx",
                        FailOnUnsupportedContentType = true,
                        FailOnUnprocessableDocument = false,
                        IndexStorageMetadataOnlyForOversizedDocuments = true,
                        DelimitedTextHeaders = "Header1,Header2",
                        DelimitedTextDelimiter = "|",
                        FirstLineContainsHeaders = true,
                        MarkdownParsingSubmode = MarkdownParsingSubmode.OneToMany,
                        MarkdownHeaderDepth = MarkdownHeaderDepth.H6,
                        DocumentRoot = "/root",
                        DataToExtract = BlobIndexerDataToExtract.StorageMetadata,
                        ImageAction = BlobIndexerImageAction.None,
                        AllowSkillsetToReadFileData = false,
                        PdfTextRotationAlgorithm = BlobIndexerPDFTextRotationAlgorithm.None,
                        ExecutionEnvironment = IndexerExecutionEnvironment.Standard,
                    },
                },
                FieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                OutputFieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                Disabled = false,
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                Cache = new SearchIndexerCache
                {
                    StorageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                    EnableReprocessing = true,
                    Identity = new SearchIndexerDataNoneIdentity(),
                },
            };
            Response<SearchIndexer> response = client.Create(indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_Create_SearchServiceCreateIndexer_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            SearchIndexer indexer = new SearchIndexer("myindexer", "mydocdbdatasource", "preview-test")
            {
                Description = "Description of the indexer",
                SkillsetName = "myskillset",
                Schedule = new IndexingSchedule(XmlConvert.ToTimeSpan("P1D"))
                {
                    StartTime = DateTimeOffset.Parse("2025-01-07T19:30:00Z"),
                },
                Parameters = new IndexingParameters
                {
                    BatchSize = 10,
                    MaxFailedItems = 10,
                    MaxFailedItemsPerBatch = 5,
                    Configuration = new IndexingParametersConfiguration
                    {
                        ParsingMode = BlobIndexerParsingMode.Markdown,
                        ExcludedFileNameExtensions = ".png,.mp4",
                        IndexedFileNameExtensions = ".docx,.pptx",
                        FailOnUnsupportedContentType = true,
                        FailOnUnprocessableDocument = false,
                        IndexStorageMetadataOnlyForOversizedDocuments = true,
                        DelimitedTextHeaders = "Header1,Header2",
                        DelimitedTextDelimiter = "|",
                        FirstLineContainsHeaders = true,
                        MarkdownParsingSubmode = MarkdownParsingSubmode.OneToMany,
                        MarkdownHeaderDepth = MarkdownHeaderDepth.H6,
                        DocumentRoot = "/root",
                        DataToExtract = BlobIndexerDataToExtract.StorageMetadata,
                        ImageAction = BlobIndexerImageAction.None,
                        AllowSkillsetToReadFileData = false,
                        PdfTextRotationAlgorithm = BlobIndexerPDFTextRotationAlgorithm.None,
                        ExecutionEnvironment = IndexerExecutionEnvironment.Standard,
                    },
                },
                FieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                OutputFieldMappings = {new FieldMapping("/document")
{
TargetFieldName = "name",
MappingFunction = new FieldMappingFunction("base64Encode"),
}},
                Disabled = false,
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
                Cache = new SearchIndexerCache
                {
                    StorageConnectionString = "DefaultEndpointsProtocol=https;AccountName=myAccountName;AccountKey=myAccountKey;EndpointSuffix=core.windows.net ",
                    EnableReprocessing = true,
                    Identity = new SearchIndexerDataNoneIdentity(),
                },
            };
            Response<SearchIndexer> response = await client.CreateAsync(indexer);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetStatus_SearchServiceGetIndexerStatus()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = client.GetStatus("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("errorMessage").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsProcessed").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsFailed").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response response = await client.GetStatusAsync("myindexer", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("errorMessage").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("errors")[0].GetProperty("statusCode").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("warnings")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsProcessed").ToString());
            Console.WriteLine(result.GetProperty("executionHistory")[0].GetProperty("itemsFailed").ToString());
            Console.WriteLine(result.GetProperty("limits").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexerStatus> response = client.GetStatus("myindexer");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Indexers_GetStatus_SearchServiceGetIndexerStatus_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Indexers client = new SearchClient(endpoint, credential).GetIndexersClient();

            Response<SearchIndexerStatus> response = await client.GetStatusAsync("myindexer");
        }
    }
}
