// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Search.Documents.Indexes.Samples
{
    public partial class Samples_Skillsets
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = new object[]
            {
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
["name"] = "skill2",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "countryHint",
source = "/document/countryHint",
}
},
["outputs"] = new object[]
{
new
{
name = "languageCode",
targetName = "languageCode",
}
}
},
new Dictionary<string, object>
{
["textSplitMode"] = "pages",
["maximumPageLength"] = 4000,
["unit"] = "azureOpenAITokens",
["azureOpenAITokenizerParameters"] = new
{
encoderModelName = "cl100k_base",
allowedSpecialTokens = new object[]
{
"[START]",
"[END]"
},
},
["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
["name"] = "skill3",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "textItems",
targetName = "pages",
}
}
},
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
["name"] = "skill4",
["context"] = "/document/pages/*",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "keyPhrases",
targetName = "keyPhrases",
}
}
},
new Dictionary<string, object>
{
["uri"] = "https://contoso.example.org/",
["httpMethod"] = "POST",
["timeout"] = "PT5S",
["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
["name"] = "skill5",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "customresult",
targetName = "result",
}
}
},
new Dictionary<string, object>
{
["outputMode"] = "oneToMany",
["markdownHeaderDepth"] = "h3",
["@odata.type"] = "#Microsoft.Skills.Util.DocumentIntelligenceLayoutSkill",
["name"] = "docIntelligenceLayoutSkill",
["context"] = "/document",
["inputs"] = new object[]
{
new
{
name = "file_data",
source = "/document/content",
}
},
["outputs"] = new object[]
{
new
{
name = "markdown_document",
targetName = "markdown_document",
}
}
}
            },
                ["cognitiveServices"] = new Dictionary<string, object>
                {
                    ["key"] = "myKey",
                    ["subdomainUrl"] = "https://mySubdomainName.cognitiveservices.azure.com",
                    ["@odata.type"] = "#Microsoft.Azure.Search.AIServicesByKey",
                    ["description"] = "Description of the Azure AI service resource attached to a skillset"
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.CreateOrUpdate("tempskillset", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = new object[]
            {
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
["name"] = "skill2",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "countryHint",
source = "/document/countryHint",
}
},
["outputs"] = new object[]
{
new
{
name = "languageCode",
targetName = "languageCode",
}
}
},
new Dictionary<string, object>
{
["textSplitMode"] = "pages",
["maximumPageLength"] = 4000,
["unit"] = "azureOpenAITokens",
["azureOpenAITokenizerParameters"] = new
{
encoderModelName = "cl100k_base",
allowedSpecialTokens = new object[]
{
"[START]",
"[END]"
},
},
["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
["name"] = "skill3",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "textItems",
targetName = "pages",
}
}
},
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
["name"] = "skill4",
["context"] = "/document/pages/*",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "keyPhrases",
targetName = "keyPhrases",
}
}
},
new Dictionary<string, object>
{
["uri"] = "https://contoso.example.org/",
["httpMethod"] = "POST",
["timeout"] = "PT5S",
["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
["name"] = "skill5",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "customresult",
targetName = "result",
}
}
},
new Dictionary<string, object>
{
["outputMode"] = "oneToMany",
["markdownHeaderDepth"] = "h3",
["@odata.type"] = "#Microsoft.Skills.Util.DocumentIntelligenceLayoutSkill",
["name"] = "docIntelligenceLayoutSkill",
["context"] = "/document",
["inputs"] = new object[]
{
new
{
name = "file_data",
source = "/document/content",
}
},
["outputs"] = new object[]
{
new
{
name = "markdown_document",
targetName = "markdown_document",
}
}
}
            },
                ["cognitiveServices"] = new Dictionary<string, object>
                {
                    ["key"] = "myKey",
                    ["subdomainUrl"] = "https://mySubdomainName.cognitiveservices.azure.com",
                    ["@odata.type"] = "#Microsoft.Azure.Search.AIServicesByKey",
                    ["description"] = "Description of the Azure AI service resource attached to a skillset"
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateOrUpdateAsync("tempskillset", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", new SearchIndexerSkill[]
            {
new LanguageDetectionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("countryHint")
{
Source = "/document/countryHint",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("languageCode")
{
TargetName = "languageCode",
}
})
{
Name = "skill2",
},
new SplitSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("textItems")
{
TargetName = "pages",
}
})
{
TextSplitMode = TextSplitMode.Pages,
MaximumPageLength = 4000,
Unit = SplitSkillUnit.AzureOpenAITokens,
AzureOpenAITokenizerParameters = new AzureOpenAITokenizerParameters
{
EncoderModelName = SplitSkillEncoderModelName.CL100kBase,
AllowedSpecialTokens = {"[START]", "[END]"},
},
Name = "skill3",
},
new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("keyPhrases")
{
TargetName = "keyPhrases",
}
})
{
Name = "skill4",
Context = "/document/pages/*",
},
new WebApiSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("customresult")
{
TargetName = "result",
}
}, "https://contoso.example.org/")
{
HttpMethod = "POST",
Timeout = XmlConvert.ToTimeSpan("PT5S"),
Name = "skill5",
},
new DocumentIntelligenceLayoutSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("file_data")
{
Source = "/document/content",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("markdown_document")
{
TargetName = "markdown_document",
}
})
{
OutputMode = DocumentIntelligenceLayoutSkillOutputMode.OneToMany,
MarkdownHeaderDepth = DocumentIntelligenceLayoutSkillMarkdownHeaderDepth.H3,
Name = "docIntelligenceLayoutSkill",
Context = "/document",
}
            })
            {
                Description = "Skillset for extracting entities and more",
                CognitiveServices = new AIServicesAccountKey("myKey", "https://mySubdomainName.cognitiveservices.azure.com")
                {
                    Description = "Description of the Azure AI service resource attached to a skillset",
                },
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = client.CreateOrUpdate("tempskillset", skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_CreateOrUpdate_SearchServiceCreateOrUpdateSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", new SearchIndexerSkill[]
            {
new LanguageDetectionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("countryHint")
{
Source = "/document/countryHint",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("languageCode")
{
TargetName = "languageCode",
}
})
{
Name = "skill2",
},
new SplitSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("textItems")
{
TargetName = "pages",
}
})
{
TextSplitMode = TextSplitMode.Pages,
MaximumPageLength = 4000,
Unit = SplitSkillUnit.AzureOpenAITokens,
AzureOpenAITokenizerParameters = new AzureOpenAITokenizerParameters
{
EncoderModelName = SplitSkillEncoderModelName.CL100kBase,
AllowedSpecialTokens = {"[START]", "[END]"},
},
Name = "skill3",
},
new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("keyPhrases")
{
TargetName = "keyPhrases",
}
})
{
Name = "skill4",
Context = "/document/pages/*",
},
new WebApiSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("customresult")
{
TargetName = "result",
}
}, "https://contoso.example.org/")
{
HttpMethod = "POST",
Timeout = XmlConvert.ToTimeSpan("PT5S"),
Name = "skill5",
},
new DocumentIntelligenceLayoutSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("file_data")
{
Source = "/document/content",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("markdown_document")
{
TargetName = "markdown_document",
}
})
{
OutputMode = DocumentIntelligenceLayoutSkillOutputMode.OneToMany,
MarkdownHeaderDepth = DocumentIntelligenceLayoutSkillMarkdownHeaderDepth.H3,
Name = "docIntelligenceLayoutSkill",
Context = "/document",
}
            })
            {
                Description = "Skillset for extracting entities and more",
                CognitiveServices = new AIServicesAccountKey("myKey", "https://mySubdomainName.cognitiveservices.azure.com")
                {
                    Description = "Description of the Azure AI service resource attached to a skillset",
                },
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = await client.CreateOrUpdateAsync("tempskillset", skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Delete_SearchServiceDeleteSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.Delete("tempskillset");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Delete_SearchServiceDeleteSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.DeleteAsync("tempskillset");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillset_SearchServiceGetSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.GetSkillset("myskillset", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.GetSkillsetAsync("myskillset", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<SearchIndexerSkillset> response = client.GetSkillset("myskillset");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillset_SearchServiceGetSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<SearchIndexerSkillset> response = await client.GetSkillsetAsync("myskillset");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillsets_SearchServiceListSkillsets()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = client.GetSkillsets(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response response = await client.GetSkillsetsAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<ListSkillsetsResult> response = client.GetSkillsets();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_GetSkillsets_SearchServiceListSkillsets_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            Response<ListSkillsetsResult> response = await client.GetSkillsetsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Create_SearchServiceCreateSkillset()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = new object[]
            {
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
["name"] = "skill2",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "countryHint",
source = "/document/countryHint",
}
},
["outputs"] = new object[]
{
new
{
name = "languageCode",
targetName = "languageCode",
}
}
},
new Dictionary<string, object>
{
["textSplitMode"] = "pages",
["maximumPageLength"] = 4000,
["unit"] = "azureOpenAITokens",
["azureOpenAITokenizerParameters"] = new
{
encoderModelName = "cl100k_base",
allowedSpecialTokens = new object[]
{
"[START]",
"[END]"
},
},
["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
["name"] = "skill3",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "textItems",
targetName = "pages",
}
}
},
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
["name"] = "skill4",
["context"] = "/document/pages/*",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "keyPhrases",
targetName = "keyPhrases",
}
}
},
new Dictionary<string, object>
{
["uri"] = "https://contoso.example.org/",
["httpMethod"] = "POST",
["timeout"] = "PT5S",
["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
["name"] = "skill5",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "customresult",
targetName = "result",
}
}
},
new Dictionary<string, object>
{
["outputMode"] = "oneToMany",
["markdownHeaderDepth"] = "h3",
["@odata.type"] = "#Microsoft.Skills.Util.DocumentIntelligenceLayoutSkill",
["name"] = "docIntelligenceLayoutSkill",
["context"] = "/document",
["inputs"] = new object[]
{
new
{
name = "file_data",
source = "/document/content",
}
},
["outputs"] = new object[]
{
new
{
name = "markdown_document",
targetName = "markdown_document",
}
}
}
            },
                ["cognitiveServices"] = new Dictionary<string, object>
                {
                    ["key"] = "myKey",
                    ["subdomainUrl"] = "https://mySubdomainName.cognitiveservices.azure.com",
                    ["@odata.type"] = "#Microsoft.Azure.Search.AIServicesByKey",
                    ["description"] = "Description of the Azure AI service resource attached to a skillset"
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = client.Create(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Create_SearchServiceCreateSkillset_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["name"] = "tempskillset",
                ["description"] = "Skillset for extracting entities and more",
                ["skills"] = new object[]
            {
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.LanguageDetectionSkill",
["name"] = "skill2",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "countryHint",
source = "/document/countryHint",
}
},
["outputs"] = new object[]
{
new
{
name = "languageCode",
targetName = "languageCode",
}
}
},
new Dictionary<string, object>
{
["textSplitMode"] = "pages",
["maximumPageLength"] = 4000,
["unit"] = "azureOpenAITokens",
["azureOpenAITokenizerParameters"] = new
{
encoderModelName = "cl100k_base",
allowedSpecialTokens = new object[]
{
"[START]",
"[END]"
},
},
["@odata.type"] = "#Microsoft.Skills.Text.SplitSkill",
["name"] = "skill3",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "textItems",
targetName = "pages",
}
}
},
new Dictionary<string, object>
{
["@odata.type"] = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill",
["name"] = "skill4",
["context"] = "/document/pages/*",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "keyPhrases",
targetName = "keyPhrases",
}
}
},
new Dictionary<string, object>
{
["uri"] = "https://contoso.example.org/",
["httpMethod"] = "POST",
["timeout"] = "PT5S",
["@odata.type"] = "#Microsoft.Skills.Custom.WebApiSkill",
["name"] = "skill5",
["inputs"] = new object[]
{
new
{
name = "text",
source = "/document/content",
},
new
{
name = "languageCode",
source = "/document/languageCode",
}
},
["outputs"] = new object[]
{
new
{
name = "customresult",
targetName = "result",
}
}
},
new Dictionary<string, object>
{
["outputMode"] = "oneToMany",
["markdownHeaderDepth"] = "h3",
["@odata.type"] = "#Microsoft.Skills.Util.DocumentIntelligenceLayoutSkill",
["name"] = "docIntelligenceLayoutSkill",
["context"] = "/document",
["inputs"] = new object[]
{
new
{
name = "file_data",
source = "/document/content",
}
},
["outputs"] = new object[]
{
new
{
name = "markdown_document",
targetName = "markdown_document",
}
}
}
            },
                ["cognitiveServices"] = new Dictionary<string, object>
                {
                    ["key"] = "myKey",
                    ["subdomainUrl"] = "https://mySubdomainName.cognitiveservices.azure.com",
                    ["@odata.type"] = "#Microsoft.Azure.Search.AIServicesByKey",
                    ["description"] = "Description of the Azure AI service resource attached to a skillset"
                },
                ["@odata.etag"] = "0x1234568AE7E58A1",
                ["encryptionKey"] = new
                {
                    keyVaultKeyName = "myUserManagedEncryptionKey-createdinAzureKeyVault",
                    keyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    keyVaultUri = "https://myKeyVault.vault.azure.net",
                    accessCredentials = new
                    {
                        applicationId = "00000000-0000-0000-0000-000000000000",
                        applicationSecret = "<applicationSecret>",
                    },
                }
            });
            Response response = await client.CreateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("@odata.type").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("inputs")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("skills")[0].GetProperty("outputs")[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_Create_SearchServiceCreateSkillset_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", new SearchIndexerSkill[]
            {
new LanguageDetectionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("countryHint")
{
Source = "/document/countryHint",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("languageCode")
{
TargetName = "languageCode",
}
})
{
Name = "skill2",
},
new SplitSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("textItems")
{
TargetName = "pages",
}
})
{
TextSplitMode = TextSplitMode.Pages,
MaximumPageLength = 4000,
Unit = SplitSkillUnit.AzureOpenAITokens,
AzureOpenAITokenizerParameters = new AzureOpenAITokenizerParameters
{
EncoderModelName = SplitSkillEncoderModelName.CL100kBase,
AllowedSpecialTokens = {"[START]", "[END]"},
},
Name = "skill3",
},
new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("keyPhrases")
{
TargetName = "keyPhrases",
}
})
{
Name = "skill4",
Context = "/document/pages/*",
},
new WebApiSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("customresult")
{
TargetName = "result",
}
}, "https://contoso.example.org/")
{
HttpMethod = "POST",
Timeout = XmlConvert.ToTimeSpan("PT5S"),
Name = "skill5",
},
new DocumentIntelligenceLayoutSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("file_data")
{
Source = "/document/content",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("markdown_document")
{
TargetName = "markdown_document",
}
})
{
OutputMode = DocumentIntelligenceLayoutSkillOutputMode.OneToMany,
MarkdownHeaderDepth = DocumentIntelligenceLayoutSkillMarkdownHeaderDepth.H3,
Name = "docIntelligenceLayoutSkill",
Context = "/document",
}
            })
            {
                Description = "Skillset for extracting entities and more",
                CognitiveServices = new AIServicesAccountKey("myKey", "https://mySubdomainName.cognitiveservices.azure.com")
                {
                    Description = "Description of the Azure AI service resource attached to a skillset",
                },
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = client.Create(skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_Create_SearchServiceCreateSkillset_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SearchIndexerSkillset skillset = new SearchIndexerSkillset("tempskillset", new SearchIndexerSkill[]
            {
new LanguageDetectionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("countryHint")
{
Source = "/document/countryHint",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("languageCode")
{
TargetName = "languageCode",
}
})
{
Name = "skill2",
},
new SplitSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("textItems")
{
TargetName = "pages",
}
})
{
TextSplitMode = TextSplitMode.Pages,
MaximumPageLength = 4000,
Unit = SplitSkillUnit.AzureOpenAITokens,
AzureOpenAITokenizerParameters = new AzureOpenAITokenizerParameters
{
EncoderModelName = SplitSkillEncoderModelName.CL100kBase,
AllowedSpecialTokens = {"[START]", "[END]"},
},
Name = "skill3",
},
new KeyPhraseExtractionSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("keyPhrases")
{
TargetName = "keyPhrases",
}
})
{
Name = "skill4",
Context = "/document/pages/*",
},
new WebApiSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("text")
{
Source = "/document/content",
},
new InputFieldMappingEntry("languageCode")
{
Source = "/document/languageCode",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("customresult")
{
TargetName = "result",
}
}, "https://contoso.example.org/")
{
HttpMethod = "POST",
Timeout = XmlConvert.ToTimeSpan("PT5S"),
Name = "skill5",
},
new DocumentIntelligenceLayoutSkill(new InputFieldMappingEntry[]
{
new InputFieldMappingEntry("file_data")
{
Source = "/document/content",
}
}, new OutputFieldMappingEntry[]
{
new OutputFieldMappingEntry("markdown_document")
{
TargetName = "markdown_document",
}
})
{
OutputMode = DocumentIntelligenceLayoutSkillOutputMode.OneToMany,
MarkdownHeaderDepth = DocumentIntelligenceLayoutSkillMarkdownHeaderDepth.H3,
Name = "docIntelligenceLayoutSkill",
Context = "/document",
}
            })
            {
                Description = "Skillset for extracting entities and more",
                CognitiveServices = new AIServicesAccountKey("myKey", "https://mySubdomainName.cognitiveservices.azure.com")
                {
                    Description = "Description of the Azure AI service resource attached to a skillset",
                },
                ETag = "0x1234568AE7E58A1",
                EncryptionKey = new SearchResourceEncryptionKey("myUserManagedEncryptionKey-createdinAzureKeyVault", "https://myKeyVault.vault.azure.net")
                {
                    KeyVaultKeyVersion = "myKeyVersion-32charAlphaNumericString",
                    AccessCredentials = new AzureActiveDirectoryApplicationCredentials("00000000-0000-0000-0000-000000000000")
                    {
                        ApplicationSecret = "<applicationSecret>",
                    },
                },
            };
            Response<SearchIndexerSkillset> response = await client.CreateAsync(skillset);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_ResetSkills_SearchServiceResetSkills()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new
            {
                skillNames = new object[]
            {
"skill2",
"skill3",
"skill4"
            },
            });
            Response response = client.ResetSkills("myskillset", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_ResetSkills_SearchServiceResetSkills_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            using RequestContent content = RequestContent.Create(new
            {
                skillNames = new object[]
            {
"skill2",
"skill3",
"skill4"
            },
            });
            Response response = await client.ResetSkillsAsync("myskillset", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Skillsets_ResetSkills_SearchServiceResetSkills_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SkillNames skillNames = new SkillNames
            {
                SkillNamesProperty = { "skill2", "skill3", "skill4" },
            };
            Response response = client.ResetSkills("myskillset", skillNames);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Skillsets_ResetSkills_SearchServiceResetSkills_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Skillsets client = new SearchClient(endpoint, credential).GetSkillsetsClient();

            SkillNames skillNames = new SkillNames
            {
                SkillNamesProperty = { "skill2", "skill3", "skill4" },
            };
            Response response = await client.ResetSkillsAsync("myskillset", skillNames);
        }
    }
}
