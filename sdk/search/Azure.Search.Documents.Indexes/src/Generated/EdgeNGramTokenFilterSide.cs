// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes
{
    /// <summary> Specifies which side of the input an n-gram should be generated from. </summary>
    public readonly partial struct EdgeNGramTokenFilterSide : IEquatable<EdgeNGramTokenFilterSide>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EdgeNGramTokenFilterSide"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EdgeNGramTokenFilterSide(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FrontValue = "front";
        private const string BackValue = "back";

        /// <summary> Specifies that the n-gram should be generated from the front of the input. </summary>
        public static EdgeNGramTokenFilterSide Front { get; } = new EdgeNGramTokenFilterSide(FrontValue);
        /// <summary> Specifies that the n-gram should be generated from the back of the input. </summary>
        public static EdgeNGramTokenFilterSide Back { get; } = new EdgeNGramTokenFilterSide(BackValue);
        /// <summary> Determines if two <see cref="EdgeNGramTokenFilterSide"/> values are the same. </summary>
        public static bool operator ==(EdgeNGramTokenFilterSide left, EdgeNGramTokenFilterSide right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EdgeNGramTokenFilterSide"/> values are not the same. </summary>
        public static bool operator !=(EdgeNGramTokenFilterSide left, EdgeNGramTokenFilterSide right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EdgeNGramTokenFilterSide"/>. </summary>
        public static implicit operator EdgeNGramTokenFilterSide(string value) => new EdgeNGramTokenFilterSide(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EdgeNGramTokenFilterSide other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EdgeNGramTokenFilterSide other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
