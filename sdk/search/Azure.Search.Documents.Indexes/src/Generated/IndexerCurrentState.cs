// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes
{
    /// <summary>
    /// Represents all of the state that defines and dictates the indexer's current
    /// execution.
    /// </summary>
    public partial class IndexerCurrentState
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IndexerCurrentState"/>. </summary>
        internal IndexerCurrentState()
        {
            ResetDocumentKeys = new ChangeTrackingList<string>();
            ResetDatasourceDocumentIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="IndexerCurrentState"/>. </summary>
        /// <param name="mode"> The mode the indexer is running in. </param>
        /// <param name="allDocsInitialChangeTrackingState">
        /// Change tracking state used when indexing starts on all documents in the
        /// datasource.
        /// </param>
        /// <param name="allDocsFinalChangeTrackingState">
        /// Change tracking state value when indexing finishes on all documents in the
        /// datasource.
        /// </param>
        /// <param name="resetDocsInitialChangeTrackingState">
        /// Change tracking state used when indexing starts on select, reset documents in
        /// the datasource.
        /// </param>
        /// <param name="resetDocsFinalChangeTrackingState">
        /// Change tracking state value when indexing finishes on select, reset documents
        /// in the datasource.
        /// </param>
        /// <param name="resetDocumentKeys">
        /// The list of document keys that have been reset. The document key is the
        /// document's unique identifier for the data in the search index. The indexer will
        /// prioritize selectively re-ingesting these keys.
        /// </param>
        /// <param name="resetDatasourceDocumentIds">
        /// The list of datasource document ids that have been reset. The datasource
        /// document id is the unique identifier for the data in the datasource. The
        /// indexer will prioritize selectively re-ingesting these ids.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IndexerCurrentState(IndexingMode? mode, string allDocsInitialChangeTrackingState, string allDocsFinalChangeTrackingState, string resetDocsInitialChangeTrackingState, string resetDocsFinalChangeTrackingState, IReadOnlyList<string> resetDocumentKeys, IReadOnlyList<string> resetDatasourceDocumentIds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Mode = mode;
            AllDocsInitialChangeTrackingState = allDocsInitialChangeTrackingState;
            AllDocsFinalChangeTrackingState = allDocsFinalChangeTrackingState;
            ResetDocsInitialChangeTrackingState = resetDocsInitialChangeTrackingState;
            ResetDocsFinalChangeTrackingState = resetDocsFinalChangeTrackingState;
            ResetDocumentKeys = resetDocumentKeys;
            ResetDatasourceDocumentIds = resetDatasourceDocumentIds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The mode the indexer is running in. </summary>
        public IndexingMode? Mode { get; }
        /// <summary>
        /// Change tracking state used when indexing starts on all documents in the
        /// datasource.
        /// </summary>
        public string AllDocsInitialChangeTrackingState { get; }
        /// <summary>
        /// Change tracking state value when indexing finishes on all documents in the
        /// datasource.
        /// </summary>
        public string AllDocsFinalChangeTrackingState { get; }
        /// <summary>
        /// Change tracking state used when indexing starts on select, reset documents in
        /// the datasource.
        /// </summary>
        public string ResetDocsInitialChangeTrackingState { get; }
        /// <summary>
        /// Change tracking state value when indexing finishes on select, reset documents
        /// in the datasource.
        /// </summary>
        public string ResetDocsFinalChangeTrackingState { get; }
        /// <summary>
        /// The list of document keys that have been reset. The document key is the
        /// document's unique identifier for the data in the search index. The indexer will
        /// prioritize selectively re-ingesting these keys.
        /// </summary>
        public IReadOnlyList<string> ResetDocumentKeys { get; }
        /// <summary>
        /// The list of datasource document ids that have been reset. The datasource
        /// document id is the unique identifier for the data in the datasource. The
        /// indexer will prioritize selectively re-ingesting these ids.
        /// </summary>
        public IReadOnlyList<string> ResetDatasourceDocumentIds { get; }
    }
}
